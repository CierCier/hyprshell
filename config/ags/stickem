#!/usr/bin/bash
file="${XDG_RUNTIME_DIR:-/tmp}/dmFyIF-ags.js"

cat <<EOF | base64 --decode > $file
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __knownSymbol = (name, symbol) => (symbol = Symbol[name]) ? symbol : Symbol.for("Symbol." + name);
var __typeError = (msg) => {
  throw TypeError(msg);
};
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __decoratorStart = (base) => [, , , __create(base?.[__knownSymbol("metadata")] ?? null)];
var __decoratorStrings = ["class", "method", "getter", "setter", "accessor", "field", "value", "get", "set"];
var __expectFn = (fn) => fn !== void 0 && typeof fn !== "function" ? __typeError("Function expected") : fn;
var __decoratorContext = (kind, name, done, metadata, fns) => ({ kind: __decoratorStrings[kind], name, metadata, addInitializer: (fn) => done._ ? __typeError("Already initialized") : fns.push(__expectFn(fn || null)) });
var __decoratorMetadata = (array, target) => __defNormalProp(target, __knownSymbol("metadata"), array[3]);
var __runInitializers = (array, flags, self, value) => {
  for (var i = 0, fns = array[flags >> 1], n = fns && fns.length; i < n; i++) flags & 1 ? fns[i].call(self) : value = fns[i].call(self, value);
  return value;
};
var __decorateElement = (array, flags, name, decorators, target, extra) => {
  var fn, it, done, ctx, access, k = flags & 7, s = !!(flags & 8), p = !!(flags & 16);
  var j = k > 3 ? array.length + 1 : k ? s ? 1 : 2 : 0, key = __decoratorStrings[k + 5];
  var initializers = k > 3 && (array[j - 1] = []), extraInitializers = array[j] || (array[j] = []);
  var desc = k && (!p && !s && (target = target.prototype), k < 5 && (k > 3 || !p) && __getOwnPropDesc(k < 4 ? target : { get [name]() {
    return __privateGet(this, extra);
  }, set [name](x) {
    return __privateSet(this, extra, x);
  } }, name));
  k ? p && k < 4 && __name(extra, (k > 2 ? "set " : k > 1 ? "get " : "") + name) : __name(target, name);
  for (var i = decorators.length - 1; i >= 0; i--) {
    ctx = __decoratorContext(k, name, done = {}, array[3], extraInitializers);
    if (k) {
      ctx.static = s, ctx.private = p, access = ctx.access = { has: p ? (x) => __privateIn(target, x) : (x) => name in x };
      if (k ^ 3) access.get = p ? (x) => (k ^ 1 ? __privateGet : __privateMethod)(x, target, k ^ 4 ? extra : desc.get) : (x) => x[name];
      if (k > 2) access.set = p ? (x, y) => __privateSet(x, target, y, k ^ 4 ? extra : desc.set) : (x, y) => x[name] = y;
    }
    it = (0, decorators[i])(k ? k < 4 ? p ? extra : desc[key] : k > 4 ? void 0 : { get: desc.get, set: desc.set } : target, ctx), done._ = 1;
    if (k ^ 4 || it === void 0) __expectFn(it) && (k > 4 ? initializers.unshift(it) : k ? p ? extra = it : desc[key] = it : target = it);
    else if (typeof it !== "object" || it === null) __typeError("Object expected");
    else __expectFn(fn = it.get) && (desc.get = fn), __expectFn(fn = it.set) && (desc.set = fn), __expectFn(fn = it.init) && initializers.unshift(fn);
  }
  return k || __decoratorMetadata(array, target), desc && __defProp(target, name, desc), p ? k ^ 4 ? extra : desc : target;
};
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateIn = (member, obj) => Object(obj) !== obj ? __typeError('Cannot use the "in" operator on this value') : member.has(obj);
var __privateGet = (obj, member, getter2) => (__accessCheck(obj, member, "read from private field"), getter2 ? getter2.call(obj) : member.get(obj));
var __privateAdd = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
var __privateMethod = (obj, member, method) => (__accessCheck(obj, member, "access private method"), method);

// i18n/lang/en_US.ts
var en_US_exports = {};
__export(en_US_exports, {
  default: () => en_US_default
});
var en_US_default;
var init_en_US = __esm({
  "i18n/lang/en_US.ts"() {
    "use strict";
    en_US_default = {
      language: "English (United States)",
      cancel: "Cancel",
      accept: "Ok",
      devices: "Devices",
      others: "Others",
      connected: "Connected",
      disconnected: "Disconnected",
      unknown: "Unknown",
      connecting: "Connecting",
      none: "None",
      limited: "Limited",
      apps: "Applications",
      clear: "Clear",
      connect: "Connect",
      disconnect: "Disconnect",
      control_center: {
        tiles: {
          enabled: "Enabled",
          disabled: "Disabled",
          more: "More",
          network: {
            network: "Network",
            wireless: "Wireless",
            wired: "Wired"
          },
          recording: {
            title: "Screen Recording",
            disabled_desc: "Start recording",
            enabled_desc: "Stop recording"
          },
          dnd: {
            title: "Do Not Disturb"
          },
          night_light: {
            title: "Night Light",
            default_desc: "Fidelity"
          }
        },
        pages: {
          more_settings: "More settings",
          sound: {
            title: "Sound",
            description: "Configure the audio output"
          },
          microphone: {
            title: "Microphone",
            description: "Configure the audio input"
          },
          night_light: {
            title: "Night Light",
            description: "Control Night Light and Gamma filters",
            gamma: "Gamma",
            temperature: "Temperature"
          },
          bluetooth: {
            title: "Bluetooth",
            description: "Manage Bluetooth devices",
            new_devices: "New devices",
            adapters: "Adapters",
            paired_devices: "Paired Devices",
            start_discovering: "Start discovering",
            stop_discovering: "Stop discovering",
            untrust_device: "Untrust device",
            unpair_device: "Unpair device",
            trust_device: "Trust device",
            pair_device: "Pair device"
          },
          network: {
            title: "Network",
            interface: "Interface"
          }
        }
      },
      ask_popup: {
        title: "Question"
      }
    };
  }
});

// i18n/lang/pt_BR.ts
var pt_BR_exports = {};
__export(pt_BR_exports, {
  default: () => pt_BR_default
});
var pt_BR_default;
var init_pt_BR = __esm({
  "i18n/lang/pt_BR.ts"() {
    "use strict";
    pt_BR_default = {
      language: "Portugu\xEAs (Brasil)",
      cancel: "Cancelar",
      accept: "Ok",
      devices: "Dispositivos",
      others: "Outros",
      connected: "Conectado",
      disconnected: "Desconectado",
      unknown: "Desconhecido",
      connecting: "Conectando",
      limited: "Limitado",
      none: "Nenhum",
      disconnect: "Desconectar",
      connect: "Conectar",
      apps: "Aplicativos",
      clear: "Limpar",
      control_center: {
        tiles: {
          enabled: "Ligado",
          disabled: "Desligado",
          more: "Mais",
          network: {
            network: "Rede",
            wireless: "Wi-Fi",
            wired: "Cabeada"
          },
          recording: {
            title: "Grava\xE7\xE3o de Tela",
            disabled_desc: "Iniciar grava\xE7\xE3o",
            enabled_desc: "Parar grava\xE7\xE3o"
          },
          dnd: {
            title: "N\xE3o Perturbe"
          },
          night_light: {
            title: "Luz Noturna",
            default_desc: "Fidelidade"
          }
        },
        pages: {
          more_settings: "Mais configura\xE7\xF5es",
          sound: {
            title: "Som",
            description: "Controle a sa\xEDda de \xE1udio"
          },
          microphone: {
            title: "Microfone",
            description: "Configure a entrada de \xE1udio"
          },
          night_light: {
            title: "Luz Noturna",
            description: "Controle os filtros de Luz Noturna e Gama",
            temperature: "Temperatura",
            gamma: "Gama"
          },
          bluetooth: {
            title: "Bluetooth",
            description: "Gerencie dispositivos Bluetooth",
            new_devices: "Novos Dispositivos",
            adapters: "Adaptadores",
            paired_devices: "Dispositivos Pareados",
            start_discovering: "Come\xE7ar a procurar dispositivos",
            stop_discovering: "Parar de procurar dispositivos",
            pair_device: "Parear dispositivo",
            trust_device: "Confiar no dispositivo",
            unpair_device: "Desparear dispositivo",
            untrust_device: "Deixar de confiar no dispositivo"
          },
          network: {
            title: "Rede",
            interface: "Interface"
          }
        }
      },
      ask_popup: {
        title: "Pergunta"
      }
    };
  }
});

// i18n/lang/ru_RU.ts
var ru_RU_exports = {};
__export(ru_RU_exports, {
  default: () => ru_RU_default
});
var ru_RU_default;
var init_ru_RU = __esm({
  "i18n/lang/ru_RU.ts"() {
    "use strict";
    ru_RU_default = {
      language: "\u0420\u0443\u0441\u0441\u043A\u0438\u0439 (\u0420\u043E\u0441\u0441\u0438\u0439\u0441\u043A\u0430\u044F \u0424\u0435\u0434\u0435\u0440\u0430\u0446\u0438\u044F)",
      cancel: "\u041E\u0442\u043C\u0435\u043D\u0438\u0442\u044C",
      accept: "\u041E\u043A",
      devices: "\u0423\u0441\u0442\u0440\u043E\u0439\u0441\u0442\u0432\u0430",
      others: "\u0414\u0440\u0443\u0433\u0438\u0435",
      connected: "\u041F\u043E\u0434\u043A\u043B\u044E\u0447\u0451\u043D",
      disconnected: "\u041E\u0442\u043A\u043B\u044E\u0447\u0451\u043D",
      unknown: "\u041D\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043D\u044B\u0439",
      connecting: "\u041F\u043E\u0434\u043A\u043B\u044E\u0447\u0435\u043D\u0438\u0435",
      none: "\u041D\u0438\u0447\u0435\u0433\u043E",
      limited: "\u041E\u0433\u0440\u0430\u043D\u0438\u0447\u0435\u043D",
      apps: "\u041F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u044F",
      clear: "\u041E\u0447\u0438\u0441\u0442\u0438\u0442\u044C",
      connect: "\u041F\u043E\u0434\u043A\u043B\u044E\u0447\u0438\u0442\u044C\u0441\u044F",
      disconnect: "\u041E\u0442\u043A\u043B\u044E\u0447\u0438\u0442\u044C\u0441\u044F",
      control_center: {
        tiles: {
          enabled: "\u0412\u043A\u043B\u044E\u0447\u0438\u0442\u044C",
          disabled: "\u041E\u0442\u043A\u043B\u044E\u0447\u0438\u0442\u044C",
          more: "\u0411\u043E\u043B\u044C\u0448\u0435",
          network: {
            network: "\u0418\u043D\u0435\u0442\u0440\u043D\u0435\u0442",
            wireless: "\u0411\u0435\u0441\u043F\u0440\u043E\u0432\u043E\u0434\u043D\u043E\u0435",
            wired: "\u041F\u0440\u043E\u0432\u043E\u0434\u043D\u043E\u0435"
          },
          recording: {
            title: "\u0417\u0430\u043F\u0438\u0441\u044C \u044D\u043A\u0440\u0430\u043D\u0430",
            disabled_desc: "\u041D\u0430\u0447\u0430\u0442\u044C \u0437\u0430\u043F\u0438\u0441\u044C",
            enabled_desc: "\u041E\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C \u0437\u0430\u043F\u0438\u0441\u044C"
          },
          dnd: {
            title: "\u041D\u0435 \u0431\u0435\u0441\u043F\u043E\u043A\u043E\u0438\u0442\u044C"
          },
          night_light: {
            title: "\u041D\u043E\u0447\u043D\u043E\u0439 \u0441\u0432\u0435\u0442",
            default_desc: "\u0422\u043E\u043D\u043D"
          }
        },
        pages: {
          more_settings: "\u0411\u043E\u043B\u044C\u0448\u0435 \u043D\u0430\u0441\u0442\u0440\u043E\u0435\u043A",
          sound: {
            title: "\u0417\u0432\u0443\u043A",
            description: "\u041D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0430 \u0432\u044B\u0432\u043E\u0434\u0430 \u0437\u0432\u0443\u043A\u0430"
          },
          microphone: {
            title: "\u041C\u0438\u043A\u0440\u043E\u0444\u043E\u043D",
            description: "\u041D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0430 \u0432\u0432\u043E\u0434\u0430 \u0437\u0432\u0443\u043A\u0430"
          },
          night_light: {
            title: "\u041D\u043E\u0447\u043D\u043E\u0439 \u0441\u0432\u0435\u0442",
            description: "\u041A\u043E\u043D\u0442\u0440\u043E\u043B\u044C \u0438\u043D\u0442\u0435\u043D\u0441\u0438\u0432\u043D\u043E\u0441\u0442\u0438 \u0444\u0438\u043B\u044C\u0442\u0440\u0430\u0446\u0438\u0438 \u0441\u0438\u043D\u0435\u0433\u043E \u0441\u0432\u0435\u0442\u0430",
            gamma: "\u0413\u0430\u043C\u043C\u0430",
            temperature: "\u0422\u0435\u043C\u043F\u0435\u0440\u0430\u0442\u0443\u0440\u0430"
          },
          bluetooth: {
            title: "Bluetooth",
            description: "\u0423\u043F\u0440\u0430\u0432\u043B\u0435\u043D\u0438\u0435 Bluetooth \u0443\u0441\u0442\u0440\u043E\u0439\u0441\u0442\u0432\u0430\u043C\u0438",
            new_devices: "\u041D\u043E\u0432\u044B\u0435 \u0443\u0441\u0442\u0440\u043E\u0439\u0441\u0442\u0432\u0430",
            adapters: "\u0410\u0434\u0430\u043F\u0440\u0435\u0442\u044B",
            paired_devices: "\u041F\u0440\u0438\u0432\u044F\u0437\u0430\u043D\u043D\u044B\u0435 \u0443\u0441\u0442\u0440\u043E\u0439\u0441\u0442\u0432\u0430",
            start_discovering: "\u041D\u0430\u0447\u0430\u0442\u044C \u043F\u043E\u0438\u0441\u043A",
            stop_discovering: "\u041E\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C \u043F\u043E\u0438\u0441\u043A",
            untrust_device: "\u041D\u0435\u0434\u043E\u0432\u0435\u0440\u0435\u043D\u043D\u043E\u0435 \u0443\u0441\u0442\u0440\u043E\u0439\u0441\u0442\u0432\u043E",
            unpair_device: "\u041E\u0442\u0432\u044F\u0437\u0430\u043D\u043D\u043E\u0435 \u0443\u0441\u0442\u0440\u043E\u0439\u0441\u0442\u0432\u043E",
            trust_device: "\u0414\u043E\u0432\u0435\u0440\u0435\u043D\u043D\u043E\u0435 \u0443\u0441\u0442\u0440\u043E\u0439\u0441\u0442\u0432\u043E",
            pair_device: "\u041F\u0440\u0438\u0432\u044F\u0437\u0430\u043D\u043D\u043E\u0435 \u0443\u0441\u0442\u0440\u043E\u0439\u0441\u0442\u0432\u043E"
          },
          network: {
            title: "\u0418\u043D\u0442\u0435\u0440\u043D\u0435\u0442",
            interface: "\u0418\u043D\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044B"
          }
        }
      },
      ask_popup: {
        title: "\u0412\u043E\u043F\u0440\u043E\u0441"
      }
    };
  }
});

// ../../../../../../usr/share/ags/js/gnim/src/gobject.ts
import GObject from "gi://GObject";
import GLib from "gi://GLib";

// ../../../../../../usr/share/ags/js/gnim/src/util.ts
function kebabify(str) {
  return str.replace(/([a-z])([A-Z])/g, "$1-$2").replaceAll("_", "-").toLowerCase();
}
function snakeify(str) {
  return str.replace(/([a-z])([A-Z])/g, "$1-$2").replaceAll("-", "_").toLowerCase();
}
function definePropertyGetter(object, prop) {
  Object.defineProperty(object, `get_${kebabify(prop).replaceAll("-", "_")}`, {
    configurable: false,
    enumerable: true,
    value: () => object[prop]
  });
}
function set(obj, prop, value) {
  const key = snakeify(prop);
  const getter2 = `get_${key}`;
  const setter = `set_${key}`;
  let current;
  if (getter2 in obj && typeof obj[getter2] === "function") {
    current = obj[getter2]();
  } else {
    current = obj[prop];
  }
  if (current !== value) {
    if (setter in obj && typeof obj[setter] === "function") {
      ;
      obj[setter](value);
    } else {
      Object.assign(obj, { [prop]: value });
    }
  }
}

// ../../../../../../usr/share/ags/js/gnim/src/gobject.ts
var priv = Symbol("gobject private");
var { defineProperty, fromEntries, entries } = Object;
var { Object: GObj, registerClass } = GObject;
var SignalFlags = GObject.SignalFlags;
var AccumulatorType = GObject.AccumulatorType;
var ParamSpec = GObject.ParamSpec;
var ParamFlags = GObject.ParamFlags;
function assertField(ctx) {
  if (ctx.private) throw Error("private fields are not supported");
  if (ctx.static) throw Error("static fields are not supported");
  if (typeof ctx.name !== "string") {
    throw Error("only strings can be gobject property keys");
  }
  return ctx.name;
}
function property(typeDeclaration) {
  return function(_, ctx, options) {
    const fieldName = assertField(ctx);
    const key = kebabify(fieldName);
    const meta = ctx.metadata;
    meta.properties ??= {};
    meta.properties[fieldName] = { flags: ParamFlags.READWRITE, type: typeDeclaration };
    ctx.addInitializer(function() {
      definePropertyGetter(this, fieldName);
      if (options && options.metaOnly) return;
      defineProperty(this, fieldName, {
        enumerable: true,
        configurable: false,
        set(v) {
          if (this[priv][key] !== v) {
            this[priv][key] = v;
            this.notify(key);
          }
        },
        get() {
          return this[priv][key];
        }
      });
    });
    return function(init) {
      const dict = this[priv] ??= {};
      dict[key] = init;
      return init;
    };
  };
}
function getter(typeDeclaration) {
  return function getter2(getter2, ctx) {
    const fieldName = assertField(ctx);
    const meta = ctx.metadata;
    const props = meta.properties ??= {};
    if (fieldName in props) {
      const { flags, type } = props[fieldName];
      props[fieldName] = { flags: flags | ParamFlags.READABLE, type };
    } else {
      props[fieldName] = { flags: ParamFlags.READABLE, type: typeDeclaration };
    }
    return getter2;
  };
}
function signal(...args) {
  return function(method, ctx) {
    if (ctx.private) throw Error("private fields are not supported");
    if (ctx.static) throw Error("static fields are not supported");
    if (typeof ctx.name !== "string") {
      throw Error("only strings can be gobject signals");
    }
    const signalName = kebabify(ctx.name);
    const meta = ctx.metadata;
    const signals = meta.signals ??= {};
    if (Array.isArray(args[0])) {
      const [params, returnType, options] = args;
      signals[signalName] = {
        method,
        default: options?.default ?? true,
        param_types: params.map((i) => "$gtype" in i ? i.$gtype : i),
        ...returnType && {
          return_type: "$gtype" in returnType ? returnType.$gtype : returnType
        },
        ...options?.flags && {
          flags: options.flags
        },
        ...typeof options?.accumulator === "number" && {
          accumulator: options.accumulator
        }
      };
    } else {
      const params = args;
      signals[signalName] = {
        method,
        param_types: params.map((i) => "$gtype" in i ? i.$gtype : i)
      };
    }
    return function(...params) {
      return this.emit(signalName, ...params);
    };
  };
}
var MAXINT = 2 ** 31 - 1;
var MININT = -(2 ** 31);
var MAXUINT = 2 ** 32 - 1;
var MAXFLOAT = 34028235e31;
var MINFLOAT = -34028235e31;
var MININT64 = Number.MIN_SAFE_INTEGER;
var MAXINT64 = Number.MAX_SAFE_INTEGER;
function pspecFromGType(type, name, flags) {
  switch (type) {
    case GObject.TYPE_BOOLEAN:
      return ParamSpec.boolean(name, "", "", flags, false);
    case GObject.TYPE_STRING:
      return ParamSpec.string(name, "", "", flags, "");
    case GObject.TYPE_INT:
      return ParamSpec.int(name, "", "", flags, MININT, MAXINT, 0);
    case GObject.TYPE_UINT:
      return ParamSpec.uint(name, "", "", flags, 0, MAXUINT, 0);
    case GObject.TYPE_INT64:
      return ParamSpec.int64(name, "", "", flags, MININT64, MAXINT64, 0);
    case GObject.TYPE_UINT64:
      return ParamSpec.uint64(name, "", "", flags, 0, Number.MAX_SAFE_INTEGER, 0);
    case GObject.TYPE_FLOAT:
      return ParamSpec.float(name, "", "", flags, MINFLOAT, MAXFLOAT, 0);
    case GObject.TYPE_DOUBLE:
      return ParamSpec.double(name, "", "", flags, Number.MIN_VALUE, Number.MIN_VALUE, 0);
    case GObject.TYPE_JSOBJECT:
      return ParamSpec.jsobject(name, "", "", flags);
    case GObject.TYPE_VARIANT:
      return ParamSpec.object(name, "", "", flags, GLib.Variant);
    case GObject.TYPE_ENUM:
    case GObject.TYPE_INTERFACE:
    case GObject.TYPE_BOXED:
    case GObject.TYPE_POINTER:
    case GObject.TYPE_PARAM:
    case GObject.type_from_name("GType"):
      throw Error(`cannot guess ParamSpec from GType "${type}"`);
    case GObject.TYPE_OBJECT:
    default:
      return ParamSpec.object(name, "", "", flags, type);
  }
}
function pspec(name, flags, declaration) {
  if (declaration instanceof ParamSpec) return declaration;
  if (declaration === Object || declaration === Function || declaration === Array) {
    return ParamSpec.jsobject(name, "", "", flags);
  }
  if (declaration === String) {
    return ParamSpec.string(name, "", "", flags, "");
  }
  if (declaration === Number) {
    return ParamSpec.double(name, "", "", flags, -Number.MAX_VALUE, Number.MAX_VALUE, 0);
  }
  if (declaration === Boolean) {
    return ParamSpec.boolean(name, "", "", flags, false);
  }
  if ("$gtype" in declaration) {
    return pspecFromGType(declaration.$gtype, name, flags);
  }
  if (typeof declaration === "function") {
    return declaration(name, flags);
  }
  throw Error("invalid PropertyTypeDeclaration");
}
function register(options = {}) {
  return function(cls, ctx) {
    const t = options.Template;
    if (typeof t === "string" && !t.startsWith("resource://") && !t.startsWith("file://")) {
      options.Template = new TextEncoder().encode(t);
    }
    const meta = ctx.metadata;
    const props = fromEntries(
      entries(meta.properties ?? {}).map(([fieldName, { flags, type }]) => {
        const key = kebabify(fieldName);
        const spec = pspec(key, flags, type);
        return [key, spec];
      })
    );
    const signals = fromEntries(
      entries(meta.signals ?? {}).map(([signalName, { default: def, method, ...signal2 }]) => {
        if (def) {
          defineProperty(cls.prototype, `on_${signalName.replaceAll("-", "_")}`, {
            enumerable: false,
            configurable: false,
            value: method
          });
        }
        return [signalName, signal2];
      })
    );
    delete meta.properties;
    delete meta.signals;
    registerClass({ ...options, Properties: props, Signals: signals }, cls);
  };
}
Function.$gtype = Object.$gtype;
Array.$gtype = Object.$gtype;

// scripts/volume.ts
import AstalWp from "gi://AstalWp";
var _Wireplumber_decorators, _init, _a;
_Wireplumber_decorators = [register({ GTypeName: "Wireplumber" })];
var _Wireplumber = class _Wireplumber extends (_a = GObject.Object) {
  constructor() {
    super();
    this.defaultSink = _Wireplumber.astalWireplumber.get_default_speaker();
    this.defaultSource = _Wireplumber.astalWireplumber.get_default_microphone();
    this.maxSinkVolume = 100;
    this.maxSourceVolume = 100;
    if (!_Wireplumber.astalWireplumber)
      throw new Error("Audio features will not work correctly! Please install wireplumber first", {
        cause: "Wireplumber library not found"
      });
  }
  static {
    this.astalWireplumber = AstalWp.get_default();
  }
  static {
    this.inst = void 0;
  }
  static getDefault() {
    if (!_Wireplumber.inst)
      _Wireplumber.inst = new _Wireplumber();
    return _Wireplumber.inst;
  }
  static getWireplumber() {
    return _Wireplumber.astalWireplumber;
  }
  getMaxSinkVolume() {
    return this.maxSinkVolume;
  }
  getMaxSourceVolume() {
    return this.maxSourceVolume;
  }
  getDefaultSink() {
    return this.defaultSink;
  }
  getDefaultSource() {
    return this.defaultSource;
  }
  getSinkVolume() {
    return Math.floor(this.getDefaultSink().get_volume() * 100);
  }
  getSourceVolume() {
    return Math.floor(this.getDefaultSource().get_volume() * 100);
  }
  setSinkVolume(newSinkVolume) {
    this.defaultSink.set_volume(
      (newSinkVolume > this.maxSinkVolume ? this.maxSinkVolume : newSinkVolume) / 100
    );
  }
  setSourceVolume(newSourceVolume) {
    this.defaultSource.set_volume(
      newSourceVolume > this.maxSourceVolume ? this.maxSourceVolume : newSourceVolume / 100
    );
  }
  increaseEndpointVolume(endpoint, volumeIncrease) {
    volumeIncrease = Math.abs(volumeIncrease) / 100;
    if (endpoint.get_volume() + volumeIncrease > this.maxSinkVolume / 100) {
      endpoint.set_volume(1);
      return;
    }
    endpoint.set_volume(endpoint.get_volume() + volumeIncrease);
  }
  increaseSinkVolume(volumeIncrease) {
    this.increaseEndpointVolume(this.getDefaultSink(), volumeIncrease);
  }
  increaseSourceVolume(volumeIncrease) {
    this.increaseEndpointVolume(this.getDefaultSource(), volumeIncrease);
  }
  decreaseEndpointVolume(endpoint, volumeDecrease) {
    volumeDecrease = Math.abs(volumeDecrease) / 100;
    if (endpoint.get_volume() - volumeDecrease < 0) {
      endpoint.set_volume(0);
      return;
    }
    endpoint.set_volume(endpoint.get_volume() - volumeDecrease);
  }
  decreaseSinkVolume(volumeDecrease) {
    this.decreaseEndpointVolume(this.getDefaultSink(), volumeDecrease);
  }
  decreaseSourceVolume(volumeDecrease) {
    this.decreaseEndpointVolume(this.getDefaultSource(), volumeDecrease);
  }
  muteSink() {
    this.getDefaultSink().set_mute(true);
  }
  muteSource() {
    this.getDefaultSource().set_mute(true);
  }
  unmuteSink() {
    this.getDefaultSink().set_mute(false);
  }
  unmuteSource() {
    this.getDefaultSource().set_mute(false);
  }
  isMutedSink() {
    return this.getDefaultSink().get_mute();
  }
  isMutedSource() {
    return this.getDefaultSource().get_mute();
  }
  toggleMuteSink() {
    if (this.isMutedSink())
      return this.unmuteSink();
    return this.muteSink();
  }
  toggleMuteSource() {
    if (this.isMutedSource())
      return this.unmuteSource();
    return this.muteSource();
  }
};
_init = __decoratorStart(_a);
_Wireplumber = __decorateElement(_init, 0, "Wireplumber", _Wireplumber_decorators, _Wireplumber);
__runInitializers(_init, 1, _Wireplumber);
var Wireplumber = _Wireplumber;

// ../../../../../../usr/share/ags/js/src/gtk4/index.ts
import Astal from "gi://Astal?version=4.0";
import Gtk from "gi://Gtk?version=4.0";
import Gdk from "gi://Gdk?version=4.0";

// ../../../../../../usr/share/ags/js/gnim/src/jsx/jsx.ts
import GObject3 from "gi://GObject";

// ../../../../../../usr/share/ags/js/gnim/src/jsx/state.ts
import GObject2 from "gi://GObject";
import Gio from "gi://Gio";
import GLib2 from "gi://GLib";
var Accessor = class _Accessor extends Function {
  static {
    this.$gtype = GObject2.TYPE_JSOBJECT;
  }
  #get;
  #subscribe;
  constructor(get, subscribe) {
    super("return arguments.callee._call.apply(arguments.callee, arguments)");
    this.#subscribe = subscribe ?? (() => () => void 0);
    this.#get = get;
  }
  /**
   * Subscribe for value changes.
   * @param callback The function to run when the current value changes.
   * @returns Unsubscribe function.
   */
  subscribe(callback) {
    return this.#subscribe(callback);
  }
  /**
   * @returns The current value.
   */
  get() {
    _Accessor.evaluating?.add(this);
    return this.#get();
  }
  /**
   * Create a new `Accessor` that applies a transformation on its value.
   * @param transform The transformation to apply. Should be a pure function.
   */
  as(transform) {
    return new _Accessor(() => transform(this.#get()), this.#subscribe);
  }
  _call(transform) {
    return this.as(transform);
  }
  toString() {
    return `Accessor<${this.get()}>`;
  }
  [Symbol.toPrimitive]() {
    console.warn("Accessor implicitly converted to a primitive value.");
    return this.toString();
  }
};
function createState(init) {
  let currentValue = init;
  const subscribers = /* @__PURE__ */ new Set();
  const subscribe = (callback) => {
    subscribers.add(callback);
    return () => subscribers.delete(callback);
  };
  const set2 = (newValue) => {
    const value = typeof newValue === "function" ? newValue(currentValue) : newValue;
    if (currentValue !== value) {
      currentValue = value;
      subscribers.forEach((cb) => cb());
    }
  };
  return [new Accessor(() => currentValue, subscribe), set2];
}
function createComputed(deps, transform) {
  let dispose;
  const subscribers = /* @__PURE__ */ new Set();
  const cache = new Array(deps.length);
  const subscribe = (callback) => {
    if (subscribers.size === 0) {
      dispose = deps.map(
        (dep, i) => dep.subscribe(() => {
          const value = dep.get();
          if (cache[i] !== value) {
            cache[i] = dep.get();
            subscribers.forEach((cb) => cb());
          }
        })
      );
    }
    subscribers.add(callback);
    return () => {
      subscribers.delete(callback);
      if (subscribers.size === 0) {
        dispose.map((cb) => cb());
        dispose.length = 0;
        cache.length = 0;
      }
    };
  };
  const get = () => {
    const args = deps.map((dep, i) => {
      if (!cache[i]) {
        cache[i] = dep.get();
      }
      return cache[i];
    });
    return transform ? transform(...args) : args;
  };
  return new Accessor(get, subscribe);
}
function createBinding(object, key) {
  const prop = kebabify(key);
  const subscribe = (callback) => {
    const sig = object instanceof Gio.Settings ? "changed" : "notify";
    const id = object.connect(`${sig}::${prop}`, () => callback());
    return () => object.disconnect(id);
  };
  const get = () => {
    if (object instanceof Gio.Settings) {
      return object.get_value(key).recursiveUnpack();
    } else {
      const getter2 = `get_${prop.replaceAll("-", "_")}`;
      if (getter2 in object && typeof object[getter2] === "function") {
        return object[getter2]();
      }
      if (prop in object) return object[prop];
      if (key in object) return object[key];
      throw Error(`cannot get property ${key}`);
    }
  };
  return new Accessor(get, subscribe);
}

// ../../../../../../usr/share/ags/js/gnim/src/jsx/env.ts
function configue(conf) {
  return Object.assign(env, conf);
}
function missingImpl() {
  throw Error("missing impl");
}
var env = {
  intrinsicElements: {},
  addChild: missingImpl,
  setCss: missingImpl,
  setClass: missingImpl,
  initProps: () => void 0,
  defaultCleanup: () => void 0
};

// ../../../../../../usr/share/ags/js/gnim/src/jsx/scope.ts
var Scope = class _Scope {
  constructor(parent) {
    this.contexts = /* @__PURE__ */ new Map();
    this.cleanups = /* @__PURE__ */ new Set();
    this.mounts = /* @__PURE__ */ new Set();
    this.mounted = false;
    this.parent = parent;
  }
  onCleanup(callback) {
    this.cleanups?.add(callback);
  }
  onMount(callback) {
    if (this.parent && !this.parent.mounted) {
      this.parent.onMount(callback);
    } else {
      this.mounts.add(callback);
    }
  }
  run(fn) {
    const prev = _Scope.current;
    _Scope.current = this;
    try {
      return fn();
    } finally {
      this.mounts.forEach((cb) => cb());
      this.mounts.clear();
      this.mounted = true;
      _Scope.current = prev;
    }
  }
  dispose() {
    this.cleanups.forEach((cb) => cb());
    this.cleanups.clear();
    this.contexts.clear();
    delete this.parent;
  }
};
function getScope() {
  const scope = Scope.current;
  if (!scope) {
    throw Error("cannot get scope: out of tracking context");
  }
  return scope;
}
function onCleanup(cleanup) {
  if (!Scope.current) {
    console.error(Error("out of tracking context: will not be able to cleanup"));
  }
  Scope.current?.onCleanup(cleanup);
}
function createRoot(fn) {
  const scope = new Scope(null);
  return scope.run(() => fn(() => scope.dispose()));
}

// ../../../../../../usr/share/ags/js/gnim/src/jsx/jsx.ts
var gtkType = Symbol("gtk builder type");
function getType(object) {
  return gtkType in object ? object[gtkType] : null;
}
function isGObjectCtor(ctor) {
  return ctor.prototype instanceof GObject3.Object;
}
function isFunctionCtor(ctor) {
  return typeof ctor === "function" && !isGObjectCtor(ctor);
}
function setType(object, type) {
  if (gtkType in object && object[gtkType] !== "") {
    console.warn(`type overriden from ${object[gtkType]} to ${type} on ${object}`);
  }
  Object.assign(object, { [gtkType]: type });
}
function jsx(ctor, inprops, key) {
  const { $, $type, $constructor, children = [], ...rest } = inprops;
  const props = rest;
  if (key) Object.assign(props, { key });
  env.initProps(props);
  for (const [key2, value] of Object.entries(props)) {
    if (value === void 0) delete props[key2];
  }
  if (typeof ctor === "string") {
    if (ctor in env.intrinsicElements) {
      ctor = env.intrinsicElements[ctor];
    } else {
      throw Error(`unknown intrinsic element "${ctor}"`);
    }
  }
  if (isFunctionCtor(ctor)) {
    const object2 = ctor({ children, ...props });
    if ($type) setType(object2, $type);
    $?.(object2);
    return object2;
  }
  const { css, class: className } = props;
  delete props.css;
  delete props.class;
  const signals = [];
  const bindings = [];
  for (const [key2, value] of Object.entries(props)) {
    if (key2.startsWith("on")) {
      signals.push([key2.slice(2), value]);
      delete props[key2];
    }
    if (value instanceof Accessor) {
      bindings.push([key2, value]);
      props[key2] = value.get();
    }
  }
  const object = $constructor ? $constructor(props) : new ctor(props);
  if ($constructor) Object.assign(object, props);
  if ($type) setType(object, $type);
  if (css) env.setCss(object, css);
  if (className) env.setClass(object, className);
  for (const child of Array.isArray(children) ? children : [children]) {
    if (child === true) {
      console.warn("Trying to add boolean value of `true` as a child.");
      continue;
    }
    if (Array.isArray(child)) {
      for (const ch of child) {
        env.addChild(object, ch, -1);
      }
    } else if (child) {
      env.addChild(object, child, -1);
    }
  }
  const disposeHandlers = signals.map(([sig, handler]) => {
    const name = kebabify(sig);
    const id = name.startsWith("notify-") ? object.connect(`notify::${name.slice(7)}`, handler) : object.connect(kebabify(sig), handler);
    return () => object.disconnect(id);
  });
  const disposeBindings = bindings.map(([prop, binding]) => {
    const dispose = binding.subscribe(() => {
      set(object, prop, binding.get());
    });
    set(object, prop, binding.get());
    return dispose;
  });
  if (disposeBindings.length > 0 || disposeHandlers.length > 0) {
    onCleanup(() => {
      disposeHandlers.forEach((cb) => cb());
      disposeBindings.forEach((cb) => cb());
    });
  }
  $?.(object);
  return object;
}
var jsxs = jsx;

// ../../../../../../usr/share/ags/js/gnim/src/jsx/Fragment.ts
import GObject4 from "gi://GObject";

// ../../../../../../usr/share/ags/js/gnim/src/gnome/signalTracker.ts
var mod = import("resource:///org/gnome/shell/misc/signalTracker.js");
var registerDestroyableType = await mod.then((mod2) => mod2.registerDestroyableType).catch(() => () => void 0);

// ../../../../../../usr/share/ags/js/gnim/src/jsx/Fragment.ts
var _a2, _b, _c;
var Fragment = class _Fragment extends (_c = GObject4.Object, _b = GObject4.signals, _a2 = GObject4.properties, _c) {
  constructor({ children = [] } = {}) {
    super();
    this.connectionIds = /* @__PURE__ */ new Set();
    this._children = Array.isArray(children) ? children : [children];
  }
  static {
    this[_b] = {
      "destroy": {},
      "child-added": {
        param_types: [GObject4.TYPE_OBJECT, GObject4.TYPE_UINT]
      },
      "child-removed": {
        param_types: [GObject4.TYPE_OBJECT, GObject4.TYPE_UINT]
      }
    };
  }
  static {
    this[_a2] = {
      children: GObject4.ParamSpec.jsobject("children", "", "", GObject4.ParamFlags.READABLE)
    };
  }
  static {
    GObject4.registerClass(this);
    registerDestroyableType(this);
  }
  static new(children = []) {
    return new _Fragment({ children });
  }
  get children() {
    return [...this._children];
  }
  addChild(child, index = -1) {
    if (child instanceof _Fragment) {
      throw Error(`nesting Fragments are not yet supported`);
    }
    if (index > 0) {
      this._children = [
        ...this._children.slice(0, index),
        child,
        ...this._children.slice(index)
      ];
    } else {
      this._children.push(child);
      index = this._children.length - 1;
    }
    this.emit("child-added", child, index);
    this.notify("children");
  }
  hasChild(child) {
    return this._children.findIndex((ch) => ch === child) > -1;
  }
  removeChild(child) {
    const index = this._children.findIndex((i) => i === child);
    this._children.splice(index, 1);
    this.emit("child-removed", child, index);
    this.notify("children");
  }
  connect(signal2, callback) {
    const id = super.connect(signal2, callback);
    this.connectionIds.add(id);
    return id;
  }
  disconnect(id) {
    super.disconnect(id);
    this.connectionIds.delete(id);
  }
  destroy() {
    this.emit("destroy");
    for (const id of this.connectionIds.values()) {
      super.disconnect(id);
    }
  }
};

// ../../../../../../usr/share/ags/js/gnim/src/jsx/For.ts
function For({
  each,
  children: mkChild,
  cleanup,
  id = (item) => item
}) {
  const currentScope = getScope();
  const map = /* @__PURE__ */ new Map();
  const fragment = new Fragment();
  function remove2({ item, child, index: [index], scope }) {
    if (typeof cleanup === "function") {
      cleanup(child, item, index.get());
    } else if (cleanup !== null) {
      env.defaultCleanup(child);
    }
    scope.dispose();
  }
  function callback(itareable) {
    const items = [...itareable];
    const ids = items.map(id);
    const idSet = new Set(ids);
    for (const [key, value] of map.entries()) {
      fragment.removeChild(value.child);
      if (!idSet.has(key)) {
        remove2(value);
        map.delete(key);
      }
    }
    items.map((item, i) => {
      const key = ids[i];
      if (map.has(key)) {
        const {
          index: [, setIndex],
          child
        } = map.get(key);
        setIndex(i);
        if (fragment.hasChild(child)) {
          console.warn(`duplicate keys found: ${key}`);
        } else {
          fragment.addChild(child);
        }
      } else {
        const [index, setIndex] = createState(i);
        const scope = new Scope(currentScope);
        const child = scope.run(() => mkChild(item, index));
        map.set(key, { item, child, index: [index, setIndex], scope });
        fragment.addChild(child);
      }
    });
  }
  const dispose = each.subscribe(() => {
    callback(each.get());
  });
  callback(each.get());
  onCleanup(() => {
    dispose();
    for (const value of map.values()) {
      remove2(value);
    }
    map.clear();
  });
  return fragment;
}

// ../../../../../../usr/share/ags/js/gnim/src/jsx/With.ts
function With({
  value,
  children: mkChild,
  cleanup
}) {
  const currentScope = getScope();
  const fragment = new Fragment();
  let scope;
  function callback(v) {
    for (const child of fragment.children) {
      fragment.removeChild(child);
      if (typeof cleanup === "function") {
        cleanup(child);
      } else if (cleanup !== null) {
        env.defaultCleanup(child);
      }
      if (scope) scope.dispose();
    }
    scope = new Scope(currentScope);
    const ch = scope.run(() => mkChild(v));
    if (ch !== "" && ch !== false && ch !== null && ch !== void 0) {
      fragment.addChild(ch);
    }
  }
  const dispose = value.subscribe(() => {
    callback(value.get());
  });
  callback(value.get());
  onCleanup(() => {
    scope.dispose();
    dispose();
  });
  return fragment;
}

// widget/bar/Tray.tsx
import AstalTray from "gi://AstalTray";

// ../../../../../../usr/share/ags/js/src/time.ts
import AstalIO2 from "gi://AstalIO";

// ../../../../../../usr/share/ags/js/src/process.ts
import AstalIO from "gi://AstalIO";
var Process = AstalIO.Process;
function exec(cmd) {
  return Array.isArray(cmd) ? AstalIO.Process.execv(cmd) : AstalIO.Process.exec(cmd);
}
function execAsync(cmd) {
  return new Promise((resolve, reject) => {
    if (Array.isArray(cmd)) {
      AstalIO.Process.exec_asyncv(cmd, (_, res) => {
        try {
          resolve(AstalIO.Process.exec_asyncv_finish(res));
        } catch (error) {
          reject(error);
        }
      });
    } else {
      AstalIO.Process.exec_async(cmd, (_, res) => {
        try {
          resolve(AstalIO.Process.exec_finish(res));
        } catch (error) {
          reject(error);
        }
      });
    }
  });
}

// ../../../../../../usr/share/ags/js/src/time.ts
var Time = AstalIO2.Time;
function interval(interval2, callback) {
  return AstalIO2.Time.interval(interval2, () => void callback?.());
}
function timeout(timeout2, callback) {
  return AstalIO2.Time.timeout(timeout2, () => void callback?.());
}
function createPoll(init, ival, execOrFn, transform) {
  let currentValue = init;
  let timer = null;
  const subscribers = /* @__PURE__ */ new Set();
  function subscribe(callback) {
    function set2(value) {
      if (value !== currentValue) {
        currentValue = value;
        subscribers.forEach((cb) => cb());
      }
    }
    if (subscribers.size === 0) {
      timer = interval(ival, () => {
        if (typeof execOrFn === "function") {
          const value = execOrFn(currentValue);
          if (value instanceof Promise) {
            value.then(set2);
          } else {
            set2(value);
          }
        } else {
          execAsync(execOrFn).then((stdout) => {
            set2(transform ? transform(stdout, currentValue) : stdout);
          });
        }
      });
    }
    subscribers.add(callback);
    return () => {
      subscribers.delete(callback);
      if (subscribers.size === 0) {
        timer?.cancel();
        timer = null;
      }
    };
  }
  return new Accessor(() => currentValue, subscribe);
}

// scripts/utils.ts
import GLib3 from "gi://GLib?version=2.0";
import Gio2 from "gi://Gio?version=2.0";
var decoder = new TextDecoder("utf-8");
var encoder = new TextEncoder();
var time = createPoll(GLib3.DateTime.new_now_local(), 500, () => GLib3.DateTime.new_now_local());
function omitObjectKeys(obj, keys) {
  const finalObject = { ...obj };
  for (const objKey of Object.keys(finalObject)) {
    if (!Array.isArray(keys)) {
      if (objKey === keys) {
        delete finalObject[keys];
        break;
      }
      continue;
    }
    for (const omitKey of keys) {
      if (objKey === omitKey) {
        delete finalObject[objKey];
        break;
      }
    }
  }
  return finalObject;
}
function variableToBoolean(variable) {
  return variable instanceof Accessor ? variable.as((v) => Array.isArray(v) ? v.length > 0 : Boolean(v)) : Array.isArray(variable) ? variable.length > 0 : Boolean(variable);
}
function makeDirectory(dir) {
  execAsync(["mkdir", "-p", dir]);
}
function playSystemBell() {
  execAsync("canberra-gtk-play -i bell").catch((e) => {
    console.error(`Couldn't play system bell. Stderr: ${e.message}
${e.stack}`);
  });
}

// ../../../../../../usr/share/ags/js/src/gtk4/jsx-runtime.ts
import Gtk3 from "gi://Gtk?version=4.0";
import Astal3 from "gi://Astal?version=4.0";

// ../../../../../../usr/share/ags/js/gnim/src/gtk4/jsx-runtime.ts
import Gtk2 from "gi://Gtk?version=4.0";
import Gio3 from "gi://Gio?version=2.0";
import GObject5 from "gi://GObject";
var dummyBuilder = new Gtk2.Builder();
function add(parent, child, _) {
  if (!specialAdd(parent, child, _)) {
    parent.vfunc_add_child(dummyBuilder, child, getType(child));
  }
}
function specialRemove(_parent, _child) {
  return false;
}
function specialAdd(parent, child, _) {
  if (child instanceof Gtk2.Adjustment && "set_adjustment" in parent && typeof parent.set_adjustment === "function") {
    parent.set_adjustment(child);
    return true;
  }
  if (child instanceof Gtk2.Widget && parent instanceof Gtk2.Stack && child.name !== "" && child.name !== null && getType(child) === "named") {
    parent.add_named(child, child.name);
    return true;
  }
  if (child instanceof Gtk2.Popover && parent instanceof Gtk2.MenuButton) {
    parent.set_popover(child);
    return true;
  }
  if (child instanceof Gio3.MenuModel && (parent instanceof Gtk2.MenuButton || parent instanceof Gtk2.PopoverMenu)) {
    parent.set_menu_model(child);
    return true;
  }
  if (child instanceof Gio3.MenuItem && parent instanceof Gio3.Menu) {
  }
  if (child instanceof Gtk2.Window && parent instanceof Gtk2.Application) {
    parent.add_window(child);
    return true;
  }
  if (child instanceof Gtk2.TextBuffer && parent instanceof Gtk2.TextView) {
    parent.set_buffer(child);
    return true;
  }
  return false;
}
function remove(parent, child) {
  if (specialRemove(parent, child)) return;
  if ("set_child" in parent && typeof parent.set_child == "function") {
    return parent.set_child(null);
  }
  if ("remove" in parent && typeof parent.remove == "function") {
    return parent.remove(child);
  }
  throw Error(`cannot remove ${child} from ${parent}`);
}
var { addChild, intrinsicElements } = configue({
  setCss(object, css) {
    if (!(object instanceof Gtk2.Widget)) {
      return console.warn(Error(`cannot set css on ${object}`));
    }
    const ctx = object.get_style_context();
    let provider;
    const setter = (css2) => {
      if (!css2.includes("{") || !css2.includes("}")) {
        css2 = `* { ${css2} }`;
      }
      if (provider) ctx.remove_provider(provider);
      provider = new Gtk2.CssProvider();
      provider.load_from_string(css2);
      ctx.add_provider(provider, Gtk2.STYLE_PROVIDER_PRIORITY_USER);
    };
    if (css instanceof Accessor) {
      setter(css.get());
      const dispose = css.subscribe(() => setter(css.get()));
      onCleanup(dispose);
    } else {
      setter(css);
    }
  },
  setClass(object, className) {
    if (!(object instanceof Gtk2.Widget)) {
      return console.warn(Error(`cannot set className on ${object}`));
    }
    if (className instanceof Accessor) {
      object.cssClasses = className.get().split(/\s+/);
      const dispose = className.subscribe(
        () => object.cssClasses = className.get().split(/\s+/)
      );
      onCleanup(dispose);
    } else {
      object.set_css_classes(className.split(/\s+/));
    }
  },
  addChild(parent, child, index = -1) {
    if (!(child instanceof GObject5.Object)) {
      child = Gtk2.Label.new(String(child));
    }
    if (specialAdd(parent, child, index)) return;
    if (parent instanceof Fragment) {
      parent.addChild(child);
      return;
    }
    if (parent instanceof Gtk2.Buildable) {
      if (child instanceof Fragment) {
        for (const ch of child.children) {
          add(parent, ch, index);
        }
        child.connect("child-added", (_, ch, index2) => {
          if (!(ch instanceof GObject5.Object)) {
            console.error(TypeError(`cannot add ${ch} to ${parent}`));
            return;
          }
          addChild(parent, ch, index2);
        });
        child.connect("child-removed", (_, ch) => {
          if (!(ch instanceof GObject5.Object)) {
            console.error(TypeError(`cannot remove ${ch} from ${parent}`));
            return;
          }
          remove(parent, ch);
        });
        onCleanup(() => child.destroy());
        return;
      }
      add(parent, child, index);
      return;
    }
    throw Error(`cannot add ${child} to ${parent}`);
  }
});

// ../../../../../../usr/share/ags/js/src/gtk4/jsx-runtime.ts
Object.assign(intrinsicElements, {
  box: Gtk3.Box,
  button: Gtk3.Button,
  centerbox: Gtk3.CenterBox,
  // circularprogress: Astal.CircularProgress,
  drawingarea: Gtk3.DrawingArea,
  entry: Gtk3.Entry,
  image: Gtk3.Image,
  label: Gtk3.Label,
  levelbar: Gtk3.LevelBar,
  menubutton: Gtk3.MenuButton,
  overlay: Gtk3.Overlay,
  popover: Gtk3.Popover,
  revealer: Gtk3.Revealer,
  scrolledwindow: Gtk3.ScrolledWindow,
  slider: Astal3.Slider,
  stack: Gtk3.Stack,
  switch: Gtk3.Switch,
  togglebutton: Gtk3.ToggleButton,
  window: Astal3.Window
});

// widget/bar/Tray.tsx
var astalTray = AstalTray.get_default();
function popoverFromModel(model, actionGroup) {
  const menu = Gtk.PopoverMenu.new_from_model(model);
  menu.insert_action_group("dbusmenu", actionGroup);
  return menu;
}
var Tray = () => {
  const items = createBinding(astalTray, "items").as((items2) => items2.filter((item) => item?.gicon));
  return /* @__PURE__ */ jsx(Gtk.Box, { class: "tray", visible: variableToBoolean(items), spacing: 10, children: /* @__PURE__ */ jsx(For, { each: items, children: (item) => /* @__PURE__ */ jsx(Gtk.Box, { class: "item", children: /* @__PURE__ */ jsx(With, { value: createComputed([
    createBinding(item, "actionGroup"),
    createBinding(item, "menuModel")
  ]), children: ([actionGroup, menuModel]) => {
    const popover = popoverFromModel(menuModel, actionGroup);
    return /* @__PURE__ */ jsx(
      Gtk.MenuButton,
      {
        class: "item-button",
        tooltipMarkup: createBinding(item, "tooltipMarkup"),
        tooltipText: createBinding(item, "tooltipText"),
        popover,
        $: (self) => {
          const conns = /* @__PURE__ */ new Map();
          const gestureClick = Gtk.GestureClick.new();
          self.add_controller(gestureClick);
          conns.set(gestureClick, gestureClick.connect("released", (gesture, _, x, y) => {
            if (gesture.get_current_button() === Gdk.BUTTON_PRIMARY) {
              item.activate(x, y);
              return;
            } else if (gesture.get_current_button() === Gdk.BUTTON_SECONDARY) {
              item.about_to_show();
              self.popup();
            }
          }));
        },
        children: /* @__PURE__ */ jsx(Gtk.Image, { gicon: createBinding(item, "gicon"), pixelSize: 16 })
      }
    );
  } }) }) }) });
};

// widget/bar/Workspaces.tsx
import AstalHyprland2 from "gi://AstalHyprland";

// scripts/apps.ts
import AstalApps from "gi://AstalApps";
import AstalHyprland from "gi://AstalHyprland";
var uwsmIsActive = await execAsync(
  "uwsm check is-active hyprland-uwsm.desktop"
).then(() => true).catch(() => false);
var astalApps = new AstalApps.Apps();
var appsList = astalApps.get_list();
function getApps() {
  return appsList;
}
function updateApps() {
  astalApps.reload();
  appsList = astalApps.get_list();
}
function getAstalApps() {
  return astalApps;
}
function execApp(app, dispatchExecArgs) {
  const executable = typeof app === "string" ? app : app.executable.replace(/(%f|%F|%u|%U|%i|%c|%k)/g, "");
  AstalHyprland.get_default().dispatch(
    "exec",
    `${dispatchExecArgs ? `${dispatchExecArgs} ` : ""}${uwsmIsActive ? "uwsm app -- " : ""}${executable}`
  );
}
function lookupIcon(name) {
  return Gtk.IconTheme.get_for_display(Gdk.Display.get_default())?.has_icon(name);
}
function getAppsByName(appName) {
  let found = [];
  getApps().map((app) => {
    if (app.get_name().trim().toLowerCase() === appName.trim().toLowerCase() || app?.wmClass && app.wmClass.trim().toLowerCase() === appName.trim().toLowerCase())
      found.push(app);
  });
  return found.length > 0 ? found : void 0;
}
function getIconByAppName(appName) {
  if (!appName) return void 0;
  if (lookupIcon(appName))
    return appName;
  if (lookupIcon(appName.toLowerCase()))
    return appName.toLowerCase();
  const nameReverseDNS = appName.split(".");
  if (lookupIcon(nameReverseDNS[nameReverseDNS.length - 1]))
    return nameReverseDNS[nameReverseDNS.length - 1];
  const found = getAppsByName(appName)?.[0];
  if (Boolean(found))
    return found?.iconName;
  return void 0;
}
function getAppIcon(app) {
  if (!app) return void 0;
  if (typeof app === "string")
    return getIconByAppName(app);
  if (app.iconName && lookupIcon(app.iconName))
    return app.iconName;
  if (app.wmClass)
    return getIconByAppName(app.wmClass);
  return getIconByAppName(app.name);
}
function getSymbolicIcon(app) {
  const icon = getAppIcon(app);
  return icon && lookupIcon(`${icon}-symbolic`) ? `${icon}-symbolic` : void 0;
}

// ../../../../../../usr/share/ags/js/src/file.ts
import Astal4 from "gi://AstalIO";
function readFile(path) {
  return Astal4.read_file(path) || "";
}
function readFileAsync(path) {
  return new Promise((resolve, reject) => {
    Astal4.read_file_async(path, (_, res) => {
      try {
        resolve(Astal4.read_file_finish(res) || "");
      } catch (error) {
        reject(error);
      }
    });
  });
}
function monitorFile(path, callback) {
  return Astal4.monitor_file(path, (file, event) => {
    callback(file, event);
  });
}

// scripts/notifications.ts
import AstalNotifd from "gi://AstalNotifd";
var _notificationReplaced_dec, _historyRemoved_dec, _historyAdded_dec, _notificationRemoved_dec, _notificationAdded_dec, _historyLimit_dec, _history_dec, _notifications_dec, _a3, _Notifications_decorators, _notifications, _history, _notificationsOnHold, _connections, _init2;
_Notifications_decorators = [register({ GTypeName: "Notifications" })];
var _Notifications = class _Notifications extends (_a3 = GObject.Object, _notifications_dec = [getter(Array)], _history_dec = [getter(Array)], _historyLimit_dec = [property(Number)], _notificationAdded_dec = [signal(AstalNotifd.Notification)], _notificationRemoved_dec = [signal(Number)], _historyAdded_dec = [signal(Object)], _historyRemoved_dec = [signal(Number)], _notificationReplaced_dec = [signal(Number)], _a3) {
  constructor() {
    super();
    __runInitializers(_init2, 5, this);
    __privateAdd(this, _notifications, []);
    __privateAdd(this, _history, []);
    __privateAdd(this, _notificationsOnHold, /* @__PURE__ */ new Set());
    __privateAdd(this, _connections, []);
    this.historyLimit = __runInitializers(_init2, 8, this, 10), __runInitializers(_init2, 11, this);
    __privateGet(this, _connections).push(
      AstalNotifd.get_default().connect("notified", (notifd, id) => {
        const notification = notifd.get_notification(id);
        const notifTimeout = Config.getDefault().getProperty(
          `notifications.timeout_${this.getUrgencyString(notification.urgency).toLowerCase()}`,
          "number"
        );
        if (this.getNotifd().dontDisturb) {
          this.addHistory(notification, () => notification.dismiss());
          return;
        }
        this.addNotification(notification, () => {
          if (notification.urgency !== AstalNotifd.Urgency.CRITICAL || notification.urgency === AstalNotifd.Urgency.CRITICAL && notifTimeout > 0) {
            let notifTimer = void 0;
            let replacedConnectionId;
            const removeFun = () => {
              notifTimer = void 0;
              if (__privateGet(this, _notificationsOnHold).has(notification.id)) return;
              this.addHistory(notification, () => {
                replacedConnectionId && this.disconnect(replacedConnectionId);
                this.removeNotification(id);
              });
            };
            notifTimer = timeout(notifTimeout, removeFun);
            replacedConnectionId = this.connect("notification-replaced", (_, id2) => {
              if (notification.id !== id2) return;
              notifTimer?.cancel();
              notifTimer = timeout(notifTimeout, removeFun);
            });
          }
        });
      }),
      AstalNotifd.get_default().connect("resolved", (notifd, id, _reason) => {
        this.removeNotification(id);
        this.addHistory(notifd.get_notification(id));
      })
    );
    this.run_dispose = () => {
      super.run_dispose();
      __privateGet(this, _connections).map((id) => AstalNotifd.get_default().disconnect(id));
    };
  }
  get notifications() {
    return __privateGet(this, _notifications);
  }
  get history() {
    return __privateGet(this, _history);
  }
  notificationAdded(_notification) {
  }
  notificationRemoved(_id) {
  }
  historyAdded(_notification) {
  }
  historyRemoved(_id) {
  }
  notificationReplaced(_id) {
  }
  static getDefault() {
    if (!this.instance)
      this.instance = new _Notifications();
    return this.instance;
  }
  async sendNotification(props) {
    return await execAsync([
      "notify-send",
      ...props.urgency ? [
        "-u",
        this.getUrgencyString(props.urgency)
      ] : [],
      ...props.appName ? [
        "-a",
        props.appName
      ] : [],
      ...props.image ? [
        "-i",
        props.image
      ] : [],
      ...props.actions ? props.actions.map(
        (action) => ["-A", action.text]
      ).flat(2) : [],
      ...props.replaceId ? [
        "-r",
        props.replaceId.toString()
      ] : [],
      props.summary,
      props.body ? props.body : ""
    ]).then((stdout) => {
      stdout = stdout.trim();
      if (!stdout) {
        if (props.actions && props.actions.length > 0)
          return null;
        return;
      }
      if (props.actions && props.actions.length > 0) {
        const action = props.actions[Number.parseInt(stdout)];
        action?.onAction?.();
        return action ?? void 0;
      }
    }).catch((err) => {
      console.error(`Notifications: Couldn't send notification! Is the daemon running? Stderr:
${err.message ? `${err.message}
` : ""}Stack: ${err.stack}`);
    });
  }
  getUrgencyString(urgency) {
    switch (urgency instanceof AstalNotifd.Notification ? urgency.urgency : urgency) {
      case AstalNotifd.Urgency.LOW:
        return "low";
      case AstalNotifd.Urgency.CRITICAL:
        return "critical";
    }
    return "normal";
  }
  addHistory(notif, onAdded) {
    if (!notif) return;
    __privateGet(this, _history).length === this.historyLimit && this.removeHistory(__privateGet(this, _history)[__privateGet(this, _history).length - 1]);
    __privateGet(this, _history).map((notifb, i) => notifb.id === notif.id && __privateGet(this, _history).splice(i, 1));
    __privateGet(this, _history).unshift({
      id: notif.id,
      appName: notif.appName,
      body: notif.body,
      summary: notif.summary,
      urgency: notif.urgency,
      appIcon: notif.appIcon,
      time: notif.time,
      image: notif.image ? notif.image : void 0
    });
    this.notify("history");
    this.emit("history-added", __privateGet(this, _history)[0]);
    onAdded && onAdded(notif);
  }
  async clearHistory() {
    __privateGet(this, _history).reverse().map((notif) => {
      __privateSet(this, _history, this.history.filter((n) => n.id !== notif.id));
      this.emit("history-removed", notif.id);
    });
    this.notify("history");
  }
  removeHistory(notif) {
    const notifId = typeof notif === "number" ? notif : notif.id;
    __privateSet(this, _history, __privateGet(this, _history).filter((item) => item.id !== notifId));
    this.notify("history");
    this.emit("history-removed", notifId);
  }
  addNotification(notif, onAdded) {
    for (let i = 0; i < __privateGet(this, _notifications).length; i++) {
      const item = __privateGet(this, _notifications)[i];
      if (item.id !== notif.id) continue;
      __privateGet(this, _notifications).splice(i, 1);
      this.emit("notification-replaced", item.id);
      break;
    }
    __privateGet(this, _notifications).unshift(notif);
    this.notify("notifications");
    this.emit("notification-added", notif);
    onAdded?.(notif);
  }
  removeNotification(notif) {
    const notificationId = notif instanceof AstalNotifd.Notification ? notif.id : notif;
    __privateGet(this, _notificationsOnHold).has(notificationId) && __privateGet(this, _notificationsOnHold).delete(notificationId);
    __privateSet(this, _notifications, __privateGet(this, _notifications).filter((item) => item.id !== notificationId));
    AstalNotifd.get_default().get_notification(notificationId)?.dismiss();
    this.notify("notifications");
    this.emit("notification-removed", notificationId);
  }
  getNotificationById(id) {
    return __privateGet(this, _notifications).filter((notif) => notif.id === id)?.[0];
  }
  holdNotification(notif) {
    notif = typeof notif === "number" ? this.getNotificationById(notif) : notif;
    if (!notif) return;
    __privateGet(this, _notificationsOnHold).add(notif.id);
  }
  toggleDoNotDisturb(value) {
    value = value ?? !AstalNotifd.get_default().dontDisturb;
    AstalNotifd.get_default().dontDisturb = value;
    return value;
  }
  getNotifd() {
    return AstalNotifd.get_default();
  }
};
_init2 = __decoratorStart(_a3);
_notifications = new WeakMap();
_history = new WeakMap();
_notificationsOnHold = new WeakMap();
_connections = new WeakMap();
__decorateElement(_init2, 2, "notifications", _notifications_dec, _Notifications);
__decorateElement(_init2, 2, "history", _history_dec, _Notifications);
__decorateElement(_init2, 1, "notificationAdded", _notificationAdded_dec, _Notifications);
__decorateElement(_init2, 1, "notificationRemoved", _notificationRemoved_dec, _Notifications);
__decorateElement(_init2, 1, "historyAdded", _historyAdded_dec, _Notifications);
__decorateElement(_init2, 1, "historyRemoved", _historyRemoved_dec, _Notifications);
__decorateElement(_init2, 1, "notificationReplaced", _notificationReplaced_dec, _Notifications);
__decorateElement(_init2, 5, "historyLimit", _historyLimit_dec, _Notifications);
_Notifications = __decorateElement(_init2, 0, "Notifications", _Notifications_decorators, _Notifications);
_Notifications.instance = null;
__runInitializers(_init2, 1, _Notifications);
var Notifications = _Notifications;

// scripts/config.ts
import GLib4 from "gi://GLib?version=2.0";
import Gio4 from "gi://Gio?version=2.0";
import AstalNotifd2 from "gi://AstalNotifd";
var _entries_dec, _a4, _Config_decorators, _init3, _file, _entries;
_Config_decorators = [register({ GTypeName: "Config" })];
var _Config = class _Config extends (_a4 = GObject.Object, _entries_dec = [getter(Object)], _a4) {
  constructor(filePath) {
    super();
    __runInitializers(_init3, 5, this);
    this.defaultFile = Gio4.File.new_for_path(
      `${GLib4.get_user_config_dir()}/colorshell/config.json`
    );
    /** unmodified object with default entries. User-values are stored 
    * in the `entries` field */
    this.defaults = {
      notifications: {
        timeout_low: 4e3,
        timeout_normal: 6e3,
        timeout_critical: 0
      },
      night_light: {
        save_on_shutdown: true
      },
      workspaces: {
        always_show_id: false,
        enable_helper: true
      },
      clock: {
        date_format: "%A %d, %H:%M"
      },
      misc: {
        play_bell_on_volume_change: true
      }
    };
    __privateAdd(this, _file);
    __privateAdd(this, _entries, this.defaults);
    this.timeout = void 0;
    __privateSet(this, _file, typeof filePath === "string" ? Gio4.File.new_for_path(filePath) : filePath ?? this.defaultFile);
    if (!__privateGet(this, _file).query_exists(null)) {
      __privateGet(this, _file).make_directory_with_parents(null);
      __privateGet(this, _file).delete(null);
      __privateGet(this, _file).create_readwrite_async(
        Gio4.FileCreateFlags.NONE,
        GLib4.PRIORITY_DEFAULT,
        null,
        (_, asyncRes) => {
          const ioStream = __privateGet(this, _file).create_readwrite_finish(asyncRes);
          ioStream.outputStream.write_bytes_async(
            GLib4.Bytes.new(encoder.encode(JSON.stringify(this.entries, void 0, 4))),
            GLib4.PRIORITY_DEFAULT,
            null,
            (_2, asyncRes2) => {
              const writtenBytes = ioStream.outputStream.write_bytes_finish(asyncRes2);
              if (!writtenBytes)
                Notifications.getDefault().sendNotification({
                  appName: "colorshell",
                  summary: "Write error",
                  body: `Couldn't write default configuration file to "${__privateGet(this, _file).get_path()}"`
                });
            }
          );
        }
      );
    }
    monitorFile(
      __privateGet(this, _file).get_path(),
      () => {
        if (this.timeout) return;
        this.timeout = timeout(500, () => this.timeout = void 0);
        if (__privateGet(this, _file).query_exists(null)) {
          this.timeout?.cancel();
          this.timeout = true;
          this.readFile().finally(() => this.timeout = void 0);
          return;
        }
        Notifications.getDefault().sendNotification({
          appName: "colorshell",
          summary: "Config error",
          body: `Could not hot-reload configuration: config file not found in \`${__privateGet(this, _file).get_path()}\`, last valid configuration is being used. Maybe it got deleted?`
        });
      }
    );
  }
  get entries() {
    return __privateGet(this, _entries);
  }
  get file() {
    return __privateGet(this, _file);
  }
  static getDefault() {
    if (!this.instance)
      this.instance = new _Config();
    return this.instance;
  }
  async readFile() {
    await readFileAsync(__privateGet(this, _file).get_path()).then((content) => {
      let config;
      try {
        config = JSON.parse(content);
      } catch (e) {
        Notifications.getDefault().sendNotification({
          urgency: AstalNotifd2.Urgency.NORMAL,
          appName: "colorshell",
          summary: "Config parsing error",
          body: `An error occurred while parsing colorshell's config file: 
File: ${__privateGet(this, _file).get_path()}
${e.message}
${e.stack}`
        });
      }
      if (!config) return;
      for (const k of Object.keys(this.entries)) {
        if (config[k] === void 0)
          return;
        this.entries[k] = config[k];
      }
      this.notify("entries");
    }).catch((e) => {
      Notifications.getDefault().sendNotification({
        urgency: AstalNotifd2.Urgency.NORMAL,
        appName: "colorshell",
        summary: "Config read error",
        body: `An error occurred while reading colorshell's config file: 
File: ${`${__privateGet(this, _file).get_path()}
${e.message ? `${e.message}
` : ""}${e.stack}`.replace(/[<>]/g, "\\&")}`
      });
    });
  }
  bindProperty(propertyPath, expectType) {
    return new Accessor(() => this.getProperty(propertyPath, expectType), (callback) => {
      const id = this.connect("notify::entries", () => callback());
      return () => this.disconnect(id);
    });
  }
  getProperty(path, expectType) {
    return this._getProperty(path, this.entries, expectType);
  }
  getPropertyDefault(path, expectType) {
    return this._getProperty(path, this.defaults, expectType);
  }
  _getProperty(path, entries2, expectType) {
    let property2 = entries2;
    const pathArray = path.split(".").filter((str) => str);
    for (let i = 0; i < pathArray.length; i++) {
      const currentPath = pathArray[i];
      property2 = property2[currentPath];
    }
    if (expectType !== "any" && typeof property2 !== expectType) {
      console.error(`Config: property with path \`${path}\` is either \`undefined\` or not in the expected value type \`${expectType}\`, returning default value`);
      property2 = this.defaults;
      for (let i = 0; i < pathArray.length; i++) {
        const currentPath = pathArray[i];
        property2 = property2[currentPath];
      }
    }
    if (expectType !== "any" && typeof property2 !== expectType) {
      console.error(`Config: property with path \`${path}\` not found in defaults/user-entries, returning \`undefined\``);
      property2 = void 0;
    }
    return property2;
  }
};
_init3 = __decoratorStart(_a4);
_file = new WeakMap();
_entries = new WeakMap();
__decorateElement(_init3, 2, "entries", _entries_dec, _Config);
_Config = __decorateElement(_init3, 0, "Config", _Config_decorators, _Config);
_Config.instance = void 0;
__runInitializers(_init3, 1, _Config);
var Config = _Config;

// widget/Separator.tsx
function Separator(props = {
  orientation: Gtk.Orientation.HORIZONTAL
}) {
  props.alpha = props.alpha ? props.alpha > 1 ? props.alpha / 100 : props.alpha : 1;
  props.orientation = props.orientation ?? Gtk.Orientation.HORIZONTAL;
  return /* @__PURE__ */ jsx(
    Gtk.Box,
    {
      name: "separator",
      vexpand: props.orientation === Gtk.Orientation.HORIZONTAL,
      hexpand: props.orientation === Gtk.Orientation.VERTICAL,
      class: `separator ${props.orientation === Gtk.Orientation.VERTICAL ? "vertical" : "horizontal"}`,
      visible: props.visible,
      css: `.vertical { padding: ${props.spacing ?? 0}px ${props.margin ?? 7}px; }
        .horizontal { padding: ${props.margin ?? 4}px ${props.spacing ?? 0}px; }`,
      children: /* @__PURE__ */ jsx(
        Gtk.Box,
        {
          class: `${props.orientation === Gtk.Orientation.VERTICAL ? "vertical" : "horizontal"} ${props.class ?? ""}`,
          vexpand: props.orientation === Gtk.Orientation.HORIZONTAL,
          hexpand: props.orientation === Gtk.Orientation.VERTICAL,
          css: `* {
              background: ${props.cssColor ?? "lightgray"};
              opacity: ${props.alpha};
            }
            .horizontal { min-width: ${props.size ?? 1}px; }
            .vertical { min-height: ${props.size ?? 1}px; }`
        }
      )
    }
  );
}

// widget/bar/Workspaces.tsx
var [showNumbers, setShowNumbers] = createState(false);
var showWorkspaceNumber = (show) => setShowNumbers(show);
var Workspaces = () => {
  const workspaces = createBinding(AstalHyprland2.get_default(), "workspaces"), defaultWorkspaces = workspaces.as((wss) => wss.filter((ws) => ws.id > 0).sort((a, b) => a.id - b.id)), specialWorkspaces = workspaces.as((wss) => wss.filter((ws) => ws.id < 0).sort((a, b) => a.id - b.id));
  return /* @__PURE__ */ jsxs(Gtk.Box, { class: "workspaces-row", children: [
    /* @__PURE__ */ jsx(Gtk.Box, { class: "special-workspaces", spacing: 4, children: /* @__PURE__ */ jsx(For, { each: specialWorkspaces, children: (ws) => /* @__PURE__ */ jsx(
      Gtk.Button,
      {
        class: "workspace",
        tooltipText: createBinding(ws, "name").as((name) => {
          name = name.replace(/^special\:/, "");
          return name.charAt(0).toUpperCase().concat(name.substring(1, name.length));
        }),
        onClicked: () => AstalHyprland2.get_default().dispatch(
          "togglespecialworkspace",
          ws.name.replace(/^special[:]/, "")
        ),
        children: /* @__PURE__ */ jsx(With, { value: createBinding(ws, "lastClient"), children: (lastClient) => lastClient && /* @__PURE__ */ jsx(
          Gtk.Image,
          {
            class: "last-client",
            iconName: createBinding(lastClient, "initialClass").as((initialClass) => getSymbolicIcon(initialClass) ?? getAppIcon(initialClass) ?? "application-x-executable-symbolic")
          }
        ) })
      }
    ) }) }),
    /* @__PURE__ */ jsx(
      Separator,
      {
        alpha: 0.2,
        orientation: Gtk.Orientation.HORIZONTAL,
        margin: 12,
        spacing: 8,
        visible: variableToBoolean(specialWorkspaces)
      }
    ),
    /* @__PURE__ */ jsx(Gtk.Box, { class: "default-workspaces", spacing: 4, $: (self) => {
      const conns = /* @__PURE__ */ new Map();
      const controllerScroll = Gtk.EventControllerScroll.new(
        Gtk.EventControllerScrollFlags.VERTICAL
      ), controllerMotion = Gtk.EventControllerMotion.new();
      self.add_controller(controllerScroll);
      self.add_controller(controllerMotion);
      conns.set(controllerScroll, controllerScroll.connect("scroll", (_, _dx, dy) => {
        dy > 0 ? AstalHyprland2.get_default().dispatch("workspace", "e-1") : AstalHyprland2.get_default().dispatch("workspace", "e+1");
        return true;
      }));
      conns.set(controllerMotion, [
        controllerMotion.connect("enter", () => setShowNumbers(true)),
        controllerMotion.connect("leave", () => setShowNumbers(false))
      ]);
      conns.set(self, self.connect("destroy", () => conns.forEach(
        (ids, obj) => Array.isArray(ids) ? ids.forEach((id) => obj.disconnect(id)) : obj.disconnect(ids)
      )));
    }, children: /* @__PURE__ */ jsx(For, { each: defaultWorkspaces, children: (ws, i) => {
      const showId = createComputed([
        Config.getDefault().bindProperty("workspaces.always_show_id", "boolean").as(Boolean),
        Config.getDefault().bindProperty("workspaces.enable_helper", "boolean").as(Boolean),
        showNumbers,
        i
      ], (alwaysShowIds, enableHelper, showIds, i2) => {
        if (enableHelper && !alwaysShowIds) {
          const previousWorkspace = defaultWorkspaces.get()[i2 - 1];
          const nextWorkspace = defaultWorkspaces.get()[i2 + 1];
          if (defaultWorkspaces.get().filter((_, ii) => ii < i2).length > 0 && previousWorkspace?.id < ws.id - 1 || defaultWorkspaces.get().filter((_, ii) => ii > i2).length > 0 && nextWorkspace?.id > ws.id + 1) {
            return true;
          }
        }
        return alwaysShowIds || showIds;
      });
      return /* @__PURE__ */ jsx(Gtk.Button, { class: createComputed(
        [
          createBinding(AstalHyprland2.get_default(), "focusedWorkspace"),
          showId
        ],
        (focusedWs, showWsNumbers) => `workspace ${focusedWs.id === ws.id ? "focus" : ""} ${showWsNumbers ? "show" : ""}`
      ), tooltipText: createComputed(
        [
          createBinding(ws, "lastClient"),
          createBinding(AstalHyprland2.get_default(), "focusedWorkspace")
        ],
        (lastClient, focusWs) => focusWs.id === ws.id ? "" : `workspace ${ws.id}${lastClient ? ` - ${!lastClient.title.toLowerCase().includes(lastClient.class) ? `${lastClient.get_class()}: ` : ""} ${lastClient.title}` : ""}`
      ), onClicked: () => ws.focus(), children: /* @__PURE__ */ jsx(With, { value: createBinding(ws, "lastClient"), children: (lastClient) => /* @__PURE__ */ jsxs(Gtk.Box, { class: "last-client", hexpand: true, children: [
        /* @__PURE__ */ jsx(
          Gtk.Revealer,
          {
            transitionDuration: 200,
            revealChild: showId,
            transitionType: Gtk.RevealerTransitionType.SLIDE_LEFT,
            hexpand: true,
            children: /* @__PURE__ */ jsx(
              Gtk.Label,
              {
                label: createBinding(ws, "id").as(String),
                class: "id",
                hexpand: true
              }
            )
          }
        ),
        lastClient && /* @__PURE__ */ jsx(
          Gtk.Image,
          {
            class: "last-client-icon",
            iconName: createBinding(lastClient, "initialClass").as((initialClass) => getSymbolicIcon(initialClass) ?? getAppIcon(initialClass) ?? "application-x-executable-symbolic"),
            hexpand: true,
            vexpand: true
          }
        )
      ] }) }) });
    } }) })
  ] });
};

// widget/bar/FocusedClient.tsx
import AstalHyprland3 from "gi://AstalHyprland";
import Pango from "gi://Pango?version=1.0";
var hyprland = AstalHyprland3.get_default();
hyprland.connect("client-added", () => hyprland.notify("focused-client"));
var FocusedClient = () => {
  const focusedClient = createBinding(hyprland, "focusedClient");
  return /* @__PURE__ */ jsx(
    Gtk.Box,
    {
      class: "focused-client",
      visible: variableToBoolean(createBinding(hyprland, "focusedClient")),
      children: /* @__PURE__ */ jsx(With, { value: focusedClient, children: (focusedClient2) => focusedClient2 && /* @__PURE__ */ jsxs(Gtk.Box, { children: [
        /* @__PURE__ */ jsx(Gtk.Image, { iconName: createBinding(focusedClient2, "class").as((clss) => getSymbolicIcon(clss) ?? getAppIcon(clss) ?? getAppIcon(focusedClient2.initialClass) ?? "application-x-executable-symbolic"), vexpand: true }),
        /* @__PURE__ */ jsxs(
          Gtk.Box,
          {
            valign: Gtk.Align.CENTER,
            class: "text-content",
            orientation: Gtk.Orientation.VERTICAL,
            children: [
              /* @__PURE__ */ jsx(
                Gtk.Label,
                {
                  class: "class",
                  xalign: 0,
                  maxWidthChars: 55,
                  ellipsize: Pango.EllipsizeMode.END,
                  label: createBinding(focusedClient2, "class"),
                  tooltipText: createBinding(focusedClient2, "class")
                }
              ),
              /* @__PURE__ */ jsx(
                Gtk.Label,
                {
                  class: "title",
                  xalign: 0,
                  maxWidthChars: 50,
                  ellipsize: Pango.EllipsizeMode.END,
                  label: createBinding(focusedClient2, "title"),
                  tooltipText: createBinding(focusedClient2, "title")
                }
              )
            ]
          }
        )
      ] }) })
    }
  );
};

// scripts/clipboard.ts
import GLib5 from "gi://GLib?version=2.0";
import Gio5 from "gi://Gio?version=2.0";
var _history_dec2, _wiped_dec, _copied_dec, _a5, _Clipboard_decorators, _dbFile, _dbMonitor, _updateDone, _history2, _changesTimeout, _ignoreChanges, _init4;
_Clipboard_decorators = [register({ GTypeName: "Clipboard" })];
var _Clipboard = class _Clipboard extends (_a5 = GObject.Object, _copied_dec = [signal(GObject.TYPE_JSOBJECT)], _wiped_dec = [signal()], _history_dec2 = [getter(Array)], _a5) {
  constructor() {
    super();
    __runInitializers(_init4, 5, this);
    __privateAdd(this, _dbFile);
    __privateAdd(this, _dbMonitor);
    __privateAdd(this, _updateDone, false);
    __privateAdd(this, _history2, new Array());
    __privateAdd(this, _changesTimeout);
    __privateAdd(this, _ignoreChanges, false);
    __privateSet(this, _dbFile, this.getCliphistDatabase());
    __privateSet(this, _dbMonitor, monitorFile(__privateGet(this, _dbFile).get_path(), () => {
      if (__privateGet(this, _ignoreChanges) || __privateGet(this, _changesTimeout))
        return;
      __privateSet(this, _changesTimeout, timeout(300, () => __privateSet(this, _changesTimeout, void 0)));
      if (__privateGet(this, _updateDone)) {
        this.updateDatabase();
        return;
      }
      this.init();
    }));
    if (__privateGet(this, _dbFile).query_exists(null)) {
      this.init();
      return;
    }
    console.log("Clipboard: cliphist database not found. Try copying something first!");
  }
  copied(_item) {
  }
  wiped() {
  }
  get history() {
    return __privateGet(this, _history2);
  }
  vfunc_dispose() {
    __privateGet(this, _dbMonitor).cancel();
    __privateGet(this, _dbMonitor).unref();
  }
  init() {
    console.log("Clipboard: Starting to read cliphist history...");
    this.updateDatabase().then(() => {
      console.log("Clipboard: Done reading cliphist history!");
    }).catch(
      (err) => console.error(`Clipboard: An error occurred while reading cliphist history. Stderr: ${err}`)
    );
  }
  async copyAsync(content) {
    await execAsync(`wl-copy "${content}"`).catch((err) => {
      console.error(`Clipboard: Couldn't copy text using wl-copy. Stderr:
	${err.message} | Stack:
		${err.stack}`);
    });
  }
  async selectItem(itemToSelect) {
    const item = await this.getItemContent(itemToSelect);
    let res = true;
    if (item)
      await this.copyAsync(item).catch(() => res = false);
    return res;
  }
  /** Gets history item's content by its ID.
      * @returns the clipboard item's content */
  async getItemContent(item) {
    const id = typeof item === "number" ? item : item.id;
    const cmd = Gio5.Subprocess.new(
      ["cliphist", "decode", id.toString()],
      Gio5.SubprocessFlags.STDOUT_PIPE | Gio5.SubprocessFlags.STDERR_PIPE
    );
    const [, stdout, stderr] = cmd.communicate_utf8(null, null);
    if (stderr) {
      console.error(`Clipboard: An error occurred while getting item content. Stderr:
${stderr}`);
      return;
    }
    return stdout;
  }
  /** Searches for the cliphist database file 
    * Will not work if cliphist config file is not on default path */
  getCliphistDatabase() {
    const path = GLib5.getenv("CLIPHIST_DB_PATH");
    if (path != null)
      return Gio5.File.new_for_path(path);
    const confFile = Gio5.File.new_for_path(`${GLib5.get_user_config_dir()}/cliphist/config`);
    if (confFile.query_exists(null)) {
      const cliphistConf = readFile(confFile.get_path());
      for (const line of cliphistConf.split("\n").map((l) => l.trim())) {
        if (line.startsWith("#"))
          continue;
        const [key, value] = line.split("s", 1);
        if (key === "db-path") {
          return Gio5.File.new_for_path(value.trimStart());
        }
      }
    }
    return Gio5.File.new_for_path(`${GLib5.get_user_cache_dir()}/cliphist/db`);
  }
  getContentType(preview) {
    return /^\[\[.*binary data.*x.*\]\]$/u.test(preview) ? 1 /* IMAGE */ : 0 /* TEXT */;
  }
  async wipeHistory(noExec) {
    if (noExec) {
      __privateSet(this, _history2, []);
      this.emit("wiped");
      return;
    }
    __privateSet(this, _ignoreChanges, true);
    await execAsync("cliphist wipe").then(() => {
      __privateSet(this, _history2, []);
      this.emit("wiped");
    }).catch(
      (err) => console.error(`Clipboard: An error occurred on cliphist database wipe. Stderr: ${err.message ? `${err.message}
` : ""}${err.stack}`)
    ).finally(() => __privateSet(this, _ignoreChanges, false));
  }
  async updateDatabase() {
    const proc = Gio5.Subprocess.new(
      ["cliphist", "list"],
      Gio5.SubprocessFlags.STDOUT_PIPE | Gio5.SubprocessFlags.STDERR_PIPE
    );
    proc.communicate_utf8_async(null, null, (_, asyncRes) => {
      const [success, stdout, stderr] = proc.communicate_utf8_finish(asyncRes);
      if (!success || stderr) {
        console.error("Clipboard: Couldn't communicate with cliphist! Is it installed?");
        return;
      }
      if (!stdout.trim()) {
        this.wipeHistory(true);
        this.notify("history");
        return;
      }
      const items = stdout.split("\n");
      if (__privateGet(this, _updateDone)) {
        const [id, preview] = items[0].split("	");
        const clipItem = {
          id: Number.parseInt(id),
          preview,
          type: this.getContentType(preview)
        };
        __privateGet(this, _history2).unshift(clipItem);
        this.emit("copied", clipItem);
        this.notify("history");
        return;
      }
      for (const item of items) {
        if (!item) continue;
        const [id, preview] = item.split("	");
        const clipItem = {
          id: Number.parseInt(id),
          preview,
          type: this.getContentType(preview)
        };
        __privateGet(this, _history2).push(clipItem);
        this.emit("copied", clipItem);
        this.notify("history");
      }
      __privateSet(this, _updateDone, true);
    });
  }
  static getDefault() {
    if (!this.instance)
      this.instance = new _Clipboard();
    return this.instance;
  }
};
_init4 = __decoratorStart(_a5);
_dbFile = new WeakMap();
_dbMonitor = new WeakMap();
_updateDone = new WeakMap();
_history2 = new WeakMap();
_changesTimeout = new WeakMap();
_ignoreChanges = new WeakMap();
__decorateElement(_init4, 1, "copied", _copied_dec, _Clipboard);
__decorateElement(_init4, 1, "wiped", _wiped_dec, _Clipboard);
__decorateElement(_init4, 2, "history", _history_dec2, _Clipboard);
_Clipboard = __decorateElement(_init4, 0, "Clipboard", _Clipboard_decorators, _Clipboard);
_Clipboard.instance = void 0;
__runInitializers(_init4, 1, _Clipboard);
var Clipboard = _Clipboard;

// widget/bar/Media.tsx
import AstalMpris from "gi://AstalMpris";
import Pango2 from "gi://Pango?version=1.0";
var dummyPlayer = AstalMpris.Player.new("colorshellDummy");
var [player, setPlayer] = createState(dummyPlayer);
var Media = () => {
  const connections2 = /* @__PURE__ */ new Map();
  if (AstalMpris.get_default().players[0])
    setPlayer(AstalMpris.get_default().players[0]);
  connections2.set(AstalMpris.get_default(), [
    AstalMpris.get_default().connect("player-added", (_, player2) => player2.available && setPlayer(player2)),
    AstalMpris.get_default().connect("player-closed", (_, closedPlayer) => {
      const players = AstalMpris.get_default().players.filter((pl) => pl?.available);
      if (players.length > 0) {
        setPlayer(players[0]);
        return;
      } else setPlayer(dummyPlayer);
    })
  ]);
  return /* @__PURE__ */ jsxs(
    Gtk.Box,
    {
      class: "media",
      visible: player((pl) => pl.available),
      $: (self) => {
        const gestureClick = Gtk.GestureClick.new(), controllerMotion = Gtk.EventControllerMotion.new(), controllerScroll = Gtk.EventControllerScroll.new(
          Gtk.EventControllerScrollFlags.VERTICAL
        );
        self.add_controller(gestureClick);
        self.add_controller(controllerMotion);
        self.add_controller(controllerScroll);
        connections2.set(gestureClick, gestureClick.connect("released", () => Windows.getDefault().toggle("center-window")));
        connections2.set(
          controllerScroll,
          controllerScroll.connect("scroll", (_, _dx, dy) => {
            if (AstalMpris.get_default().players.length === 1 && player.get()?.busName === AstalMpris.get_default().players[0].busName)
              return true;
            const players = AstalMpris.get_default().players;
            for (let i = 0; i < players.length; i++) {
              const pl = players[i];
              if (pl.busName !== player.get().busName)
                continue;
              if (dy > 0 && players[i - 1]) {
                setPlayer(players[i - 1]);
                break;
              }
              if (dy < 0 && players[i + 1]) {
                setPlayer(players[i + 1]);
                break;
              }
            }
            return true;
          })
        );
        connections2.set(controllerMotion, [
          controllerMotion.connect("enter", () => {
            const revealer = self.get_last_child();
            revealer.set_reveal_child(true);
          }),
          controllerMotion.connect("leave", () => {
            const revealer = self.get_last_child();
            revealer.set_reveal_child(false);
          })
        ]);
        connections2.set(self, self.connect(
          "destroy",
          () => connections2.forEach((ids, obj) => Array.isArray(ids) ? ids.forEach((id) => obj.disconnect(id)) : obj.disconnect(ids))
        ));
      },
      children: [
        /* @__PURE__ */ jsx(Gtk.Box, { spacing: 4, visible: player((pl) => pl.available), children: /* @__PURE__ */ jsx(With, { value: player((pl) => pl.available), children: (available) => available && /* @__PURE__ */ jsxs(Gtk.Box, { children: [
          /* @__PURE__ */ jsx(
            Gtk.Image,
            {
              class: "player-icon",
              iconName: createBinding(player.get(), "busName").as((busName) => {
                const splitName = busName.split(".").filter((str) => str !== "" && !str.toLowerCase().includes("instance"));
                return getSymbolicIcon(splitName[splitName.length - 1]) ? getSymbolicIcon(splitName[splitName.length - 1]) : "folder-music-symbolic";
              })
            }
          ),
          /* @__PURE__ */ jsx(
            Gtk.Label,
            {
              class: "title",
              label: createBinding(player.get(), "title").as((title) => title ?? "No Title"),
              maxWidthChars: 20,
              ellipsize: Pango2.EllipsizeMode.END
            }
          ),
          /* @__PURE__ */ jsx(
            Separator,
            {
              orientation: Gtk.Orientation.HORIZONTAL,
              size: 1,
              margin: 5,
              alpha: 0.3,
              spacing: 6
            }
          ),
          /* @__PURE__ */ jsx(
            Gtk.Label,
            {
              class: "artist",
              label: createBinding(player.get(), "artist").as((artist) => artist ?? "No Artist"),
              maxWidthChars: 18,
              ellipsize: Pango2.EllipsizeMode.END
            }
          )
        ] }) }) }),
        /* @__PURE__ */ jsx(
          Gtk.Revealer,
          {
            transitionType: Gtk.RevealerTransitionType.SLIDE_RIGHT,
            transitionDuration: 260,
            revealChild: false,
            children: /* @__PURE__ */ jsx(With, { value: player((pl) => pl.available), children: (available) => available && /* @__PURE__ */ jsxs(Gtk.Box, { class: "media-controls button-row", children: [
              /* @__PURE__ */ jsx(
                Gtk.Button,
                {
                  class: "link",
                  iconName: "edit-paste-symbolic",
                  tooltipText: "Copy link to Clipboard",
                  onClicked: () => {
                    execAsync(`playerctl --player=${player.get().busName.replace(/^org\.mpris\.MediaPlayer2\./i, "")} metadata xesam:url`).then((link) => {
                      Clipboard.getDefault().copyAsync(link);
                    }).catch((e) => {
                      console.error(`Media: couldn't copy media link. Stderr: 
${e.message}
${e.stack}`);
                    });
                  }
                }
              ),
              /* @__PURE__ */ jsx(
                Gtk.Button,
                {
                  class: "previous",
                  iconName: "media-skip-backward-symbolic",
                  tooltipText: "Previous",
                  onClicked: () => player.get().canGoPrevious && player.get().previous()
                }
              ),
              /* @__PURE__ */ jsx(
                Gtk.Button,
                {
                  class: "play-pause",
                  iconName: createBinding(player.get(), "playbackStatus").as((status) => status === AstalMpris.PlaybackStatus.PAUSED ? "media-playback-start-symbolic" : "media-playback-pause-symbolic"),
                  tooltipText: createBinding(player.get(), "playbackStatus").as((status) => status === AstalMpris.PlaybackStatus.PAUSED ? "Play" : "Pause"),
                  onClicked: () => player.get().play_pause()
                }
              ),
              /* @__PURE__ */ jsx(
                Gtk.Button,
                {
                  class: "next",
                  iconName: "media-skip-forward-symbolic",
                  tooltipText: "Next",
                  onClicked: () => player.get().canGoNext && player.get().next()
                }
              )
            ] }) })
          }
        )
      ]
    }
  );
};

// i18n/intl.ts
import GLib6 from "gi://GLib?version=2.0";
var i18nKeys = {
  "en_US": (await Promise.resolve().then(() => (init_en_US(), en_US_exports))).default,
  "pt_BR": (await Promise.resolve().then(() => (init_pt_BR(), pt_BR_exports))).default,
  "ru_RU": (await Promise.resolve().then(() => (init_ru_RU(), ru_RU_exports))).default
};
var languages = Object.keys(i18nKeys);
var language = getSystemLanguage();
function getSystemLanguage() {
  const sysLanguage = GLib6.getenv("LANG") || GLib6.getenv("LANGUAGE");
  if (!sysLanguage) {
    console.log(`[WARNING] Couldn't get system language, fallback to default ${languages[0]}`);
    console.log("[TIP] Please set the LANG or LANGUAGE environment variable");
    return languages[0];
  }
  return sysLanguage.split(".")[0];
}
function tr(key) {
  let result = i18nKeys[language], defResult = i18nKeys[languages[0]];
  for (const keyString of key.split(".")) {
    result = result[keyString];
    defResult = defResult[keyString];
  }
  return typeof result == "string" ? result : typeof defResult == "string" ? defResult : 'not found / is not of type "string"';
}

// widget/bar/Apps.tsx
var Apps = () => /* @__PURE__ */ jsx(
  Gtk.Button,
  {
    class: createBinding(Windows.getDefault(), "openWindows").as(
      (openWindows) => `apps ${Object.hasOwn(openWindows, "apps-window") ? "open" : ""}`
    ),
    $: (self) => {
      const conns = [
        self.connect("clicked", (_) => Windows.getDefault().open("apps-window")),
        self.connect("destroy", (_) => conns.forEach((id) => self.disconnect(id)))
      ];
    },
    iconName: "applications-other-symbolic",
    halign: Gtk.Align.CENTER,
    hexpand: true,
    tooltipText: tr("apps")
  }
);

// widget/bar/Clock.tsx
var Clock = () => /* @__PURE__ */ jsx(
  Gtk.Button,
  {
    class: createBinding(Windows.getDefault(), "openWindows").as((wins) => `clock ${Object.hasOwn(wins, "center-window") ? "open" : ""}`),
    $: (self) => {
      const conns = [
        self.connect("clicked", (_) => Windows.getDefault().toggle("center-window")),
        self.connect("destroy", (_) => conns.forEach((id) => self.disconnect(id)))
      ];
    },
    label: time(
      (dt) => dt.format(
        Config.getDefault().getProperty("clock.date_format", "string")
      ) ?? "An error occurred"
    )
  }
);

// scripts/recording.ts
import GLib7 from "gi://GLib?version=2.0";
import Gio6 from "gi://Gio?version=2.0";
var _extension_dec, _path_dec, _recording_dec, _startedAt_dec, _stopped_dec, _started_dec, _a6, _Recording_decorators, _init5, _recording, _path, _extension, _recordAudio, _area, _startedAt, _process, _output;
_Recording_decorators = [register({ GTypeName: "Recording" })];
var _Recording = class _Recording extends (_a6 = GObject.Object, _started_dec = [signal()], _stopped_dec = [signal()], _startedAt_dec = [getter(Number)], _recording_dec = [getter(Boolean)], _path_dec = [getter(String)], _extension_dec = [getter(String)], _a6) {
  constructor() {
    super();
    __runInitializers(_init5, 5, this);
    __privateAdd(this, _recording, false);
    __privateAdd(this, _path, "~/Recordings");
    /** Default extension: mp4(h264) */
    __privateAdd(this, _extension, "mp4");
    __privateAdd(this, _recordAudio, false);
    __privateAdd(this, _area, null);
    __privateAdd(this, _startedAt, -1);
    __privateAdd(this, _process, null);
    __privateAdd(this, _output, null);
    const videosDir = GLib7.get_user_special_dir(GLib7.UserDirectory.DIRECTORY_VIDEOS);
    if (videosDir) __privateSet(this, _path, `${videosDir}/Recordings`);
  }
  started() {
  }
  stopped() {
  }
  get startedAt() {
    return __privateGet(this, _startedAt);
  }
  get recording() {
    return __privateGet(this, _recording);
  }
  set recording(newValue) {
    !newValue && __privateGet(this, _recording) ? this.stopRecording() : this.startRecording(__privateGet(this, _area) || void 0);
    __privateSet(this, _recording, newValue);
    this.notify("recording");
  }
  get path() {
    return __privateGet(this, _path);
  }
  set path(newPath) {
    if (this.recording) return;
    __privateSet(this, _path, newPath);
    this.notify("path");
  }
  get extension() {
    return __privateGet(this, _extension);
  }
  set extension(newExt) {
    if (this.recording) return;
    __privateSet(this, _extension, newExt);
    this.notify("extension");
  }
  /** Recording output file name. %NULL if screen is not being recorded */
  get output() {
    return __privateGet(this, _output);
  }
  /** Currently unsupported property */
  get recordAudio() {
    return __privateGet(this, _recordAudio);
  }
  set recordAudio(newValue) {
    if (this.recording) return;
    __privateSet(this, _recordAudio, newValue);
    this.notify("record-audio");
  }
  static getDefault() {
    if (!this.instance)
      this.instance = new _Recording();
    return this.instance;
  }
  startRecording(area) {
    if (this.recording)
      throw new Error("Screen Recording is already running!");
    __privateSet(this, _output, `${time.get().format("%Y-%m-%d-%H%M%S")}_rec.${this.extension || "mp4"}`);
    __privateSet(this, _recording, true);
    this.notify("recording");
    this.emit("started");
    makeDirectory(this.path);
    const cancellable = Gio6.Cancellable.new();
    cancellable.cancel = () => {
    };
    const areaString = `${area?.x ?? 0},${area?.y ?? 0} ${area?.width ?? 1}x${area?.height ?? 1}`;
    __privateSet(this, _process, Gio6.Subprocess.new([
      "wf-recorder",
      ...area ? [`-g`, areaString] : [],
      "-f",
      `${this.path}/${this.output}`
    ], Gio6.SubprocessFlags.STDOUT_PIPE | Gio6.SubprocessFlags.STDERR_PIPE));
    __privateGet(this, _process).wait_async(cancellable, () => {
      this.stopRecording();
    });
    __privateSet(this, _startedAt, time.get().to_unix());
  }
  stopRecording() {
    if (!__privateGet(this, _process)) return;
    !__privateGet(this, _process).get_if_exited() && execAsync([
      "kill",
      "-s",
      "SIGTERM",
      __privateGet(this, _process).get_identifier()
    ]);
    const path = __privateGet(this, _path);
    const output = __privateGet(this, _output);
    __privateSet(this, _process, null);
    __privateSet(this, _recording, false);
    __privateSet(this, _startedAt, -1);
    __privateSet(this, _output, null);
    this.notify("recording");
    this.emit("stopped");
    Notifications.getDefault().sendNotification({
      actions: [
        {
          text: "View",
          onAction: () => {
            execAsync(["nautilus", "-s", output, path]);
          }
        },
        {
          text: "Open",
          onAction: () => {
            execAsync(["xdg-open", `${path}/${output}`]);
          }
        }
      ],
      appName: "Screen Recording",
      summary: "Screen Recording saved",
      body: `Saved as ${path}/${output}`
    });
  }
};
_init5 = __decoratorStart(_a6);
_recording = new WeakMap();
_path = new WeakMap();
_extension = new WeakMap();
_recordAudio = new WeakMap();
_area = new WeakMap();
_startedAt = new WeakMap();
_process = new WeakMap();
_output = new WeakMap();
__decorateElement(_init5, 1, "started", _started_dec, _Recording);
__decorateElement(_init5, 1, "stopped", _stopped_dec, _Recording);
__decorateElement(_init5, 2, "startedAt", _startedAt_dec, _Recording);
__decorateElement(_init5, 2, "recording", _recording_dec, _Recording);
__decorateElement(_init5, 2, "path", _path_dec, _Recording);
__decorateElement(_init5, 2, "extension", _extension_dec, _Recording);
_Recording = __decorateElement(_init5, 0, "Recording", _Recording_decorators, _Recording);
_Recording.instance = void 0;
__runInitializers(_init5, 1, _Recording);
var Recording = _Recording;

// widget/bar/Status.tsx
import AstalBluetooth from "gi://AstalBluetooth";
import AstalNetwork from "gi://AstalNetwork";
var Status = () => /* @__PURE__ */ jsx(
  Gtk.Button,
  {
    class: createBinding(Windows.getDefault(), "openWindows").as((openWins) => Object.hasOwn(openWins, "control-center") ? "open status" : "status"),
    onClicked: () => Windows.getDefault().toggle("control-center"),
    children: /* @__PURE__ */ jsxs(Gtk.Box, { children: [
      /* @__PURE__ */ jsxs(Gtk.Box, { class: "volume-indicators", spacing: 5, children: [
        /* @__PURE__ */ jsx(
          VolumeStatus,
          {
            class: "sink",
            endpoint: Wireplumber.getDefault().getDefaultSink(),
            icon: createBinding(Wireplumber.getDefault().getDefaultSink(), "volumeIcon").as((icon) => !Wireplumber.getDefault().isMutedSink() && Wireplumber.getDefault().getSinkVolume() > 0 ? icon : "audio-volume-muted-symbolic")
          }
        ),
        /* @__PURE__ */ jsx(
          VolumeStatus,
          {
            class: "source",
            endpoint: Wireplumber.getDefault().getDefaultSource(),
            icon: createBinding(Wireplumber.getDefault().getDefaultSource(), "volumeIcon").as((icon) => !Wireplumber.getDefault().isMutedSource() && Wireplumber.getDefault().getSourceVolume() > 0 ? icon : "audio-volume-muted-symbolic")
          }
        )
      ] }),
      /* @__PURE__ */ jsx(
        Gtk.Revealer,
        {
          revealChild: createBinding(Recording.getDefault(), "recording"),
          transitionDuration: 500,
          transitionType: Gtk.RevealerTransitionType.SLIDE_LEFT,
          children: /* @__PURE__ */ jsxs(Gtk.Box, { children: [
            /* @__PURE__ */ jsx(
              Gtk.Image,
              {
                class: "recording state",
                iconName: "media-record-symbolic",
                css: "margin-right: 6px;"
              }
            ),
            /* @__PURE__ */ jsx(
              Gtk.Label,
              {
                class: "rec-time",
                label: createComputed([
                  createBinding(Recording.getDefault(), "recording"),
                  time
                ], (recording, dateTime) => {
                  if (!recording || !Recording.getDefault().startedAt)
                    return "...";
                  const startedAtSeconds = dateTime.to_unix() - Recording.getDefault().startedAt;
                  if (startedAtSeconds <= 0) return "00:00";
                  const minutes = Math.floor(startedAtSeconds / 60);
                  const seconds = Math.floor(startedAtSeconds % 60);
                  return `${minutes < 10 ? `0${minutes}` : minutes}:${seconds < 10 ? `0${seconds}` : seconds}`;
                })
              }
            )
          ] })
        }
      ),
      /* @__PURE__ */ jsx(StatusIcons, {})
    ] })
  }
);
function VolumeStatus(props) {
  return /* @__PURE__ */ jsxs(Gtk.Box, { spacing: 2, class: props.class, $: (self) => {
    const conns = /* @__PURE__ */ new Map();
    const controllerScroll = Gtk.EventControllerScroll.new(
      Gtk.EventControllerScrollFlags.VERTICAL
    );
    conns.set(controllerScroll, controllerScroll.connect("scroll", (_, _dx, dy) => {
      dy > 0 ? Wireplumber.getDefault().decreaseEndpointVolume(props.endpoint, 5) : Wireplumber.getDefault().increaseEndpointVolume(props.endpoint, 5);
    }));
    conns.set(self, self.connect("destroy", () => conns.forEach((id, obj) => obj.disconnect(id))));
  }, children: [
    props.icon && /* @__PURE__ */ jsx(Gtk.Image, { iconName: props.icon }),
    /* @__PURE__ */ jsx(Gtk.Label, { class: "volume", label: createBinding(props.endpoint, "volume").as((vol) => `${Math.floor(vol * 100)}%`) })
  ] });
}
function StatusIcons() {
  return /* @__PURE__ */ jsxs(Gtk.Box, { class: "status-icons", spacing: 8, children: [
    /* @__PURE__ */ jsx(
      Gtk.Image,
      {
        iconName: createComputed([
          createBinding(AstalBluetooth.get_default(), "isPowered"),
          createBinding(AstalBluetooth.get_default(), "isConnected")
        ], (powered, connected) => {
          return powered ? connected ? "bluetooth-active-symbolic" : "bluetooth-symbolic" : "bluetooth-disabled-symbolic";
        }),
        class: "bluetooth state",
        visible: createBinding(AstalBluetooth.get_default(), "adapter").as(Boolean)
      }
    ),
    /* @__PURE__ */ jsx(
      Gtk.Image,
      {
        iconName: createBinding(AstalNetwork.get_default(), "primary").as((primary) => {
          switch (primary) {
            case AstalNetwork.Primary.WIRED:
              return AstalNetwork.get_default().wired.get_icon_name();
            case AstalNetwork.Primary.WIFI:
              return AstalNetwork.get_default().wifi.get_icon_name();
          }
          return "network-no-route-symbolic";
        }),
        class: "network state",
        visible: createBinding(AstalNetwork.get_default(), "primary").as((primary) => primary !== AstalNetwork.Primary.UNKNOWN)
      }
    ),
    /* @__PURE__ */ jsxs(Gtk.Box, { children: [
      /* @__PURE__ */ jsx(
        Gtk.Image,
        {
          class: "bell state",
          iconName: createBinding(
            Notifications.getDefault().getNotifd(),
            "dontDisturb"
          ).as((dnd) => dnd ? "minus-circle-filled-symbolic" : "preferences-system-notifications-symbolic")
        }
      ),
      /* @__PURE__ */ jsx(
        Gtk.Image,
        {
          iconName: "circle-filled-symbolic",
          class: "notification-count",
          visible: variableToBoolean(createBinding(Notifications.getDefault(), "history"))
        }
      )
    ] })
  ] });
}

// window/Bar.tsx
var Bar = (mon) => {
  const widgetSpacing = 4;
  return /* @__PURE__ */ jsx(
    Astal.Window,
    {
      namespace: "top-bar",
      layer: Astal.Layer.TOP,
      anchor: Astal.WindowAnchor.TOP | Astal.WindowAnchor.LEFT | Astal.WindowAnchor.RIGHT,
      exclusivity: Astal.Exclusivity.EXCLUSIVE,
      heightRequest: 46,
      monitor: mon,
      visible: true,
      canFocus: false,
      children: /* @__PURE__ */ jsx(Gtk.Box, { class: "bar-container", children: /* @__PURE__ */ jsxs(Gtk.CenterBox, { class: "bar-centerbox", hexpand: true, children: [
        /* @__PURE__ */ jsxs(
          Gtk.Box,
          {
            class: "widgets-left",
            homogeneous: false,
            halign: Gtk.Align.START,
            spacing: widgetSpacing,
            $type: "start",
            children: [
              /* @__PURE__ */ jsx(Apps, {}),
              /* @__PURE__ */ jsx(Workspaces, {}),
              /* @__PURE__ */ jsx(FocusedClient, {})
            ]
          }
        ),
        /* @__PURE__ */ jsxs(
          Gtk.Box,
          {
            class: "widgets-center",
            homogeneous: false,
            spacing: widgetSpacing,
            halign: Gtk.Align.CENTER,
            $type: "center",
            children: [
              /* @__PURE__ */ jsx(Clock, {}),
              /* @__PURE__ */ jsx(Media, {})
            ]
          }
        ),
        /* @__PURE__ */ jsxs(
          Gtk.Box,
          {
            class: "widgets-right",
            homogeneous: false,
            spacing: widgetSpacing,
            halign: Gtk.Align.END,
            $type: "end",
            children: [
              /* @__PURE__ */ jsx(Tray, {}),
              /* @__PURE__ */ jsx(Status, {})
            ]
          }
        )
      ] }) })
    }
  );
};

// ../../../../../../usr/share/ags/js/src/gtk4/app.ts
import GLib8 from "gi://GLib?version=2.0";
import Gtk4 from "gi://Gtk?version=4.0";
import Astal5 from "gi://Astal?version=4.0";

// ../../../../../../usr/share/ags/js/src/overrides.ts
function snakeify2(str) {
  return str.replace(/([a-z])([A-Z])/g, "$1_$2").replaceAll("-", "_").toLowerCase();
}
async function suppress(mod2, patch2) {
  return mod2.then((m) => patch2(m.default)).catch(() => void 0);
}
function patch(proto, prop) {
  Object.defineProperty(proto, prop, {
    get() {
      return this[`get_${snakeify2(prop)}`]();
    }
  });
}
await suppress(import("gi://AstalApps"), ({ Apps: Apps2, Application }) => {
  patch(Apps2.prototype, "list");
  patch(Application.prototype, "keywords");
  patch(Application.prototype, "categories");
});
await suppress(import("gi://AstalBattery"), ({ UPower }) => {
  patch(UPower.prototype, "devices");
});
await suppress(import("gi://AstalBluetooth"), ({ Adapter, Bluetooth, Device }) => {
  patch(Adapter.prototype, "uuids");
  patch(Bluetooth.prototype, "adapters");
  patch(Bluetooth.prototype, "devices");
  patch(Device.prototype, "uuids");
});
await suppress(import("gi://AstalHyprland"), ({ Hyprland, Monitor, Workspace }) => {
  patch(Hyprland.prototype, "binds");
  patch(Hyprland.prototype, "monitors");
  patch(Hyprland.prototype, "workspaces");
  patch(Hyprland.prototype, "clients");
  patch(Monitor.prototype, "availableModes");
  patch(Monitor.prototype, "available_modes");
  patch(Workspace.prototype, "clients");
});
await suppress(import("gi://AstalMpris"), ({ Mpris, Player }) => {
  patch(Mpris.prototype, "players");
  patch(Player.prototype, "supported_uri_schemes");
  patch(Player.prototype, "supportedUriSchemes");
  patch(Player.prototype, "supported_mime_types");
  patch(Player.prototype, "supportedMimeTypes");
  patch(Player.prototype, "comments");
});
await suppress(import("gi://AstalNetwork"), ({ Wifi }) => {
  patch(Wifi.prototype, "access_points");
  patch(Wifi.prototype, "accessPoints");
});
await suppress(import("gi://AstalNotifd"), ({ Notifd, Notification }) => {
  patch(Notifd.prototype, "notifications");
  patch(Notification.prototype, "actions");
});
await suppress(import("gi://AstalPowerProfiles"), ({ PowerProfiles }) => {
  patch(PowerProfiles.prototype, "actions");
});
await suppress(import("gi://AstalWp"), ({ Wp, Audio, Video }) => {
  patch(Wp.prototype, "endpoints");
  patch(Wp.prototype, "devices");
  patch(Audio.prototype, "streams");
  patch(Audio.prototype, "recorders");
  patch(Audio.prototype, "microphones");
  patch(Audio.prototype, "speakers");
  patch(Audio.prototype, "devices");
  patch(Video.prototype, "streams");
  patch(Video.prototype, "recorders");
  patch(Video.prototype, "sinks");
  patch(Video.prototype, "sources");
  patch(Video.prototype, "devices");
});
await suppress(import("gi://AstalTray"), ({ Tray: Tray2 }) => {
  patch(Tray2.prototype, "items");
});

// ../../../../../../usr/share/ags/js/src/_app.ts
import { setConsoleLogDomain } from "console";
import { exit, programArgs } from "system";
import IO from "gi://AstalIO";
import GObject6 from "gi://GObject";
function mkApp(App) {
  return new class AstalJS extends App {
    static {
      GObject6.registerClass({ GTypeName: "AstalJS" }, this);
    }
    eval(body) {
      return new Promise((res, rej) => {
        try {
          const fn = Function(`return (async function() {
                        ${body.includes(";") ? body : `return ${body};`}
                    })`);
          fn()().then(res).catch(rej);
        } catch (error) {
          rej(error);
        }
      });
    }
    vfunc_shutdown() {
      super.vfunc_shutdown();
      this.disposeRoot?.();
    }
    vfunc_request(msg, conn) {
      if (typeof this.requestHandler === "function") {
        this.requestHandler(msg, (response) => {
          IO.write_sock(conn, String(response), (_, res) => IO.write_sock_finish(res));
        });
      } else {
        super.vfunc_request(msg, conn);
      }
    }
    apply_css(style, reset = false) {
      super.apply_css(style, reset);
    }
    quit(code) {
      super.quit();
      exit(code ?? 0);
    }
    start({ requestHandler, css, hold, main, client, icons, ...cfg } = {}) {
      const app = this;
      client ??= () => {
        print(`Astal instance "${app.instanceName}" already running`);
        exit(1);
      };
      Object.assign(this, cfg);
      setConsoleLogDomain(app.instanceName);
      this.requestHandler = requestHandler;
      app.connect("activate", () => {
        createRoot((dispose) => {
          this.disposeRoot = dispose;
          main?.(...programArgs);
        });
      });
      try {
        app.acquire_socket();
      } catch {
        return client((msg) => IO.send_request(app.instanceName, msg), ...programArgs);
      }
      if (css) this.apply_css(css, false);
      if (icons) app.add_icons(icons);
      hold ??= true;
      if (hold) app.hold();
      app.runAsync([]);
    }
  }();
}

// ../../../../../../usr/share/ags/js/src/gtk4/app.ts
Gtk4.init();
GLib8.unsetenv("LD_PRELOAD");
await import("gi://Adw?version=1").then(({ default: Adw }) => Adw.init()).catch(() => void 0);
var app_default = mkApp(Astal5.Application);

// windows.ts
import AstalHyprland4 from "gi://AstalHyprland";

// window/OSD.tsx
import Pango3 from "gi://Pango?version=1.0";
var [osdMode, setOSDMode] = createState(2 /* NONE */);
var OSD = (mon) => {
  if (osdMode.get() === 2 /* NONE */)
    setOSDMode(0 /* SINK */);
  return /* @__PURE__ */ jsx(
    Astal.Window,
    {
      namespace: "osd",
      class: "osd-window",
      layer: Astal.Layer.OVERLAY,
      anchor: Astal.WindowAnchor.BOTTOM,
      focusable: false,
      marginBottom: 80,
      monitor: mon,
      children: /* @__PURE__ */ jsxs(Gtk.Box, { class: "osd", children: [
        /* @__PURE__ */ jsx(
          Gtk.Image,
          {
            class: "icon",
            iconName: createBinding(
              Wireplumber.getDefault().getDefaultSink(),
              "volumeIcon"
            ).as((icon) => !Wireplumber.getDefault().isMutedSink() && Wireplumber.getDefault().getSinkVolume() > 0 ? icon : "audio-volume-muted-symbolic")
          }
        ),
        /* @__PURE__ */ jsxs(Gtk.Box, { orientation: Gtk.Orientation.VERTICAL, class: "volume", vexpand: true, hexpand: true, children: [
          /* @__PURE__ */ jsx(
            Gtk.Label,
            {
              class: "device",
              label: createBinding(
                Wireplumber.getDefault().getDefaultSink(),
                "description"
              ).as((description) => description ?? "Speaker"),
              ellipsize: Pango3.EllipsizeMode.END
            }
          ),
          /* @__PURE__ */ jsx(
            Gtk.LevelBar,
            {
              class: "levelbar",
              value: createBinding(
                Wireplumber.getDefault().getDefaultSink(),
                "volume"
              ).as((volume) => Math.floor(volume * 100)),
              maxValue: Wireplumber.getDefault().getMaxSinkVolume()
            }
          )
        ] })
      ] })
    }
  );
};

// widget/BackgroundWindow.tsx
var { TOP, LEFT, RIGHT, BOTTOM } = Astal.WindowAnchor;
function BackgroundWindow(props) {
  const conns = /* @__PURE__ */ new Map();
  return /* @__PURE__ */ jsx(
    Astal.Window,
    {
      namespace: "background-window",
      css: props.css ?? "background: rgba(0, 0, 0, .2);",
      monitor: props.monitor,
      layer: props.layer ?? Astal.Layer.OVERLAY,
      anchor: TOP | LEFT | BOTTOM | RIGHT,
      keymode: props.keymode,
      exclusivity: props.exclusivity ?? Astal.Exclusivity.IGNORE,
      onDestroy: (_) => conns.forEach((id, obj) => obj.disconnect(id)),
      $: (self) => {
        const gestureClick = Gtk.GestureClick.new(), eventControllerKey = Gtk.EventControllerKey.new();
        self.add_controller(gestureClick);
        self.add_controller(eventControllerKey);
        conns.set(eventControllerKey, eventControllerKey.connect(
          "key-released",
          (_, keyval, keycode) => {
            if (keyval === Gdk.KEY_Escape) {
              props.actionFired?.(self);
              return;
            }
            props.actionKeyPressed?.(self, keyval, keycode);
          }
        ));
        conns.set(gestureClick, gestureClick.connect("released", (gesture) => {
          if (gesture.get_current_button() === Gdk.BUTTON_PRIMARY) {
            props.actionClickPrimary?.(self);
            return;
          }
          if (gesture.get_current_button() === Gdk.BUTTON_SECONDARY) {
            props.actionClickSecondary?.(self);
            return;
          }
          props.actionFired?.(self);
        }));
      }
    }
  );
}

// widget/PopupWindow.tsx
var { TOP: TOP2, LEFT: LEFT2, RIGHT: RIGHT2, BOTTOM: BOTTOM2 } = Astal.WindowAnchor;
function PopupWindow(props) {
  props.layer ??= Astal.Layer.OVERLAY;
  const bgWindow = props.cssBackgroundWindow ? /* @__PURE__ */ jsx(
    BackgroundWindow,
    {
      monitor: props.monitor ?? 0,
      layer: props.layer,
      css: props.cssBackgroundWindow
    }
  ) : void 0;
  const omittedProps = omitObjectKeys(props, [
    "children",
    "actionKeyPressed",
    "actionClickedOutside",
    "cssBackgroundWindow",
    "marginTop",
    "marginLeft",
    "marginRight",
    "marginBottom"
  ]);
  return /* @__PURE__ */ jsx(
    Astal.Window,
    {
      ...omittedProps,
      visible: true,
      namespace: props.namespace ?? "popup-window",
      class: props.class instanceof Accessor ? props.namespace instanceof Accessor ? createComputed([props.class, props.namespace], (clss, namespace) => `popup-window ${clss} ${namespace}`) : props.class.as((clss) => `popup-window ${clss} ${props.namespace ?? ""}`) : `popup-window ${props.class ?? ""} ${props.namespace ?? ""}`,
      keymode: Astal.Keymode.EXCLUSIVE,
      anchor: TOP2 | LEFT2 | RIGHT2 | BOTTOM2,
      exclusivity: props.exclusivity ?? Astal.Exclusivity.NORMAL,
      onDestroy: (self) => {
        bgWindow?.close();
        props.onDestroy?.(self);
      },
      $: (self) => {
        props.actionClickedOutside ??= (_) => self.close();
        const conns = /* @__PURE__ */ new Map();
        const gestureClick = Gtk.GestureClick.new();
        const keyController = Gtk.EventControllerKey.new();
        const allocation = self.get_child().get_first_child().get_allocation();
        self.add_controller(gestureClick);
        self.add_controller(keyController);
        conns.set(gestureClick, gestureClick.connect("released", (_, __, x, y) => {
          if (x < allocation.x || x > allocation.x + allocation.width || (y < allocation.y || y > allocation.y + allocation.height)) {
            conns.forEach((id, obj) => {
              obj.disconnect(id);
            });
            props.actionClickedOutside(self);
          }
        }));
        conns.set(keyController, keyController.connect("key-pressed", (_, keyval, keycode) => {
          if (keyval === Gdk.KEY_Escape) {
            conns.forEach((id, obj) => {
              obj.disconnect(id);
            });
            props.actionClickedOutside(self);
            return;
          }
          props.actionKeyPressed?.(self, keyval, keycode);
        }));
        conns.set(self, self.connect("destroy", () => conns.forEach((id, obj) => obj.disconnect(id))));
        props.$?.(self);
      },
      children: /* @__PURE__ */ jsx(Gtk.Box, { halign: props.halign, valign: props.valign, hexpand: true, vexpand: true, css: `box {
                margin-left: ${props.marginLeft ?? 0}px;
                margin-right: ${props.marginRight ?? 0}px;
                margin-top: ${props.marginTop ?? 0}px;
                margin-bottom: ${props.marginBottom ?? 0}px;
            }`, children: /* @__PURE__ */ jsx(
        Gtk.Box,
        {
          widthRequest: props.widthRequest,
          heightRequest: props.heightRequest,
          $: (self) => {
            const gestureClick = Gtk.GestureClick.new();
            self.add_controller(gestureClick);
            const clickConn = gestureClick.connect("released", () => true);
            const destroyConn = self.connect("destroy", () => {
              gestureClick.disconnect(clickConn);
              self.disconnect(destroyConn);
            });
          },
          children: props.children
        }
      ) })
    }
  );
}

// widget/Notification.tsx
import AstalNotifd3 from "gi://AstalNotifd";
import Pango4 from "gi://Pango?version=1.0";
import GLib9 from "gi://GLib?version=2.0";
function getNotificationImage(notif) {
  const img = notif.image || notif.appIcon;
  if (!img || !img.includes("/"))
    return void 0;
  switch (true) {
    case /^[/]/.test(img):
      return `file://${img}`;
    case /^[~]/.test(img):
    case /^file:\/\/[~]/i.test(img):
      return `file://${GLib9.get_home_dir()}/${img.replace(/^(file\:\/\/|[~]|file\:\/\[~])/i, "")}`;
  }
  return img;
}
function NotificationWidget({ notification, actionClicked, holdOnHover, showTime, actionClose }) {
  notification = typeof notification === "number" ? AstalNotifd3.get_default().get_notification(notification) : notification;
  const conns = /* @__PURE__ */ new Map();
  return /* @__PURE__ */ jsxs(
    Gtk.Box,
    {
      hexpand: true,
      class: `notification ${Notifications.getDefault().getUrgencyString(notification.urgency)}`,
      orientation: Gtk.Orientation.VERTICAL,
      spacing: 5,
      $: (self) => {
        const eventControllerMotion = Gtk.EventControllerMotion.new(), gestureClick = Gtk.GestureClick.new();
        self.add_controller(eventControllerMotion);
        self.add_controller(gestureClick);
        conns.set(eventControllerMotion, [
          eventControllerMotion.connect("enter", () => holdOnHover && Notifications.getDefault().holdNotification(notification.id)),
          eventControllerMotion.connect("leave", () => holdOnHover && Notifications.getDefault().removeNotification(notification.id))
        ]);
        conns.set(gestureClick, [
          gestureClick.connect("released", (gesture) => {
            gesture.get_current_button() === Gdk.BUTTON_PRIMARY && actionClicked?.(notification);
          })
        ]);
      },
      onDestroy: (_) => {
        conns.forEach((ids, obj) => ids.forEach((id) => obj.disconnect(id)));
      },
      children: [
        /* @__PURE__ */ jsxs(Gtk.Box, { class: "top", hexpand: true, children: [
          /* @__PURE__ */ jsx(Gtk.Image, { css: "font-size: 16px;", $: (self) => {
            const icon = getSymbolicIcon(notification.appIcon ?? notification.appName) ?? getSymbolicIcon(notification.appName) ?? getAppIcon(notification.appName);
            if (icon) {
              self.set_from_icon_name(icon);
              return;
            }
            self.set_visible(false);
          } }),
          /* @__PURE__ */ jsx(
            Gtk.Label,
            {
              class: "app-name",
              halign: Gtk.Align.START,
              hexpand: true,
              label: notification.appName || "Application"
            }
          ),
          /* @__PURE__ */ jsx(
            Gtk.Label,
            {
              class: "time",
              visible: showTime,
              xalign: 1,
              label: GLib9.DateTime.new_from_unix_local(notification.time).format("%H:%M") ?? ""
            }
          ),
          /* @__PURE__ */ jsx(
            Gtk.Button,
            {
              halign: Gtk.Align.END,
              iconName: "window-close-symbolic",
              class: "close icon"
            }
          )
        ] }),
        /* @__PURE__ */ jsx(Separator, { alpha: 0.1, orientation: Gtk.Orientation.VERTICAL }),
        /* @__PURE__ */ jsx(Gtk.Box, { class: "content", $: (self) => {
          const image = getNotificationImage(notification);
          image && self.prepend(Gtk.Picture.new_for_filename(image));
        }, children: /* @__PURE__ */ jsxs(
          Gtk.Box,
          {
            class: "text",
            orientation: Gtk.Orientation.VERTICAL,
            vexpand: true,
            children: [
              /* @__PURE__ */ jsx(
                Gtk.Label,
                {
                  class: "summary",
                  useMarkup: true,
                  hexpand: false,
                  xalign: 0,
                  vexpand: true,
                  ellipsize: Pango4.EllipsizeMode.END,
                  label: notification.summary.replace(/[&]/g, "&amp;")
                }
              ),
              /* @__PURE__ */ jsx(
                Gtk.Label,
                {
                  class: "body",
                  useMarkup: true,
                  xalign: 0,
                  wrap: true,
                  hexpand: false,
                  vexpand: true,
                  wrapMode: Pango4.WrapMode.WORD_CHAR,
                  label: notification.body.replace(/[&]/g, "&amp;")
                }
              )
            ]
          }
        ) }),
        /* @__PURE__ */ jsx(Gtk.Box, { class: "action button-row", hexpand: true, visible: notification instanceof AstalNotifd3.Notification && notification.actions.filter((action) => action.label.toLowerCase() !== "view").length > 0, children: notification instanceof AstalNotifd3.Notification && notification.actions.filter((a) => a.label.toLowerCase() !== "view").map((action) => /* @__PURE__ */ jsx(
          Gtk.Button,
          {
            class: "action",
            label: action.label,
            hexpand: true,
            onClicked: (_) => {
              notification.invoke(action.id);
              actionClose?.(notification);
            }
          }
        )) })
      ]
    }
  );
}

// widget/control-center/NotifHistory.tsx
var NotifHistory = () => /* @__PURE__ */ jsxs(
  Gtk.Box,
  {
    orientation: Gtk.Orientation.VERTICAL,
    class: createBinding(Notifications.getDefault(), "history").as((history) => `history ${history.length < 1 ? "hide" : ""}`),
    children: [
      /* @__PURE__ */ jsx(
        Gtk.ScrolledWindow,
        {
          class: "history-scrollable",
          hscrollbarPolicy: Gtk.PolicyType.NEVER,
          vscrollbarPolicy: Gtk.PolicyType.AUTOMATIC,
          propagateNaturalHeight: true,
          onShow: (self) => {
            if (!self.get_child().get_child()) return;
            self.minContentHeight = self.get_child().get_child().get_first_child().get_allocation().height || 0;
          },
          children: /* @__PURE__ */ jsx(
            Gtk.Box,
            {
              class: "notifications",
              hexpand: true,
              orientation: Gtk.Orientation.VERTICAL,
              spacing: 4,
              valign: Gtk.Align.START,
              children: /* @__PURE__ */ jsx(For, { each: createBinding(Notifications.getDefault(), "history"), children: (notif) => /* @__PURE__ */ jsx(
                NotificationWidget,
                {
                  notification: notif,
                  showTime: true,
                  actionClose: (n) => Notifications.getDefault().removeHistory(n.id),
                  actionClicked: (n) => Notifications.getDefault().removeHistory(n.id)
                }
              ) })
            }
          )
        }
      ),
      /* @__PURE__ */ jsx(Gtk.Box, { hexpand: true, class: "button-row", halign: Gtk.Align.END, children: /* @__PURE__ */ jsx(
        Gtk.Button,
        {
          class: "clear-all",
          iconName: "edit-clear-all-symbolic",
          label: tr("clear"),
          onClicked: Notifications.getDefault().clearHistory
        }
      ) })
    ]
  }
);

// scripts/wallpaper.ts
import Gio7 from "gi://Gio?version=2.0";
import GLib10 from "gi://GLib?version=2.0";
var _wallpaper_dec, _splash_dec, _a7, _Wallpaper_decorators, _wallpaper, _splash, _monitor, _hyprpaperFile, _wallpapersPath, _ignoreWatch, _init6;
_Wallpaper_decorators = [register({ GTypeName: "Wallpaper" })];
var _Wallpaper = class _Wallpaper extends (_a7 = GObject.Object, _splash_dec = [getter(Boolean)], _wallpaper_dec = [getter(String)], _a7) {
  constructor() {
    super();
    __runInitializers(_init6, 5, this);
    __privateAdd(this, _wallpaper);
    __privateAdd(this, _splash, true);
    __privateAdd(this, _monitor);
    __privateAdd(this, _hyprpaperFile);
    __privateAdd(this, _wallpapersPath);
    __privateAdd(this, _ignoreWatch, false);
    __privateSet(this, _wallpapersPath, GLib10.getenv("WALLPAPERS") ?? `${GLib10.get_home_dir()}/wallpapers`);
    __privateSet(this, _hyprpaperFile, Gio7.File.new_for_path(`${GLib10.get_user_config_dir()}/hypr/hyprpaper.conf`));
    this.getWallpaper().then((wall) => {
      if (wall?.trim()) __privateSet(this, _wallpaper, wall.trim());
    });
    let tmeout = void 0;
    __privateSet(this, _monitor, monitorFile(__privateGet(this, _hyprpaperFile).get_path(), (_, event) => {
      if (event !== Gio7.FileMonitorEvent.CHANGED && event !== Gio7.FileMonitorEvent.CREATED && event !== Gio7.FileMonitorEvent.MOVED_IN)
        return;
      if (tmeout) return;
      else tmeout = timeout(1500, () => tmeout = void 0);
      if (__privateGet(this, _ignoreWatch)) {
        __privateSet(this, _ignoreWatch, false);
        return;
      }
      const [loaded, text] = __privateGet(this, _hyprpaperFile).load_contents(null);
      if (!loaded)
        console.error("Wallpaper: Couldn't read changes inside the hyprpaper file!");
      const content = new TextDecoder().decode(text);
      if (content) {
        let setWall = true;
        for (const line of content.split("\n")) {
          if (line.trim().startsWith("#"))
            continue;
          const lineSplit = line.split("=");
          const key = lineSplit[0].trim(), value = lineSplit.filter((_2, i) => i !== 0).join("=").trim();
          switch (key) {
            case "splash":
              this.splash = /(yes|true|on|enable|enabled|1).*/.test(value) ? true : false;
              break;
            case "wallpaper":
              if (__privateGet(this, _wallpaper) !== value && setWall) {
                this.setWallpaper(value, false);
                setWall = false;
              }
              break;
          }
        }
      }
    }));
  }
  get splash() {
    return __privateGet(this, _splash);
  }
  set splash(showSplash) {
    __privateSet(this, _splash, showSplash);
    this.notify("splash");
  }
  get wallpaper() {
    return __privateGet(this, _wallpaper) ?? "";
  }
  set wallpaper(newValue) {
    this.setWallpaper(newValue);
  }
  get wallpapersPath() {
    return __privateGet(this, _wallpapersPath);
  }
  vfunc_dispose() {
    __privateGet(this, _monitor).cancel();
  }
  static getDefault() {
    if (!this.instance)
      this.instance = new _Wallpaper();
    return this.instance;
  }
  writeChanges() {
    __privateSet(this, _ignoreWatch, true);
    __privateGet(this, _hyprpaperFile).replace_async(
      null,
      false,
      Gio7.FileCreateFlags.REPLACE_DESTINATION,
      GLib10.PRIORITY_DEFAULT,
      null,
      (_, result) => {
        const res = __privateGet(this, _hyprpaperFile).replace_finish(result);
        if (res) {
          __privateSet(this, _ignoreWatch, true);
          res.write_bytes_async(
            new TextEncoder().encode(`# This file was automatically generated by color-shell

                        preload = ${__privateGet(this, _wallpaper)}
                        splash = ${__privateGet(this, _splash)}
                        wallpaper = , ${__privateGet(this, _wallpaper)}`.split("\n").map((str) => str.trimStart()).join("\n")),
            GLib10.PRIORITY_DEFAULT,
            null,
            (_2, asyncRes) => {
              if (_2.write_finish(asyncRes)) res.flush(null);
              res.close(null);
            }
          );
          return;
        }
        console.error(`Wallpaper: an error occurred when trying to replace the hyprpaper file`);
      }
    );
  }
  async getWallpaper() {
    return await execAsync('sh -c "hyprctl hyprpaper listactive | tail -n 1"').then((stdout) => {
      const loaded = stdout.split("=")[1]?.trim();
      if (!loaded)
        console.warn(`Wallpaper: Couldn't get wallpaper. There is(are) no loaded wallpaper(s)`);
      return loaded;
    }).catch((err) => {
      console.error(`Wallpaper: Couldn't get wallpaper. Stderr: 
${err.message ? `${err.message} /` : ""} Stack: 
 ${err.stack}`);
      return void 0;
    });
  }
  reloadColors() {
    execAsync(`wal -t --cols16 darken -i "${__privateGet(this, _wallpaper)}"`).then(() => {
      console.log("Wallpaper: reloaded shell colors");
    }).catch((r) => {
      console.error(`Wallpaper: Couldn't update shell colors. Stderr: ${r}`);
    });
  }
  setWallpaper(path, write = true) {
    execAsync("hyprctl hyprpaper unload all").then(
      () => execAsync(`hyprctl hyprpaper preload ${path}`).then(
        () => execAsync(`hyprctl hyprpaper wallpaper ${path}`).then(() => {
          __privateSet(this, _wallpaper, typeof path === "string" ? path : path.get_path());
          this.reloadColors();
          write && this.writeChanges();
        }).catch((r) => {
          console.error(`Wallpaper: Couldn't set wallpaper. Stderr: ${r}`);
        })
      ).catch((r) => {
        console.error(`Wallpaper: Couldn't preload image. Stderr: ${r}`);
      })
    ).catch((r) => {
      console.error(`Wallpaper: Couldn't unload images from memory. Stderr: ${r}`);
    });
  }
  async pickWallpaper() {
    return await execAsync(`zenity --file-selection`).then((wall) => {
      if (!wall.trim()) return void 0;
      this.setWallpaper(wall);
      return wall;
    }).catch((r) => {
      console.error(`Wallpaper: Couldn't pick wallpaper, is \`zenity\` installed? Stderr: ${r}`);
      return void 0;
    });
  }
};
_init6 = __decoratorStart(_a7);
_wallpaper = new WeakMap();
_splash = new WeakMap();
_monitor = new WeakMap();
_hyprpaperFile = new WeakMap();
_wallpapersPath = new WeakMap();
_ignoreWatch = new WeakMap();
__decorateElement(_init6, 2, "splash", _splash_dec, _Wallpaper);
__decorateElement(_init6, 2, "wallpaper", _wallpaper_dec, _Wallpaper);
_Wallpaper = __decorateElement(_init6, 0, "Wallpaper", _Wallpaper_decorators, _Wallpaper);
_Wallpaper.instance = void 0;
__runInitializers(_init6, 1, _Wallpaper);
var Wallpaper = _Wallpaper;

// widget/control-center/QuickActions.tsx
import GLib11 from "gi://GLib?version=2.0";
var uptime = createPoll("Just turned on", 1e3, "uptime -p");
function LockButton() {
  return /* @__PURE__ */ jsx(
    Gtk.Button,
    {
      iconName: "system-lock-screen-symbolic",
      onClicked: () => {
        Windows.getDefault().close("control-center");
        execApp("hyprlock");
      }
    }
  );
}
function ColorPickerButton() {
  return /* @__PURE__ */ jsx(
    Gtk.Button,
    {
      iconName: "color-select-symbolic",
      onClicked: () => {
        Windows.getDefault().close("control-center");
        execApp("sh $HOME/.config/hypr/scripts/color-picker.sh");
      }
    }
  );
}
function ScreenshotButton() {
  return /* @__PURE__ */ jsx(
    Gtk.Button,
    {
      iconName: "applets-screenshooter-symbolic",
      onClicked: () => {
        Windows.getDefault().close("control-center");
        execApp(`sh ${GLib11.get_user_config_dir()}/hypr/scripts/screenshot.sh`);
      }
    }
  );
}
function SelectWallpaperButton() {
  return /* @__PURE__ */ jsx(
    Gtk.Button,
    {
      iconName: "preferences-desktop-wallpaper-symbolic",
      onClicked: () => {
        Windows.getDefault().close("control-center");
        Wallpaper.getDefault().pickWallpaper();
      }
    }
  );
}
function LogoutButton() {
  return /* @__PURE__ */ jsx(
    Gtk.Button,
    {
      iconName: "system-shutdown-symbolic",
      onClicked: () => {
        Windows.getDefault().close("control-center");
        Windows.getDefault().open("logout-menu");
      }
    }
  );
}
var QuickActions = () => /* @__PURE__ */ jsxs(Gtk.Box, { class: "quickactions", children: [
  /* @__PURE__ */ jsxs(
    Gtk.Box,
    {
      orientation: Gtk.Orientation.VERTICAL,
      halign: Gtk.Align.START,
      hexpand: true,
      class: "left",
      children: [
        /* @__PURE__ */ jsx(
          Gtk.Label,
          {
            class: "hostname",
            xalign: 0,
            tooltipText: "Host name",
            label: GLib11.get_host_name()
          }
        ),
        /* @__PURE__ */ jsxs(Gtk.Box, { children: [
          /* @__PURE__ */ jsx(Gtk.Image, { iconName: "hourglass-symbolic" }),
          /* @__PURE__ */ jsx(
            Gtk.Label,
            {
              class: "uptime",
              xalign: 0,
              tooltipText: "Up time",
              label: uptime.as((str) => str.replace(/^up /, ""))
            }
          )
        ] })
      ]
    }
  ),
  /* @__PURE__ */ jsxs(
    Gtk.Box,
    {
      class: "right button-row",
      halign: Gtk.Align.END,
      hexpand: true,
      children: [
        /* @__PURE__ */ jsx(LockButton, {}),
        /* @__PURE__ */ jsx(ColorPickerButton, {}),
        /* @__PURE__ */ jsx(ScreenshotButton, {}),
        /* @__PURE__ */ jsx(SelectWallpaperButton, {}),
        /* @__PURE__ */ jsx(LogoutButton, {})
      ]
    }
  )
] });

// window/ControlCenter.tsx
var ControlCenter = (mon) => /* @__PURE__ */ jsx(
  PopupWindow,
  {
    namespace: "control-center",
    class: "control-center",
    halign: Gtk.Align.END,
    valign: Gtk.Align.START,
    layer: Astal.Layer.OVERLAY,
    marginTop: 10,
    marginRight: 10,
    marginBottom: 10,
    monitor: mon,
    widthRequest: 395,
    children: /* @__PURE__ */ jsxs(
      Gtk.Box,
      {
        orientation: Gtk.Orientation.VERTICAL,
        spacing: 16,
        children: [
          /* @__PURE__ */ jsx(
            Gtk.Box,
            {
              class: "control-center-container",
              orientation: Gtk.Orientation.VERTICAL,
              vexpand: false,
              children: /* @__PURE__ */ jsx(QuickActions, {})
            }
          ),
          /* @__PURE__ */ jsx(NotifHistory, {})
        ]
      }
    )
  }
);

// window/FloatingNotifications.tsx
var FloatingNotifications = (mon) => /* @__PURE__ */ jsx(
  Astal.Window,
  {
    namespace: "floating-notifications",
    monitor: mon,
    layer: Astal.Layer.OVERLAY,
    anchor: Astal.WindowAnchor.TOP | Astal.WindowAnchor.RIGHT,
    widthRequest: 450,
    exclusivity: Astal.Exclusivity.NORMAL,
    children: /* @__PURE__ */ jsx(
      Gtk.Box,
      {
        class: "floating-notifications-container",
        orientation: Gtk.Orientation.VERTICAL,
        spacing: 12,
        visible: variableToBoolean(createBinding(Notifications.getDefault(), "notifications")),
        children: /* @__PURE__ */ jsx(For, { each: createBinding(Notifications.getDefault(), "notifications"), children: (notif) => /* @__PURE__ */ jsx(Gtk.Box, { class: "float-notification", children: /* @__PURE__ */ jsx(
          NotificationWidget,
          {
            notification: notif,
            showTime: false,
            actionClose: () => Notifications.getDefault().removeNotification(notif),
            holdOnHover: true,
            actionClicked: () => {
              const viewAction = notif.actions.filter((action) => action.label.toLowerCase() === "view")?.[0];
              viewAction && notif.invoke(viewAction.id);
            }
          }
        ) }) })
      }
    )
  }
);

// widget/center-window/BigMedia.tsx
import AstalMpris2 from "gi://AstalMpris";
import Gio8 from "gi://Gio?version=2.0";
import Pango5 from "gi://Pango?version=1.0";
var BigMedia = () => {
  let dragTimer;
  return /* @__PURE__ */ jsx(
    Gtk.Box,
    {
      class: "big-media",
      orientation: Gtk.Orientation.VERTICAL,
      widthRequest: 250,
      visible: player((pl) => pl.available),
      children: /* @__PURE__ */ jsx(With, { value: player, children: (player2) => player2.available && /* @__PURE__ */ jsxs(Gtk.Box, { halign: Gtk.Align.CENTER, $: (self) => {
        const artSub = createBinding(player2, "artUrl").subscribe(() => {
          const firstChild = self.get_first_child();
          const albumArt = getAlbumArt(player2);
          if (!albumArt) {
            if (firstChild instanceof Gtk.Picture)
              self.remove(firstChild);
            return;
          }
          if (firstChild instanceof Gtk.Picture) {
            firstChild.set_filename(albumArt);
            return;
          }
          self.prepend(
            /* @__PURE__ */ jsx(
              Gtk.Picture,
              {
                file: Gio8.File.new_for_path(albumArt),
                hexpand: false,
                vexpand: false,
                marginTop: 6,
                widthRequest: 132,
                heightRequest: 128
              }
            )
          );
        });
        const destroyId = self.connect("destroy", () => {
          self.disconnect(destroyId);
          artSub();
        });
      }, children: [
        /* @__PURE__ */ jsxs(
          Gtk.Box,
          {
            class: "info",
            orientation: Gtk.Orientation.VERTICAL,
            valign: Gtk.Align.CENTER,
            vexpand: true,
            children: [
              /* @__PURE__ */ jsx(
                Gtk.Label,
                {
                  class: "title",
                  tooltipText: createBinding(player2, "title").as((title) => title ?? "No Title"),
                  ellipsize: Pango5.EllipsizeMode.END,
                  maxWidthChars: 25
                }
              ),
              /* @__PURE__ */ jsx(
                Gtk.Label,
                {
                  class: "artist",
                  tooltipText: createBinding(player2, "artist").as((artist) => artist ?? "No Artist"),
                  ellipsize: Pango5.EllipsizeMode.END,
                  maxWidthChars: 28
                }
              )
            ]
          }
        ),
        /* @__PURE__ */ jsx(Gtk.Box, { class: "progress", hexpand: true, visible: createBinding(player2, "canSeek"), children: /* @__PURE__ */ jsx(
          Astal.Slider,
          {
            hexpand: true,
            max: createBinding(player2, "length").as(Math.floor),
            value: createBinding(player2, "position").as(Math.floor),
            onChangeValue: (_, type, value) => {
              if (type === void 0 || type === null)
                return;
              if (!dragTimer) {
                dragTimer = timeout(200, () => player2.position = Math.floor(value));
                return;
              }
              dragTimer.cancel();
              dragTimer = timeout(200, () => player2.position = Math.floor(value));
            }
          }
        ) }),
        /* @__PURE__ */ jsxs(Gtk.CenterBox, { class: "bottom", hexpand: true, marginBottom: 6, children: [
          /* @__PURE__ */ jsx(
            Gtk.Label,
            {
              class: "elapsed",
              valign: Gtk.Align.START,
              halign: Gtk.Align.START,
              label: createBinding(player2, "position").as((pos) => {
                const sec = Math.floor(pos % 60);
                return pos > 0 && player2.length > 0 ? `${Math.floor(pos / 60)}:${sec < 10 ? "0" : ""}${sec}` : "0:00";
              }),
              $type: "start"
            }
          ),
          /* @__PURE__ */ jsxs(Gtk.Box, { class: "controls button-row", $type: "center", children: [
            /* @__PURE__ */ jsx(
              Gtk.Button,
              {
                class: "link",
                iconName: "edit-paste-symbolic",
                tooltipText: "Copy link to clipboard",
                onClicked: () => {
                  execAsync(`playerctl --player=${player2.busName.replace(/^org\.mpris\.MediaPlayer2\./i, "")} metadata xesam:url`).then((link) => {
                    Clipboard.getDefault().copyAsync(link);
                  }).catch((e) => {
                    console.error(`Media: couldn't copy media link. Stderr: 
${e.message}
${e.stack}`);
                  });
                }
              }
            ),
            /* @__PURE__ */ jsx(
              Gtk.Button,
              {
                class: "shuffle",
                visible: createBinding(player2, "shuffleStatus").as((status) => status !== AstalMpris2.Shuffle.UNSUPPORTED),
                iconName: createBinding(player2, "shuffleStatus").as((status) => status === AstalMpris2.Shuffle.ON ? "media-playlist-shuffle-symbolic" : "media-playlist-consecutive-symbolic"),
                tooltipText: createBinding(player2, "shuffleStatus").as((status) => status === AstalMpris2.Shuffle.ON ? "Shuffle" : "No shuffle"),
                onClicked: player2.shuffle
              }
            ),
            /* @__PURE__ */ jsx(
              Gtk.Button,
              {
                class: "previous",
                iconName: "media-skip-backward-symbolic",
                tooltipText: "Previous",
                onClicked: () => player2.canGoPrevious && player2.previous()
              }
            ),
            /* @__PURE__ */ jsx(
              Gtk.Button,
              {
                class: "play-pause",
                tooltipText: createBinding(player2, "playbackStatus").as((status) => status === AstalMpris2.PlaybackStatus.PLAYING ? "Pause" : "Play"),
                iconName: createBinding(player2, "playbackStatus").as((status) => status === AstalMpris2.PlaybackStatus.PLAYING ? "media-playback-pause-symbolic" : "media-playback-start-symbolic"),
                onClicked: player2.play_pause
              }
            ),
            /* @__PURE__ */ jsx(
              Gtk.Button,
              {
                class: "next",
                iconName: "media-skip-forward-symbolic",
                tooltipText: "Next",
                onClicked: () => player2.canGoNext && player2.next()
              }
            ),
            /* @__PURE__ */ jsx(
              Gtk.Button,
              {
                class: "repeat",
                iconName: createBinding(player2, "loopStatus").as((status) => {
                  if (status === AstalMpris2.Loop.TRACK)
                    return "media-playlist-repeat-song-symbolic";
                  if (status === AstalMpris2.Loop.PLAYLIST)
                    return "media-playlist-repeat-symbolic";
                  return "loop-arrow-symbolic";
                }),
                visible: createBinding(player2, "loopStatus").as((status) => status !== AstalMpris2.Loop.UNSUPPORTED),
                tooltipText: createBinding(player2, "loopStatus").as((status) => {
                  if (status === AstalMpris2.Loop.TRACK)
                    return "Loop song";
                  if (status === AstalMpris2.Loop.PLAYLIST)
                    return "Loop playlist";
                  return "No loop";
                }),
                onClicked: player2.loop
              }
            )
          ] }),
          /* @__PURE__ */ jsx(
            Gtk.Label,
            {
              class: "length",
              valign: Gtk.Align.START,
              halign: Gtk.Align.END,
              label: createBinding(player2, "length").as((len) => {
                const sec = Math.floor(len % 60);
                return len > 0 && Number.isFinite(len) ? `${Math.floor(len / 60)}:${sec < 10 ? "0" : ""}${sec}` : "0:00";
              }),
              $type: "end"
            }
          )
        ] })
      ] }) })
    }
  );
};
function getAlbumArt(player2) {
  const artUrl = player2.artUrl;
  if (!artUrl)
    return void 0;
  if (artUrl.startsWith("/"))
    return "file://" + artUrl;
  return artUrl;
}

// window/CenterWindow.tsx
var CenterWindow = (mon) => /* @__PURE__ */ jsx(
  PopupWindow,
  {
    namespace: "center-window",
    marginTop: 10,
    halign: Gtk.Align.CENTER,
    valign: Gtk.Align.START,
    monitor: mon,
    children: /* @__PURE__ */ jsxs(Gtk.Box, { class: "center-window-container", spacing: 6, children: [
      /* @__PURE__ */ jsxs(Gtk.Box, { class: "left", orientation: Gtk.Orientation.VERTICAL, children: [
        /* @__PURE__ */ jsxs(
          Gtk.Box,
          {
            class: "datetime",
            orientation: Gtk.Orientation.VERTICAL,
            halign: Gtk.Align.CENTER,
            valign: Gtk.Align.CENTER,
            vexpand: true,
            children: [
              /* @__PURE__ */ jsx(Gtk.Label, { class: "time", label: time((t) => t.format("%H:%M")) }),
              /* @__PURE__ */ jsx(Gtk.Label, { class: "date", label: time((d) => d.format("%A, %B %d")) })
            ]
          }
        ),
        /* @__PURE__ */ jsx(Gtk.Box, { class: "calendar-box", hexpand: true, valign: Gtk.Align.START, children: /* @__PURE__ */ jsx(
          Gtk.Calendar,
          {
            showHeading: true,
            showDayNames: true,
            showWeekNumbers: false
          }
        ) })
      ] }),
      /* @__PURE__ */ jsx(
        Separator,
        {
          orientation: Gtk.Orientation.HORIZONTAL,
          cssColor: "gray",
          margin: 5,
          spacing: 8,
          alpha: 0.3,
          visible: player((pl) => pl.available)
        }
      ),
      /* @__PURE__ */ jsx(BigMedia, {})
    ] })
  }
);

// widget/CustomDialog.tsx
function CustomDialogOption(props) {
  function onClicked() {
    props.onClick?.();
    props.closeOnClick && props.dialog.close();
  }
  return /* @__PURE__ */ jsx(
    Gtk.Button,
    {
      class: "option",
      hexpand: true,
      label: props.text,
      onClicked,
      onActivate: onClicked
    }
  );
}
function CustomDialog({ options = [{ text: tr("accept") }], ...props }) {
  let dialog;
  return Windows.getDefault().createWindowForFocusedMonitor((mon) => /* @__PURE__ */ jsx(
    PopupWindow,
    {
      namespace: props.namespace ?? "custom-dialog",
      monitor: mon,
      cssBackgroundWindow: props.cssBackground ?? "background: rgba(0, 0, 0, .3);",
      exclusivity: Astal.Exclusivity.IGNORE,
      layer: Astal.Layer.OVERLAY,
      halign: Gtk.Align.CENTER,
      valign: Gtk.Align.CENTER,
      widthRequest: props.widthRequest ?? 400,
      heightRequest: props.heightRequest ?? 220,
      onDestroy: props.onFinish,
      $: (self) => dialog = self,
      children: /* @__PURE__ */ jsxs(
        Gtk.Box,
        {
          class: props.className ?? "custom-dialog-container",
          orientation: Gtk.Orientation.VERTICAL,
          children: [
            /* @__PURE__ */ jsx(Gtk.Label, { class: "title", visible: variableToBoolean(props.title), label: props.title }),
            /* @__PURE__ */ jsx(Gtk.Label, { class: "text", visible: variableToBoolean(props.text), label: props.text }),
            /* @__PURE__ */ jsx(
              Gtk.Box,
              {
                class: "custom-children custom-child",
                visible: variableToBoolean(props.children),
                orientation: props.childOrientation ?? Gtk.Orientation.VERTICAL,
                children: props.children instanceof Accessor ? Array.isArray(props.children) ? /* @__PURE__ */ jsx(For, { each: props.children, children: (widget) => widget && widget }) : /* @__PURE__ */ jsx(With, { value: props.children, children: (widget) => widget && widget }) : Array.isArray(props.children) ? props.children.map((widget) => widget && widget).filter((w) => w) : props.children
              }
            ),
            /* @__PURE__ */ jsx(
              Separator,
              {
                alpha: 0.2,
                visible: options && options.length > 0,
                spacing: 8,
                orientation: Gtk.Orientation.VERTICAL
              }
            ),
            /* @__PURE__ */ jsx(
              Gtk.Box,
              {
                class: "options",
                orientation: props.optionsOrientation ?? Gtk.Orientation.HORIZONTAL,
                hexpand: true,
                heightRequest: 38,
                homogeneous: true,
                children: options instanceof Accessor ? /* @__PURE__ */ jsx(For, { each: options, children: (option) => /* @__PURE__ */ jsx(CustomDialogOption, { ...option, dialog }) }) : options.map((option) => /* @__PURE__ */ jsx(CustomDialogOption, { ...option, dialog }))
              }
            )
          ]
        }
      )
    }
  ))();
}

// widget/AskPopup.tsx
function AskPopup(props) {
  let accepted = false;
  return /* @__PURE__ */ jsx(
    CustomDialog,
    {
      namespace: "ask-popup",
      widthRequest: 400,
      heightRequest: 250,
      title: props.title ?? tr("ask_popup.title"),
      text: props.text,
      onFinish: () => !accepted && props.onCancel?.(),
      options: [
        { text: props.cancelText ?? tr("cancel") },
        {
          text: props.acceptText ?? tr("accept"),
          onClick: () => {
            accepted = true;
            props.onAccept?.();
          }
        }
      ]
    }
  );
}

// scripts/nightlight.ts
import GLib12 from "gi://GLib?version=2.0";
var _identity_dec, _gamma_dec, _temperature_dec, _a8, _NightLight_decorators, _watchInterval, _temperature, _gamma, _identity, _prevTemperature, _prevGamma, _init7;
_NightLight_decorators = [register({ GTypeName: "NightLight" })];
var _NightLight = class _NightLight extends (_a8 = GObject.Object, _temperature_dec = [getter(Number)], _gamma_dec = [getter(Number)], _identity_dec = [getter(Boolean)], _a8) {
  constructor() {
    super();
    __runInitializers(_init7, 5, this);
    __privateAdd(this, _watchInterval, null);
    __privateAdd(this, _temperature, 4500);
    __privateAdd(this, _gamma, 100);
    __privateAdd(this, _identity, false);
    __privateAdd(this, _prevTemperature, null);
    __privateAdd(this, _prevGamma, null);
    this.maxTemperature = 2e4;
    this.minTemperature = 1e3;
    this.identityTemperature = 6e3;
    this.maxGamma = 100;
    __privateSet(this, _watchInterval, interval(1e3, () => {
      execAsync("hyprctl hyprsunset temperature").then((t) => {
        if (t.trim() !== "" && t.trim().length <= 5) {
          const val = Number.parseInt(t.trim());
          if (__privateGet(this, _temperature) !== val) {
            __privateSet(this, _temperature, val);
            this.notify("temperature");
          }
        }
      }).catch((r) => console.error(r));
      execAsync("hyprctl hyprsunset gamma").then((g) => {
        if (g.trim() !== "" && g.trim().length <= 5) {
          const val = Number.parseInt(g.trim());
          if (__privateGet(this, _gamma) !== val) {
            __privateSet(this, _gamma, val);
            this.notify("gamma");
          }
        }
      }).catch((r) => console.error(r));
    }));
    this.vfunc_dispose = () => __privateGet(this, _watchInterval) && __privateGet(this, _watchInterval).cancel();
  }
  get temperature() {
    return __privateGet(this, _temperature);
  }
  set temperature(newValue) {
    this.setTemperature(newValue);
  }
  get gamma() {
    return __privateGet(this, _gamma);
  }
  set gamma(newValue) {
    this.setGamma(newValue);
  }
  get identity() {
    return __privateGet(this, _identity);
  }
  set identity(newValue) {
    newValue ? this.applyIdentity() : this.filter();
  }
  static getDefault() {
    if (!this.instance)
      this.instance = new _NightLight();
    return this.instance;
  }
  setTemperature(value) {
    if (value === this.temperature) return;
    if (value > this.maxTemperature || value < 1e3) {
      console.error(`Night Light(hyprsunset): provided temperatue ${value} is out of bounds (min: 1000; max: ${this.maxTemperature})`);
      return;
    }
    execAsync(`hyprctl hyprsunset temperature ${value}`).then(() => {
      __privateSet(this, _temperature, value);
      this.notify("temperature");
      __privateSet(this, _identity, false);
      __privateSet(this, _prevTemperature, null);
      __privateSet(this, _prevGamma, null);
    }).catch((r) => console.error(
      `Night Light(hyprsunset): Couldn't set temperature. Stderr: ${r}`
    ));
  }
  setGamma(value) {
    if (value === this.gamma) return;
    if (value > this.maxGamma || value < 0) {
      console.error(`Night Light(hyprsunset): provided gamma ${value} is out of bounds (min: 0; max: ${this.maxTemperature})`);
      return;
    }
    execAsync(`hyprctl hyprsunset gamma ${value}`).then(() => {
      __privateSet(this, _gamma, value);
      this.notify("gamma");
      __privateSet(this, _identity, false);
      __privateSet(this, _prevTemperature, null);
      __privateSet(this, _prevGamma, null);
    }).catch((r) => console.error(
      `Night Light(hyprsunset): Couldn't set gamma. Stderr: ${r}`
    ));
  }
  applyIdentity() {
    if (__privateGet(this, _identity)) return;
    __privateSet(this, _prevGamma, __privateGet(this, _gamma));
    __privateSet(this, _prevTemperature, __privateGet(this, _temperature));
    __privateSet(this, _identity, true);
    this.temperature = this.identityTemperature;
    this.gamma = this.maxGamma;
  }
  filter() {
    if (!__privateGet(this, _identity)) return;
    __privateSet(this, _identity, false);
    this.setTemperature(__privateGet(this, _prevTemperature) ?? this.identityTemperature);
    this.setGamma(__privateGet(this, _prevGamma) ?? this.maxGamma);
    __privateSet(this, _prevTemperature, null);
    __privateSet(this, _prevGamma, null);
  }
  saveData() {
    exec(`sh ${GLib12.get_user_config_dir()}/hypr/scripts/save-hyprsunset.sh`);
  }
  loadData() {
    exec(`sh ${GLib12.get_user_config_dir()}/hypr/scripts/load-hyprsunset.sh`);
  }
};
_init7 = __decoratorStart(_a8);
_watchInterval = new WeakMap();
_temperature = new WeakMap();
_gamma = new WeakMap();
_identity = new WeakMap();
_prevTemperature = new WeakMap();
_prevGamma = new WeakMap();
__decorateElement(_init7, 2, "temperature", _temperature_dec, _NightLight);
__decorateElement(_init7, 2, "gamma", _gamma_dec, _NightLight);
__decorateElement(_init7, 2, "identity", _identity_dec, _NightLight);
_NightLight = __decorateElement(_init7, 0, "NightLight", _NightLight_decorators, _NightLight);
_NightLight.instance = void 0;
__runInitializers(_init7, 1, _NightLight);
var NightLight = _NightLight;

// window/LogoutMenu.tsx
import AstalNotifd4 from "gi://AstalNotifd";
var { TOP: TOP3, LEFT: LEFT3, RIGHT: RIGHT3, BOTTOM: BOTTOM3 } = Astal.WindowAnchor;
var LogoutMenu = (mon) => /* @__PURE__ */ jsx(
  Astal.Window,
  {
    namespace: "logout-menu",
    anchor: TOP3 | LEFT3 | RIGHT3 | BOTTOM3,
    layer: Astal.Layer.OVERLAY,
    exclusivity: Astal.Exclusivity.IGNORE,
    keymode: Astal.Keymode.EXCLUSIVE,
    monitor: mon,
    $: (self) => {
      const conns = /* @__PURE__ */ new Map();
      const controllerKey = Gtk.EventControllerKey.new();
      self.add_controller(controllerKey);
      conns.set(controllerKey, controllerKey.connect("key-released", (_, keyval) => {
        if (keyval === Gdk.KEY_Escape)
          self.close();
      }));
      conns.set(self, self.connect("destroy", () => conns.forEach((id, obj) => obj.disconnect(id))));
    },
    children: /* @__PURE__ */ jsxs(
      Gtk.Box,
      {
        class: "logout-menu",
        orientation: Gtk.Orientation.VERTICAL,
        $: (self) => {
          const conns = /* @__PURE__ */ new Map();
          const gestureClick = Gtk.GestureClick.new();
          self.add_controller(gestureClick);
          conns.set(gestureClick, gestureClick.connect("released", (gesture) => {
            if (gesture.get_current_button() === Gdk.BUTTON_PRIMARY) {
              Windows.getDefault().close("logout-menu");
              return true;
            }
          }));
        },
        children: [
          /* @__PURE__ */ jsxs(
            Gtk.Box,
            {
              class: "top",
              hexpand: true,
              vexpand: false,
              orientation: Gtk.Orientation.VERTICAL,
              children: [
                /* @__PURE__ */ jsx(Gtk.Label, { class: "time", label: time((t) => t.format("%H:%M")) }),
                /* @__PURE__ */ jsx(Gtk.Label, { class: "date", label: time((d) => d.format("%A, %B %d %Y")) })
              ]
            }
          ),
          /* @__PURE__ */ jsxs(Gtk.Box, { class: "button-row", homogeneous: true, heightRequest: 360, children: [
            /* @__PURE__ */ jsx(
              Gtk.Button,
              {
                class: "poweroff",
                iconName: "system-shutdown-symbolic",
                onClicked: () => AskPopup(poweroffAsk),
                onActivate: () => AskPopup(poweroffAsk)
              }
            ),
            /* @__PURE__ */ jsx(
              Gtk.Button,
              {
                class: "reboot",
                iconName: "arrow-circular-top-right-symbolic",
                onClicked: () => AskPopup(rebootAsk),
                onActivate: () => AskPopup(rebootAsk)
              }
            ),
            /* @__PURE__ */ jsx(
              Gtk.Button,
              {
                class: "suspend",
                iconName: "weather-clear-night-symbolic",
                onClicked: () => AskPopup(suspendAsk),
                onActivate: () => AskPopup(suspendAsk)
              }
            ),
            /* @__PURE__ */ jsx(
              Gtk.Button,
              {
                class: "logout",
                iconName: "system-log-out-symbolic",
                onClicked: () => AskPopup(logoutAsk),
                onActivate: () => AskPopup(logoutAsk)
              }
            )
          ] })
        ]
      }
    )
  }
);
var logoutAsk = {
  title: "Log out",
  text: "Are you sure you want to log out? Your session will be ended.",
  onAccept: () => {
    Config.getDefault().getProperty("night_light.save_on_shutdown", "boolean") && NightLight.getDefault().saveData();
    execAsync(`hyprctl dispatch exit`).catch(
      (err) => Notifications.getDefault().sendNotification({
        appName: "colorshell",
        summary: "Couldn't exit Hyprland",
        body: `An error occurred and colorshell couldn't exit Hyprland. Stderr: 
${err.message ? `${err.message}
` : ""}${err.stack}`,
        urgency: AstalNotifd4.Urgency.NORMAL,
        actions: [{
          text: "Report Issue on colorshell",
          onAction: () => execAsync(
            `xdg-open https://github.com/retrozinndev/colorshell/issues/new`
          ).catch(
            (err2) => Notifications.getDefault().sendNotification({
              appName: "colorshell",
              summary: "Couldn't open link",
              body: `Do you have \`xdg-utils\` installed? Stderr: 
${err2.message ? `${err2.message}
` : ""}${err2.stack}`
            })
          )
        }]
      })
    );
  }
};
var suspendAsk = {
  title: "Suspend",
  text: "Are you sure you want to Suspend?",
  onAccept: () => execAsync("systemctl suspend")
};
var rebootAsk = {
  title: "Reboot",
  text: "Are you sure you want to Reboot? Unsaved work will be lost.",
  onAccept: () => {
    Config.getDefault().getProperty("night_light.save_on_shutdown", "boolean") && NightLight.getDefault().saveData();
    execAsync("systemctl reboot");
  }
};
var poweroffAsk = {
  title: "Power Off",
  text: "Are you sure you want to power off? Unsaved work will be lost.",
  onAccept: () => {
    Config.getDefault().getProperty("night_light.save_on_shutdown", "boolean") && NightLight.getDefault().saveData();
    execAsync("systemctl poweroff");
  }
};

// window/AppsWindow.tsx
import Pango6 from "gi://Pango?version=1.0";
var ignoredKeys = [
  Gdk.KEY_Right,
  Gdk.KEY_Down,
  Gdk.KEY_Up,
  Gdk.KEY_Left,
  Gdk.KEY_Return,
  Gdk.KEY_space
];
var AppsWindow = (mon) => {
  const [results, setResults] = createState(getApps());
  const entry = /* @__PURE__ */ jsx(Gtk.SearchEntry, { onSearchChanged: (self) => {
    setResults(getAstalApps().fuzzy_query(self.text.trim()));
  } });
  return /* @__PURE__ */ jsx(
    PopupWindow,
    {
      namespace: "apps-window",
      layer: Astal.Layer.OVERLAY,
      exclusivity: Astal.Exclusivity.IGNORE,
      monitor: mon,
      marginTop: 64,
      cssBackgroundWindow: "background={rgba(0, 0, 0, .2)",
      actionKeyPressed: (_, key) => {
        for (const ignoredKey of ignoredKeys)
          if (key === ignoredKey) return;
        !entry.is_focus && entry.grab_focus();
      },
      children: /* @__PURE__ */ jsx(Gtk.Box, { class: "apps-window-container", orientation: Gtk.Orientation.VERTICAL, children: /* @__PURE__ */ jsx(Gtk.Box, { class: "apps-area", children: /* @__PURE__ */ jsx(
        Gtk.ScrolledWindow,
        {
          vscrollbarPolicy: Gtk.PolicyType.AUTOMATIC,
          hscrollbarPolicy: Gtk.PolicyType.NEVER,
          overlayScrolling: true,
          propagateNaturalHeight: false,
          children: /* @__PURE__ */ jsx(
            Gtk.FlowBox,
            {
              rowSpacing: 60,
              columnSpacing: 60,
              homogeneous: true,
              visible: true,
              minChildrenPerLine: 1,
              activateOnSingleClick: true,
              children: /* @__PURE__ */ jsx(For, { each: results, children: (app) => /* @__PURE__ */ jsx(
                Gtk.Button,
                {
                  visible: true,
                  heightRequest: 150,
                  tooltipMarkup: `${app.name}${app.description ? `
<span foreground="#7f7f7f">${app.description}</span>` : ""}`.replace(/\&/g, "&amp;"),
                  onActivate: () => {
                    execApp(app);
                    window.close();
                  },
                  onClicked: () => {
                    execApp(app);
                    window.close();
                  },
                  children: /* @__PURE__ */ jsxs(Gtk.Box, { orientation: Gtk.Orientation.VERTICAL, children: [
                    /* @__PURE__ */ jsx(Gtk.Image, { iconName: getAppIcon(app) ?? "application-x-executable" }),
                    /* @__PURE__ */ jsx(
                      Gtk.Label,
                      {
                        ellipsize: Pango6.EllipsizeMode.END,
                        valign: Gtk.Align.START,
                        label: app.name || "Unnamed App"
                      }
                    )
                  ] })
                }
              ) })
            }
          )
        }
      ) }) })
    }
  );
};

// windows.ts
var _openWindows_dec, _closed_dec, _opened_dec, _a9, _Windows_decorators, _openWindows, _windowConnections, _appConnections, _windows, _init8;
_Windows_decorators = [register()];
var _Windows = class _Windows extends (_a9 = GObject.Object, _opened_dec = [signal(String)], _closed_dec = [signal(String)], _openWindows_dec = [getter(Object)], _a9) {
  constructor() {
    super();
    __runInitializers(_init8, 5, this);
    __privateAdd(this, _openWindows, {});
    __privateAdd(this, _windowConnections, {});
    __privateAdd(this, _appConnections, []);
    __privateAdd(this, _windows, {
      "bar": this.createWindowForMonitors(Bar),
      "osd": this.createWindowForFocusedMonitor(OSD),
      "control-center": this.createWindowForFocusedMonitor(ControlCenter),
      "center-window": this.createWindowForFocusedMonitor(CenterWindow),
      "logout-menu": this.createWindowForFocusedMonitor(LogoutMenu),
      "floating-notifications": this.createWindowForFocusedMonitor(FloatingNotifications),
      "apps-window": this.createWindowForFocusedMonitor(AppsWindow)
    });
    __privateGet(this, _appConnections).push(
      AstalHyprland4.get_default().connect("monitor-added", (_, _monitor2) => {
        AstalHyprland4.get_default().get_monitors().length > 0 && this.reopen();
      }),
      AstalHyprland4.get_default().connect("monitor-removed", (_, monitor) => {
        Object.values(this.openWindows).map((window2, i) => {
          if (Array.isArray(window2)) {
            window2 = window2;
            window2.map((win) => {
              if (win.get_monitor() === monitor) {
                win?.close();
                __privateGet(this, _openWindows)[i] = __privateGet(this, _openWindows)[i].filter((item) => item !== win);
              }
            });
            if (__privateGet(this, _openWindows)[i].length < 1)
              delete __privateGet(this, _openWindows)[i];
          }
          window2 = window2;
          if (window2.get_monitor() === monitor)
            window2.close();
        });
      })
    );
  }
  opened(_name) {
  }
  closed(_name) {
  }
  get windows() {
    return __privateGet(this, _windows);
  }
  get openWindows() {
    return __privateGet(this, _openWindows);
  }
  vfunc_dispose() {
    Object.keys(__privateGet(this, _windowConnections)).map((name) => this.disconnectWindow(name));
    __privateGet(this, _appConnections).map((id) => GObject.signal_handler_is_connected(app_default, id) && app_default.disconnect(id));
  }
  disconnectWindow(name) {
    const window2 = __privateGet(this, _openWindows)[name];
    if (!window2) {
      console.log("couldn't disconnect, window is not open");
      return;
    }
    __privateGet(this, _windowConnections)[name].map((id) => {
      if (Array.isArray(window2)) {
        window2.map((win, i) => {
          const curId = id[i];
          GObject.signal_handler_is_connected(win, curId) && win.disconnect(curId);
        });
        return;
      }
      GObject.signal_handler_is_connected(window2, id) && window2.disconnect(id);
    });
    delete __privateGet(this, _windowConnections)[name];
  }
  connectWindow(name) {
    if (Object.hasOwn(__privateGet(this, _windowConnections), name)) return;
    if (!__privateGet(this, _openWindows)?.[name]) {
      console.log(`${name} is not open, will not connect`);
      return;
    }
    if (Array.isArray(__privateGet(this, _openWindows)[name])) {
      __privateGet(this, _windowConnections)[name] = __privateGet(this, _openWindows)[name].map((win) => [
        win.connect("map", (window2) => {
          if (this.isVisible(name)) return;
          __privateGet(this, _openWindows)[name] = window2;
          this.notify("open-windows");
        }),
        win.connect("destroy", () => {
          this.disconnectWindow(name);
          this.notify("open-windows");
        })
      ]);
      return;
    }
    __privateGet(this, _windowConnections)[name] = [
      __privateGet(this, _openWindows)[name].connect("map", (window2) => {
        if (this.isVisible(name)) return;
        __privateGet(this, _openWindows)[name] = window2;
        this.notify("open-windows");
      }),
      __privateGet(this, _openWindows)[name].connect("destroy", () => {
        this.disconnectWindow(name);
        delete __privateGet(this, _openWindows)[name];
        this.notify("open-windows");
      })
    ];
  }
  static getDefault() {
    if (!this.instance)
      this.instance = new _Windows();
    return this.instance;
  }
  /**
   * Creates a window instance for every monitor connected
   * @param windowFun function: (mon: number) => Astal.Window, returned window must use provided monitor number
   * @returns a function that when called, returns Array<Astal.Window>
   * @throws Error if there are no monitors connected
   */
  createWindowForMonitors(windowFun) {
    const monitors = AstalHyprland4.get_default().get_monitors();
    if (monitors.length < 1)
      throw new Error("Couldn't create window for monitors", {
        cause: `No monitors connected on Hyprland`
      });
    return () => monitors.map((mon) => windowFun(mon.id));
  }
  /**
   * Creates a window instance for focused monitor only
   * @param windowFun function: (mon: number) => Astal.Window, returned window must use provided monitor number
   * @returns a function that when called, returns a Astal.Window instance
   * @throws Error if no focused monitor is found
   */
  createWindowForFocusedMonitor(windowFun) {
    const focusedMonitor = AstalHyprland4.get_default().get_monitors().filter((mon) => mon.focused)[0];
    if (!focusedMonitor)
      throw new Error("Couldn't create window for focused monitor", {
        cause: `No focused monitor found (${typeof focusedMonitor})`
      });
    return () => windowFun(focusedMonitor.id);
  }
  addWindow(name, window2) {
    __privateGet(this, _windows)[name] = window2;
  }
  hasWindow(name) {
    return Boolean(this.windows?.[name]);
  }
  getWindow(name) {
    return this.windows?.[name];
  }
  getOpenWindow(name) {
    return this.openWindows?.[name];
  }
  getWindows() {
    return Object.values(this.windows);
  }
  getFocusedMonitorId() {
    return AstalHyprland4.get_default().get_monitors().filter((mon) => mon.focused)?.[0]?.id ?? null;
  }
  isVisible(name) {
    return Object.hasOwn(__privateGet(this, _openWindows), name) || Object.hasOwn(__privateGet(this, _windowConnections), name);
  }
  open(name) {
    if (this.isVisible(name)) return;
    let window2 = this.getWindow(name);
    const openWindows = window2();
    __privateGet(this, _openWindows)[name] = openWindows;
    this.connectWindow(name);
    this.emit("opened", name);
    this.notify("open-windows");
    if (Array.isArray(openWindows)) {
      openWindows.map((win) => win.show());
      return;
    }
    openWindows.show();
  }
  close(name) {
    if (!this.isVisible(name)) return;
    this.disconnectWindow(name);
    const window2 = __privateGet(this, _openWindows)[name];
    delete __privateGet(this, _openWindows)[name];
    if (Array.isArray(window2)) {
      window2.map((win) => win.close());
      this.emit("closed", name);
      this.notify("open-windows");
      return;
    }
    window2.close();
    this.emit("closed", name);
    this.notify("open-windows");
  }
  toggle(name) {
    this.isVisible(name) ? this.close(name) : this.open(name);
  }
  closeAll() {
    Object.keys(this.openWindows).map((name) => this.close(name));
  }
  reopen() {
    const openWins = Object.keys(this.openWindows);
    this.closeAll();
    openWins.map((name) => this.open(name));
  }
};
_init8 = __decoratorStart(_a9);
_openWindows = new WeakMap();
_windowConnections = new WeakMap();
_appConnections = new WeakMap();
_windows = new WeakMap();
__decorateElement(_init8, 1, "opened", _opened_dec, _Windows);
__decorateElement(_init8, 1, "closed", _closed_dec, _Windows);
__decorateElement(_init8, 2, "openWindows", _openWindows_dec, _Windows);
_Windows = __decorateElement(_init8, 0, "Windows", _Windows_decorators, _Windows);
_Windows.instance = void 0;
__runInitializers(_init8, 1, _Windows);
var Windows = _Windows;

// scripts/reload-handler.ts
import Gio9 from "gi://Gio?version=2.0";
function restartInstance(instanceName) {
  execAsync(`astal -q ${instanceName ?? app_default.instanceName ?? "astal"}`);
  Gio9.Subprocess.new(
    uwsmIsActive ? ["uwsm", "app", "--", "ags", "run"] : ["ags", "run"],
    Gio9.SubprocessFlags.STDOUT_PIPE | Gio9.SubprocessFlags.STDERR_PIPE
  );
}

// widget/runner/ResultWidget.tsx
import Pango7 from "gi://Pango?version=1.0";
var _ResultWidget_decorators, _init9, _a10;
_ResultWidget_decorators = [register({ GTypeName: "ResultWidget" })];
var ResultWidget = class extends (_a10 = Gtk.Box) {
  constructor(props) {
    super({
      cssClasses: ["result"],
      hexpand: true
    });
    this.onClick = void 0;
    this.setup = void 0;
    this.icon = void 0;
    this.closeOnClick = true;
    this.icon = props.icon;
    this.setup = props.setup;
    this.closeOnClick = props.closeOnClick ?? true;
    this.onClick = () => props.onClick?.();
    if (this.icon !== void 0) {
      if (this.icon instanceof Accessor) {
        if (typeof this.icon.get() === "string") {
          this.prepend(/* @__PURE__ */ jsx(Gtk.Image, { iconName: this.icon }));
        } else {
          this.prepend(/* @__PURE__ */ jsx(Gtk.Box, { children: /* @__PURE__ */ jsx(With, { value: this.icon, children: (widget) => widget }) }));
        }
      } else {
        if (typeof this.icon === "string")
          this.prepend(/* @__PURE__ */ jsx(Gtk.Image, { iconName: this.icon }));
        else
          this.prepend(this.icon);
      }
    }
    this.append(/* @__PURE__ */ jsxs(Gtk.Box, { orientation: Gtk.Orientation.VERTICAL, valign: Gtk.Align.CENTER, children: [
      /* @__PURE__ */ jsx(
        Gtk.Label,
        {
          class: "title",
          xalign: 0,
          ellipsize: Pango7.EllipsizeMode.END,
          label: props.title
        }
      ),
      /* @__PURE__ */ jsx(
        Gtk.Label,
        {
          class: "description",
          visible: variableToBoolean(props.description),
          ellipsize: Pango7.EllipsizeMode.END,
          xalign: 0,
          label: props.description ?? ""
        }
      )
    ] }));
  }
};
_init9 = __decoratorStart(_a10);
ResultWidget = __decorateElement(_init9, 0, "ResultWidget", _ResultWidget_decorators, ResultWidget);
__runInitializers(_init9, 1, ResultWidget);

// runner/Runner.tsx
import AstalHyprland5 from "gi://AstalHyprland";
var Runner;
((Runner2) => {
  Runner2.instance = null;
  let gtkEntry = null;
  const plugins = /* @__PURE__ */ new Set();
  function close() {
    Runner2.instance?.close();
  }
  Runner2.close = close;
  function regExMatch(search, item) {
    search = search.replace(/[\\^$.*?()[\]{}|]/g, "\\$&");
    if (typeof item === "number")
      return new RegExp(
        `${search.split("").map((c) => `${c}`).join("")}`,
        "g"
      ).test(item.toString());
    return new RegExp(
      `${search.split("").map((c) => `${c}`).join("")}`,
      "gi"
    ).test(item);
  }
  Runner2.regExMatch = regExMatch;
  function addPlugin(plugin, force) {
    if (!force && plugin.prefix && plugins.has(plugin))
      throw new Error(`Runner plugin with prefix ${plugin.prefix} already exists`);
    plugins.delete(plugin);
    plugins.add(plugin);
  }
  Runner2.addPlugin = addPlugin;
  function getPlugins() {
    return [...plugins.values()];
  }
  Runner2.getPlugins = getPlugins;
  function removePlugin(plugin) {
    return plugins.delete(plugin);
  }
  Runner2.removePlugin = removePlugin;
  function setEntryText(text) {
    gtkEntry?.set_text(text);
    gtkEntry?.set_position(gtkEntry.text.length);
    gtkEntry?.grab_focus();
  }
  Runner2.setEntryText = setEntryText;
  function openDefault(initialText) {
    return Runner2.openRunner(
      {
        entryPlaceHolder: "Start typing...",
        initialText,
        resultsLimit: 24
      },
      () => [
        new ResultWidget({
          icon: "application-x-executable-symbolic",
          title: "Use your applications",
          description: "Search for any app installed in your computer",
          closeOnClick: false,
          onClick: () => gtkEntry?.grab_focus()
        }),
        new ResultWidget({
          icon: "edit-paste-symbolic",
          title: "See your clipboard history",
          description: "Start your search with '>' to go through your clipboard history",
          closeOnClick: false,
          onClick: () => setEntryText(">")
        }),
        new ResultWidget({
          icon: "image-x-generic-symbolic",
          title: "Change your wallpaper",
          description: "Add '#' at the start to search through the wallpapers folder!",
          closeOnClick: false,
          onClick: () => setEntryText("#")
        }),
        new ResultWidget({
          icon: "utilities-terminal-symbolic",
          title: "Run shell commands",
          description: "Add '!' before your command to run it (pro tip: add a second '!' to show command output)",
          closeOnClick: false,
          onClick: () => setEntryText("!!")
        }),
        new ResultWidget({
          icon: "media-playback-start-symbolic",
          title: "Control media",
          description: "Type ':' to control playing media",
          closeOnClick: false,
          onClick: () => setEntryText(":")
        }),
        new ResultWidget({
          icon: "applications-internet-symbolic",
          title: "Search the Web",
          description: "Start typing with '?' prefix to search the web",
          closeOnClick: false,
          onClick: () => setEntryText("?")
        })
      ]
    );
  }
  Runner2.openDefault = openDefault;
  function openRunner(props, placeholder) {
    let onClickTimeout;
    const connections2 = /* @__PURE__ */ new Map();
    props.width ??= 780;
    props.height ??= 420;
    gtkEntry = /* @__PURE__ */ jsx(
      Gtk.SearchEntry,
      {
        class: "search",
        placeholderText: props.entryPlaceHolder ?? "",
        onSearchChanged: async (self) => {
          updateResultsList(self.text);
          resultsList.get_row_at_index(0) && resultsList.select_row(resultsList.get_row_at_index(0));
          if (self.text.trim().length < 1 && !mainBox.get_style_context().has_class("empty-input")) {
            mainBox.get_style_context().add_class("empty-input");
            return;
          }
          mainBox.get_style_context().has_class("empty-input") && mainBox.get_style_context().remove_class("empty-input");
        },
        onActivate: () => {
          const resultWidget = resultsList.get_selected_row()?.get_child();
          if (resultWidget instanceof ResultWidget) {
            resultWidget.onClick();
            resultWidget.closeOnClick && Runner2.close();
          }
        }
      }
    );
    const mainBox = /* @__PURE__ */ jsxs(
      Gtk.Box,
      {
        class: `runner main ${props.showResultsPlaceHolderOnStartup ? "empty" : ""}`,
        orientation: Gtk.Orientation.VERTICAL,
        hexpand: true,
        valign: Gtk.Align.START,
        children: [
          gtkEntry,
          /* @__PURE__ */ jsx(
            Gtk.ScrolledWindow,
            {
              class: "results-scrollable",
              vscrollbarPolicy: Gtk.PolicyType.AUTOMATIC,
              hscrollbarPolicy: Gtk.PolicyType.NEVER,
              hexpand: true,
              vexpand: true,
              visible: props.showResultsPlaceHolderOnStartup ?? false,
              propagateNaturalHeight: true,
              maxContentHeight: props.height,
              children: /* @__PURE__ */ jsx(Gtk.ListBox, { hexpand: true, vexpand: true })
            }
          )
        ]
      }
    );
    const scrollable = mainBox.get_last_child();
    const resultsList = scrollable.get_first_child();
    if (props?.showResultsPlaceHolderOnStartup && placeholder) {
      const placeholderGtks = placeholder();
      placeholderGtks.map((widget) => resultsList.insert(widget, -1));
    }
    function getPluginResults(input) {
      let calledPlugins = getPlugins().filter(
        (plugin) => plugin.prefix ? input.startsWith(plugin.prefix) ? true : false : true
      ).sort((plugin) => plugin.prefix != null ? 0 : 1);
      for (const plugin of calledPlugins) {
        if (plugin.prioritize) {
          calledPlugins = [plugin];
          break;
        }
      }
      const results = calledPlugins.map(
        (plugin) => plugin.handle(
          plugin.prefix ? input.replace(plugin.prefix, "") : input
        )
      ).filter((value) => value !== void 0 && value !== null).flat(1);
      return props?.resultsLimit != null && props.resultsLimit !== Infinity ? results.splice(0, props.resultsLimit) : results;
    }
    function updateResultsList(entryText) {
      const widgets = [];
      resultsList.remove_all();
      widgets.push(...getPluginResults(entryText));
      if (placeholder && widgets.length === 0)
        widgets.push(...placeholder());
      widgets.map((resultGtk) => {
        resultsList.insert(resultGtk, -1);
        const conns = [];
        conns.push(
          resultsList.connect("row-activated", (_, row) => {
            const rGtk = row.get_child();
            if (rGtk instanceof ResultWidget) {
              if (onClickTimeout) return;
              onClickTimeout = timeout(500, () => onClickTimeout = void 0);
              rGtk.onClick();
              rGtk.closeOnClick && Runner2.close();
            }
          }),
          resultsList.connect(
            "destroy",
            () => conns.forEach((id) => resultsList.disconnect(id))
          )
        );
      });
      widgets.length > 0 ? !scrollable.visible && scrollable.show() : scrollable.hide();
    }
    if (!Runner2.instance)
      Runner2.instance = Windows.getDefault().createWindowForFocusedMonitor((mon) => /* @__PURE__ */ jsx(
        PopupWindow,
        {
          namespace: "runner",
          monitor: mon,
          widthRequest: props.width,
          heightRequest: props.height,
          marginTop: AstalHyprland5.get_default().get_monitor(mon)?.height / 2 - props.height / 2,
          exclusivity: Astal.Exclusivity.IGNORE,
          halign: Gtk.Align.CENTER,
          valign: Gtk.Align.START,
          $: () => {
            plugins.forEach((plugin) => plugin.init?.());
            props.initialText && Runner2.setEntryText(props.initialText);
          },
          actionKeyPressed: (_, keyval) => {
            if (!gtkEntry.has_focus && keyval !== Gdk.KEY_F5 && keyval !== Gdk.KEY_Down && keyval !== Gdk.KEY_Up && keyval !== Gdk.KEY_Return) {
              gtkEntry.grab_focus();
              return;
            }
            keyval === Gdk.KEY_F5 && updateApps();
          },
          onDestroy: () => {
            connections2.forEach((id, obj) => GObject.signal_handler_is_connected(obj, id) && obj.disconnect(id));
            gtkEntry = null;
            [...plugins.values()].forEach((plugin) => plugin && plugin.onClose && plugin.onClose());
            Runner2.instance = null;
          },
          children: mainBox
        }
      ))();
    return Runner2.instance;
  }
  Runner2.openRunner = openRunner;
})(Runner || (Runner = {}));

// scripts/arg-handler.ts
var wsTimeout;
function handleArguments(request) {
  const args = request.split(" ");
  switch (args[0]) {
    case "open":
    case "close":
    case "toggle":
      return handleWindowArgs(args);
    case "help":
    case "h":
      return getHelp();
    case "volume":
      return handleVolumeArgs(args);
    case "reload":
      restartInstance();
      return "Restarting instance...";
    case "windows":
      return Object.keys(Windows.getDefault().windows).map((name) => `${name}: ${Windows.getDefault().isVisible(name) ? "open" : "closed"}`).join("\n");
    case "runner":
      !Runner.instance ? Runner.openDefault(args[1] || void 0) : Runner.close();
      return "Opening runner...";
    case "peek-workspace-num":
      if (wsTimeout) return "Workspace numbers are already showing";
      showWorkspaceNumber(true);
      wsTimeout = timeout(2200, () => {
        showWorkspaceNumber(false);
        wsTimeout = void 0;
      });
      return "Toggled workspace numbers";
    default:
      return "command not found! try checking help";
  }
}
function handleWindowArgs(args) {
  if (!args[1])
    return "Window argument not specified!";
  const specifiedWindow = args[1];
  if (!Windows.getDefault().hasWindow(specifiedWindow))
    return `Name "${specifiedWindow}" not found windows map! Make sure to add new Windows on the Map!`;
  switch (args[0]) {
    case "open":
      if (!Windows.getDefault().isVisible(specifiedWindow)) {
        Windows.getDefault().open(specifiedWindow);
        return `Setting visibility of window "${args[1]}" to true`;
      }
      return `Window is already open, ignored`;
    case "close":
      if (Windows.getDefault().isVisible(specifiedWindow)) {
        Windows.getDefault().close(specifiedWindow);
        return `Setting visibility of window "${args[1]}" to false`;
      }
      return `Window is already closed, ignored`;
    case "toggle":
      if (!Windows.getDefault().isVisible(specifiedWindow)) {
        Windows.getDefault().open(specifiedWindow);
        return `Toggle opening window "${args[1]}"`;
      }
      Windows.getDefault().close(specifiedWindow);
      return `Toggle closing window "${args[1]}"`;
  }
  return "Couldn't handle window management arguments";
}
function handleVolumeArgs(args) {
  if (!args[1])
    return `Please specify what you want to do!

${volumeHelp()}`;
  if (/^(sink|source)(\-increase|\-decrease|\-set)$/.test(args[1]) && !args[2])
    return `You forgot to add a value to be set!`;
  if (Number.isNaN(Number.parseFloat(args[2])) && Number.isSafeInteger(Number.parseFloat(args[2])))
    return `Argument "${args[2]} is not a valid number! Please use integers"`;
  const command = args[1].split("-");
  if (/help/.test(args[1]))
    return volumeHelp();
  switch (command[1]) {
    case "set":
      command[0] === "sink" ? Wireplumber.getDefault().setSinkVolume(Number.parseInt(args[2])) : Wireplumber.getDefault().setSourceVolume(Number.parseInt(args[2]));
      return `Done! Set ${command[0]} volume to ${args[2]}`;
    case "mute":
      command[0] === "sink" ? Wireplumber.getDefault().toggleMuteSink() : Wireplumber.getDefault().toggleMuteSource();
      return `Done toggling mute!`;
    case "increase":
      command[0] === "sink" ? Wireplumber.getDefault().increaseSinkVolume(Number.parseInt(args[2])) : Wireplumber.getDefault().increaseSourceVolume(Number.parseInt(args[2]));
      Config.getDefault().getProperty("misc.play_bell_on_volume_change", "boolean") === true && playSystemBell();
      return `Done increasing volume by ${args[2]}`;
    case "decrease":
      command[0] === "sink" ? Wireplumber.getDefault().decreaseSinkVolume(Number.parseInt(args[2])) : Wireplumber.getDefault().decreaseSourceVolume(Number.parseInt(args[2]));
      Config.getDefault().getProperty("misc.play_bell_on_volume_change", "boolean") === true && playSystemBell();
      return `Done decreasing volume to ${args[2]}`;
  }
  return `Couldn't resolve arguments! "${args.join(" ").replace(new RegExp(`^${args[0]}`), "")}"`;
  function volumeHelp() {
    return `
Control speaker and microphone volumes easily!
Options:
  (sink|source)-set [number]: set speaker/microphone volume.
  (sink|source)-mute: toggle mute for the speaker/microphone device.
  (sink|source)-increase [number]: increases speaker/microphone volume.
  (sink|source)-decrease [number]: decreases speaker/microphone volume.
`.trim();
  }
}
function getHelp() {
  return `Manage Astal Windows and do more stuff. From
        retrozinndev's Hyprland Dots, using Astal and AGS by Aylur.

        Window and Audio options:
          open   [window]: opens the specified window.
          close  [window]: closes all instances of specified window.
          toggle [window]: toggle-open/close the specified window.
          windows: list shell windows.
          reload: quit this instance and start a new one.
          volume: speaker and microphone volume controller, see "volume help".
          h, help: shows this help message.
        
        Other options:
          runner [initial_text]: open the application runner, optionally add an initial search.
          peek-workspace-num: peek the workspace numbers on bar window.

        2025 (c) retrozinndev's Hyprland-Dots, licensed under the MIT License.
        https://github.com/retrozinndev/Hyprland-Dots
    `.split("\n").map((l) => l.replace(/^ {8}/, "")).join("\n");
}

// runner/plugins/apps.ts
var PluginApps = {
  // Do not provide prefix, so it always runs.
  name: "Apps",
  // asynchronously-refresh apps list on init
  init: async () => updateApps(),
  handle: (text) => {
    return getAstalApps().fuzzy_query(text).map(
      (app) => new ResultWidget({
        title: app.get_name(),
        description: app.get_description(),
        icon: lookupIcon(app.iconName) ? app.iconName : "application-x-executable-symbolic",
        onClick: () => execApp(app)
      })
    );
  }
};

// runner/plugins/shell.ts
import GLib13 from "gi://GLib?version=2.0";
import Gio10 from "gi://Gio?version=2.0";
var PluginShell = (() => {
  const shell = GLib13.getenv("SHELL") ?? "/bin/sh";
  const procLauncher = Gio10.SubprocessLauncher.new(
    Gio10.SubprocessFlags.STDOUT_PIPE | Gio10.SubprocessFlags.STDERR_PIPE
  );
  procLauncher.set_cwd(GLib13.get_home_dir());
  return {
    prefix: "!",
    prioritize: true,
    handle: (input) => {
      let showOutputNotif = false;
      if (input.startsWith("!")) {
        input = input.replace("!", "");
        showOutputNotif = true;
      }
      const command = input ? GLib13.shell_parse_argv(input) : void 0;
      return new ResultWidget({
        onClick: () => {
          if (!command || !command[0]) return;
          const proc = procLauncher.spawnv([shell, "-c", `${input}`]);
          proc.communicate_utf8_async(null, null, (_, asyncResult) => {
            const [success, stdout, stderr] = proc.communicate_utf8_finish(asyncResult);
            if (!success || stderr) {
              Notifications.getDefault().sendNotification({
                appName: shell,
                summary: "Command error",
                body: `An error occurred on \`${input}\`. Stderr: ${stderr}`
              });
              return;
            }
            if (!showOutputNotif) return;
            Notifications.getDefault().sendNotification({
              appName: shell,
              summary: "Command output",
              body: stdout
            });
          });
        },
        title: `Run ${input ? ` \`${input}\`` : `with ${shell.split("/")[shell.split("/").length - 1]}`}`,
        description: (input || showOutputNotif) && `${input ? `${shell}	` : ""}${showOutputNotif ? "(showing output on notification)" : ""}`,
        icon: "utilities-terminal-symbolic"
      });
    }
  };
})();

// runner/plugins/websearch.ts
import AstalHyprland6 from "gi://AstalHyprland";
var searchEngines = {
  duckduckgo: "https://duckduckgo.com/?q=",
  google: "https://google.com/search?q=",
  yahoo: "https://search.yahoo.com/search?p="
};
var engine = searchEngines.google;
var PluginWebSearch = {
  prefix: "?",
  name: "Web Search",
  prioritize: true,
  handle: (search) => {
    return new ResultWidget({
      icon: "system-search-symbolic",
      title: search || "Type your search...",
      description: `Search the Web`,
      onClick: () => AstalHyprland6.get_default().dispatch(
        "exec",
        `xdg-open "${engine + search}"`
      )
    });
  }
};

// runner/plugins/media.ts
import AstalMpris3 from "gi://AstalMpris";
var PluginMedia = {
  prefix: ":",
  handle() {
    if (!player.get().available) return new ResultWidget({
      icon: "folder-music-symbolic",
      title: "Couldn't find any players",
      closeOnClick: false,
      description: "No media / player found with mpris"
    });
    return [
      new ResultWidget({
        icon: createBinding(player.get(), "playbackStatus").as((status) => status === AstalMpris3.PlaybackStatus.PLAYING ? "media-playback-pause-symbolic" : "media-playback-start-symbolic"),
        closeOnClick: false,
        title: createComputed([
          createBinding(player.get(), "title"),
          createBinding(player.get(), "artist"),
          createBinding(player.get(), "playbackStatus")
        ], (title, artist, status) => `${status === AstalMpris3.PlaybackStatus.PLAYING ? "Pause" : "Play"} ${title} | ${artist}`),
        onClick: () => player.get().play_pause()
      }),
      new ResultWidget({
        icon: "media-skip-backward-symbolic",
        closeOnClick: false,
        title: createComputed(
          [
            createBinding(player.get(), "title"),
            createBinding(player.get(), "artist")
          ],
          (title, artist) => `Go Previous ${title ? title : player.get().busName}${artist ? ` | ${artist}` : ""}`
        ),
        onClick: () => player.get().canGoPrevious && player.get().previous()
      }),
      new ResultWidget({
        icon: "media-skip-forward-symbolic",
        closeOnClick: false,
        title: createComputed(
          [
            createBinding(player.get(), "title"),
            createBinding(player.get(), "artist")
          ],
          (title, artist) => `Go Next ${title ? title : player.get().busName}${artist ? ` | ${artist}` : ""}`
        ),
        onClick: () => player.get().canGoNext && player.get().next()
      })
    ];
  }
};

// runner/plugins/wallpapers.ts
import Gio11 from "gi://Gio?version=2.0";
var _PluginWallpapers = class {
  constructor() {
    this.prefix = "#";
    this.prioritize = true;
  }
  #files;
  init() {
    this.#files = [];
    const dir = Gio11.File.new_for_path(Wallpaper.getDefault().wallpapersPath);
    if (dir.query_file_type(null, null) === Gio11.FileType.DIRECTORY) {
      for (const file of dir.enumerate_children(
        "standard::*",
        Gio11.FileQueryInfoFlags.NOFOLLOW_SYMLINKS,
        null
      )) {
        this.#files.push(`${dir.get_path()}/${file.get_name()}`);
      }
    }
  }
  handle(search) {
    if (this.#files.length > 0)
      return this.#files.filter(
        (file) => (
          // not the best way to search, but it works
          Runner.regExMatch(search, file.split("/")[file.split("/").length - 1])
        )
      ).map((path) => new ResultWidget({
        title: path.split("/")[path.split("/").length - 1].replace(/\..*$/, ""),
        onClick: () => Wallpaper.getDefault().setWallpaper(path)
      }));
    return new ResultWidget({
      title: "No wallpapers found!",
      description: "Define the $WALLPAPERS variable on Hyprland or create a ~/wallpapers directory",
      icon: "image-missing-symbolic"
    });
  }
};
var PluginWallpapers = new _PluginWallpapers();

// scripts/stylesheet.ts
import Gio12 from "gi://Gio?version=2.0";
import GLib14 from "gi://GLib?version=2.0";
var Stylesheet = class _Stylesheet {
  #watchDelay;
  #outputPath = Gio12.File.new_for_path(`${GLib14.get_user_state_dir()}/ags/style`);
  #styles = [
    "./style",
    "./style.scss"
  ];
  async compileSass() {
    console.log("Stylesheet: Compiling Sass");
    exec(`bash -c "sass ${this.#styles.map((style) => `-I ${style}`).join("s")} ${this.#outputPath.get_path()}/style.css"`);
  }
  async reapply(cssFilePath) {
    console.log("Stylesheet: Applying stylesheet");
    const content = readFile(cssFilePath);
    if (content) {
      app_default.reset_css();
      app_default.apply_css(content);
      console.log("Stylesheet: done applying stylesheet to shell");
      return;
    }
    console.error(`Stylesheet: An error occurred while trying to read the css file: ${cssFilePath}`);
  }
  async compileApply() {
    await this.compileSass().catch(
      (err) => console.error(`Stylesheet: An Error occurred and Sass couldn't be compiled. Stderr:
${err.message ? `	${err.message}
` : ""}${err.stack}
`)
    ).then(() => this.reapply(this.#outputPath.get_path() + "/style.css"));
  }
  static getDefault() {
    if (!this.instance)
      this.instance = new _Stylesheet();
    return this.instance;
  }
  constructor() {
    (async () => !this.#outputPath.query_exists(null) && this.#outputPath.make_directory_with_parents(null))();
    this.#styles.map(
      (path) => monitorFile(
        `${path}`,
        (file) => {
          if (this.#watchDelay || file.endsWith("~") || Number.isNaN(file))
            return;
          this.#watchDelay = timeout(250, () => this.#watchDelay = void 0);
          console.log(`Stylesheet: \`${file.startsWith(GLib14.get_home_dir()) ? file.replace(GLib14.get_home_dir(), "~") : file}\` changed`);
          this.compileApply();
        }
      )
    );
    monitorFile(
      `${GLib14.get_user_cache_dir()}/wal/colors.scss`,
      (file) => {
        execAsync(`bash -c "cp -f ${file} ./style/_wal.scss"`).catch((r) => {
          console.error(`Stylesheet: Failed to copy pywal stylesheet to style dir. Stderr: ${r}`);
        });
      }
    );
  }
};

// runner/plugins/clipboard.tsx
var PluginClipboard = {
  prefix: ">",
  prioritize: true,
  handle: (search) => {
    if (Clipboard.getDefault().history.length < 1)
      return /* @__PURE__ */ jsx(
        ResultWidget,
        {
          icon: "edit-paste-symbolic",
          title: "Clipboard is empty",
          description: "Copy something and it will be shown right here!"
        }
      );
    return Clipboard.getDefault().history.filter((item) => (
      // not the best way to search, but it works
      Runner.regExMatch(search, item.id) || Runner.regExMatch(search, item.preview)
    )).map((item) => /* @__PURE__ */ jsx(
      ResultWidget,
      {
        icon: /* @__PURE__ */ jsx(
          Gtk.Label,
          {
            label: `${item.id}`,
            css: "font-size: 16px; margin-right: 8px; font-weight: 600;"
          }
        ),
        title: item.preview,
        onClick: () => Clipboard.getDefault().selectItem(item).catch((err) => {
          console.error(
            `Runner(Plugin/Clipboard): An error occurred while selecting clipboard item. Stderr:
${err.message ? `${err.message}
` : ""}Stack: ${err.stack}`
          );
        })
      }
    ));
  }
};

// app.ts
var osdTimer;
var osdTimeout = 3500;
var connections = /* @__PURE__ */ new Map();
var defaultWindows = ["bar"];
var runnerPlugins = [
  PluginApps,
  PluginShell,
  PluginWebSearch,
  PluginMedia,
  PluginWallpapers,
  PluginClipboard
];
app_default.start({
  instanceName: "astal",
  icons: "icons/",
  requestHandler: (request, response) => {
    response(handleArguments(request));
  },
  main: (..._args) => {
    console.log(`Initialized astal instance as: ${app_default.instanceName || "astal"}`);
    console.log("Config: initializing configuration file");
    Config.getDefault();
    Stylesheet.getDefault().compileApply();
    app_default.vfunc_dispose = () => {
      console.log("Disconnecting stuff");
      connections.forEach((v, k) => Array.isArray(v) ? v.map((id) => k.disconnect(id)) : k.disconnect(v));
    };
    Clipboard.getDefault();
    connections.set(Wireplumber.getDefault(), [
      Wireplumber.getDefault().getDefaultSink().connect("notify::volume", () => triggerOSD())
    ]);
    connections.set(Notifications.getDefault(), [
      Notifications.getDefault().connect("notification-added", (_, _notif) => {
        Windows.getDefault().open("floating-notifications");
      }),
      Notifications.getDefault().connect("notification-removed", (_, _id) => {
        _.notifications.length === 0 && Windows.getDefault().close("floating-notifications");
      })
    ]);
    console.log("Initializing wallpaper handler");
    Wallpaper.getDefault();
    console.log("Adding runner plugins");
    runnerPlugins.map((plugin) => Runner.addPlugin(plugin));
    console.log("Opening default windows");
    defaultWindows.map((name) => {
      if (Windows.getDefault().isVisible(name)) return;
      Windows.getDefault().open(name);
    });
  }
});
function triggerOSD() {
  if (Windows.getDefault().isVisible("control-center")) return;
  Windows.getDefault().open("osd");
  if (!osdTimer) {
    osdTimer = timeout(osdTimeout, () => {
      osdTimer = void 0;
      Windows.getDefault().close("osd");
    });
    return;
  }
  osdTimer.cancel();
  osdTimer = timeout(osdTimeout, () => {
    Windows.getDefault().close("osd");
    osdTimer = void 0;
  });
}
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiaTE4bi9sYW5nL2VuX1VTLnRzIiwgImkxOG4vbGFuZy9wdF9CUi50cyIsICJpMThuL2xhbmcvcnVfUlUudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vdXNyL3NoYXJlL2Fncy9qcy9nbmltL3NyYy9nb2JqZWN0LnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL3Vzci9zaGFyZS9hZ3MvanMvZ25pbS9zcmMvdXRpbC50cyIsICJzY3JpcHRzL3ZvbHVtZS50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi91c3Ivc2hhcmUvYWdzL2pzL3NyYy9ndGs0L2luZGV4LnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL3Vzci9zaGFyZS9hZ3MvanMvZ25pbS9zcmMvanN4L2pzeC50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi91c3Ivc2hhcmUvYWdzL2pzL2duaW0vc3JjL2pzeC9zdGF0ZS50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi91c3Ivc2hhcmUvYWdzL2pzL2duaW0vc3JjL2pzeC9lbnYudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vdXNyL3NoYXJlL2Fncy9qcy9nbmltL3NyYy9qc3gvc2NvcGUudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vdXNyL3NoYXJlL2Fncy9qcy9nbmltL3NyYy9qc3gvRnJhZ21lbnQudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vdXNyL3NoYXJlL2Fncy9qcy9nbmltL3NyYy9nbm9tZS9zaWduYWxUcmFja2VyLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL3Vzci9zaGFyZS9hZ3MvanMvZ25pbS9zcmMvanN4L0Zvci50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi91c3Ivc2hhcmUvYWdzL2pzL2duaW0vc3JjL2pzeC9XaXRoLnRzIiwgIndpZGdldC9iYXIvVHJheS50c3giLCAiLi4vLi4vLi4vLi4vLi4vLi4vdXNyL3NoYXJlL2Fncy9qcy9zcmMvdGltZS50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi91c3Ivc2hhcmUvYWdzL2pzL3NyYy9wcm9jZXNzLnRzIiwgInNjcmlwdHMvdXRpbHMudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vdXNyL3NoYXJlL2Fncy9qcy9zcmMvZ3RrNC9qc3gtcnVudGltZS50cyIsICIuLi8uLi8uLi8uLi8uLi8uLi91c3Ivc2hhcmUvYWdzL2pzL2duaW0vc3JjL2d0azQvanN4LXJ1bnRpbWUudHMiLCAid2lkZ2V0L2Jhci9Xb3Jrc3BhY2VzLnRzeCIsICJzY3JpcHRzL2FwcHMudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vdXNyL3NoYXJlL2Fncy9qcy9zcmMvZmlsZS50cyIsICJzY3JpcHRzL25vdGlmaWNhdGlvbnMudHMiLCAic2NyaXB0cy9jb25maWcudHMiLCAid2lkZ2V0L1NlcGFyYXRvci50c3giLCAid2lkZ2V0L2Jhci9Gb2N1c2VkQ2xpZW50LnRzeCIsICJzY3JpcHRzL2NsaXBib2FyZC50cyIsICJ3aWRnZXQvYmFyL01lZGlhLnRzeCIsICJpMThuL2ludGwudHMiLCAid2lkZ2V0L2Jhci9BcHBzLnRzeCIsICJ3aWRnZXQvYmFyL0Nsb2NrLnRzeCIsICJzY3JpcHRzL3JlY29yZGluZy50cyIsICJ3aWRnZXQvYmFyL1N0YXR1cy50c3giLCAid2luZG93L0Jhci50c3giLCAiLi4vLi4vLi4vLi4vLi4vLi4vdXNyL3NoYXJlL2Fncy9qcy9zcmMvZ3RrNC9hcHAudHMiLCAiLi4vLi4vLi4vLi4vLi4vLi4vdXNyL3NoYXJlL2Fncy9qcy9zcmMvb3ZlcnJpZGVzLnRzIiwgIi4uLy4uLy4uLy4uLy4uLy4uL3Vzci9zaGFyZS9hZ3MvanMvc3JjL19hcHAudHMiLCAid2luZG93cy50cyIsICJ3aW5kb3cvT1NELnRzeCIsICJ3aWRnZXQvQmFja2dyb3VuZFdpbmRvdy50c3giLCAid2lkZ2V0L1BvcHVwV2luZG93LnRzeCIsICJ3aWRnZXQvTm90aWZpY2F0aW9uLnRzeCIsICJ3aWRnZXQvY29udHJvbC1jZW50ZXIvTm90aWZIaXN0b3J5LnRzeCIsICJzY3JpcHRzL3dhbGxwYXBlci50cyIsICJ3aWRnZXQvY29udHJvbC1jZW50ZXIvUXVpY2tBY3Rpb25zLnRzeCIsICJ3aW5kb3cvQ29udHJvbENlbnRlci50c3giLCAid2luZG93L0Zsb2F0aW5nTm90aWZpY2F0aW9ucy50c3giLCAid2lkZ2V0L2NlbnRlci13aW5kb3cvQmlnTWVkaWEudHN4IiwgIndpbmRvdy9DZW50ZXJXaW5kb3cudHN4IiwgIndpZGdldC9DdXN0b21EaWFsb2cudHN4IiwgIndpZGdldC9Bc2tQb3B1cC50c3giLCAic2NyaXB0cy9uaWdodGxpZ2h0LnRzIiwgIndpbmRvdy9Mb2dvdXRNZW51LnRzeCIsICJ3aW5kb3cvQXBwc1dpbmRvdy50c3giLCAic2NyaXB0cy9yZWxvYWQtaGFuZGxlci50cyIsICJ3aWRnZXQvcnVubmVyL1Jlc3VsdFdpZGdldC50c3giLCAicnVubmVyL1J1bm5lci50c3giLCAic2NyaXB0cy9hcmctaGFuZGxlci50cyIsICJydW5uZXIvcGx1Z2lucy9hcHBzLnRzIiwgInJ1bm5lci9wbHVnaW5zL3NoZWxsLnRzIiwgInJ1bm5lci9wbHVnaW5zL3dlYnNlYXJjaC50cyIsICJydW5uZXIvcGx1Z2lucy9tZWRpYS50cyIsICJydW5uZXIvcGx1Z2lucy93YWxscGFwZXJzLnRzIiwgInNjcmlwdHMvc3R5bGVzaGVldC50cyIsICJydW5uZXIvcGx1Z2lucy9jbGlwYm9hcmQudHN4IiwgImFwcC50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgaTE4blN0cnVjdCB9IGZyb20gXCIuLi9zdHJ1Y3RcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIGxhbmd1YWdlOiBcIkVuZ2xpc2ggKFVuaXRlZCBTdGF0ZXMpXCIsXG5cbiAgICBjYW5jZWw6IFwiQ2FuY2VsXCIsXG4gICAgYWNjZXB0OiBcIk9rXCIsXG4gICAgZGV2aWNlczogXCJEZXZpY2VzXCIsXG4gICAgb3RoZXJzOiBcIk90aGVyc1wiLFxuXG4gICAgY29ubmVjdGVkOiBcIkNvbm5lY3RlZFwiLFxuICAgIGRpc2Nvbm5lY3RlZDogXCJEaXNjb25uZWN0ZWRcIixcbiAgICB1bmtub3duOiBcIlVua25vd25cIixcbiAgICBjb25uZWN0aW5nOiBcIkNvbm5lY3RpbmdcIixcbiAgICBub25lOiBcIk5vbmVcIixcbiAgICBsaW1pdGVkOiBcIkxpbWl0ZWRcIixcbiAgICBhcHBzOiBcIkFwcGxpY2F0aW9uc1wiLFxuXG4gICAgY2xlYXI6IFwiQ2xlYXJcIixcblxuICAgIGNvbm5lY3Q6IFwiQ29ubmVjdFwiLFxuICAgIGRpc2Nvbm5lY3Q6IFwiRGlzY29ubmVjdFwiLFxuXG4gICAgY29udHJvbF9jZW50ZXI6IHtcbiAgICAgICAgdGlsZXM6IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6IFwiRW5hYmxlZFwiLFxuICAgICAgICAgICAgZGlzYWJsZWQ6IFwiRGlzYWJsZWRcIixcbiAgICAgICAgICAgIG1vcmU6IFwiTW9yZVwiLFxuXG4gICAgICAgICAgICBuZXR3b3JrOiB7XG4gICAgICAgICAgICAgICAgbmV0d29yazogXCJOZXR3b3JrXCIsXG4gICAgICAgICAgICAgICAgd2lyZWxlc3M6IFwiV2lyZWxlc3NcIixcbiAgICAgICAgICAgICAgICB3aXJlZDogXCJXaXJlZFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVjb3JkaW5nOiB7XG4gICAgICAgICAgICAgICAgdGl0bGU6IFwiU2NyZWVuIFJlY29yZGluZ1wiLFxuICAgICAgICAgICAgICAgIGRpc2FibGVkX2Rlc2M6IFwiU3RhcnQgcmVjb3JkaW5nXCIsXG4gICAgICAgICAgICAgICAgZW5hYmxlZF9kZXNjOiBcIlN0b3AgcmVjb3JkaW5nXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZG5kOiB7XG4gICAgICAgICAgICAgICAgdGl0bGU6IFwiRG8gTm90IERpc3R1cmJcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5pZ2h0X2xpZ2h0OiB7XG4gICAgICAgICAgICAgICAgdGl0bGU6IFwiTmlnaHQgTGlnaHRcIixcbiAgICAgICAgICAgICAgICBkZWZhdWx0X2Rlc2M6IFwiRmlkZWxpdHlcIlxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBwYWdlczoge1xuICAgICAgICAgICAgbW9yZV9zZXR0aW5nczogXCJNb3JlIHNldHRpbmdzXCIsXG4gICAgICAgICAgICBzb3VuZDoge1xuICAgICAgICAgICAgICAgIHRpdGxlOiBcIlNvdW5kXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQ29uZmlndXJlIHRoZSBhdWRpbyBvdXRwdXRcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1pY3JvcGhvbmU6IHtcbiAgICAgICAgICAgICAgICB0aXRsZTogXCJNaWNyb3Bob25lXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQ29uZmlndXJlIHRoZSBhdWRpbyBpbnB1dFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmlnaHRfbGlnaHQ6IHtcbiAgICAgICAgICAgICAgICB0aXRsZTogXCJOaWdodCBMaWdodFwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkNvbnRyb2wgTmlnaHQgTGlnaHQgYW5kIEdhbW1hIGZpbHRlcnNcIixcbiAgICAgICAgICAgICAgICBnYW1tYTogXCJHYW1tYVwiLFxuICAgICAgICAgICAgICAgIHRlbXBlcmF0dXJlOiBcIlRlbXBlcmF0dXJlXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBibHVldG9vdGg6IHtcbiAgICAgICAgICAgICAgICB0aXRsZTogXCJCbHVldG9vdGhcIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJNYW5hZ2UgQmx1ZXRvb3RoIGRldmljZXNcIixcbiAgICAgICAgICAgICAgICBuZXdfZGV2aWNlczogXCJOZXcgZGV2aWNlc1wiLFxuICAgICAgICAgICAgICAgIGFkYXB0ZXJzOiBcIkFkYXB0ZXJzXCIsXG4gICAgICAgICAgICAgICAgcGFpcmVkX2RldmljZXM6IFwiUGFpcmVkIERldmljZXNcIixcbiAgICAgICAgICAgICAgICBzdGFydF9kaXNjb3ZlcmluZzogXCJTdGFydCBkaXNjb3ZlcmluZ1wiLFxuICAgICAgICAgICAgICAgIHN0b3BfZGlzY292ZXJpbmc6IFwiU3RvcCBkaXNjb3ZlcmluZ1wiLFxuICAgICAgICAgICAgICAgIHVudHJ1c3RfZGV2aWNlOiBcIlVudHJ1c3QgZGV2aWNlXCIsXG4gICAgICAgICAgICAgICAgdW5wYWlyX2RldmljZTogXCJVbnBhaXIgZGV2aWNlXCIsXG4gICAgICAgICAgICAgICAgdHJ1c3RfZGV2aWNlOiBcIlRydXN0IGRldmljZVwiLFxuICAgICAgICAgICAgICAgIHBhaXJfZGV2aWNlOiBcIlBhaXIgZGV2aWNlXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuZXR3b3JrOiB7XG4gICAgICAgICAgICAgICAgdGl0bGU6IFwiTmV0d29ya1wiLFxuICAgICAgICAgICAgICAgIGludGVyZmFjZTogXCJJbnRlcmZhY2VcIlxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbiAgICBhc2tfcG9wdXA6IHtcbiAgICAgICAgdGl0bGU6IFwiUXVlc3Rpb25cIlxuICAgIH1cbn0gYXMgaTE4blN0cnVjdDtcbiIsICJpbXBvcnQgeyBpMThuU3RydWN0IH0gZnJvbSBcIi4uL3N0cnVjdFwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgbGFuZ3VhZ2U6IFwiUG9ydHVndVx1MDBFQXMgKEJyYXNpbClcIixcblxuICAgIGNhbmNlbDogXCJDYW5jZWxhclwiLFxuICAgIGFjY2VwdDogXCJPa1wiLFxuICAgIGRldmljZXM6IFwiRGlzcG9zaXRpdm9zXCIsXG4gICAgb3RoZXJzOiBcIk91dHJvc1wiLFxuXG4gICAgY29ubmVjdGVkOiBcIkNvbmVjdGFkb1wiLFxuICAgIGRpc2Nvbm5lY3RlZDogXCJEZXNjb25lY3RhZG9cIixcbiAgICB1bmtub3duOiBcIkRlc2NvbmhlY2lkb1wiLFxuICAgIGNvbm5lY3Rpbmc6IFwiQ29uZWN0YW5kb1wiLFxuICAgIGxpbWl0ZWQ6IFwiTGltaXRhZG9cIixcbiAgICBub25lOiBcIk5lbmh1bVwiLFxuXG4gICAgZGlzY29ubmVjdDogXCJEZXNjb25lY3RhclwiLFxuICAgIGNvbm5lY3Q6IFwiQ29uZWN0YXJcIixcblxuICAgIGFwcHM6IFwiQXBsaWNhdGl2b3NcIixcbiAgICBjbGVhcjogXCJMaW1wYXJcIixcblxuICAgIGNvbnRyb2xfY2VudGVyOiB7XG4gICAgICAgIHRpbGVzOiB7XG4gICAgICAgICAgICBlbmFibGVkOiBcIkxpZ2Fkb1wiLFxuICAgICAgICAgICAgZGlzYWJsZWQ6IFwiRGVzbGlnYWRvXCIsXG4gICAgICAgICAgICBtb3JlOiBcIk1haXNcIixcblxuICAgICAgICAgICAgbmV0d29yazoge1xuICAgICAgICAgICAgICAgIG5ldHdvcms6IFwiUmVkZVwiLFxuICAgICAgICAgICAgICAgIHdpcmVsZXNzOiBcIldpLUZpXCIsXG4gICAgICAgICAgICAgICAgd2lyZWQ6IFwiQ2FiZWFkYVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVjb3JkaW5nOiB7XG4gICAgICAgICAgICAgICAgdGl0bGU6IFwiR3JhdmFcdTAwRTdcdTAwRTNvIGRlIFRlbGFcIixcbiAgICAgICAgICAgICAgICBkaXNhYmxlZF9kZXNjOiBcIkluaWNpYXIgZ3JhdmFcdTAwRTdcdTAwRTNvXCIsXG4gICAgICAgICAgICAgICAgZW5hYmxlZF9kZXNjOiBcIlBhcmFyIGdyYXZhXHUwMEU3XHUwMEUzb1wiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRuZDoge1xuICAgICAgICAgICAgICAgIHRpdGxlOiBcIk5cdTAwRTNvIFBlcnR1cmJlXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuaWdodF9saWdodDoge1xuICAgICAgICAgICAgICAgIHRpdGxlOiBcIkx1eiBOb3R1cm5hXCIsXG4gICAgICAgICAgICAgICAgZGVmYXVsdF9kZXNjOiBcIkZpZGVsaWRhZGVcIlxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBwYWdlczoge1xuICAgICAgICAgICAgbW9yZV9zZXR0aW5nczogXCJNYWlzIGNvbmZpZ3VyYVx1MDBFN1x1MDBGNWVzXCIsXG4gICAgICAgICAgICBzb3VuZDoge1xuICAgICAgICAgICAgICAgIHRpdGxlOiBcIlNvbVwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkNvbnRyb2xlIGEgc2FcdTAwRURkYSBkZSBcdTAwRTF1ZGlvXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtaWNyb3Bob25lOiB7XG4gICAgICAgICAgICAgICAgdGl0bGU6IFwiTWljcm9mb25lXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQ29uZmlndXJlIGEgZW50cmFkYSBkZSBcdTAwRTF1ZGlvXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuaWdodF9saWdodDoge1xuICAgICAgICAgICAgICAgIHRpdGxlOiBcIkx1eiBOb3R1cm5hXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQ29udHJvbGUgb3MgZmlsdHJvcyBkZSBMdXogTm90dXJuYSBlIEdhbWFcIixcbiAgICAgICAgICAgICAgICB0ZW1wZXJhdHVyZTogXCJUZW1wZXJhdHVyYVwiLFxuICAgICAgICAgICAgICAgIGdhbW1hOiBcIkdhbWFcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJsdWV0b290aDoge1xuICAgICAgICAgICAgICAgIHRpdGxlOiBcIkJsdWV0b290aFwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkdlcmVuY2llIGRpc3Bvc2l0aXZvcyBCbHVldG9vdGhcIixcbiAgICAgICAgICAgICAgICBuZXdfZGV2aWNlczogXCJOb3ZvcyBEaXNwb3NpdGl2b3NcIixcbiAgICAgICAgICAgICAgICBhZGFwdGVyczogXCJBZGFwdGFkb3Jlc1wiLFxuICAgICAgICAgICAgICAgIHBhaXJlZF9kZXZpY2VzOiBcIkRpc3Bvc2l0aXZvcyBQYXJlYWRvc1wiLFxuICAgICAgICAgICAgICAgIHN0YXJ0X2Rpc2NvdmVyaW5nOiBcIkNvbWVcdTAwRTdhciBhIHByb2N1cmFyIGRpc3Bvc2l0aXZvc1wiLFxuICAgICAgICAgICAgICAgIHN0b3BfZGlzY292ZXJpbmc6IFwiUGFyYXIgZGUgcHJvY3VyYXIgZGlzcG9zaXRpdm9zXCIsXG4gICAgICAgICAgICAgICAgcGFpcl9kZXZpY2U6IFwiUGFyZWFyIGRpc3Bvc2l0aXZvXCIsXG4gICAgICAgICAgICAgICAgdHJ1c3RfZGV2aWNlOiBcIkNvbmZpYXIgbm8gZGlzcG9zaXRpdm9cIixcbiAgICAgICAgICAgICAgICB1bnBhaXJfZGV2aWNlOiBcIkRlc3BhcmVhciBkaXNwb3NpdGl2b1wiLFxuICAgICAgICAgICAgICAgIHVudHJ1c3RfZGV2aWNlOiBcIkRlaXhhciBkZSBjb25maWFyIG5vIGRpc3Bvc2l0aXZvXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuZXR3b3JrOiB7XG4gICAgICAgICAgICAgICAgdGl0bGU6IFwiUmVkZVwiLFxuICAgICAgICAgICAgICAgIGludGVyZmFjZTogXCJJbnRlcmZhY2VcIlxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbiAgICBhc2tfcG9wdXA6IHtcbiAgICAgICAgdGl0bGU6IFwiUGVyZ3VudGFcIlxuICAgIH1cbn0gYXMgaTE4blN0cnVjdDtcbiIsICJpbXBvcnQgeyBpMThuU3RydWN0IH0gZnJvbSBcIi4uL3N0cnVjdFwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgbGFuZ3VhZ2U6IFwiXHUwNDIwXHUwNDQzXHUwNDQxXHUwNDQxXHUwNDNBXHUwNDM4XHUwNDM5IChcdTA0MjBcdTA0M0VcdTA0NDFcdTA0NDFcdTA0MzhcdTA0MzlcdTA0NDFcdTA0M0FcdTA0MzBcdTA0NEYgXHUwNDI0XHUwNDM1XHUwNDM0XHUwNDM1XHUwNDQwXHUwNDMwXHUwNDQ2XHUwNDM4XHUwNDRGKVwiLFxuXG4gICAgY2FuY2VsOiBcIlx1MDQxRVx1MDQ0Mlx1MDQzQ1x1MDQzNVx1MDQzRFx1MDQzOFx1MDQ0Mlx1MDQ0Q1wiLFxuICAgIGFjY2VwdDogXCJcdTA0MUVcdTA0M0FcIixcbiAgICBkZXZpY2VzOiBcIlx1MDQyM1x1MDQ0MVx1MDQ0Mlx1MDQ0MFx1MDQzRVx1MDQzOVx1MDQ0MVx1MDQ0Mlx1MDQzMlx1MDQzMFwiLFxuICAgIG90aGVyczogXCJcdTA0MTRcdTA0NDBcdTA0NDNcdTA0MzNcdTA0MzhcdTA0MzVcIixcblxuICAgIGNvbm5lY3RlZDogXCJcdTA0MUZcdTA0M0VcdTA0MzRcdTA0M0FcdTA0M0JcdTA0NEVcdTA0NDdcdTA0NTFcdTA0M0RcIixcbiAgICBkaXNjb25uZWN0ZWQ6IFwiXHUwNDFFXHUwNDQyXHUwNDNBXHUwNDNCXHUwNDRFXHUwNDQ3XHUwNDUxXHUwNDNEXCIsXG4gICAgdW5rbm93bjogXCJcdTA0MURcdTA0MzVcdTA0MzhcdTA0MzdcdTA0MzJcdTA0MzVcdTA0NDFcdTA0NDJcdTA0M0RcdTA0NEJcdTA0MzlcIixcbiAgICBjb25uZWN0aW5nOiBcIlx1MDQxRlx1MDQzRVx1MDQzNFx1MDQzQVx1MDQzQlx1MDQ0RVx1MDQ0N1x1MDQzNVx1MDQzRFx1MDQzOFx1MDQzNVwiLFxuICAgIG5vbmU6IFwiXHUwNDFEXHUwNDM4XHUwNDQ3XHUwNDM1XHUwNDMzXHUwNDNFXCIsXG4gICAgbGltaXRlZDogXCJcdTA0MUVcdTA0MzNcdTA0NDBcdTA0MzBcdTA0M0RcdTA0MzhcdTA0NDdcdTA0MzVcdTA0M0RcIixcbiAgICBhcHBzOiBcIlx1MDQxRlx1MDQ0MFx1MDQzOFx1MDQzQlx1MDQzRVx1MDQzNlx1MDQzNVx1MDQzRFx1MDQzOFx1MDQ0RlwiLFxuXG4gICAgY2xlYXI6IFwiXHUwNDFFXHUwNDQ3XHUwNDM4XHUwNDQxXHUwNDQyXHUwNDM4XHUwNDQyXHUwNDRDXCIsXG5cbiAgICBjb25uZWN0OiBcIlx1MDQxRlx1MDQzRVx1MDQzNFx1MDQzQVx1MDQzQlx1MDQ0RVx1MDQ0N1x1MDQzOFx1MDQ0Mlx1MDQ0Q1x1MDQ0MVx1MDQ0RlwiLFxuICAgIGRpc2Nvbm5lY3Q6IFwiXHUwNDFFXHUwNDQyXHUwNDNBXHUwNDNCXHUwNDRFXHUwNDQ3XHUwNDM4XHUwNDQyXHUwNDRDXHUwNDQxXHUwNDRGXCIsXG5cbiAgICBjb250cm9sX2NlbnRlcjoge1xuICAgICAgICB0aWxlczoge1xuICAgICAgICAgICAgZW5hYmxlZDogXCJcdTA0MTJcdTA0M0FcdTA0M0JcdTA0NEVcdTA0NDdcdTA0MzhcdTA0NDJcdTA0NENcIixcbiAgICAgICAgICAgIGRpc2FibGVkOiBcIlx1MDQxRVx1MDQ0Mlx1MDQzQVx1MDQzQlx1MDQ0RVx1MDQ0N1x1MDQzOFx1MDQ0Mlx1MDQ0Q1wiLFxuICAgICAgICAgICAgbW9yZTogXCJcdTA0MTFcdTA0M0VcdTA0M0JcdTA0NENcdTA0NDhcdTA0MzVcIixcblxuICAgICAgICAgICAgbmV0d29yazoge1xuICAgICAgICAgICAgICAgIG5ldHdvcms6IFwiXHUwNDE4XHUwNDNEXHUwNDM1XHUwNDQyXHUwNDQwXHUwNDNEXHUwNDM1XHUwNDQyXCIsXG4gICAgICAgICAgICAgICAgd2lyZWxlc3M6IFwiXHUwNDExXHUwNDM1XHUwNDQxXHUwNDNGXHUwNDQwXHUwNDNFXHUwNDMyXHUwNDNFXHUwNDM0XHUwNDNEXHUwNDNFXHUwNDM1XCIsXG4gICAgICAgICAgICAgICAgd2lyZWQ6IFwiXHUwNDFGXHUwNDQwXHUwNDNFXHUwNDMyXHUwNDNFXHUwNDM0XHUwNDNEXHUwNDNFXHUwNDM1XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZWNvcmRpbmc6IHtcbiAgICAgICAgICAgICAgICB0aXRsZTogXCJcdTA0MTdcdTA0MzBcdTA0M0ZcdTA0MzhcdTA0NDFcdTA0NEMgXHUwNDREXHUwNDNBXHUwNDQwXHUwNDMwXHUwNDNEXHUwNDMwXCIsXG4gICAgICAgICAgICAgICAgZGlzYWJsZWRfZGVzYzogXCJcdTA0MURcdTA0MzBcdTA0NDdcdTA0MzBcdTA0NDJcdTA0NEMgXHUwNDM3XHUwNDMwXHUwNDNGXHUwNDM4XHUwNDQxXHUwNDRDXCIsXG4gICAgICAgICAgICAgICAgZW5hYmxlZF9kZXNjOiBcIlx1MDQxRVx1MDQ0MVx1MDQ0Mlx1MDQzMFx1MDQzRFx1MDQzRVx1MDQzMlx1MDQzOFx1MDQ0Mlx1MDQ0QyBcdTA0MzdcdTA0MzBcdTA0M0ZcdTA0MzhcdTA0NDFcdTA0NENcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkbmQ6IHtcbiAgICAgICAgICAgICAgICB0aXRsZTogXCJcdTA0MURcdTA0MzUgXHUwNDMxXHUwNDM1XHUwNDQxXHUwNDNGXHUwNDNFXHUwNDNBXHUwNDNFXHUwNDM4XHUwNDQyXHUwNDRDXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuaWdodF9saWdodDoge1xuICAgICAgICAgICAgICAgIHRpdGxlOiBcIlx1MDQxRFx1MDQzRVx1MDQ0N1x1MDQzRFx1MDQzRVx1MDQzOSBcdTA0NDFcdTA0MzJcdTA0MzVcdTA0NDJcIixcbiAgICAgICAgICAgICAgICBkZWZhdWx0X2Rlc2M6IFwiXHUwNDIyXHUwNDNFXHUwNDNEXHUwNDNEXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcGFnZXM6IHtcbiAgICAgICAgICAgIG1vcmVfc2V0dGluZ3M6IFwiXHUwNDExXHUwNDNFXHUwNDNCXHUwNDRDXHUwNDQ4XHUwNDM1IFx1MDQzRFx1MDQzMFx1MDQ0MVx1MDQ0Mlx1MDQ0MFx1MDQzRVx1MDQzNVx1MDQzQVwiLFxuICAgICAgICAgICAgc291bmQ6IHtcbiAgICAgICAgICAgICAgICB0aXRsZTogXCJcdTA0MTdcdTA0MzJcdTA0NDNcdTA0M0FcIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJcdTA0MURcdTA0MzBcdTA0NDFcdTA0NDJcdTA0NDBcdTA0M0VcdTA0MzlcdTA0M0FcdTA0MzAgXHUwNDMyXHUwNDRCXHUwNDMyXHUwNDNFXHUwNDM0XHUwNDMwIFx1MDQzN1x1MDQzMlx1MDQ0M1x1MDQzQVx1MDQzMFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbWljcm9waG9uZToge1xuICAgICAgICAgICAgICAgIHRpdGxlOiBcIlx1MDQxQ1x1MDQzOFx1MDQzQVx1MDQ0MFx1MDQzRVx1MDQ0NFx1MDQzRVx1MDQzRFwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlx1MDQxRFx1MDQzMFx1MDQ0MVx1MDQ0Mlx1MDQ0MFx1MDQzRVx1MDQzOVx1MDQzQVx1MDQzMCBcdTA0MzJcdTA0MzJcdTA0M0VcdTA0MzRcdTA0MzAgXHUwNDM3XHUwNDMyXHUwNDQzXHUwNDNBXHUwNDMwXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuaWdodF9saWdodDoge1xuICAgICAgICAgICAgICAgIHRpdGxlOiBcIlx1MDQxRFx1MDQzRVx1MDQ0N1x1MDQzRFx1MDQzRVx1MDQzOSBcdTA0NDFcdTA0MzJcdTA0MzVcdTA0NDJcIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJcdTA0MUFcdTA0M0VcdTA0M0RcdTA0NDJcdTA0NDBcdTA0M0VcdTA0M0JcdTA0NEMgXHUwNDM4XHUwNDNEXHUwNDQyXHUwNDM1XHUwNDNEXHUwNDQxXHUwNDM4XHUwNDMyXHUwNDNEXHUwNDNFXHUwNDQxXHUwNDQyXHUwNDM4IFx1MDQ0NFx1MDQzOFx1MDQzQlx1MDQ0Q1x1MDQ0Mlx1MDQ0MFx1MDQzMFx1MDQ0Nlx1MDQzOFx1MDQzOCBcdTA0NDFcdTA0MzhcdTA0M0RcdTA0MzVcdTA0MzNcdTA0M0UgXHUwNDQxXHUwNDMyXHUwNDM1XHUwNDQyXHUwNDMwXCIsXG4gICAgICAgICAgICAgICAgZ2FtbWE6IFwiXHUwNDEzXHUwNDMwXHUwNDNDXHUwNDNDXHUwNDMwXCIsXG4gICAgICAgICAgICAgICAgdGVtcGVyYXR1cmU6IFwiXHUwNDIyXHUwNDM1XHUwNDNDXHUwNDNGXHUwNDM1XHUwNDQwXHUwNDMwXHUwNDQyXHUwNDQzXHUwNDQwXHUwNDMwXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBibHVldG9vdGg6IHtcbiAgICAgICAgICAgICAgICB0aXRsZTogXCJCbHVldG9vdGhcIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJcdTA0MjNcdTA0M0ZcdTA0NDBcdTA0MzBcdTA0MzJcdTA0M0JcdTA0MzVcdTA0M0RcdTA0MzhcdTA0MzUgQmx1ZXRvb3RoIFx1MDQ0M1x1MDQ0MVx1MDQ0Mlx1MDQ0MFx1MDQzRVx1MDQzOVx1MDQ0MVx1MDQ0Mlx1MDQzMlx1MDQzMFx1MDQzQ1x1MDQzOFwiLFxuICAgICAgICAgICAgICAgIG5ld19kZXZpY2VzOiBcIlx1MDQxRFx1MDQzRVx1MDQzMlx1MDQ0Qlx1MDQzNSBcdTA0NDNcdTA0NDFcdTA0NDJcdTA0NDBcdTA0M0VcdTA0MzlcdTA0NDFcdTA0NDJcdTA0MzJcdTA0MzBcIixcbiAgICAgICAgICAgICAgICBhZGFwdGVyczogXCJcdTA0MTBcdTA0MzRcdTA0MzBcdTA0M0ZcdTA0NDBcdTA0MzVcdTA0NDJcdTA0NEJcIixcbiAgICAgICAgICAgICAgICBwYWlyZWRfZGV2aWNlczogXCJcdTA0MUZcdTA0NDBcdTA0MzhcdTA0MzJcdTA0NEZcdTA0MzdcdTA0MzBcdTA0M0RcdTA0M0RcdTA0NEJcdTA0MzUgXHUwNDQzXHUwNDQxXHUwNDQyXHUwNDQwXHUwNDNFXHUwNDM5XHUwNDQxXHUwNDQyXHUwNDMyXHUwNDMwXCIsXG4gICAgICAgICAgICAgICAgc3RhcnRfZGlzY292ZXJpbmc6IFwiXHUwNDFEXHUwNDMwXHUwNDQ3XHUwNDMwXHUwNDQyXHUwNDRDIFx1MDQzRlx1MDQzRVx1MDQzOFx1MDQ0MVx1MDQzQVwiLFxuICAgICAgICAgICAgICAgIHN0b3BfZGlzY292ZXJpbmc6IFwiXHUwNDFFXHUwNDQxXHUwNDQyXHUwNDMwXHUwNDNEXHUwNDNFXHUwNDMyXHUwNDM4XHUwNDQyXHUwNDRDIFx1MDQzRlx1MDQzRVx1MDQzOFx1MDQ0MVx1MDQzQVwiLFxuICAgICAgICAgICAgICAgIHVudHJ1c3RfZGV2aWNlOiBcIlx1MDQxRFx1MDQzNVx1MDQzNFx1MDQzRVx1MDQzMlx1MDQzNVx1MDQ0MFx1MDQzNVx1MDQzRFx1MDQzRFx1MDQzRVx1MDQzNSBcdTA0NDNcdTA0NDFcdTA0NDJcdTA0NDBcdTA0M0VcdTA0MzlcdTA0NDFcdTA0NDJcdTA0MzJcdTA0M0VcIixcbiAgICAgICAgICAgICAgICB1bnBhaXJfZGV2aWNlOiBcIlx1MDQxRVx1MDQ0Mlx1MDQzMlx1MDQ0Rlx1MDQzN1x1MDQzMFx1MDQzRFx1MDQzRFx1MDQzRVx1MDQzNSBcdTA0NDNcdTA0NDFcdTA0NDJcdTA0NDBcdTA0M0VcdTA0MzlcdTA0NDFcdTA0NDJcdTA0MzJcdTA0M0VcIixcbiAgICAgICAgICAgICAgICB0cnVzdF9kZXZpY2U6IFwiXHUwNDE0XHUwNDNFXHUwNDMyXHUwNDM1XHUwNDQwXHUwNDM1XHUwNDNEXHUwNDNEXHUwNDNFXHUwNDM1IFx1MDQ0M1x1MDQ0MVx1MDQ0Mlx1MDQ0MFx1MDQzRVx1MDQzOVx1MDQ0MVx1MDQ0Mlx1MDQzMlx1MDQzRVwiLFxuICAgICAgICAgICAgICAgIHBhaXJfZGV2aWNlOiBcIlx1MDQxRlx1MDQ0MFx1MDQzOFx1MDQzMlx1MDQ0Rlx1MDQzN1x1MDQzMFx1MDQzRFx1MDQzRFx1MDQzRVx1MDQzNSBcdTA0NDNcdTA0NDFcdTA0NDJcdTA0NDBcdTA0M0VcdTA0MzlcdTA0NDFcdTA0NDJcdTA0MzJcdTA0M0VcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5ldHdvcms6IHtcbiAgICAgICAgICAgICAgICB0aXRsZTogXCJcdTA0MThcdTA0M0RcdTA0NDJcdTA0MzVcdTA0NDBcdTA0M0RcdTA0MzVcdTA0NDJcIixcbiAgICAgICAgICAgICAgICBpbnRlcmZhY2U6IFwiXHUwNDE4XHUwNDNEXHUwNDQyXHUwNDM1XHUwNDQwXHUwNDQ0XHUwNDM1XHUwNDM5XHUwNDQxXHUwNDRCXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG4gICAgYXNrX3BvcHVwOiB7XG4gICAgICAgIHRpdGxlOiBcIlx1MDQxMlx1MDQzRVx1MDQzRlx1MDQ0MFx1MDQzRVx1MDQ0MVwiXG4gICAgfVxufSBhcyBpMThuU3RydWN0O1xuIiwgIi8qKlxuICogSW4gdGhlIGZ1dHVyZSBJIHdvdWxkIGxpa2UgdG8gbWFrZSB0eXBlIGRlY2xhcmF0aW9uIGluIGRlY29yYXRvcnMgb3B0aW9uYWxcbiAqIGFuZCBpbmZlciBpdCBmcm9tIHR5cGVzY3JpcHQgdHlwZXMgYXQgdHJhbnNwaWxlIHRpbWUuIEN1cnJlbnRseSwgd2UgY291bGRcbiAqIGVpdGhlciB1c2Ugc3RhZ2UgMiBkZWNvcmF0b3JzIHdpdGggdGhlIFwiZW1pdERlY29yYXRvck1ldGFkYXRhXCIgYW5kXG4gKiBcImV4cGVyaW1lbnRhbERlY29yYXRvcnNcIiB0c2NvbmZpZyBvcHRpb25zLiBIb3dldmVyLCBtZXRhZGF0YSBpcyBub3Qgc3VwcG9ydGVkXG4gKiBieSBlc2J1aWxkIHdoaWNoIGlzIHdoYXQgSSdtIG1vc3RseSB0YXJnZXRpbmcgYXMgdGhlIGJ1bmRsZXIgZm9yIHBlcmZvcm1hbmNlXG4gKiByZWFzb25zLiBodHRwczovL2dpdGh1Yi5jb20vZXZhbncvZXNidWlsZC9pc3N1ZXMvMjU3XG4gKiBIb3dldmVyLCBJIGJlbGlldmUgdGhhdCB3ZSBzaG91bGQgbm90IHVzZSBzdGFnZSAyIGFueW1vcmUsXG4gKiBzbyBJJ20gd2FpdGluZyBmb3IgYSBiZXR0ZXIgYWx0ZXJuYXRpdmUuXG4gKi9cblxuaW1wb3J0IEdPYmplY3QgZnJvbSBcImdpOi8vR09iamVjdFwiXG5pbXBvcnQgR0xpYiBmcm9tIFwiZ2k6Ly9HTGliXCJcbmltcG9ydCB7IGRlZmluZVByb3BlcnR5R2V0dGVyLCBrZWJhYmlmeSB9IGZyb20gXCIuL3V0aWwuanNcIlxuXG5jb25zdCBwcml2ID0gU3ltYm9sKFwiZ29iamVjdCBwcml2YXRlXCIpXG5jb25zdCB7IGRlZmluZVByb3BlcnR5LCBmcm9tRW50cmllcywgZW50cmllcyB9ID0gT2JqZWN0XG5jb25zdCB7IE9iamVjdDogR09iaiwgcmVnaXN0ZXJDbGFzcyB9ID0gR09iamVjdFxuXG5leHBvcnQgeyBHT2JqZWN0IGFzIGRlZmF1bHQgfVxuZXhwb3J0IHsgR09iaiBhcyBPYmplY3QgfVxuXG5leHBvcnQgY29uc3QgU2lnbmFsRmxhZ3MgPSBHT2JqZWN0LlNpZ25hbEZsYWdzXG5leHBvcnQgdHlwZSBTaWduYWxGbGFncyA9IEdPYmplY3QuU2lnbmFsRmxhZ3NcblxuZXhwb3J0IGNvbnN0IEFjY3VtdWxhdG9yVHlwZSA9IEdPYmplY3QuQWNjdW11bGF0b3JUeXBlXG5leHBvcnQgdHlwZSBBY2N1bXVsYXRvclR5cGUgPSBHT2JqZWN0LkFjY3VtdWxhdG9yVHlwZVxuXG5leHBvcnQgdHlwZSBQYXJhbVNwZWM8VCA9IHVua25vd24+ID0gR09iamVjdC5QYXJhbVNwZWM8VD5cbmV4cG9ydCBjb25zdCBQYXJhbVNwZWMgPSBHT2JqZWN0LlBhcmFtU3BlY1xuXG5leHBvcnQgdHlwZSBQYXJhbUZsYWdzID0gR09iamVjdC5QYXJhbUZsYWdzXG5leHBvcnQgY29uc3QgUGFyYW1GbGFncyA9IEdPYmplY3QuUGFyYW1GbGFnc1xuXG5leHBvcnQgdHlwZSBHVHlwZTxUID0gdW5rbm93bj4gPSBHT2JqZWN0LkdUeXBlPFQ+XG5cbnR5cGUgR09iaiA9IEdPYmplY3QuT2JqZWN0XG5cbmludGVyZmFjZSBHT2JqUHJpdmF0ZSBleHRlbmRzIEdPYmoge1xuICAgIFtwcml2XTogUmVjb3JkPHN0cmluZywgYW55PlxufVxuXG50eXBlIE1ldGEgPSB7XG4gICAgcHJvcGVydGllcz86IHtcbiAgICAgICAgW2ZpZWxkTmFtZTogc3RyaW5nXToge1xuICAgICAgICAgICAgZmxhZ3M6IFBhcmFtRmxhZ3NcbiAgICAgICAgICAgIHR5cGU6IFByb3BlcnR5VHlwZURlY2xhcmF0aW9uPHVua25vd24+XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2lnbmFscz86IHtcbiAgICAgICAgW2tleTogc3RyaW5nXToge1xuICAgICAgICAgICAgZGVmYXVsdD86IGJvb2xlYW5cbiAgICAgICAgICAgIGZsYWdzPzogU2lnbmFsRmxhZ3NcbiAgICAgICAgICAgIGFjY3VtdWxhdG9yPzogQWNjdW11bGF0b3JUeXBlXG4gICAgICAgICAgICByZXR1cm5fdHlwZT86IEdUeXBlXG4gICAgICAgICAgICBwYXJhbV90eXBlcz86IEFycmF5PEdUeXBlPlxuICAgICAgICAgICAgbWV0aG9kOiAoLi4uYXJnOiBhbnlbXSkgPT4gdW5rbm93blxuICAgICAgICB9XG4gICAgfVxufVxuXG50eXBlIENvbnRleHQgPSB7IHByaXZhdGU6IGZhbHNlOyBzdGF0aWM6IGZhbHNlOyBuYW1lOiBzdHJpbmcgfVxudHlwZSBQcm9wZXJ0eUNvbnRleHQ8VD4gPSBDbGFzc0ZpZWxkRGVjb3JhdG9yQ29udGV4dDxHT2JqLCBUPiAmIENvbnRleHRcbnR5cGUgR2V0dGVyQ29udGV4dDxUPiA9IENsYXNzR2V0dGVyRGVjb3JhdG9yQ29udGV4dDxHT2JqLCBUPiAmIENvbnRleHRcbnR5cGUgU2V0dGVyQ29udGV4dDxUPiA9IENsYXNzU2V0dGVyRGVjb3JhdG9yQ29udGV4dDxHT2JqLCBUPiAmIENvbnRleHRcbnR5cGUgU2lnbmFsQ29udGV4dDxUIGV4dGVuZHMgKCkgPT4gYW55PiA9IENsYXNzTWV0aG9kRGVjb3JhdG9yQ29udGV4dDxHT2JqLCBUPiAmIENvbnRleHRcblxudHlwZSBTaWduYWxPcHRpb25zID0ge1xuICAgIGRlZmF1bHQ/OiBib29sZWFuXG4gICAgZmxhZ3M/OiBTaWduYWxGbGFnc1xuICAgIGFjY3VtdWxhdG9yPzogQWNjdW11bGF0b3JUeXBlXG59XG5cbnR5cGUgUHJvcGVydHlUeXBlRGVjbGFyYXRpb248VD4gPVxuICAgIHwgKChuYW1lOiBzdHJpbmcsIGZsYWdzOiBQYXJhbUZsYWdzKSA9PiBQYXJhbVNwZWM8VD4pXG4gICAgfCBQYXJhbVNwZWM8VD5cbiAgICB8IHsgJGd0eXBlOiBHVHlwZTxUPiB9XG5cbmZ1bmN0aW9uIGFzc2VydEZpZWxkKFxuICAgIGN0eDogQ2xhc3NGaWVsZERlY29yYXRvckNvbnRleHQgfCBDbGFzc0dldHRlckRlY29yYXRvckNvbnRleHQgfCBDbGFzc1NldHRlckRlY29yYXRvckNvbnRleHQsXG4pOiBzdHJpbmcge1xuICAgIGlmIChjdHgucHJpdmF0ZSkgdGhyb3cgRXJyb3IoXCJwcml2YXRlIGZpZWxkcyBhcmUgbm90IHN1cHBvcnRlZFwiKVxuICAgIGlmIChjdHguc3RhdGljKSB0aHJvdyBFcnJvcihcInN0YXRpYyBmaWVsZHMgYXJlIG5vdCBzdXBwb3J0ZWRcIilcblxuICAgIGlmICh0eXBlb2YgY3R4Lm5hbWUgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoXCJvbmx5IHN0cmluZ3MgY2FuIGJlIGdvYmplY3QgcHJvcGVydHkga2V5c1wiKVxuICAgIH1cblxuICAgIHJldHVybiBjdHgubmFtZVxufVxuXG4vKipcbiAqIERlZmluZXMgYSByZWFkYWJsZSAqYW5kKiB3cml0ZWFibGUgcHJvcGVydHkgdG8gYmUgcmVnaXN0ZXJlZCB3aGVuIHVzaW5nIHRoZSB7QGxpbmsgcmVnaXN0ZXJ9IGRlY29yYXRvci5cbiAqXG4gKiBFeGFtcGxlOlxuICogYGBgdHNcbiAqIGNsYXNzIHtcbiAqICAgICBcXEBwcm9wZXJ0eShTdHJpbmcpIG15UHJvcCA9IFwiXCJcbiAqIH1cbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJvcGVydHk8VD4odHlwZURlY2xhcmF0aW9uOiBQcm9wZXJ0eVR5cGVEZWNsYXJhdGlvbjxUPikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoXG4gICAgICAgIF86IHZvaWQsXG4gICAgICAgIGN0eDogUHJvcGVydHlDb250ZXh0PFQ+LFxuICAgICAgICBvcHRpb25zPzogeyBtZXRhT25seTogdHJ1ZSB9LFxuICAgICk6ICh0aGlzOiBHT2JqLCBpbml0OiBUKSA9PiBUIHtcbiAgICAgICAgY29uc3QgZmllbGROYW1lID0gYXNzZXJ0RmllbGQoY3R4KVxuICAgICAgICBjb25zdCBrZXkgPSBrZWJhYmlmeShmaWVsZE5hbWUpXG4gICAgICAgIGNvbnN0IG1ldGE6IFBhcnRpYWw8TWV0YT4gPSBjdHgubWV0YWRhdGEhXG5cbiAgICAgICAgbWV0YS5wcm9wZXJ0aWVzID8/PSB7fVxuICAgICAgICBtZXRhLnByb3BlcnRpZXNbZmllbGROYW1lXSA9IHsgZmxhZ3M6IFBhcmFtRmxhZ3MuUkVBRFdSSVRFLCB0eXBlOiB0eXBlRGVjbGFyYXRpb24gfVxuXG4gICAgICAgIGN0eC5hZGRJbml0aWFsaXplcihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBkZWZpbmVQcm9wZXJ0eUdldHRlcih0aGlzLCBmaWVsZE5hbWUgYXMgRXh0cmFjdDxrZXlvZiBHT2JqLCBzdHJpbmc+KVxuXG4gICAgICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLm1ldGFPbmx5KSByZXR1cm5cblxuICAgICAgICAgICAgZGVmaW5lUHJvcGVydHkodGhpcywgZmllbGROYW1lLCB7XG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNldCh2OiBUKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzW3ByaXZdW2tleV0gIT09IHYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNbcHJpdl1ba2V5XSA9IHZcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5KGtleSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ2V0KCk6IFQge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1twcml2XVtrZXldXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0gc2F0aXNmaWVzIFRoaXNUeXBlPEdPYmpQcml2YXRlPilcbiAgICAgICAgfSlcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGluaXQ6IFQpIHtcbiAgICAgICAgICAgIGNvbnN0IGRpY3QgPSAoKHRoaXMgYXMgR09ialByaXZhdGUpW3ByaXZdID8/PSB7fSlcbiAgICAgICAgICAgIGRpY3Rba2V5XSA9IGluaXRcbiAgICAgICAgICAgIHJldHVybiBpbml0XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKlxuICogRGVmaW5lcyBhIHJlYWQtb25seSBwcm9wZXJ0eSB0byBiZSByZWdpc3RlcmVkIHdoZW4gdXNpbmcgdGhlIHtAbGluayByZWdpc3Rlcn0gZGVjb3JhdG9yLlxuICogSWYgdGhlIGdldHRlciBoYXMgYSBzZXR0ZXIgcGFpciBkZWNvcmF0ZWQgd2l0aCB0aGUge0BsaW5rIHNldHRlcn0gZGVjb3JhdG9yIHRoZSBwcm9wZXJ0eSB3aWxsIGJlIHJlYWRhYmxlICphbmQqIHdyaXRlYWJsZS5cbiAqXG4gKiBFeGFtcGxlOlxuICogYGBgdHNcbiAqIGNsYXNzIHtcbiAqICAgICBcXEBzZXR0ZXIoU3RyaW5nKVxuICogICAgIHNldCBteVByb3AodmFsdWU6IHN0cmluZykge1xuICogICAgICAgICAvL1xuICogICAgIH1cbiAqXG4gKiAgICAgXFxAZ2V0dGVyKFN0cmluZylcbiAqICAgICBnZXQgbXlQcm9wKCk6IHN0cmluZyB7XG4gKiAgICAgICAgIHJldHVybiBcIlwiXG4gKiAgICAgfVxuICogfVxuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXR0ZXI8VD4odHlwZURlY2xhcmF0aW9uOiBQcm9wZXJ0eVR5cGVEZWNsYXJhdGlvbjxUPikge1xuICAgIHJldHVybiBmdW5jdGlvbiBnZXR0ZXIoZ2V0dGVyOiAodGhpczogR09iaikgPT4gVCwgY3R4OiBHZXR0ZXJDb250ZXh0PFQ+KTogKHRoaXM6IEdPYmopID0+IFQge1xuICAgICAgICBjb25zdCBmaWVsZE5hbWUgPSBhc3NlcnRGaWVsZChjdHgpXG4gICAgICAgIGNvbnN0IG1ldGE6IFBhcnRpYWw8TWV0YT4gPSBjdHgubWV0YWRhdGEhXG4gICAgICAgIGNvbnN0IHByb3BzID0gKG1ldGEucHJvcGVydGllcyA/Pz0ge30pXG4gICAgICAgIGlmIChmaWVsZE5hbWUgaW4gcHJvcHMpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgZmxhZ3MsIHR5cGUgfSA9IHByb3BzW2ZpZWxkTmFtZV1cbiAgICAgICAgICAgIHByb3BzW2ZpZWxkTmFtZV0gPSB7IGZsYWdzOiBmbGFncyB8IFBhcmFtRmxhZ3MuUkVBREFCTEUsIHR5cGUgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJvcHNbZmllbGROYW1lXSA9IHsgZmxhZ3M6IFBhcmFtRmxhZ3MuUkVBREFCTEUsIHR5cGU6IHR5cGVEZWNsYXJhdGlvbiB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGdldHRlclxuICAgIH1cbn1cblxuLyoqXG4gKiBEZWZpbmVzIGEgd3JpdGUtb25seSBwcm9wZXJ0eSB0byBiZSByZWdpc3RlcmVkIHdoZW4gdXNpbmcgdGhlIHtAbGluayByZWdpc3Rlcn0gZGVjb3JhdG9yLlxuICogSWYgdGhlIHNldHRlciBoYXMgYSBnZXR0ZXIgcGFpciBkZWNvcmF0ZWQgd2l0aCB0aGUge0BsaW5rIGdldHRlcn0gZGVjb3JhdG9yIHRoZSBwcm9wZXJ0eSB3aWxsIGJlIHdyaXRlYWJsZSAqYW5kKiByZWFkYWJsZS5cbiAqXG4gKiBFeGFtcGxlOlxuICogYGBgdHNcbiAqIGNsYXNzIHtcbiAqICAgICBcXEBzZXR0ZXIoU3RyaW5nKVxuICogICAgIHNldCBteVByb3AodmFsdWU6IHN0cmluZykge1xuICogICAgICAgICAvL1xuICogICAgIH1cbiAqXG4gKiAgICAgXFxAZ2V0dGVyKFN0cmluZylcbiAqICAgICBnZXQgbXlQcm9wKCk6IHN0cmluZyB7XG4gKiAgICAgICAgIHJldHVybiBcIlwiXG4gKiAgICAgfVxuICogfVxuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXR0ZXI8VD4odHlwZURlY2xhcmF0aW9uOiBQcm9wZXJ0eVR5cGVEZWNsYXJhdGlvbjxUPikge1xuICAgIHJldHVybiBmdW5jdGlvbiBzZXR0ZXIoXG4gICAgICAgIHNldHRlcjogKHRoaXM6IEdPYmosIHZhbHVlOiBUKSA9PiB2b2lkLFxuICAgICAgICBjdHg6IFNldHRlckNvbnRleHQ8VD4sXG4gICAgKTogKHRoaXM6IEdPYmosIHZhbHVlOiBUKSA9PiB2b2lkIHtcbiAgICAgICAgY29uc3QgZmllbGROYW1lID0gYXNzZXJ0RmllbGQoY3R4KVxuICAgICAgICBjb25zdCBtZXRhOiBQYXJ0aWFsPE1ldGE+ID0gY3R4Lm1ldGFkYXRhIVxuICAgICAgICBjb25zdCBwcm9wcyA9IChtZXRhLnByb3BlcnRpZXMgPz89IHt9KVxuICAgICAgICBpZiAoZmllbGROYW1lIGluIHByb3BzKSB7XG4gICAgICAgICAgICBjb25zdCB7IGZsYWdzLCB0eXBlIH0gPSBwcm9wc1tmaWVsZE5hbWVdXG4gICAgICAgICAgICBwcm9wc1tmaWVsZE5hbWVdID0geyBmbGFnczogZmxhZ3MgfCBQYXJhbUZsYWdzLldSSVRBQkxFLCB0eXBlIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByb3BzW2ZpZWxkTmFtZV0gPSB7IGZsYWdzOiBQYXJhbUZsYWdzLldSSVRBQkxFLCB0eXBlOiB0eXBlRGVjbGFyYXRpb24gfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZXR0ZXJcbiAgICB9XG59XG5cbnR5cGUgUGFyYW1UeXBlPFA+ID0gUCBleHRlbmRzIHsgJGd0eXBlOiBHVHlwZTxpbmZlciBUPiB9ID8gVCA6IFAgZXh0ZW5kcyBHVHlwZTxpbmZlciBUPiA/IFQgOiBuZXZlclxuXG50eXBlIFBhcmFtVHlwZXM8UGFyYW1zPiA9IHtcbiAgICBbSyBpbiBrZXlvZiBQYXJhbXNdOiBQYXJhbVR5cGU8UGFyYW1zW0tdPlxufVxuXG4vKipcbiAqIERlZmluZXMgYSBzaWduYWwgdG8gYmUgcmVnaXN0ZXJlZCB3aGVuIHVzaW5nIHRoZSB7QGxpbmsgcmVnaXN0ZXJ9IGRlY29yYXRvci5cbiAqXG4gKiBFeGFtcGxlOlxuICogYGBgdHNcbiAqIGNsYXNzIHtcbiAqICAgICBcXEBzaWduYWwoW1N0cmluZywgTnVtYmVyXSwgQm9vbGVhbiwge1xuICogICAgICAgICBhY2N1bXVsYXRvcjogQWNjdW11bGF0b3JUeXBlLkZJUlNUX1dJTlNcbiAqICAgICB9KVxuICogICAgIG15U2lnbmFsKHN0cjogc3RyaW5nLCBuOiBudW1iZXIpOiBib29sZWFuIHtcbiAqICAgICAgICAgLy8gZGVmYXVsdCBoYW5kbGVyXG4gKiAgICAgICAgIHJldHVybiBmYWxzZVxuICogICAgIH1cbiAqIH1cbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2lnbmFsPFxuICAgIGNvbnN0IFBhcmFtcyBleHRlbmRzIEFycmF5PHsgJGd0eXBlOiBHVHlwZSB9IHwgR1R5cGU+LFxuICAgIFJldHVybiBleHRlbmRzIHsgJGd0eXBlOiBHVHlwZSB9IHwgR1R5cGUsXG4+KFxuICAgIHBhcmFtczogUGFyYW1zLFxuICAgIHJldHVyblR5cGU/OiBSZXR1cm4sXG4gICAgb3B0aW9ucz86IFNpZ25hbE9wdGlvbnMsXG4pOiAoXG4gICAgbWV0aG9kOiAodGhpczogR09iaiwgLi4uYXJnczogUGFyYW1UeXBlczxQYXJhbXM+KSA9PiBQYXJhbVR5cGU8UmV0dXJuPixcbiAgICBjdHg6IFNpZ25hbENvbnRleHQ8dHlwZW9mIG1ldGhvZD4sXG4pID0+IHR5cGVvZiBtZXRob2RcblxuLyoqXG4gKiBEZWZpbmVzIGEgc2lnbmFsIHRvIGJlIHJlZ2lzdGVyZWQgd2hlbiB1c2luZyB0aGUge0BsaW5rIHJlZ2lzdGVyfSBkZWNvcmF0b3IuXG4gKlxuICogRXhhbXBsZTpcbiAqIGBgYHRzXG4gKiBjbGFzcyB7XG4gKiAgICAgXFxAc2lnbmFsKFN0cmluZywgTnVtYmVyKVxuICogICAgIG15U2lnbmFsKHN0cjogc3RyaW5nLCBuOiBudW1iZXIpOiB2b2lkIHtcbiAqICAgICAgICAgLy8gZGVmYXVsdCBoYW5kbGVyXG4gKiAgICAgfVxuICogfVxuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaWduYWw8UGFyYW1zIGV4dGVuZHMgQXJyYXk8eyAkZ3R5cGU6IEdUeXBlIH0gfCBHVHlwZT4+KFxuICAgIC4uLnBhcmFtczogUGFyYW1zXG4pOiAoXG4gICAgbWV0aG9kOiAodGhpczogR09iamVjdC5PYmplY3QsIC4uLmFyZ3M6IFBhcmFtVHlwZXM8UGFyYW1zPikgPT4gdm9pZCxcbiAgICBjdHg6IFNpZ25hbENvbnRleHQ8dHlwZW9mIG1ldGhvZD4sXG4pID0+IHR5cGVvZiBtZXRob2RcblxuZXhwb3J0IGZ1bmN0aW9uIHNpZ25hbDxcbiAgICBQYXJhbXMgZXh0ZW5kcyBBcnJheTx7ICRndHlwZTogR1R5cGUgfSB8IEdUeXBlPixcbiAgICBSZXR1cm4gZXh0ZW5kcyB7ICRndHlwZTogR1R5cGUgfSB8IEdUeXBlLFxuPihcbiAgICAuLi5hcmdzOiBQYXJhbXMgfCBbcGFyYW1zOiBQYXJhbXMsIHJldHVyblR5cGU/OiBSZXR1cm4sIG9wdGlvbnM/OiBTaWduYWxPcHRpb25zXVxuKTogKFxuICAgIG1ldGhvZDogKHRoaXM6IEdPYmosIC4uLmFyZ3M6IFBhcmFtVHlwZXM8UGFyYW1zPikgPT4gUGFyYW1UeXBlPFJldHVybj4gfCB2b2lkLFxuICAgIGN0eDogU2lnbmFsQ29udGV4dDx0eXBlb2YgbWV0aG9kPixcbikgPT4gdHlwZW9mIG1ldGhvZCB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChtZXRob2QsIGN0eCkge1xuICAgICAgICBpZiAoY3R4LnByaXZhdGUpIHRocm93IEVycm9yKFwicHJpdmF0ZSBmaWVsZHMgYXJlIG5vdCBzdXBwb3J0ZWRcIilcbiAgICAgICAgaWYgKGN0eC5zdGF0aWMpIHRocm93IEVycm9yKFwic3RhdGljIGZpZWxkcyBhcmUgbm90IHN1cHBvcnRlZFwiKVxuXG4gICAgICAgIGlmICh0eXBlb2YgY3R4Lm5hbWUgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKFwib25seSBzdHJpbmdzIGNhbiBiZSBnb2JqZWN0IHNpZ25hbHNcIilcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHNpZ25hbE5hbWUgPSBrZWJhYmlmeShjdHgubmFtZSlcbiAgICAgICAgY29uc3QgbWV0YTogUGFydGlhbDxNZXRhPiA9IGN0eC5tZXRhZGF0YSFcbiAgICAgICAgY29uc3Qgc2lnbmFscyA9IChtZXRhLnNpZ25hbHMgPz89IHt9KVxuXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGFyZ3NbMF0pKSB7XG4gICAgICAgICAgICBjb25zdCBbcGFyYW1zLCByZXR1cm5UeXBlLCBvcHRpb25zXSA9IGFyZ3MgYXMgW1xuICAgICAgICAgICAgICAgIHBhcmFtczogUGFyYW1zLFxuICAgICAgICAgICAgICAgIHJldHVyblR5cGU/OiBSZXR1cm4sXG4gICAgICAgICAgICAgICAgb3B0aW9ucz86IFNpZ25hbE9wdGlvbnMsXG4gICAgICAgICAgICBdXG5cbiAgICAgICAgICAgIHNpZ25hbHNbc2lnbmFsTmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgbWV0aG9kLFxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IG9wdGlvbnM/LmRlZmF1bHQgPz8gdHJ1ZSxcbiAgICAgICAgICAgICAgICBwYXJhbV90eXBlczogcGFyYW1zLm1hcCgoaSkgPT4gKFwiJGd0eXBlXCIgaW4gaSA/IGkuJGd0eXBlIDogaSkpLFxuICAgICAgICAgICAgICAgIC4uLihyZXR1cm5UeXBlICYmIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuX3R5cGU6IFwiJGd0eXBlXCIgaW4gcmV0dXJuVHlwZSA/IHJldHVyblR5cGUuJGd0eXBlIDogcmV0dXJuVHlwZSxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAuLi4ob3B0aW9ucz8uZmxhZ3MgJiYge1xuICAgICAgICAgICAgICAgICAgICBmbGFnczogb3B0aW9ucy5mbGFncyxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAuLi4odHlwZW9mIG9wdGlvbnM/LmFjY3VtdWxhdG9yID09PSBcIm51bWJlclwiICYmIHtcbiAgICAgICAgICAgICAgICAgICAgYWNjdW11bGF0b3I6IG9wdGlvbnMuYWNjdW11bGF0b3IsXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBwYXJhbXMgPSBhcmdzIGFzIFBhcmFtc1xuICAgICAgICAgICAgc2lnbmFsc1tzaWduYWxOYW1lXSA9IHtcbiAgICAgICAgICAgICAgICBtZXRob2QsXG4gICAgICAgICAgICAgICAgcGFyYW1fdHlwZXM6IHBhcmFtcy5tYXAoKGkpID0+IChcIiRndHlwZVwiIGluIGkgPyBpLiRndHlwZSA6IGkpKSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoLi4ucGFyYW1zKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbWl0KHNpZ25hbE5hbWUsIC4uLnBhcmFtcykgYXMgUGFyYW1UeXBlPFJldHVybj5cbiAgICAgICAgfVxuICAgIH1cbn1cblxuY29uc3QgTUFYSU5UID0gMiAqKiAzMSAtIDFcbmNvbnN0IE1JTklOVCA9IC0oMiAqKiAzMSlcbmNvbnN0IE1BWFVJTlQgPSAyICoqIDMyIC0gMVxuY29uc3QgTUFYRkxPQVQgPSAzLjQwMjgyMzVlMzhcbmNvbnN0IE1JTkZMT0FUID0gLTMuNDAyODIzNWUzOFxuY29uc3QgTUlOSU5UNjQgPSBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUlxuY29uc3QgTUFYSU5UNjQgPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUlxuXG5mdW5jdGlvbiBwc3BlY0Zyb21HVHlwZSh0eXBlOiBHVHlwZTx1bmtub3duPiwgbmFtZTogc3RyaW5nLCBmbGFnczogUGFyYW1GbGFncykge1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIEdPYmplY3QuVFlQRV9CT09MRUFOOlxuICAgICAgICAgICAgcmV0dXJuIFBhcmFtU3BlYy5ib29sZWFuKG5hbWUsIFwiXCIsIFwiXCIsIGZsYWdzLCBmYWxzZSlcbiAgICAgICAgY2FzZSBHT2JqZWN0LlRZUEVfU1RSSU5HOlxuICAgICAgICAgICAgcmV0dXJuIFBhcmFtU3BlYy5zdHJpbmcobmFtZSwgXCJcIiwgXCJcIiwgZmxhZ3MsIFwiXCIpXG4gICAgICAgIGNhc2UgR09iamVjdC5UWVBFX0lOVDpcbiAgICAgICAgICAgIHJldHVybiBQYXJhbVNwZWMuaW50KG5hbWUsIFwiXCIsIFwiXCIsIGZsYWdzLCBNSU5JTlQsIE1BWElOVCwgMClcbiAgICAgICAgY2FzZSBHT2JqZWN0LlRZUEVfVUlOVDpcbiAgICAgICAgICAgIHJldHVybiBQYXJhbVNwZWMudWludChuYW1lLCBcIlwiLCBcIlwiLCBmbGFncywgMCwgTUFYVUlOVCwgMClcbiAgICAgICAgY2FzZSBHT2JqZWN0LlRZUEVfSU5UNjQ6XG4gICAgICAgICAgICByZXR1cm4gUGFyYW1TcGVjLmludDY0KG5hbWUsIFwiXCIsIFwiXCIsIGZsYWdzLCBNSU5JTlQ2NCwgTUFYSU5UNjQsIDApXG4gICAgICAgIGNhc2UgR09iamVjdC5UWVBFX1VJTlQ2NDpcbiAgICAgICAgICAgIHJldHVybiBQYXJhbVNwZWMudWludDY0KG5hbWUsIFwiXCIsIFwiXCIsIGZsYWdzLCAwLCBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiwgMClcbiAgICAgICAgY2FzZSBHT2JqZWN0LlRZUEVfRkxPQVQ6XG4gICAgICAgICAgICByZXR1cm4gUGFyYW1TcGVjLmZsb2F0KG5hbWUsIFwiXCIsIFwiXCIsIGZsYWdzLCBNSU5GTE9BVCwgTUFYRkxPQVQsIDApXG4gICAgICAgIGNhc2UgR09iamVjdC5UWVBFX0RPVUJMRTpcbiAgICAgICAgICAgIHJldHVybiBQYXJhbVNwZWMuZG91YmxlKG5hbWUsIFwiXCIsIFwiXCIsIGZsYWdzLCBOdW1iZXIuTUlOX1ZBTFVFLCBOdW1iZXIuTUlOX1ZBTFVFLCAwKVxuICAgICAgICBjYXNlIEdPYmplY3QuVFlQRV9KU09CSkVDVDpcbiAgICAgICAgICAgIHJldHVybiBQYXJhbVNwZWMuanNvYmplY3QobmFtZSwgXCJcIiwgXCJcIiwgZmxhZ3MpXG4gICAgICAgIGNhc2UgR09iamVjdC5UWVBFX1ZBUklBTlQ6XG4gICAgICAgICAgICByZXR1cm4gUGFyYW1TcGVjLm9iamVjdChuYW1lLCBcIlwiLCBcIlwiLCBmbGFncyBhcyBhbnksIEdMaWIuVmFyaWFudClcblxuICAgICAgICBjYXNlIEdPYmplY3QuVFlQRV9FTlVNOlxuICAgICAgICBjYXNlIEdPYmplY3QuVFlQRV9JTlRFUkZBQ0U6XG4gICAgICAgIGNhc2UgR09iamVjdC5UWVBFX0JPWEVEOlxuICAgICAgICBjYXNlIEdPYmplY3QuVFlQRV9QT0lOVEVSOlxuICAgICAgICBjYXNlIEdPYmplY3QuVFlQRV9QQVJBTTpcbiAgICAgICAgY2FzZSBHT2JqZWN0LnR5cGVfZnJvbV9uYW1lKFwiR1R5cGVcIik6XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihgY2Fubm90IGd1ZXNzIFBhcmFtU3BlYyBmcm9tIEdUeXBlIFwiJHt0eXBlfVwiYClcbiAgICAgICAgY2FzZSBHT2JqZWN0LlRZUEVfT0JKRUNUOlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIFBhcmFtU3BlYy5vYmplY3QobmFtZSwgXCJcIiwgXCJcIiwgZmxhZ3MgYXMgYW55LCB0eXBlKVxuICAgIH1cbn1cblxuZnVuY3Rpb24gcHNwZWMobmFtZTogc3RyaW5nLCBmbGFnczogUGFyYW1GbGFncywgZGVjbGFyYXRpb246IFByb3BlcnR5VHlwZURlY2xhcmF0aW9uPHVua25vd24+KSB7XG4gICAgaWYgKGRlY2xhcmF0aW9uIGluc3RhbmNlb2YgUGFyYW1TcGVjKSByZXR1cm4gZGVjbGFyYXRpb25cblxuICAgIGlmIChkZWNsYXJhdGlvbiA9PT0gT2JqZWN0IHx8IGRlY2xhcmF0aW9uID09PSBGdW5jdGlvbiB8fCBkZWNsYXJhdGlvbiA9PT0gQXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIFBhcmFtU3BlYy5qc29iamVjdChuYW1lLCBcIlwiLCBcIlwiLCBmbGFncylcbiAgICB9XG5cbiAgICBpZiAoZGVjbGFyYXRpb24gPT09IFN0cmluZykge1xuICAgICAgICByZXR1cm4gUGFyYW1TcGVjLnN0cmluZyhuYW1lLCBcIlwiLCBcIlwiLCBmbGFncywgXCJcIilcbiAgICB9XG5cbiAgICBpZiAoZGVjbGFyYXRpb24gPT09IE51bWJlcikge1xuICAgICAgICByZXR1cm4gUGFyYW1TcGVjLmRvdWJsZShuYW1lLCBcIlwiLCBcIlwiLCBmbGFncywgLU51bWJlci5NQVhfVkFMVUUsIE51bWJlci5NQVhfVkFMVUUsIDApXG4gICAgfVxuXG4gICAgaWYgKGRlY2xhcmF0aW9uID09PSBCb29sZWFuKSB7XG4gICAgICAgIHJldHVybiBQYXJhbVNwZWMuYm9vbGVhbihuYW1lLCBcIlwiLCBcIlwiLCBmbGFncywgZmFsc2UpXG4gICAgfVxuXG4gICAgaWYgKFwiJGd0eXBlXCIgaW4gZGVjbGFyYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHBzcGVjRnJvbUdUeXBlKGRlY2xhcmF0aW9uLiRndHlwZSwgbmFtZSwgZmxhZ3MpXG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBkZWNsYXJhdGlvbiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBkZWNsYXJhdGlvbihuYW1lLCBmbGFncylcbiAgICB9XG5cbiAgICB0aHJvdyBFcnJvcihcImludmFsaWQgUHJvcGVydHlUeXBlRGVjbGFyYXRpb25cIilcbn1cblxudHlwZSBNZXRhSW5mbyA9IEdPYmplY3QuTWV0YUluZm88bmV2ZXIsIEFycmF5PHsgJGd0eXBlOiBHVHlwZTx1bmtub3duPiB9PiwgbmV2ZXI+XG5cbi8qKlxuICogUmVwbGFjZW1lbnQgZm9yIHtAbGluayBHT2JqZWN0LnJlZ2lzdGVyQ2xhc3N9XG4gKiBUaGlzIGRlY29yYXRvciBjb25zdW1lcyBtZXRhZGF0YSBuZWVkZWQgdG8gcmVnaXN0ZXIgdHlwZXMgd2hlcmUgdGhlIHByb3ZpZGVkIGRlY29yYXRvcnMgYXJlIHVzZWQ6XG4gKiAtIHtAbGluayBzaWduYWx9XG4gKiAtIHtAbGluayBwcm9wZXJ0eX1cbiAqIC0ge0BsaW5rIGdldHRlcn1cbiAqIC0ge0BsaW5rIHNldHRlcn1cbiAqXG4gKiBFeGFtcGxlOlxuICogYGBgdHNcbiAqIFxcQHJlZ2lzdGVyKHsgR1R5cGVOYW1lOiBcIk15Q2xhc3NcIiB9KVxuICogY2xhc3MgTXlDbGFzcyBleHRlbmRzIEdPYmplY3QuT2JqZWN0IHsgfVxuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlcjxDbHMgZXh0ZW5kcyB7IG5ldyAoLi4uYXJnczogYW55KTogR09iaiB9PihvcHRpb25zOiBNZXRhSW5mbyA9IHt9KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChjbHM6IENscywgY3R4OiBDbGFzc0RlY29yYXRvckNvbnRleHQ8Q2xzPikge1xuICAgICAgICBjb25zdCB0ID0gb3B0aW9ucy5UZW1wbGF0ZVxuXG4gICAgICAgIGlmICh0eXBlb2YgdCA9PT0gXCJzdHJpbmdcIiAmJiAhdC5zdGFydHNXaXRoKFwicmVzb3VyY2U6Ly9cIikgJiYgIXQuc3RhcnRzV2l0aChcImZpbGU6Ly9cIikpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuVGVtcGxhdGUgPSBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUodClcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG1ldGEgPSBjdHgubWV0YWRhdGEhIGFzIE1ldGFcblxuICAgICAgICBjb25zdCBwcm9wczogUmVjb3JkPHN0cmluZywgUGFyYW1TcGVjPHVua25vd24+PiA9IGZyb21FbnRyaWVzKFxuICAgICAgICAgICAgZW50cmllcyhtZXRhLnByb3BlcnRpZXMgPz8ge30pLm1hcCgoW2ZpZWxkTmFtZSwgeyBmbGFncywgdHlwZSB9XSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IGtlYmFiaWZ5KGZpZWxkTmFtZSlcbiAgICAgICAgICAgICAgICBjb25zdCBzcGVjID0gcHNwZWMoa2V5LCBmbGFncywgdHlwZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gW2tleSwgc3BlY11cbiAgICAgICAgICAgIH0pLFxuICAgICAgICApXG5cbiAgICAgICAgY29uc3Qgc2lnbmFscyA9IGZyb21FbnRyaWVzKFxuICAgICAgICAgICAgZW50cmllcyhtZXRhLnNpZ25hbHMgPz8ge30pLm1hcCgoW3NpZ25hbE5hbWUsIHsgZGVmYXVsdDogZGVmLCBtZXRob2QsIC4uLnNpZ25hbCB9XSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChkZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmaW5lUHJvcGVydHkoY2xzLnByb3RvdHlwZSwgYG9uXyR7c2lnbmFsTmFtZS5yZXBsYWNlQWxsKFwiLVwiLCBcIl9cIil9YCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IG1ldGhvZCxcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtzaWduYWxOYW1lLCBzaWduYWxdXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgKVxuXG4gICAgICAgIGRlbGV0ZSBtZXRhLnByb3BlcnRpZXNcbiAgICAgICAgZGVsZXRlIG1ldGEuc2lnbmFsc1xuXG4gICAgICAgIHJlZ2lzdGVyQ2xhc3MoeyAuLi5vcHRpb25zLCBQcm9wZXJ0aWVzOiBwcm9wcywgU2lnbmFsczogc2lnbmFscyB9LCBjbHMpXG4gICAgfVxufVxuXG4vKipcbiAqIEBleHBlcmltZW50YWxcbiAqIEFzc2VydHMgYSBndHlwZSBpbiBjYXNlcyB3aGVyZSB0aGUgdHlwZSBpcyB0b28gbG9vc2Uvc3RyaWN0LlxuICpcbiAqIEV4YW1wbGU6XG4gKiBgYGB0c1xuICogdHlwZSBUdXBsZSA9IFtudW1iZXIsIG51bWJlcl1cbiAqIGNvbnN0IFR1cGxlID0gZ3R5cGU8VHVwbGU+KEFycmF5KVxuICpcbiAqIGNsYXNzIHtcbiAqICAgXFxAcHJvcGVydHkoVHVwbGUpIHZhbHVlID0gWzEsIDJdIGFzIFR1cGxlXG4gKiB9XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGd0eXBlPEFzc2VydD4odHlwZTogR1R5cGU8YW55PiB8IHsgJGd0eXBlOiBHVHlwZTxhbnk+IH0pOiB7XG4gICAgJGd0eXBlOiBHVHlwZTxBc3NlcnQ+XG59IHtcbiAgICByZXR1cm4gXCIkZ3R5cGVcIiBpbiB0eXBlID8gdHlwZSA6IHsgJGd0eXBlOiB0eXBlIH1cbn1cblxuZGVjbGFyZSBnbG9iYWwge1xuICAgIGludGVyZmFjZSBGdW5jdGlvbkNvbnN0cnVjdG9yIHtcbiAgICAgICAgJGd0eXBlOiBHVHlwZTwoLi4uYXJnczogYW55W10pID0+IGFueT5cbiAgICB9XG5cbiAgICBpbnRlcmZhY2UgQXJyYXlDb25zdHJ1Y3RvciB7XG4gICAgICAgICRndHlwZTogR1R5cGU8YW55W10+XG4gICAgfVxufVxuXG5GdW5jdGlvbi4kZ3R5cGUgPSBPYmplY3QuJGd0eXBlIGFzIEZ1bmN0aW9uQ29uc3RydWN0b3JbXCIkZ3R5cGVcIl1cbkFycmF5LiRndHlwZSA9IE9iamVjdC4kZ3R5cGUgYXMgQXJyYXlDb25zdHJ1Y3RvcltcIiRndHlwZVwiXVxuIiwgImltcG9ydCB0eXBlIEdPYmplY3QgZnJvbSBcImdpOi8vR09iamVjdFwiXG5cbmV4cG9ydCBmdW5jdGlvbiBrZWJhYmlmeShzdHI6IHN0cmluZykge1xuICAgIHJldHVybiBzdHJcbiAgICAgICAgLnJlcGxhY2UoLyhbYS16XSkoW0EtWl0pL2csIFwiJDEtJDJcIilcbiAgICAgICAgLnJlcGxhY2VBbGwoXCJfXCIsIFwiLVwiKVxuICAgICAgICAudG9Mb3dlckNhc2UoKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc25ha2VpZnkoc3RyOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyXG4gICAgICAgIC5yZXBsYWNlKC8oW2Etel0pKFtBLVpdKS9nLCBcIiQxLSQyXCIpXG4gICAgICAgIC5yZXBsYWNlQWxsKFwiLVwiLCBcIl9cIilcbiAgICAgICAgLnRvTG93ZXJDYXNlKClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbWVsaWZ5KHN0cjogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKC9bLV9dKC4pL2csIChfLCBjaGFyKSA9PiBjaGFyLnRvVXBwZXJDYXNlKCkpXG59XG5cbmV4cG9ydCB0eXBlIFBhc2NhbGlmeTxTPiA9IFMgZXh0ZW5kcyBgJHtpbmZlciBIZWFkfSR7XCItXCIgfCBcIl9cIn0ke2luZmVyIFRhaWx9YFxuICAgID8gYCR7Q2FwaXRhbGl6ZTxIZWFkPn0ke1Bhc2NhbGlmeTxUYWlsPn1gXG4gICAgOiBTIGV4dGVuZHMgc3RyaW5nXG4gICAgICA/IENhcGl0YWxpemU8Uz5cbiAgICAgIDogbmV2ZXJcblxuZXhwb3J0IHR5cGUgWG1sTm9kZSA9IHtcbiAgICBuYW1lOiBzdHJpbmdcbiAgICBhdHRyaWJ1dGVzPzogUmVjb3JkPHN0cmluZywgc3RyaW5nPlxuICAgIGNoaWxkcmVuPzogQXJyYXk8WG1sTm9kZT5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHhtbCh7IG5hbWUsIGF0dHJpYnV0ZXMsIGNoaWxkcmVuIH06IFhtbE5vZGUpIHtcbiAgICBsZXQgYnVpbGRlciA9IGA8JHtuYW1lfWBcblxuICAgIGNvbnN0IGF0dHJzID0gT2JqZWN0LmVudHJpZXMoYXR0cmlidXRlcyA/PyBbXSlcblxuICAgIGlmIChhdHRycy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIGF0dHJzKSB7XG4gICAgICAgICAgICBidWlsZGVyICs9IGAgJHtrZXl9PVwiJHt2YWx1ZX1cImBcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjaGlsZHJlbiAmJiBjaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgIGJ1aWxkZXIgKz0gXCI+XCJcbiAgICAgICAgZm9yIChjb25zdCBub2RlIG9mIGNoaWxkcmVuKSB7XG4gICAgICAgICAgICBidWlsZGVyICs9IHhtbChub2RlKVxuICAgICAgICB9XG4gICAgICAgIGJ1aWxkZXIgKz0gYDwvJHtuYW1lfT5gXG4gICAgfSBlbHNlIHtcbiAgICAgICAgYnVpbGRlciArPSBcIiAvPlwiXG4gICAgfVxuXG4gICAgcmV0dXJuIGJ1aWxkZXJcbn1cblxuLy8gQmluZGluZ3Mgd29yayBvdmVyIHByb3BlcnRpZXMgaW4ga2ViYWItY2FzZSBiZWNhdXNlIHRoYXRzIHRoZSBjb252ZW50aW9uIG9mIGdvYmplY3Rcbi8vIGhvd2V2ZXIgaW4ganMgaXRzIGVpdGhlciBzbmFrZV9jYXNlIG9yIGNhbWVsQ2FzZVxuLy8gYWxzbyBvbiBEQnVzIGludGVyZmFjZXMgaXRzIFBhc2NhbENhc2UgYnkgY29udmVudGlvblxuLy8gc28gYXMgYSB3b3JrYXJvdW5kIHdlIHVzZSBnZXRfcHJvcGVydHlfbmFtZSBhbmQgb25seSB1c2UgdGhlIHByb3BlcnR5IGZpZWxkIGFzIGEgZmFsbGJhY2tcbmV4cG9ydCBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eUdldHRlcjxUIGV4dGVuZHMgb2JqZWN0PihvYmplY3Q6IFQsIHByb3A6IEV4dHJhY3Q8a2V5b2YgVCwgc3RyaW5nPikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmplY3QsIGBnZXRfJHtrZWJhYmlmeShwcm9wKS5yZXBsYWNlQWxsKFwiLVwiLCBcIl9cIil9YCwge1xuICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogKCkgPT4gb2JqZWN0W3Byb3BdLFxuICAgIH0pXG59XG5cbi8vIGF0dGVtcHQgc2V0dGluZyBhIHByb3BlcnR5IG9mIEdPYmplY3QuT2JqZWN0XG5leHBvcnQgZnVuY3Rpb24gc2V0KG9iajogR09iamVjdC5PYmplY3QsIHByb3A6IHN0cmluZywgdmFsdWU6IGFueSkge1xuICAgIGNvbnN0IGtleSA9IHNuYWtlaWZ5KHByb3ApXG4gICAgY29uc3QgZ2V0dGVyID0gYGdldF8ke2tleX1gIGFzIGtleW9mIHR5cGVvZiBvYmpcbiAgICBjb25zdCBzZXR0ZXIgPSBgc2V0XyR7a2V5fWAgYXMga2V5b2YgdHlwZW9mIG9ialxuXG4gICAgbGV0IGN1cnJlbnQ6IHVua25vd25cblxuICAgIGlmIChnZXR0ZXIgaW4gb2JqICYmIHR5cGVvZiBvYmpbZ2V0dGVyXSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGN1cnJlbnQgPSAob2JqW2dldHRlcl0gYXMgKCkgPT4gdW5rbm93bikoKVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGN1cnJlbnQgPSBvYmpbcHJvcCBhcyBrZXlvZiB0eXBlb2Ygb2JqXVxuICAgIH1cblxuICAgIGlmIChjdXJyZW50ICE9PSB2YWx1ZSkge1xuICAgICAgICBpZiAoc2V0dGVyIGluIG9iaiAmJiB0eXBlb2Ygb2JqW3NldHRlcl0gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgOyhvYmpbc2V0dGVyXSBhcyAodjogYW55KSA9PiB2b2lkKSh2YWx1ZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ob2JqLCB7IFtwcm9wXTogdmFsdWUgfSlcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsICJpbXBvcnQgR09iamVjdCwgeyByZWdpc3RlciB9IGZyb20gXCJhZ3MvZ29iamVjdFwiO1xuaW1wb3J0IEFzdGFsV3AgZnJvbSBcImdpOi8vQXN0YWxXcFwiO1xuXG5leHBvcnQgeyBXaXJlcGx1bWJlciB9O1xuXG5AcmVnaXN0ZXIoeyBHVHlwZU5hbWU6IFwiV2lyZXBsdW1iZXJcIiB9KVxuY2xhc3MgV2lyZXBsdW1iZXIgZXh0ZW5kcyBHT2JqZWN0Lk9iamVjdCB7XG4gICAgcHJpdmF0ZSBzdGF0aWMgYXN0YWxXaXJlcGx1bWJlcjogKEFzdGFsV3AuV3B8bnVsbCkgPSBBc3RhbFdwLmdldF9kZWZhdWx0KCk7XG4gICAgcHJpdmF0ZSBzdGF0aWMgaW5zdDogV2lyZXBsdW1iZXI7XG5cbiAgICBwcml2YXRlIGRlZmF1bHRTaW5rOiBBc3RhbFdwLkVuZHBvaW50ID0gV2lyZXBsdW1iZXIuYXN0YWxXaXJlcGx1bWJlciEuZ2V0X2RlZmF1bHRfc3BlYWtlcigpITtcbiAgICBwcml2YXRlIGRlZmF1bHRTb3VyY2U6IEFzdGFsV3AuRW5kcG9pbnQgPSBXaXJlcGx1bWJlci5hc3RhbFdpcmVwbHVtYmVyIS5nZXRfZGVmYXVsdF9taWNyb3Bob25lKCkhO1xuXG4gICAgcHJpdmF0ZSBtYXhTaW5rVm9sdW1lOiBudW1iZXIgPSAxMDA7XG4gICAgcHJpdmF0ZSBtYXhTb3VyY2VWb2x1bWU6IG51bWJlciA9IDEwMDtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIGlmKCFXaXJlcGx1bWJlci5hc3RhbFdpcmVwbHVtYmVyKSBcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkF1ZGlvIGZlYXR1cmVzIHdpbGwgbm90IHdvcmsgY29ycmVjdGx5ISBQbGVhc2UgaW5zdGFsbCB3aXJlcGx1bWJlciBmaXJzdFwiLCB7XG4gICAgICAgICAgICAgICAgY2F1c2U6IFwiV2lyZXBsdW1iZXIgbGlicmFyeSBub3QgZm91bmRcIlxuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBnZXREZWZhdWx0KCk6IFdpcmVwbHVtYmVyIHtcbiAgICAgICAgaWYoIVdpcmVwbHVtYmVyLmluc3QpIFxuICAgICAgICAgICAgV2lyZXBsdW1iZXIuaW5zdCA9IG5ldyBXaXJlcGx1bWJlcigpO1xuXG4gICAgICAgIHJldHVybiBXaXJlcGx1bWJlci5pbnN0O1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0V2lyZXBsdW1iZXIoKTogQXN0YWxXcC5XcCB7XG4gICAgICAgIHJldHVybiBXaXJlcGx1bWJlci5hc3RhbFdpcmVwbHVtYmVyITtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0TWF4U2lua1ZvbHVtZSgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXhTaW5rVm9sdW1lO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRNYXhTb3VyY2VWb2x1bWUoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWF4U291cmNlVm9sdW1lO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXREZWZhdWx0U2luaygpOiBBc3RhbFdwLkVuZHBvaW50IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVmYXVsdFNpbms7XG4gICAgfVxuXG4gICAgcHVibGljIGdldERlZmF1bHRTb3VyY2UoKTogQXN0YWxXcC5FbmRwb2ludCB7XG4gICAgICAgIHJldHVybiB0aGlzLmRlZmF1bHRTb3VyY2U7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFNpbmtWb2x1bWUoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IodGhpcy5nZXREZWZhdWx0U2luaygpLmdldF92b2x1bWUoKSAqIDEwMCk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFNvdXJjZVZvbHVtZSgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcih0aGlzLmdldERlZmF1bHRTb3VyY2UoKS5nZXRfdm9sdW1lKCkgKiAxMDApO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRTaW5rVm9sdW1lKG5ld1NpbmtWb2x1bWU6IG51bWJlcik6IHZvaWQge1xuICAgICAgICB0aGlzLmRlZmF1bHRTaW5rLnNldF92b2x1bWUoXG4gICAgICAgICAgICAobmV3U2lua1ZvbHVtZSA+IHRoaXMubWF4U2lua1ZvbHVtZSA/IHRoaXMubWF4U2lua1ZvbHVtZSA6IG5ld1NpbmtWb2x1bWUpIC8gMTAwXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHVibGljIHNldFNvdXJjZVZvbHVtZShuZXdTb3VyY2VWb2x1bWU6IG51bWJlcik6IHZvaWQge1xuICAgICAgICB0aGlzLmRlZmF1bHRTb3VyY2Uuc2V0X3ZvbHVtZShcbiAgICAgICAgICAgIG5ld1NvdXJjZVZvbHVtZSA+IHRoaXMubWF4U291cmNlVm9sdW1lID8gdGhpcy5tYXhTb3VyY2VWb2x1bWUgOiBuZXdTb3VyY2VWb2x1bWUgLyAxMDBcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgaW5jcmVhc2VFbmRwb2ludFZvbHVtZShlbmRwb2ludDogQXN0YWxXcC5FbmRwb2ludCwgdm9sdW1lSW5jcmVhc2U6IG51bWJlcik6IHZvaWQge1xuICAgICAgICB2b2x1bWVJbmNyZWFzZSA9IE1hdGguYWJzKHZvbHVtZUluY3JlYXNlKSAvIDEwMDtcblxuICAgICAgICBpZigoZW5kcG9pbnQuZ2V0X3ZvbHVtZSgpICsgdm9sdW1lSW5jcmVhc2UpID4gKHRoaXMubWF4U2lua1ZvbHVtZSAvIDEwMCkpIHtcbiAgICAgICAgICAgIGVuZHBvaW50LnNldF92b2x1bWUoMS4wKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGVuZHBvaW50LnNldF92b2x1bWUoZW5kcG9pbnQuZ2V0X3ZvbHVtZSgpICsgdm9sdW1lSW5jcmVhc2UpO1xuICAgIH1cblxuICAgIHB1YmxpYyBpbmNyZWFzZVNpbmtWb2x1bWUodm9sdW1lSW5jcmVhc2U6IG51bWJlcik6IHZvaWQge1xuICAgICAgICB0aGlzLmluY3JlYXNlRW5kcG9pbnRWb2x1bWUodGhpcy5nZXREZWZhdWx0U2luaygpLCB2b2x1bWVJbmNyZWFzZSk7XG4gICAgfVxuXG4gICAgcHVibGljIGluY3JlYXNlU291cmNlVm9sdW1lKHZvbHVtZUluY3JlYXNlOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5pbmNyZWFzZUVuZHBvaW50Vm9sdW1lKHRoaXMuZ2V0RGVmYXVsdFNvdXJjZSgpLCB2b2x1bWVJbmNyZWFzZSk7XG4gICAgfVxuXG4gICAgcHVibGljIGRlY3JlYXNlRW5kcG9pbnRWb2x1bWUoZW5kcG9pbnQ6IEFzdGFsV3AuRW5kcG9pbnQsIHZvbHVtZURlY3JlYXNlOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgdm9sdW1lRGVjcmVhc2UgPSBNYXRoLmFicyh2b2x1bWVEZWNyZWFzZSkgLyAxMDA7XG5cbiAgICAgICAgaWYoKGVuZHBvaW50LmdldF92b2x1bWUoKSAtIHZvbHVtZURlY3JlYXNlKSA8IDApIHtcbiAgICAgICAgICAgIGVuZHBvaW50LnNldF92b2x1bWUoMCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBlbmRwb2ludC5zZXRfdm9sdW1lKGVuZHBvaW50LmdldF92b2x1bWUoKSAtIHZvbHVtZURlY3JlYXNlKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZGVjcmVhc2VTaW5rVm9sdW1lKHZvbHVtZURlY3JlYXNlOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5kZWNyZWFzZUVuZHBvaW50Vm9sdW1lKHRoaXMuZ2V0RGVmYXVsdFNpbmsoKSwgdm9sdW1lRGVjcmVhc2UpO1xuICAgIH1cblxuICAgIHB1YmxpYyBkZWNyZWFzZVNvdXJjZVZvbHVtZSh2b2x1bWVEZWNyZWFzZTogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZGVjcmVhc2VFbmRwb2ludFZvbHVtZSh0aGlzLmdldERlZmF1bHRTb3VyY2UoKSwgdm9sdW1lRGVjcmVhc2UpO1xuICAgIH1cblxuICAgIHB1YmxpYyBtdXRlU2luaygpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5nZXREZWZhdWx0U2luaygpLnNldF9tdXRlKHRydWUpO1xuICAgIH1cblxuICAgIHB1YmxpYyBtdXRlU291cmNlKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmdldERlZmF1bHRTb3VyY2UoKS5zZXRfbXV0ZSh0cnVlKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdW5tdXRlU2luaygpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5nZXREZWZhdWx0U2luaygpLnNldF9tdXRlKGZhbHNlKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdW5tdXRlU291cmNlKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmdldERlZmF1bHRTb3VyY2UoKS5zZXRfbXV0ZShmYWxzZSk7XG4gICAgfVxuXG4gICAgcHVibGljIGlzTXV0ZWRTaW5rKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXREZWZhdWx0U2luaygpLmdldF9tdXRlKCk7XG4gICAgfVxuXG4gICAgcHVibGljIGlzTXV0ZWRTb3VyY2UoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldERlZmF1bHRTb3VyY2UoKS5nZXRfbXV0ZSgpO1xuICAgIH1cblxuICAgIHB1YmxpYyB0b2dnbGVNdXRlU2luaygpOiB2b2lkIHtcbiAgICAgICAgaWYodGhpcy5pc011dGVkU2luaygpKSBcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnVubXV0ZVNpbmsoKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5tdXRlU2luaygpO1xuICAgIH1cblxuICAgIHB1YmxpYyB0b2dnbGVNdXRlU291cmNlKCk6IHZvaWQge1xuICAgICAgICBpZih0aGlzLmlzTXV0ZWRTb3VyY2UoKSlcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnVubXV0ZVNvdXJjZSgpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLm11dGVTb3VyY2UoKTtcbiAgICB9XG59XG4iLCAiaW1wb3J0IEFzdGFsIGZyb20gXCJnaTovL0FzdGFsP3ZlcnNpb249NC4wXCJcbmltcG9ydCBHdGsgZnJvbSBcImdpOi8vR3RrP3ZlcnNpb249NC4wXCJcbmltcG9ydCBHZGsgZnJvbSBcImdpOi8vR2RrP3ZlcnNpb249NC4wXCJcbmV4cG9ydCB7IEFzdGFsLCBHdGssIEdkayB9XG4iLCAiaW1wb3J0IEdPYmplY3QgZnJvbSBcImdpOi8vR09iamVjdFwiXG5pbXBvcnQgeyBGcmFnbWVudCB9IGZyb20gXCIuL0ZyYWdtZW50LmpzXCJcbmltcG9ydCB7IEFjY2Vzc29yIH0gZnJvbSBcIi4vc3RhdGUuanNcIlxuaW1wb3J0IHsgQ0MsIEZDLCBlbnYgfSBmcm9tIFwiLi9lbnYuanNcIlxuaW1wb3J0IHsga2ViYWJpZnksIFBhc2NhbGlmeSwgc2V0IH0gZnJvbSBcIi4uL3V0aWwuanNcIlxuaW1wb3J0IHsgb25DbGVhbnVwIH0gZnJvbSBcIi4vc2NvcGUuanNcIlxuXG4vKipcbiAqIFJlcHJlc2VudHMgYWxsIG9mIHRoZSB0aGluZ3MgdGhhdCBjYW4gYmUgcGFzc2VkIGFzIGEgY2hpbGQgdG8gY2xhc3MgY29tcG9uZW50cy5cbiAqL1xuZXhwb3J0IHR5cGUgTm9kZSA9XG4gICAgfCBBcnJheTxHT2JqZWN0Lk9iamVjdD5cbiAgICB8IEdPYmplY3QuT2JqZWN0XG4gICAgfCBudW1iZXJcbiAgICB8IHN0cmluZ1xuICAgIHwgYm9vbGVhblxuICAgIHwgbnVsbFxuICAgIHwgdW5kZWZpbmVkXG5cbmV4cG9ydCBjb25zdCBndGtUeXBlID0gU3ltYm9sKFwiZ3RrIGJ1aWxkZXIgdHlwZVwiKVxuXG4vKipcbiAqIEdldCB0aGUgdHlwZSBvZiB0aGUgb2JqZWN0IHNwZWNpZmllZCB0aHJvdWdoIHRoZSBgJHR5cGVgIHByb3BlcnR5XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRUeXBlKG9iamVjdDogR09iamVjdC5PYmplY3QpIHtcbiAgICByZXR1cm4gZ3RrVHlwZSBpbiBvYmplY3QgPyAob2JqZWN0W2d0a1R5cGVdIGFzIHN0cmluZykgOiBudWxsXG59XG5cbi8qKlxuICogRnVuY3Rpb24gQ29tcG9uZW50IFByb3BlcnRpZXNcbiAqL1xuZXhwb3J0IHR5cGUgRkNQcm9wczxTZWxmLCBQcm9wcz4gPSBQcm9wcyAmIHtcbiAgICAvKipcbiAgICAgKiBHdGsuQnVpbGRlciB0eXBlXG4gICAgICogaXRzIGNvbnN1bWVkIGludGVybmFsbHkgYW5kIG5vdCBhY3R1YWxseSBwYXNzZWQgYXMgYSBwYXJhbWV0ZXJzXG4gICAgICovXG4gICAgJHR5cGU/OiBzdHJpbmdcbiAgICAvKipcbiAgICAgKiBzZXR1cCBmdW5jdGlvblxuICAgICAqIGl0cyBjb25zdW1lZCBpbnRlcm5hbGx5IGFuZCBub3QgYWN0dWFsbHkgcGFzc2VkIGFzIGEgcGFyYW1ldGVyc1xuICAgICAqL1xuICAgICQ/KHNlbGY6IFNlbGYpOiB2b2lkXG59XG5cbi8qKlxuICogQ2xhc3MgQ29tcG9uZW50IFByb3BlcnRpZXNcbiAqL1xuZXhwb3J0IHR5cGUgQ0NQcm9wczxTZWxmIGV4dGVuZHMgR09iamVjdC5PYmplY3QsIFByb3BzPiA9IHtcbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWwgY2hpbGRyZW4gZWxlbWVudHNcbiAgICAgKiBpdHMgY29uc3VtZWQgaW50ZXJuYWxseSBhbmQgbm90IGFjdHVhbGx5IHBhc3NlZCB0byBjbGFzcyBjb21wb25lbnQgY29uc3RydWN0b3JzXG4gICAgICovXG4gICAgY2hpbGRyZW4/OiBBcnJheTxOb2RlPiB8IE5vZGVcbiAgICAvKipcbiAgICAgKiBHdGsuQnVpbGRlciB0eXBlXG4gICAgICogaXRzIGNvbnN1bWVkIGludGVybmFsbHkgYW5kIG5vdCBhY3R1YWxseSBwYXNzZWQgdG8gY2xhc3MgY29tcG9uZW50IGNvbnN0cnVjdG9yc1xuICAgICAqL1xuICAgICR0eXBlPzogc3RyaW5nXG4gICAgLyoqXG4gICAgICogZnVuY3Rpb24gdG8gdXNlIGFzIGEgY29uc3RydWN0b3IsXG4gICAgICogaXRzIGNvbnN1bWVkIGludGVybmFsbHkgYW5kIG5vdCBhY3R1YWxseSBwYXNzZWQgdG8gY2xhc3MgY29tcG9uZW50IGNvbnN0cnVjdG9yc1xuICAgICAqL1xuICAgICRjb25zdHJ1Y3Rvcj8ocHJvcHM6IFBhcnRpYWw8UHJvcHM+KTogU2VsZlxuICAgIC8qKlxuICAgICAqIHNldHVwIGZ1bmN0aW9uLFxuICAgICAqIGl0cyBjb25zdW1lZCBpbnRlcm5hbGx5IGFuZCBub3QgYWN0dWFsbHkgcGFzc2VkIHRvIGNsYXNzIGNvbXBvbmVudCBjb25zdHJ1Y3RvcnNcbiAgICAgKi9cbiAgICAkPyhzZWxmOiBTZWxmKTogdm9pZFxuICAgIC8qKlxuICAgICAqIENTUyBjbGFzcyBuYW1lc1xuICAgICAqL1xuICAgIGNsYXNzPzogc3RyaW5nIHwgQWNjZXNzb3I8c3RyaW5nPlxuICAgIC8qKlxuICAgICAqIGlubGluZSBDU1NcbiAgICAgKi9cbiAgICBjc3M/OiBzdHJpbmcgfCBBY2Nlc3NvcjxzdHJpbmc+XG59ICYge1xuICAgIFtLIGluIGtleW9mIFByb3BzXTogQWNjZXNzb3I8Tm9uTnVsbGFibGU8UHJvcHNbS10+PiB8IFByb3BzW0tdXG59ICYge1xuICAgIFtTIGluIGtleW9mIFNlbGZbXCIkc2lnbmFsc1wiXSBhcyBTIGV4dGVuZHMgYG5vdGlmeTo6JHtpbmZlciBQfWBcbiAgICAgICAgPyBgb25Ob3RpZnkke1Bhc2NhbGlmeTxQPn1gXG4gICAgICAgIDogUyBleHRlbmRzIHN0cmluZ1xuICAgICAgICAgID8gYG9uJHtQYXNjYWxpZnk8Uz59YFxuICAgICAgICAgIDogbmV2ZXJdPzogR09iamVjdC5TaWduYWxDYWxsYmFjazxTZWxmLCBTZWxmW1wiJHNpZ25hbHNcIl1bU10+XG59XG5cbi8vIHByZXR0aWVyLWlnbm9yZVxudHlwZSBKc3hQcm9wczxDLCBQcm9wcz4gPVxuICAgIEMgZXh0ZW5kcyB0eXBlb2YgRnJhZ21lbnQgPyAoUHJvcHMgJiB7fSlcbiAgICAvLyBpbnRyaW5zaWNFbGVtZW50cyBhbHdheXMgcmVzb2x2ZSBhcyBGQ1xuICAgIC8vIHNvIHdlIGNhbid0IG5hcnJvdyBpdCBkb3duLCBhbmQgaW4gc29tZSBjYXNlc1xuICAgIC8vIHRoZSBzZXR1cCBmdW5jdGlvbiBpcyB0eXBlZCBhcyBhIHVuaW9uIG9mIE9iamVjdCBhbmQgYWN0dWFsIHR5cGVcbiAgICAvLyBhcyBhIGZpeCB1c2VycyBjYW4gYW5kIHNob3VsZCB1c2UgRkNQcm9wc1xuICAgIDogQyBleHRlbmRzIEZDID8gUHJvcHMgJiBPbWl0PEZDUHJvcHM8UmV0dXJuVHlwZTxDPiwgUHJvcHM+LCBcIiRcIj5cbiAgICA6IEMgZXh0ZW5kcyBDQyA/IENDUHJvcHM8SW5zdGFuY2VUeXBlPEM+LCBQcm9wcz5cbiAgICA6IG5ldmVyXG5cbmZ1bmN0aW9uIGlzR09iamVjdEN0b3IoY3RvcjogYW55KTogY3RvciBpcyBDQyB7XG4gICAgcmV0dXJuIGN0b3IucHJvdG90eXBlIGluc3RhbmNlb2YgR09iamVjdC5PYmplY3Rcbn1cblxuZnVuY3Rpb24gaXNGdW5jdGlvbkN0b3IoY3RvcjogYW55KTogY3RvciBpcyBGQyB7XG4gICAgcmV0dXJuIHR5cGVvZiBjdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgIWlzR09iamVjdEN0b3IoY3Rvcilcbn1cblxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldFR5cGUob2JqZWN0OiBvYmplY3QsIHR5cGU6IHN0cmluZykge1xuICAgIGlmIChndGtUeXBlIGluIG9iamVjdCAmJiBvYmplY3RbZ3RrVHlwZV0gIT09IFwiXCIpIHtcbiAgICAgICAgY29uc29sZS53YXJuKGB0eXBlIG92ZXJyaWRlbiBmcm9tICR7b2JqZWN0W2d0a1R5cGVdfSB0byAke3R5cGV9IG9uICR7b2JqZWN0fWApXG4gICAgfVxuXG4gICAgT2JqZWN0LmFzc2lnbihvYmplY3QsIHsgW2d0a1R5cGVdOiB0eXBlIH0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBqc3g8VCBleHRlbmRzIChwcm9wczogYW55KSA9PiBHT2JqZWN0Lk9iamVjdD4oXG4gICAgY3RvcjogVCxcbiAgICBwcm9wczogSnN4UHJvcHM8VCwgUGFyYW1ldGVyczxUPlswXT4sXG4pOiBSZXR1cm5UeXBlPFQ+XG5cbmV4cG9ydCBmdW5jdGlvbiBqc3g8VCBleHRlbmRzIG5ldyAocHJvcHM6IGFueSkgPT4gR09iamVjdC5PYmplY3Q+KFxuICAgIGN0b3I6IFQsXG4gICAgcHJvcHM6IEpzeFByb3BzPFQsIENvbnN0cnVjdG9yUGFyYW1ldGVyczxUPlswXT4sXG4pOiBJbnN0YW5jZVR5cGU8VD5cblxuZXhwb3J0IGZ1bmN0aW9uIGpzeDxUIGV4dGVuZHMgR09iamVjdC5PYmplY3Q+KFxuICAgIGN0b3I6IGtleW9mICh0eXBlb2YgZW52KVtcImludHJpbnNpY0VsZW1lbnRzXCJdIHwgKG5ldyAocHJvcHM6IGFueSkgPT4gVCkgfCAoKHByb3BzOiBhbnkpID0+IFQpLFxuICAgIGlucHJvcHM6IGFueSxcbiAgICAvLyBrZXkgaXMgYSBzcGVjaWFsIHByb3AgaW4ganN4IHdoaWNoIGlzIHBhc3NlZCBhcyBhIHRoaXJkIGFyZ3VtZW50IGFuZCBub3QgaW4gcHJvcHNcbiAgICBrZXk/OiBzdHJpbmcsXG4pOiBUIHtcbiAgICBjb25zdCB7ICQsICR0eXBlLCAkY29uc3RydWN0b3IsIGNoaWxkcmVuID0gW10sIC4uLnJlc3QgfSA9IGlucHJvcHMgYXMgQ0NQcm9wczxULCBhbnk+XG4gICAgY29uc3QgcHJvcHMgPSByZXN0IGFzIFJlY29yZDxzdHJpbmcsIGFueT5cblxuICAgIGlmIChrZXkpIE9iamVjdC5hc3NpZ24ocHJvcHMsIHsga2V5IH0pXG4gICAgZW52LmluaXRQcm9wcyhwcm9wcylcblxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHByb3BzKSkge1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkgZGVsZXRlIHByb3BzW2tleV1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGN0b3IgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgaWYgKGN0b3IgaW4gZW52LmludHJpbnNpY0VsZW1lbnRzKSB7XG4gICAgICAgICAgICBjdG9yID0gZW52LmludHJpbnNpY0VsZW1lbnRzW2N0b3JdIGFzIEZDPFQ+IHwgQ0M8VD5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKGB1bmtub3duIGludHJpbnNpYyBlbGVtZW50IFwiJHtjdG9yfVwiYClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc0Z1bmN0aW9uQ3RvcihjdG9yKSkge1xuICAgICAgICBjb25zdCBvYmplY3QgPSBjdG9yKHsgY2hpbGRyZW4sIC4uLnByb3BzIH0pXG4gICAgICAgIGlmICgkdHlwZSkgc2V0VHlwZShvYmplY3QsICR0eXBlKVxuICAgICAgICAkPy4ob2JqZWN0KVxuICAgICAgICByZXR1cm4gb2JqZWN0XG4gICAgfVxuXG4gICAgLy8gY29sbGVjdCBjc3MgYW5kIGNsYXNzTmFtZVxuICAgIGNvbnN0IHsgY3NzLCBjbGFzczogY2xhc3NOYW1lIH0gPSBwcm9wc1xuICAgIGRlbGV0ZSBwcm9wcy5jc3NcbiAgICBkZWxldGUgcHJvcHMuY2xhc3NcblxuICAgIGNvbnN0IHNpZ25hbHM6IEFycmF5PFtzdHJpbmcsICguLi5wcm9wczogdW5rbm93bltdKSA9PiB1bmtub3duXT4gPSBbXVxuICAgIGNvbnN0IGJpbmRpbmdzOiBBcnJheTxbc3RyaW5nLCBBY2Nlc3Nvcjx1bmtub3duPl0+ID0gW11cblxuICAgIC8vIGNvbGxlY3Qgc2lnbmFscyBhbmQgYmluZGluZ3NcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhwcm9wcykpIHtcbiAgICAgICAgaWYgKGtleS5zdGFydHNXaXRoKFwib25cIikpIHtcbiAgICAgICAgICAgIHNpZ25hbHMucHVzaChba2V5LnNsaWNlKDIpLCB2YWx1ZSBhcyAoKSA9PiB1bmtub3duXSlcbiAgICAgICAgICAgIGRlbGV0ZSBwcm9wc1trZXldXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgQWNjZXNzb3IpIHtcbiAgICAgICAgICAgIGJpbmRpbmdzLnB1c2goW2tleSwgdmFsdWVdKVxuICAgICAgICAgICAgcHJvcHNba2V5XSA9IHZhbHVlLmdldCgpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBjb25zdHJ1Y3RcbiAgICBjb25zdCBvYmplY3QgPSAkY29uc3RydWN0b3IgPyAkY29uc3RydWN0b3IocHJvcHMpIDogbmV3IChjdG9yIGFzIENDPFQ+KShwcm9wcylcbiAgICBpZiAoJGNvbnN0cnVjdG9yKSBPYmplY3QuYXNzaWduKG9iamVjdCwgcHJvcHMpXG4gICAgaWYgKCR0eXBlKSBzZXRUeXBlKG9iamVjdCwgJHR5cGUpXG5cbiAgICBpZiAoY3NzKSBlbnYuc2V0Q3NzKG9iamVjdCwgY3NzKVxuICAgIGlmIChjbGFzc05hbWUpIGVudi5zZXRDbGFzcyhvYmplY3QsIGNsYXNzTmFtZSlcblxuICAgIC8vIGFkZCBjaGlsZHJlblxuICAgIGZvciAoY29uc3QgY2hpbGQgb2YgQXJyYXkuaXNBcnJheShjaGlsZHJlbikgPyBjaGlsZHJlbiA6IFtjaGlsZHJlbl0pIHtcbiAgICAgICAgaWYgKGNoaWxkID09PSB0cnVlKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJUcnlpbmcgdG8gYWRkIGJvb2xlYW4gdmFsdWUgb2YgYHRydWVgIGFzIGEgY2hpbGQuXCIpXG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGQpKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNoIG9mIGNoaWxkKSB7XG4gICAgICAgICAgICAgICAgZW52LmFkZENoaWxkKG9iamVjdCwgY2gsIC0xKVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGNoaWxkKSB7XG4gICAgICAgICAgICBlbnYuYWRkQ2hpbGQob2JqZWN0LCBjaGlsZCwgLTEpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBoYW5kbGUgc2lnbmFsc1xuICAgIGNvbnN0IGRpc3Bvc2VIYW5kbGVycyA9IHNpZ25hbHMubWFwKChbc2lnLCBoYW5kbGVyXSkgPT4ge1xuICAgICAgICBjb25zdCBuYW1lID0ga2ViYWJpZnkoc2lnKVxuICAgICAgICBjb25zdCBpZCA9IG5hbWUuc3RhcnRzV2l0aChcIm5vdGlmeS1cIilcbiAgICAgICAgICAgID8gb2JqZWN0LmNvbm5lY3QoYG5vdGlmeTo6JHtuYW1lLnNsaWNlKDcpfWAsIGhhbmRsZXIpXG4gICAgICAgICAgICA6IG9iamVjdC5jb25uZWN0KGtlYmFiaWZ5KHNpZyksIGhhbmRsZXIpXG5cbiAgICAgICAgcmV0dXJuICgpID0+IG9iamVjdC5kaXNjb25uZWN0KGlkKVxuICAgIH0pXG5cbiAgICAvLyBoYW5kbGUgYmluZGluZ3NcbiAgICBjb25zdCBkaXNwb3NlQmluZGluZ3MgPSBiaW5kaW5ncy5tYXAoKFtwcm9wLCBiaW5kaW5nXSkgPT4ge1xuICAgICAgICBjb25zdCBkaXNwb3NlID0gYmluZGluZy5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgc2V0KG9iamVjdCwgcHJvcCwgYmluZGluZy5nZXQoKSlcbiAgICAgICAgfSlcbiAgICAgICAgc2V0KG9iamVjdCwgcHJvcCwgYmluZGluZy5nZXQoKSlcbiAgICAgICAgcmV0dXJuIGRpc3Bvc2VcbiAgICB9KVxuXG4gICAgLy8gY2xlYW51cFxuICAgIGlmIChkaXNwb3NlQmluZGluZ3MubGVuZ3RoID4gMCB8fCBkaXNwb3NlSGFuZGxlcnMubGVuZ3RoID4gMCkge1xuICAgICAgICBvbkNsZWFudXAoKCkgPT4ge1xuICAgICAgICAgICAgZGlzcG9zZUhhbmRsZXJzLmZvckVhY2goKGNiKSA9PiBjYigpKVxuICAgICAgICAgICAgZGlzcG9zZUJpbmRpbmdzLmZvckVhY2goKGNiKSA9PiBjYigpKVxuICAgICAgICB9KVxuICAgIH1cblxuICAgICQ/LihvYmplY3QpXG4gICAgcmV0dXJuIG9iamVjdFxufVxuXG5leHBvcnQgY29uc3QganN4cyA9IGpzeFxuXG5kZWNsYXJlIGdsb2JhbCB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbiAgICBuYW1lc3BhY2UgSlNYIHtcbiAgICAgICAgdHlwZSBFbGVtZW50VHlwZSA9IGtleW9mIEludHJpbnNpY0VsZW1lbnRzIHwgRkMgfCBDQ1xuICAgICAgICB0eXBlIEVsZW1lbnQgPSBHT2JqZWN0Lk9iamVjdFxuICAgICAgICB0eXBlIEVsZW1lbnRDbGFzcyA9IEdPYmplY3QuT2JqZWN0XG5cbiAgICAgICAgdHlwZSBMaWJyYXJ5TWFuYWdlZEF0dHJpYnV0ZXM8QywgUHJvcHM+ID0gSnN4UHJvcHM8QywgUHJvcHM+ICYge1xuICAgICAgICAgICAgLy8gRklYTUU6IHdoeSBkb2VzIGFuIGludHJpbnNpYyBlbGVtZW50IGFsd2F5cyByZXNvbHZlIGFzIEZDP1xuICAgICAgICAgICAgLy8gX190eXBlPzogQyBleHRlbmRzIENDID8gXCJDQ1wiIDogQyBleHRlbmRzIEZDID8gXCJGQ1wiIDogbmV2ZXJcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktb2JqZWN0LXR5cGVcbiAgICAgICAgaW50ZXJmYWNlIEludHJpbnNpY0VsZW1lbnRzIHtcbiAgICAgICAgICAgIC8vIGNjOiBDQ1Byb3BzPEd0ay5Cb3gsIEd0ay5Cb3guQ29uc3RydWN0b3JQcm9wcywgR3RrLkJveC5TaWduYWxTaWduYXR1cmVzPlxuICAgICAgICAgICAgLy8gZmM6IEZDUHJvcHM8R3RrLldpZGdldCwgRm5Qcm9wcz5cbiAgICAgICAgfVxuXG4gICAgICAgIGludGVyZmFjZSBFbGVtZW50Q2hpbGRyZW5BdHRyaWJ1dGUge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1vYmplY3QtdHlwZVxuICAgICAgICAgICAgY2hpbGRyZW46IHt9XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCAiaW1wb3J0IEdPYmplY3QgZnJvbSBcImdpOi8vR09iamVjdFwiXG5pbXBvcnQgR2lvIGZyb20gXCJnaTovL0dpb1wiXG5pbXBvcnQgR0xpYiBmcm9tIFwiZ2k6Ly9HTGliXCJcbmltcG9ydCB7IHR5cGUgUGFzY2FsaWZ5LCBjYW1lbGlmeSwga2ViYWJpZnkgfSBmcm9tIFwiLi4vdXRpbC5qc1wiXG5cbnR5cGUgU3Vic2NyaWJlQ2FsbGJhY2sgPSAoKSA9PiB2b2lkXG50eXBlIERpc3Bvc2VGdW5jdGlvbiA9ICgpID0+IHZvaWRcbnR5cGUgU3Vic2NyaWJlRnVuY3Rpb24gPSAoY2FsbGJhY2s6IFN1YnNjcmliZUNhbGxiYWNrKSA9PiBEaXNwb3NlRnVuY3Rpb25cblxuZXhwb3J0IHR5cGUgQWNjZXNzZWQ8VD4gPSBUIGV4dGVuZHMgQWNjZXNzb3I8aW5mZXIgVj4gPyBWIDogbmV2ZXJcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtZGVjbGFyYXRpb24tbWVyZ2luZ1xuZXhwb3J0IGNsYXNzIEFjY2Vzc29yPFQgPSB1bmtub3duPiBleHRlbmRzIEZ1bmN0aW9uIHtcbiAgICBzdGF0aWMgJGd0eXBlID0gR09iamVjdC5UWVBFX0pTT0JKRUNUIGFzIHVua25vd24gYXMgR09iamVjdC5HVHlwZTxBY2Nlc3Nvcj5cblxuICAgIC8qKiBAZXhwZXJpbWVudGFsICovXG4gICAgc3RhdGljIGV2YWx1YXRpbmc/OiBTZXQ8QWNjZXNzb3I8dW5rbm93bj4+XG5cbiAgICAjZ2V0OiAoKSA9PiBUXG4gICAgI3N1YnNjcmliZTogU3Vic2NyaWJlRnVuY3Rpb25cblxuICAgIGNvbnN0cnVjdG9yKGdldDogKCkgPT4gVCwgc3Vic2NyaWJlPzogU3Vic2NyaWJlRnVuY3Rpb24pIHtcbiAgICAgICAgc3VwZXIoXCJyZXR1cm4gYXJndW1lbnRzLmNhbGxlZS5fY2FsbC5hcHBseShhcmd1bWVudHMuY2FsbGVlLCBhcmd1bWVudHMpXCIpXG4gICAgICAgIHRoaXMuI3N1YnNjcmliZSA9IHN1YnNjcmliZSA/PyAoKCkgPT4gKCkgPT4gdm9pZCAwKVxuICAgICAgICB0aGlzLiNnZXQgPSBnZXRcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTdWJzY3JpYmUgZm9yIHZhbHVlIGNoYW5nZXMuXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0byBydW4gd2hlbiB0aGUgY3VycmVudCB2YWx1ZSBjaGFuZ2VzLlxuICAgICAqIEByZXR1cm5zIFVuc3Vic2NyaWJlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIHN1YnNjcmliZShjYWxsYmFjazogU3Vic2NyaWJlQ2FsbGJhY2spOiBEaXNwb3NlRnVuY3Rpb24ge1xuICAgICAgICAvLyBUT0RPOiBhdXRvIHVuc3ViIHdoZW4gYSBzY29wZSBpcyBhdmFpbGFibGU/XG4gICAgICAgIHJldHVybiB0aGlzLiNzdWJzY3JpYmUoY2FsbGJhY2spXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybnMgVGhlIGN1cnJlbnQgdmFsdWUuXG4gICAgICovXG4gICAgZ2V0KCk6IFQge1xuICAgICAgICBBY2Nlc3Nvci5ldmFsdWF0aW5nPy5hZGQodGhpcylcbiAgICAgICAgcmV0dXJuIHRoaXMuI2dldCgpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IGBBY2Nlc3NvcmAgdGhhdCBhcHBsaWVzIGEgdHJhbnNmb3JtYXRpb24gb24gaXRzIHZhbHVlLlxuICAgICAqIEBwYXJhbSB0cmFuc2Zvcm0gVGhlIHRyYW5zZm9ybWF0aW9uIHRvIGFwcGx5LiBTaG91bGQgYmUgYSBwdXJlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGFzPFIgPSBUPih0cmFuc2Zvcm06ICh2YWx1ZTogVCkgPT4gUik6IEFjY2Vzc29yPFI+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBBY2Nlc3NvcigoKSA9PiB0cmFuc2Zvcm0odGhpcy4jZ2V0KCkpLCB0aGlzLiNzdWJzY3JpYmUpXG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9jYWxsPFIgPSBUPih0cmFuc2Zvcm06ICh2YWx1ZTogVCkgPT4gUik6IEFjY2Vzc29yPFI+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXModHJhbnNmb3JtKVxuICAgIH1cblxuICAgIHRvU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBgQWNjZXNzb3I8JHt0aGlzLmdldCgpfT5gXG4gICAgfVxuXG4gICAgW1N5bWJvbC50b1ByaW1pdGl2ZV0oKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcIkFjY2Vzc29yIGltcGxpY2l0bHkgY29udmVydGVkIHRvIGEgcHJpbWl0aXZlIHZhbHVlLlwiKVxuICAgICAgICByZXR1cm4gdGhpcy50b1N0cmluZygpXG4gICAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFjY2Vzc29yPFQ+IHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgYEFjY2Vzc29yYCB0aGF0IGFwcGxpZXMgYSB0cmFuc2Zvcm1hdGlvbiBvbiBpdHMgdmFsdWUuXG4gICAgICogQHBhcmFtIHRyYW5zZm9ybSBUaGUgdHJhbnNmb3JtYXRpb24gdG8gYXBwbHkuIFNob3VsZCBiZSBhIHB1cmUgZnVuY3Rpb24uXG4gICAgICovXG4gICAgPFIgPSBUPih0cmFuc2Zvcm06ICh2YWx1ZTogVCkgPT4gUik6IEFjY2Vzc29yPFI+XG59XG5cbmV4cG9ydCB0eXBlIFNldHRlcjxUPiA9IHtcbiAgICAodmFsdWU6IFQpOiB2b2lkXG4gICAgKHZhbHVlOiAocHJldjogVCkgPT4gVCk6IHZvaWRcbn1cblxuZXhwb3J0IHR5cGUgU3RhdGU8VD4gPSBbQWNjZXNzb3I8VD4sIFNldHRlcjxUPl1cblxuLyoqXG4gKiBDcmVhdGUgYSB3cml0YWJsZSBzaWduYWwuXG4gKlxuICogQHBhcmFtIGluaXQgVGhlIGludGlhbCB2YWx1ZSBvZiB0aGUgc2lnbmFsXG4gKiBAcmV0dXJucyBBbiBgQWNjZXNzb3JgIGFuZCBhIHNldHRlciBmdW5jdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3RhdGU8VD4oaW5pdDogVCk6IFN0YXRlPFQ+IHtcbiAgICBsZXQgY3VycmVudFZhbHVlID0gaW5pdFxuICAgIGNvbnN0IHN1YnNjcmliZXJzID0gbmV3IFNldDxTdWJzY3JpYmVDYWxsYmFjaz4oKVxuXG4gICAgY29uc3Qgc3Vic2NyaWJlOiBTdWJzY3JpYmVGdW5jdGlvbiA9IChjYWxsYmFjaykgPT4ge1xuICAgICAgICBzdWJzY3JpYmVycy5hZGQoY2FsbGJhY2spXG4gICAgICAgIHJldHVybiAoKSA9PiBzdWJzY3JpYmVycy5kZWxldGUoY2FsbGJhY2spXG4gICAgfVxuXG4gICAgY29uc3Qgc2V0ID0gKG5ld1ZhbHVlOiB1bmtub3duKSA9PiB7XG4gICAgICAgIGNvbnN0IHZhbHVlOiBUID0gdHlwZW9mIG5ld1ZhbHVlID09PSBcImZ1bmN0aW9uXCIgPyBuZXdWYWx1ZShjdXJyZW50VmFsdWUpIDogbmV3VmFsdWVcbiAgICAgICAgaWYgKGN1cnJlbnRWYWx1ZSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgIGN1cnJlbnRWYWx1ZSA9IHZhbHVlXG4gICAgICAgICAgICBzdWJzY3JpYmVycy5mb3JFYWNoKChjYikgPT4gY2IoKSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBbbmV3IEFjY2Vzc29yKCgpID0+IGN1cnJlbnRWYWx1ZSwgc3Vic2NyaWJlKSwgc2V0IGFzIFNldHRlcjxUPl1cbn1cblxuLyoqXG4gKiBDcmVhdGUgYW4gYEFjY2Vzc29yYCB3aGljaCBpcyBjb21wdXRlZCBmcm9tIGEgbGlzdCBvZiBgQWNjZXNzb3Jgcy5cbiAqXG4gKiBgYGB0cyBFeGFtcGxlXG4gKiBsZXQgYTogQWNjZXNzb3I8bnVtYmVyPlxuICogbGV0IGI6IEFjY2Vzc29yPHN0cmluZz5cbiAqIGNvbnN0IGM6IEFjY2Vzc29yPFtudW1iZXIsIHN0cmluZ10+ID0gY3JlYXRlQ29tcHV0ZWQoW2EsIGJdKVxuICogY29uc3QgZDogQWNjZXNzb3I8c3RyaW5nPiA9IGNyZWF0ZUNvbXB1dGVkKFthLCBiXSwgKGE6IG51bWJlciwgYjogc3RyaW5nKSA9PiBgJHthfSAke2J9YClcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBkZXBzIExpc3Qgb2YgYEFjY2Vzc29yc2AuXG4gKiBAcGFyYW0gdHJhbnNmb3JtIEFuIG9wdGlvbmFsIHRyYW5zZm9ybSBmdW5jdGlvbi5cbiAqIEByZXR1cm5zIFRoZSBjb21wdXRlZCBgQWNjZXNzb3JgLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29tcHV0ZWQ8XG4gICAgY29uc3QgRGVwcyBleHRlbmRzIEFycmF5PEFjY2Vzc29yPGFueT4+LFxuICAgIEFyZ3MgZXh0ZW5kcyB7IFtLIGluIGtleW9mIERlcHNdOiBBY2Nlc3NlZDxEZXBzW0tdPiB9LFxuICAgIFYgPSBBcmdzLFxuPihkZXBzOiBEZXBzLCB0cmFuc2Zvcm0/OiAoLi4uYXJnczogQXJncykgPT4gVik6IEFjY2Vzc29yPFY+IHtcbiAgICBsZXQgZGlzcG9zZTogQXJyYXk8RGlzcG9zZUZ1bmN0aW9uPlxuICAgIGNvbnN0IHN1YnNjcmliZXJzID0gbmV3IFNldDxTdWJzY3JpYmVDYWxsYmFjaz4oKVxuICAgIGNvbnN0IGNhY2hlID0gbmV3IEFycmF5PHVua25vd24+KGRlcHMubGVuZ3RoKVxuXG4gICAgY29uc3Qgc3Vic2NyaWJlOiBTdWJzY3JpYmVGdW5jdGlvbiA9IChjYWxsYmFjaykgPT4ge1xuICAgICAgICBpZiAoc3Vic2NyaWJlcnMuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgZGlzcG9zZSA9IGRlcHMubWFwKChkZXAsIGkpID0+XG4gICAgICAgICAgICAgICAgZGVwLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gZGVwLmdldCgpXG4gICAgICAgICAgICAgICAgICAgIGlmIChjYWNoZVtpXSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlW2ldID0gZGVwLmdldCgpXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVycy5mb3JFYWNoKChjYikgPT4gY2IoKSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgKVxuICAgICAgICB9XG5cbiAgICAgICAgc3Vic2NyaWJlcnMuYWRkKGNhbGxiYWNrKVxuXG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBzdWJzY3JpYmVycy5kZWxldGUoY2FsbGJhY2spXG4gICAgICAgICAgICBpZiAoc3Vic2NyaWJlcnMuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGRpc3Bvc2UubWFwKChjYikgPT4gY2IoKSlcbiAgICAgICAgICAgICAgICBkaXNwb3NlLmxlbmd0aCA9IDBcbiAgICAgICAgICAgICAgICBjYWNoZS5sZW5ndGggPSAwXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBnZXQgPSAoKTogViA9PiB7XG4gICAgICAgIGNvbnN0IGFyZ3MgPSBkZXBzLm1hcCgoZGVwLCBpKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWNhY2hlW2ldKSB7XG4gICAgICAgICAgICAgICAgY2FjaGVbaV0gPSBkZXAuZ2V0KClcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlW2ldXG4gICAgICAgIH0pXG5cbiAgICAgICAgcmV0dXJuIHRyYW5zZm9ybSA/IHRyYW5zZm9ybSguLi4oYXJncyBhcyBBcmdzKSkgOiAoYXJncyBhcyBWKVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgQWNjZXNzb3IoZ2V0LCBzdWJzY3JpYmUpXG59XG5cbi8qKlxuICogQ3JlYXRlIGFuIGBBY2Nlc3NvcmAgb24gYSBgR09iamVjdC5PYmplY3RgJ3MgYHByb3BlcnR5YC5cbiAqXG4gKiBAcGFyYW0gb2JqZWN0IFRoZSBgR09iamVjdC5PYmplY3RgIHRvIGNyZWF0ZSB0aGUgYEFjY2Vzc29yYCBvbi5cbiAqIEBwYXJhbSBwcm9wZXJ0eSBPbmUgb2YgaXRzIHJlZ2lzdGVyZWQgcHJvcGVydGllcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUJpbmRpbmc8VCBleHRlbmRzIEdPYmplY3QuT2JqZWN0LCBQIGV4dGVuZHMga2V5b2YgVD4oXG4gICAgb2JqZWN0OiBULFxuICAgIHByb3BlcnR5OiBFeHRyYWN0PFAsIHN0cmluZz4sXG4pOiBBY2Nlc3NvcjxUW1BdPlxuXG4vLyBUT0RPOiBzdXBwb3J0IG5lc3RlZCBiaW5kaW5nc1xuLy8gZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUJpbmRpbmc8XG4vLyAgICAgVCBleHRlbmRzIEdPYmplY3QuT2JqZWN0LFxuLy8gICAgIFAxIGV4dGVuZHMga2V5b2YgVCxcbi8vICAgICBQMiBleHRlbmRzIGtleW9mIE5vbk51bGxhYmxlPFRbUDFdPixcbi8vID4oXG4vLyAgICAgb2JqZWN0OiBULFxuLy8gICAgIHByb3BlcnR5MTogRXh0cmFjdDxQMSwgc3RyaW5nPixcbi8vICAgICBwcm9wZXJ0eTI6IEV4dHJhY3Q8UDIsIHN0cmluZz4sXG4vLyApOiBBY2Nlc3NvcjxOb25OdWxsYWJsZTxUW1AxXT5bUDJdPlxuXG4vKipcbiAqIENyZWF0ZSBhbiBgQWNjZXNzb3JgIG9uIGEgYEdpby5TZXR0aW5nc2AncyBga2V5YC5cbiAqIFZhbHVlcyBhcmUgcmVjdXJzaXZlbHkgdW5wYWNrZWQuXG4gKlxuICogQHBhcmFtIG9iamVjdCBUaGUgYEdpby5TZXR0aW5nc2AgdG8gY3JlYXRlIHRoZSBgQWNjZXNzb3JgIG9uLlxuICogQHBhcmFtIGtleSBUaGUgc2V0dGluZ3Mga2V5XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVCaW5kaW5nPFQ+KHNldHRpbmdzOiBHaW8uU2V0dGluZ3MsIGtleTogc3RyaW5nKTogQWNjZXNzb3I8VD5cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUJpbmRpbmc8VD4ob2JqZWN0OiBHT2JqZWN0Lk9iamVjdCB8IEdpby5TZXR0aW5ncywga2V5OiBzdHJpbmcpOiBBY2Nlc3NvcjxUPiB7XG4gICAgY29uc3QgcHJvcCA9IGtlYmFiaWZ5KGtleSkgYXMga2V5b2YgdHlwZW9mIG9iamVjdFxuXG4gICAgY29uc3Qgc3Vic2NyaWJlOiBTdWJzY3JpYmVGdW5jdGlvbiA9IChjYWxsYmFjaykgPT4ge1xuICAgICAgICBjb25zdCBzaWcgPSBvYmplY3QgaW5zdGFuY2VvZiBHaW8uU2V0dGluZ3MgPyBcImNoYW5nZWRcIiA6IFwibm90aWZ5XCJcbiAgICAgICAgY29uc3QgaWQgPSBvYmplY3QuY29ubmVjdChgJHtzaWd9Ojoke3Byb3B9YCwgKCkgPT4gY2FsbGJhY2soKSlcbiAgICAgICAgcmV0dXJuICgpID0+IG9iamVjdC5kaXNjb25uZWN0KGlkKVxuICAgIH1cblxuICAgIGNvbnN0IGdldCA9ICgpOiBUID0+IHtcbiAgICAgICAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIEdpby5TZXR0aW5ncykge1xuICAgICAgICAgICAgcmV0dXJuIG9iamVjdC5nZXRfdmFsdWUoa2V5KS5yZWN1cnNpdmVVbnBhY2soKSBhcyBUXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBnZXR0ZXIgPSBgZ2V0XyR7cHJvcC5yZXBsYWNlQWxsKFwiLVwiLCBcIl9cIil9YCBhcyBrZXlvZiB0eXBlb2Ygb2JqZWN0XG5cbiAgICAgICAgICAgIGlmIChnZXR0ZXIgaW4gb2JqZWN0ICYmIHR5cGVvZiBvYmplY3RbZ2V0dGVyXSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChvYmplY3RbZ2V0dGVyXSBhcyAoKSA9PiB1bmtub3duKSgpIGFzIFRcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHByb3AgaW4gb2JqZWN0KSByZXR1cm4gb2JqZWN0W3Byb3BdIGFzIFRcbiAgICAgICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSByZXR1cm4gb2JqZWN0W2tleSBhcyBrZXlvZiB0eXBlb2Ygb2JqZWN0XSBhcyBUXG5cbiAgICAgICAgICAgIHRocm93IEVycm9yKGBjYW5ub3QgZ2V0IHByb3BlcnR5ICR7a2V5fWApXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEFjY2Vzc29yKGdldCwgc3Vic2NyaWJlKVxufVxuXG50eXBlIENvbm5lY3Rpb25IYW5kbGVyPFxuICAgIE8gZXh0ZW5kcyBHT2JqZWN0Lk9iamVjdCxcbiAgICBTIGV4dGVuZHMga2V5b2YgT1tcIiRzaWduYWxzXCJdLFxuICAgIFQsXG4+ID0gT1tcIiRzaWduYWxzXCJdW1NdIGV4dGVuZHMgKC4uLmFyZ3M6IGFueVtdKSA9PiBpbmZlciBSXG4gICAgPyB2b2lkIGV4dGVuZHMgUlxuICAgICAgICA/ICguLi5hcmdzOiBbLi4uUGFyYW1ldGVyczxPW1wiJHNpZ25hbHNcIl1bU10+LCBjdXJyZW50VmFsdWU6IFRdKSA9PiBUXG4gICAgICAgIDogbmV2ZXJcbiAgICA6IG5ldmVyXG5cbi8qKlxuICogQ3JlYXRlIGFuIGBBY2Nlc3NvcmAgd2hpY2ggc2V0cyB1cCBhIGxpc3Qgb2YgYEdPYmplY3QuT2JqZWN0YCBzaWduYWwgY29ubmVjdGlvbnMuXG4gKlxuICogYGBgdHMgRXhhbXBsZVxuICogY29uc3QgdmFsdWU6IEFjY2Vzc29yPHN0cmluZz4gPSBjcmVhdGVDb25uZWN0aW9uKFxuICogICBcImluaXRpYWwgdmFsdWVcIixcbiAqICAgW29iajEsIFwic2lnLW5hbWVcIiwgKC4uLmFyZ3MpID0+IFwic3RyXCJdLFxuICogICBbb2JqMiwgXCJzaWctbmFtZVwiLCAoLi4uYXJncykgPT4gXCJzdHJcIl1cbiAqIClcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBpbml0IFRoZSBpbml0aWFsIHZhbHVlXG4gKiBAcGFyYW0gc2lnbmFscyBBIGxpc3Qgb2YgYEdPYmplY3QuT2JqZWN0YCwgc2lnbmFsIG5hbWUgYW5kIGNhbGxiYWNrIHBhaXJzIHRvIGNvbm5lY3QuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDb25uZWN0aW9uPFxuICAgIFQsXG4gICAgTzEgZXh0ZW5kcyBHT2JqZWN0Lk9iamVjdCxcbiAgICBTMSBleHRlbmRzIGtleW9mIE8xW1wiJHNpZ25hbHNcIl0sXG4gICAgTzIgZXh0ZW5kcyBHT2JqZWN0Lk9iamVjdCxcbiAgICBTMiBleHRlbmRzIGtleW9mIE8yW1wiJHNpZ25hbHNcIl0sXG4gICAgTzMgZXh0ZW5kcyBHT2JqZWN0Lk9iamVjdCxcbiAgICBTMyBleHRlbmRzIGtleW9mIE8zW1wiJHNpZ25hbHNcIl0sXG4gICAgTzQgZXh0ZW5kcyBHT2JqZWN0Lk9iamVjdCxcbiAgICBTNCBleHRlbmRzIGtleW9mIE80W1wiJHNpZ25hbHNcIl0sXG4gICAgTzUgZXh0ZW5kcyBHT2JqZWN0Lk9iamVjdCxcbiAgICBTNSBleHRlbmRzIGtleW9mIE81W1wiJHNpZ25hbHNcIl0sXG4gICAgTzYgZXh0ZW5kcyBHT2JqZWN0Lk9iamVjdCxcbiAgICBTNiBleHRlbmRzIGtleW9mIE82W1wiJHNpZ25hbHNcIl0sXG4gICAgTzcgZXh0ZW5kcyBHT2JqZWN0Lk9iamVjdCxcbiAgICBTNyBleHRlbmRzIGtleW9mIE83W1wiJHNpZ25hbHNcIl0sXG4gICAgTzggZXh0ZW5kcyBHT2JqZWN0Lk9iamVjdCxcbiAgICBTOCBleHRlbmRzIGtleW9mIE84W1wiJHNpZ25hbHNcIl0sXG4gICAgTzkgZXh0ZW5kcyBHT2JqZWN0Lk9iamVjdCxcbiAgICBTOSBleHRlbmRzIGtleW9mIE85W1wiJHNpZ25hbHNcIl0sXG4+KFxuICAgIGluaXQ6IFQsXG4gICAgaDE6IFtPMSwgUzEsIENvbm5lY3Rpb25IYW5kbGVyPE8xLCBTMSwgVD5dLFxuICAgIGgyPzogW08yLCBTMiwgQ29ubmVjdGlvbkhhbmRsZXI8TzIsIFMyLCBUPl0sXG4gICAgaDM/OiBbTzMsIFMzLCBDb25uZWN0aW9uSGFuZGxlcjxPMywgUzMsIFQ+XSxcbiAgICBoND86IFtPNCwgUzQsIENvbm5lY3Rpb25IYW5kbGVyPE80LCBTNCwgVD5dLFxuICAgIGg1PzogW081LCBTNSwgQ29ubmVjdGlvbkhhbmRsZXI8TzUsIFM1LCBUPl0sXG4gICAgaDY/OiBbTzYsIFM2LCBDb25uZWN0aW9uSGFuZGxlcjxPNiwgUzYsIFQ+XSxcbiAgICBoNz86IFtPNywgUzcsIENvbm5lY3Rpb25IYW5kbGVyPE83LCBTNywgVD5dLFxuICAgIGg4PzogW084LCBTOCwgQ29ubmVjdGlvbkhhbmRsZXI8TzgsIFM4LCBUPl0sXG4gICAgaDk/OiBbTzksIFM5LCBDb25uZWN0aW9uSGFuZGxlcjxPOSwgUzksIFQ+XSxcbikge1xuICAgIGxldCB2YWx1ZSA9IGluaXRcbiAgICBsZXQgZGlzcG9zZTogQXJyYXk8RGlzcG9zZUZ1bmN0aW9uPlxuICAgIGNvbnN0IHN1YnNjcmliZXJzID0gbmV3IFNldDxTdWJzY3JpYmVDYWxsYmFjaz4oKVxuICAgIGNvbnN0IHNpZ25hbHMgPSBbaDEsIGgyLCBoMywgaDQsIGg1LCBoNiwgaDcsIGg4LCBoOV0uZmlsdGVyKChoKSA9PiBoICE9PSB1bmRlZmluZWQpXG5cbiAgICBjb25zdCBzdWJzY3JpYmU6IFN1YnNjcmliZUZ1bmN0aW9uID0gKGNhbGxiYWNrKSA9PiB7XG4gICAgICAgIGlmIChzdWJzY3JpYmVycy5zaXplID09PSAwKSB7XG4gICAgICAgICAgICBkaXNwb3NlID0gc2lnbmFscy5tYXAoKFtvYmplY3QsIHNpZ25hbCwgY2FsbGJhY2tdKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaWQgPSBHT2JqZWN0Lk9iamVjdC5wcm90b3R5cGUuY29ubmVjdC5jYWxsKFxuICAgICAgICAgICAgICAgICAgICBvYmplY3QsXG4gICAgICAgICAgICAgICAgICAgIHNpZ25hbCBhcyBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgIChfLCAuLi5hcmdzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IGNhbGxiYWNrKC4uLmFyZ3MsIHZhbHVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlICE9PSBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gbmV3VmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVycy5mb3JFYWNoKChjYikgPT4gY2IoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICApXG5cbiAgICAgICAgICAgICAgICByZXR1cm4gKCkgPT4gR09iamVjdC5PYmplY3QucHJvdG90eXBlLmRpc2Nvbm5lY3QuY2FsbChvYmplY3QsIGlkKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIHN1YnNjcmliZXJzLmFkZChjYWxsYmFjaylcblxuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgc3Vic2NyaWJlcnMuZGVsZXRlKGNhbGxiYWNrKVxuICAgICAgICAgICAgaWYgKHN1YnNjcmliZXJzLnNpemUgPT09IDApIHtcbiAgICAgICAgICAgICAgICBkaXNwb3NlLm1hcCgoY2IpID0+IGNiKCkpXG4gICAgICAgICAgICAgICAgZGlzcG9zZS5sZW5ndGggPSAwXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEFjY2Vzc29yKCgpID0+IHZhbHVlLCBzdWJzY3JpYmUpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgc2lnbmFsIGZyb20gYSBwcm92aWVyIGZ1bmN0aW9uLlxuICogVGhlIHByb3ZpZGVyIGlzIGNhbGxlZCB3aGVuIHRoZSBmaXJzdCBzdWJzY3JpYmVyIGFwcGVhcnMgYW5kIHRoZSByZXR1cm5lZCBkaXNwb3NlXG4gKiBmdW5jdGlvbiBmcm9tIHRoZSBwcm92aWRlciB3aWxsIGJlIGNhbGxlZCB3aGVuIHRoZSBudW1iZXIgb2Ygc3Vic2NyaWJlcnMgZHJvcCB0byB6ZXJvLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBgdHNcbiAqIGNvbnN0IHZhbHVlID0gY3JlYXRlRXh0ZXJuYWwoMCwgKHNldCkgPT4ge1xuICogICBjb25zdCBpbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHNldCgodikgPT4gdiArIDEpKVxuICogICByZXR1cm4gKCkgPT4gY2xlYXJJbnRlcnZhbChpbnRlcnZhbClcbiAqIH0pXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gaW5pdCBUaGUgaW5pdGlhbCB2YWx1ZVxuICogQHBhcmFtIHByb2R1Y2VyIFRoZSBwcm9kdWNlciBmdW5jdGlvbiB3aGljaCBzaG91bGQgcmV0dXJuIGEgY2xlYW51cCBmdW5jdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRXh0ZXJuYWw8VD4oXG4gICAgaW5pdDogVCxcbiAgICBwcm9kdWNlcjogKHNldDogU2V0dGVyPFQ+KSA9PiBEaXNwb3NlRnVuY3Rpb24sXG4pOiBBY2Nlc3NvcjxUPiB7XG4gICAgbGV0IGN1cnJlbnRWYWx1ZSA9IGluaXRcbiAgICBsZXQgZGlzcG9zZTogRGlzcG9zZUZ1bmN0aW9uXG4gICAgY29uc3Qgc3Vic2NyaWJlcnMgPSBuZXcgU2V0PFN1YnNjcmliZUNhbGxiYWNrPigpXG5cbiAgICBjb25zdCBzdWJzY3JpYmU6IFN1YnNjcmliZUZ1bmN0aW9uID0gKGNhbGxiYWNrKSA9PiB7XG4gICAgICAgIGlmIChzdWJzY3JpYmVycy5zaXplID09PSAwKSB7XG4gICAgICAgICAgICBkaXNwb3NlID0gcHJvZHVjZXIoKHY6IHVua25vd24pID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdWYWx1ZTogVCA9IHR5cGVvZiB2ID09PSBcImZ1bmN0aW9uXCIgPyB2KGN1cnJlbnRWYWx1ZSkgOiB2XG4gICAgICAgICAgICAgICAgaWYgKG5ld1ZhbHVlICE9PSBjdXJyZW50VmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFZhbHVlID0gbmV3VmFsdWVcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlcnMuZm9yRWFjaCgoY2IpID0+IGNiKCkpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIHN1YnNjcmliZXJzLmFkZChjYWxsYmFjaylcblxuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgc3Vic2NyaWJlcnMuZGVsZXRlKGNhbGxiYWNrKVxuICAgICAgICAgICAgaWYgKHN1YnNjcmliZXJzLnNpemUgPT09IDApIHtcbiAgICAgICAgICAgICAgICBkaXNwb3NlKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgQWNjZXNzb3IoKCkgPT4gY3VycmVudFZhbHVlLCBzdWJzY3JpYmUpXG59XG5cbnR5cGUgRGVlcEluZmVyPFQgZXh0ZW5kcyBzdHJpbmc+ID0gUmV0dXJuVHlwZTxHTGliLlZhcmlhbnQ8VD5bXCJkZWVwVW5wYWNrXCJdPlxudHlwZSBSZWN1cnNpdmVJbmZlcjxUIGV4dGVuZHMgc3RyaW5nPiA9IFJldHVyblR5cGU8R0xpYi5WYXJpYW50PFQ+W1wicmVjdXJzaXZlVW5wYWNrXCJdPlxuXG4vKiogQGV4cGVyaW1lbnRhbCAqL1xudHlwZSBTZXR0aW5nczxUIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgc3RyaW5nPj4gPSB7XG4gICAgW0sgaW4ga2V5b2YgVCBhcyBVbmNhcGl0YWxpemU8UGFzY2FsaWZ5PEs+Pl06IEFjY2Vzc29yPFJlY3Vyc2l2ZUluZmVyPFRbS10+PlxufSAmIHtcbiAgICBbSyBpbiBrZXlvZiBUIGFzIGBzZXQke1Bhc2NhbGlmeTxLPn1gXTogU2V0dGVyPERlZXBJbmZlcjxUW0tdPj5cbn1cblxuLyoqXG4gKiBAZXhwZXJpbWVudGFsXG4gKlxuICogV3JhcCBhIHtAbGluayBHaW8uU2V0dGluZ3N9IGludG8gYSBjb2xsZWN0aW9uIG9mIHNldHRlcnMgYW5kIGFjY2Vzc29ycy5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYHRzXG4gKiBjb25zdCBzID0gY3JlYXRlU2V0dGluZ3Moc2V0dGluZ3MsIHtcbiAqICAgXCJjb21wbGV4LWtleVwiOiBcImF7c2F7c3N9fVwiLFxuICogICBcInNpbXBsZS1rZXlcIjogXCJzXCIsXG4gKiB9KVxuICpcbiAqIHMuY29tcGxleEtleS5zdWJzY3JpYmUoKCkgPT4ge1xuICogICBwcmludChzLmNvbXBsZXhLZXkuZ2V0KCkpXG4gKiB9KVxuICpcbiAqIHMuc2V0Q29tcGxleEtleSgocHJldikgPT4gKHtcbiAqICAgLi4ucHJldixcbiAqICAga2V5OiB7IG5lc3RlZDogXCJcIiB9LFxuICogfSkpXG4gKiBgYGBcbiAqL1xuLy8gVE9ETzogY29tZSB1cCB3aXRoIGFuIEFQSVxuLy8gLSB0byBtYW51YWxseSBhbm5vdGF0ZSBWYXJpYW50IHR5cGVkIHNldHRlcnMvZ2V0dGVyc1xuLy8gLSB0byBzZXQgcmVjdXJzaXZlIHZzIGRlZXAgdW5wYWNrIHBlciBrZXlcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTZXR0aW5nczxjb25zdCBUIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgc3RyaW5nPj4oXG4gICAgc2V0dGluZ3M6IEdpby5TZXR0aW5ncyxcbiAgICBrZXlzOiBULFxuKTogU2V0dGluZ3M8VD4ge1xuICAgIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoXG4gICAgICAgIE9iamVjdC5lbnRyaWVzKGtleXMpLmZsYXRNYXAoKFtrZXksIHR5cGVdKSA9PiBbXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgY2FtZWxpZnkoa2V5KSxcbiAgICAgICAgICAgICAgICBuZXcgQWNjZXNzb3IoXG4gICAgICAgICAgICAgICAgICAgICgpID0+IHNldHRpbmdzLmdldF92YWx1ZShrZXkpLnJlY3Vyc2l2ZVVucGFjaygpLFxuICAgICAgICAgICAgICAgICAgICAoY2FsbGJhY2spID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gc2V0dGluZ3MuY29ubmVjdChgY2hhbmdlZDo6JHtrZXl9YCwgY2FsbGJhY2spXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCkgPT4gc2V0dGluZ3MuZGlzY29ubmVjdChpZClcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICBgc2V0JHtrZXlbMF0udG9VcHBlckNhc2UoKSArIGNhbWVsaWZ5KGtleSkuc2xpY2UoMSl9YCxcbiAgICAgICAgICAgICAgICAodjogdW5rbm93bikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBzZXR0aW5ncy5zZXRfdmFsdWUoXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgR0xpYi5WYXJpYW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIHYgPT09IFwiZnVuY3Rpb25cIiA/IHYoc2V0dGluZ3MuZ2V0X3ZhbHVlKGtleSkuZGVlcFVucGFjaygpKSA6IHYsXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIF0pLFxuICAgIClcbn1cbiIsICJpbXBvcnQgdHlwZSBHT2JqZWN0IGZyb20gXCJnaTovL0dPYmplY3RcIlxuaW1wb3J0IHsgdHlwZSBBY2Nlc3NvciB9IGZyb20gXCIuL3N0YXRlLmpzXCJcblxudHlwZSBHT2JqID0gR09iamVjdC5PYmplY3RcbmV4cG9ydCB0eXBlIENDPFQgZXh0ZW5kcyBHT2JqID0gR09iaj4gPSB7IG5ldyAocHJvcHM6IGFueSk6IFQgfVxuZXhwb3J0IHR5cGUgRkM8VCBleHRlbmRzIEdPYmogPSBHT2JqPiA9IChwcm9wczogYW55KSA9PiBUXG5cbnR5cGUgQ3NzU2V0dGVyID0gKG9iamVjdDogR09iaiwgY3NzOiBzdHJpbmcgfCBBY2Nlc3NvcjxzdHJpbmc+KSA9PiB2b2lkXG50eXBlIENoaWxkRm4gPSAocGFyZW50OiBHT2JqLCBjaGlsZDogR09iaiB8IG51bWJlciB8IHN0cmluZywgaW5kZXg/OiBudW1iZXIpID0+IHZvaWRcblxuZXhwb3J0IGZ1bmN0aW9uIGNvbmZpZ3VlKGNvbmY6IFBhcnRpYWw8SnN4RW52Pikge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKGVudiwgY29uZilcbn1cblxudHlwZSBKc3hFbnYgPSB7XG4gICAgaW50cmluc2ljRWxlbWVudHM6IFJlY29yZDxzdHJpbmcsIENDIHwgRkM+XG4gICAgYWRkQ2hpbGQ6IENoaWxkRm5cbiAgICBzZXRDc3M6IENzc1NldHRlclxuICAgIHNldENsYXNzOiBDc3NTZXR0ZXJcbiAgICBpbml0UHJvcHM6IChwcm9wczogYW55KSA9PiB2b2lkXG4gICAgZGVmYXVsdENsZWFudXA6IChvYmplY3Q6IEdPYmopID0+IHZvaWRcbn1cblxuZnVuY3Rpb24gbWlzc2luZ0ltcGwoKSB7XG4gICAgdGhyb3cgRXJyb3IoXCJtaXNzaW5nIGltcGxcIilcbn1cblxuZXhwb3J0IGNvbnN0IGVudjogSnN4RW52ID0ge1xuICAgIGludHJpbnNpY0VsZW1lbnRzOiB7fSxcbiAgICBhZGRDaGlsZDogbWlzc2luZ0ltcGwsXG4gICAgc2V0Q3NzOiBtaXNzaW5nSW1wbCxcbiAgICBzZXRDbGFzczogbWlzc2luZ0ltcGwsXG4gICAgaW5pdFByb3BzOiAoKSA9PiB2b2lkIDAsXG4gICAgZGVmYXVsdENsZWFudXA6ICgpID0+IHZvaWQgMCxcbn1cbiIsICJleHBvcnQgY2xhc3MgU2NvcGUge1xuICAgIHN0YXRpYyBjdXJyZW50PzogU2NvcGUgfCBudWxsXG5cbiAgICBwYXJlbnQ/OiBTY29wZSB8IG51bGxcbiAgICBjb250ZXh0cyA9IG5ldyBNYXA8Q29udGV4dCwgdW5rbm93bj4oKVxuXG4gICAgcHJpdmF0ZSBjbGVhbnVwcyA9IG5ldyBTZXQ8KCkgPT4gdm9pZD4oKVxuICAgIHByaXZhdGUgbW91bnRzID0gbmV3IFNldDwoKSA9PiB2b2lkPigpXG4gICAgcHJpdmF0ZSBtb3VudGVkID0gZmFsc2VcblxuICAgIGNvbnN0cnVjdG9yKHBhcmVudD86IFNjb3BlIHwgbnVsbCkge1xuICAgICAgICB0aGlzLnBhcmVudCA9IHBhcmVudFxuICAgIH1cblxuICAgIG9uQ2xlYW51cChjYWxsYmFjazogKCkgPT4gdm9pZCkge1xuICAgICAgICB0aGlzLmNsZWFudXBzPy5hZGQoY2FsbGJhY2spXG4gICAgfVxuXG4gICAgb25Nb3VudChjYWxsYmFjazogKCkgPT4gdm9pZCkge1xuICAgICAgICBpZiAodGhpcy5wYXJlbnQgJiYgIXRoaXMucGFyZW50Lm1vdW50ZWQpIHtcbiAgICAgICAgICAgIHRoaXMucGFyZW50Lm9uTW91bnQoY2FsbGJhY2spXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm1vdW50cy5hZGQoY2FsbGJhY2spXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBydW48VD4oZm46ICgpID0+IFQpIHtcbiAgICAgICAgY29uc3QgcHJldiA9IFNjb3BlLmN1cnJlbnRcbiAgICAgICAgU2NvcGUuY3VycmVudCA9IHRoaXNcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGZuKClcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRoaXMubW91bnRzLmZvckVhY2goKGNiKSA9PiBjYigpKVxuICAgICAgICAgICAgdGhpcy5tb3VudHMuY2xlYXIoKVxuICAgICAgICAgICAgdGhpcy5tb3VudGVkID0gdHJ1ZVxuICAgICAgICAgICAgU2NvcGUuY3VycmVudCA9IHByZXZcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRpc3Bvc2UoKSB7XG4gICAgICAgIHRoaXMuY2xlYW51cHMuZm9yRWFjaCgoY2IpID0+IGNiKCkpXG4gICAgICAgIHRoaXMuY2xlYW51cHMuY2xlYXIoKVxuICAgICAgICB0aGlzLmNvbnRleHRzLmNsZWFyKClcbiAgICAgICAgZGVsZXRlIHRoaXMucGFyZW50XG4gICAgfVxufVxuXG5leHBvcnQgdHlwZSBDb250ZXh0PFQgPSBhbnk+ID0ge1xuICAgIHVzZSgpOiBUXG4gICAgcHJvdmlkZTxSPih2YWx1ZTogVCwgZm46ICgpID0+IFIpOiBSXG4gICAgKHByb3BzOiB7IHZhbHVlOiBUOyBjaGlsZHJlbjogKCkgPT4gSlNYLkVsZW1lbnQgfSk6IEpTWC5FbGVtZW50XG59XG5cbi8qKlxuICogRXhhbXBsZSBVc2FnZTpcbiAqIGBgYHRzeFxuICogY29uc3QgTXlDb250ZXh0ID0gY3JlYXRlQ29udGV4dChcImZhbGxiYWNrLXZhbHVlXCIpXG4gKlxuICogZnVuY3Rpb24gQ29uc3VtZXJDb21wb25lbnQoKSB7XG4gKiAgIGNvbnN0IHZhbHVlID0gTXlDb250ZXh0LnVzZSgpXG4gKlxuICogICByZXR1cm4gPEd0ay5MYWJlbCBsYWJlbD17dmFsdWV9IC8+XG4gKiB9XG4gKlxuICogZnVuY3Rpb24gUHJvdmlkZXJDb21wb25lbnQoKSB7XG4gKiAgIHJldHVybiAoXG4gKiAgICAgPEd0ay5Cb3g+XG4gKiAgICAgICA8TXlDb250ZXh0IHZhbHVlPVwibXktdmFsdWVcIj5cbiAqICAgICAgICAgeygpID0+IDxDb25zdW1lckNvbXBvbmVudCAvPn1cbiAqICAgICAgIDwvTXlDb250ZXh0PlxuICogICAgIDwvR3RrLkJveD5cbiAqICAgKVxuICogfVxuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDb250ZXh0PFQ+KGRlZmF1bHRWYWx1ZTogVCk6IENvbnRleHQ8VD4ge1xuICAgIGxldCBjdHg6IENvbnRleHQ8VD5cblxuICAgIGZ1bmN0aW9uIHByb3ZpZGU8Uj4odmFsdWU6IFQsIGZuOiAoKSA9PiBSKTogUiB7XG4gICAgICAgIGNvbnN0IHNjb3BlID0gZ2V0U2NvcGUoKVxuICAgICAgICBzY29wZS5jb250ZXh0cy5zZXQoY3R4LCB2YWx1ZSlcbiAgICAgICAgcmV0dXJuIHNjb3BlLnJ1bihmbilcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1c2UoKTogVCB7XG4gICAgICAgIGxldCBzY29wZSA9IFNjb3BlLmN1cnJlbnRcbiAgICAgICAgd2hpbGUgKHNjb3BlKSB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHNjb3BlLmNvbnRleHRzLmdldChjdHgpXG4gICAgICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkgcmV0dXJuIHZhbHVlIGFzIFRcbiAgICAgICAgICAgIHNjb3BlID0gc2NvcGUucGFyZW50XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbnRleHQoeyB2YWx1ZSwgY2hpbGRyZW4gfTogeyB2YWx1ZTogVDsgY2hpbGRyZW46ICgpID0+IEpTWC5FbGVtZW50IH0pIHtcbiAgICAgICAgcmV0dXJuIHByb3ZpZGUodmFsdWUsIGNoaWxkcmVuKVxuICAgIH1cblxuICAgIHJldHVybiAoY3R4ID0gT2JqZWN0LmFzc2lnbihjb250ZXh0LCB7XG4gICAgICAgIHByb3ZpZGUsXG4gICAgICAgIHVzZSxcbiAgICB9KSlcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBzY29wZSB0aGF0IG93bnMgdGhlIGN1cnJlbnRseSBydW5uaW5nIGNvZGUuXG4gKlxuICogRXhhbXBsZTpcbiAqIGBgYHRzXG4gKiBjb25zdCBzY29wZSA9IGdldFNjb3BlKClcbiAqIHNldFRpbWVvdXQoKCkgPT4ge1xuICogICAvLyBUaGlzIGNhbGxiYWNrIGdldHMgcnVuIHdpdGhvdXQgYW4gb3duZXIgc2NvcGUuXG4gKiAgIC8vIFJlc3RvcmUgb3duZXIgdmlhIHNjb3BlLnJ1bjpcbiAqICAgc2NvcGUucnVuKCgpID0+IHtcbiAqICAgICBjb25zdCBmb28gPSBGb29Db250ZXh0LnVzZSgpXG4gKiAgICAgb25DbGVhbnVwKCgpID0+IHtcbiAqICAgICAgIHByaW50KFwic29tZSBjbGVhbnVwXCIpXG4gKiAgICAgfSlcbiAqICAgfSlcbiAqIH0sIDEwMDApXG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFNjb3BlKCk6IFNjb3BlIHtcbiAgICBjb25zdCBzY29wZSA9IFNjb3BlLmN1cnJlbnRcbiAgICBpZiAoIXNjb3BlKSB7XG4gICAgICAgIHRocm93IEVycm9yKFwiY2Fubm90IGdldCBzY29wZTogb3V0IG9mIHRyYWNraW5nIGNvbnRleHRcIilcbiAgICB9XG5cbiAgICByZXR1cm4gc2NvcGVcbn1cblxuLyoqXG4gKiBBdHRhY2ggYSBjbGVhbnVwIGNhbGxiYWNrIHRvIHRoZSBjdXJyZW50IHtAbGluayBTY29wZX0uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvbkNsZWFudXAoY2xlYW51cDogKCkgPT4gdm9pZCkge1xuICAgIGlmICghU2NvcGUuY3VycmVudCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKEVycm9yKFwib3V0IG9mIHRyYWNraW5nIGNvbnRleHQ6IHdpbGwgbm90IGJlIGFibGUgdG8gY2xlYW51cFwiKSlcbiAgICB9XG5cbiAgICBTY29wZS5jdXJyZW50Py5vbkNsZWFudXAoY2xlYW51cClcbn1cblxuLyoqXG4gKiBBdHRhY2ggYSBjYWxsYmFjayB0byBydW4gd2hlbiB0aGUgY3VycmVudGx5IHJ1bm5pbmcge0BsaW5rIFNjb3BlfSByZXR1cm5zLlxuICovXG5leHBvcnQgZnVuY3Rpb24gb25Nb3VudChjbGVhbnVwOiAoKSA9PiB2b2lkKSB7XG4gICAgaWYgKCFTY29wZS5jdXJyZW50KSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoRXJyb3IoXCJjYW5ub3QgYXR0YWNoIG9uTW91bnQ6IG91dCBvZiB0cmFja2luZyBjb250ZXh0XCIpKVxuICAgIH1cblxuICAgIFNjb3BlLmN1cnJlbnQ/Lm9uTW91bnQoY2xlYW51cClcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgcm9vdCB7QGxpbmsgU2NvcGV9IHRoYXQgd2hlbiBkaXNwb3NlZCB3aWxsIHJlbW92ZVxuICogYW55IGNoaWxkIHNpZ25hbCBoYW5kbGVyIG9yIHN0YXRlIHN1YnNjcmliZXIuXG4gKlxuICogRXhhbXBsZTpcbiAqIGBgYHRzeFxuICogY3JlYXRlUm9vdCgoZGlzcG9zZSkgPT4ge1xuICogICBsZXQgcm9vdDogR3RrLldpbmRvd1xuICpcbiAqICAgY29uc3QgW3N0YXRlXSA9IGNyZWF0ZVN0YXRlKFwidmFsdWVcIilcbiAqXG4gKiAgIGNvbnN0IHJlbW92ZSA9ICgpID0+IHtcbiAqICAgICByb290LmRlc3Ryb3koKVxuICogICAgIGRpc3Bvc2UoKVxuICogICB9XG4gKlxuICogICByZXR1cm4gKFxuICogICAgIDxHdGsuV2luZG93ICQ9eyhzZWxmKSA9PiAocm9vdCA9IHNlbGYpfT5cbiAqICAgICAgIDxHdGsuQm94PlxuICogICAgICAgICA8R3RrLkxhYmVsIGxhYmVsPXtzdGF0ZX0gLz5cbiAqICAgICAgICAgPEd0ay5CdXR0b24gJGNsaWNrZWQ9e3JlbW92ZX0gLz5cbiAqICAgICAgIDwvR3RrLkJveD5cbiAqICAgICA8L0d0ay5XaW5kb3c+XG4gKiAgIClcbiAqIH0pXG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVJvb3Q8VD4oZm46IChkaXNwb3NlOiAoKSA9PiB2b2lkKSA9PiBUKSB7XG4gICAgY29uc3Qgc2NvcGUgPSBuZXcgU2NvcGUobnVsbClcbiAgICByZXR1cm4gc2NvcGUucnVuKCgpID0+IGZuKCgpID0+IHNjb3BlLmRpc3Bvc2UoKSkpXG59XG4iLCAiaW1wb3J0IEdPYmplY3QgZnJvbSBcImdpOi8vR09iamVjdFwiXG5pbXBvcnQgeyByZWdpc3RlckRlc3Ryb3lhYmxlVHlwZSB9IGZyb20gXCIuLi9nbm9tZS9zaWduYWxUcmFja2VyLmpzXCJcblxuLy8gVE9ETzogRnJhZ21lbnQgc2hvdWxkIGltcGxlbWVudCBHaW8uTGlzdE1vZGVsXG5cbmV4cG9ydCBjbGFzcyBGcmFnbWVudDxUID0gYW55PiBleHRlbmRzIEdPYmplY3QuT2JqZWN0IHtcbiAgICBzdGF0aWMgW0dPYmplY3Quc2lnbmFsc10gPSB7XG4gICAgICAgIFwiZGVzdHJveVwiOiB7fSxcblxuICAgICAgICBcImNoaWxkLWFkZGVkXCI6IHtcbiAgICAgICAgICAgIHBhcmFtX3R5cGVzOiBbR09iamVjdC5UWVBFX09CSkVDVCwgR09iamVjdC5UWVBFX1VJTlRdLFxuICAgICAgICB9LFxuICAgICAgICBcImNoaWxkLXJlbW92ZWRcIjoge1xuICAgICAgICAgICAgcGFyYW1fdHlwZXM6IFtHT2JqZWN0LlRZUEVfT0JKRUNULCBHT2JqZWN0LlRZUEVfVUlOVF0sXG4gICAgICAgIH0sXG4gICAgfVxuXG4gICAgc3RhdGljIFtHT2JqZWN0LnByb3BlcnRpZXNdID0ge1xuICAgICAgICBjaGlsZHJlbjogR09iamVjdC5QYXJhbVNwZWMuanNvYmplY3QoXCJjaGlsZHJlblwiLCBcIlwiLCBcIlwiLCBHT2JqZWN0LlBhcmFtRmxhZ3MuUkVBREFCTEUpLFxuICAgIH1cblxuICAgIHN0YXRpYyB7XG4gICAgICAgIEdPYmplY3QucmVnaXN0ZXJDbGFzcyh0aGlzKVxuICAgICAgICByZWdpc3RlckRlc3Ryb3lhYmxlVHlwZSh0aGlzKVxuICAgIH1cblxuICAgIHN0YXRpYyBuZXc8VD4oY2hpbGRyZW46IEFycmF5PFQ+ID0gW10pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBGcmFnbWVudCh7IGNoaWxkcmVuIH0pXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjb25uZWN0aW9uSWRzID0gbmV3IFNldDxudW1iZXI+KClcbiAgICBwcml2YXRlIF9jaGlsZHJlbjogQXJyYXk8VD5cblxuICAgIGdldCBjaGlsZHJlbigpIHtcbiAgICAgICAgcmV0dXJuIFsuLi50aGlzLl9jaGlsZHJlbl1cbiAgICB9XG5cbiAgICBhZGRDaGlsZChjaGlsZDogVCwgaW5kZXg6IG51bWJlciA9IC0xKTogdm9pZCB7XG4gICAgICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIEZyYWdtZW50KSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihgbmVzdGluZyBGcmFnbWVudHMgYXJlIG5vdCB5ZXQgc3VwcG9ydGVkYClcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbmRleCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuX2NoaWxkcmVuID0gW1xuICAgICAgICAgICAgICAgIC4uLnRoaXMuX2NoaWxkcmVuLnNsaWNlKDAsIGluZGV4KSxcbiAgICAgICAgICAgICAgICBjaGlsZCxcbiAgICAgICAgICAgICAgICAuLi50aGlzLl9jaGlsZHJlbi5zbGljZShpbmRleCksXG4gICAgICAgICAgICBdXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9jaGlsZHJlbi5wdXNoKGNoaWxkKVxuICAgICAgICAgICAgaW5kZXggPSB0aGlzLl9jaGlsZHJlbi5sZW5ndGggLSAxXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmVtaXQoXCJjaGlsZC1hZGRlZFwiLCBjaGlsZCwgaW5kZXgpXG4gICAgICAgIHRoaXMubm90aWZ5KFwiY2hpbGRyZW5cIilcbiAgICB9XG5cbiAgICBoYXNDaGlsZChjaGlsZDogVCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2hpbGRyZW4uZmluZEluZGV4KChjaCkgPT4gY2ggPT09IGNoaWxkKSA+IC0xXG4gICAgfVxuXG4gICAgcmVtb3ZlQ2hpbGQoY2hpbGQ6IFQpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLl9jaGlsZHJlbi5maW5kSW5kZXgoKGkpID0+IGkgPT09IGNoaWxkKVxuICAgICAgICB0aGlzLl9jaGlsZHJlbi5zcGxpY2UoaW5kZXgsIDEpXG5cbiAgICAgICAgdGhpcy5lbWl0KFwiY2hpbGQtcmVtb3ZlZFwiLCBjaGlsZCwgaW5kZXgpXG4gICAgICAgIHRoaXMubm90aWZ5KFwiY2hpbGRyZW5cIilcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3Rvcih7IGNoaWxkcmVuID0gW10gfTogUGFydGlhbDx7IGNoaWxkcmVuOiBBcnJheTxUPiB8IFQgfT4gPSB7fSkge1xuICAgICAgICBzdXBlcigpXG4gICAgICAgIHRoaXMuX2NoaWxkcmVuID0gQXJyYXkuaXNBcnJheShjaGlsZHJlbikgPyBjaGlsZHJlbiA6IFtjaGlsZHJlbl1cbiAgICB9XG5cbiAgICBjb25uZWN0KHNpZ25hbDogc3RyaW5nLCBjYWxsYmFjazogKF86IHRoaXMsIC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkKTogbnVtYmVyIHtcbiAgICAgICAgY29uc3QgaWQgPSBzdXBlci5jb25uZWN0KHNpZ25hbCwgY2FsbGJhY2spXG4gICAgICAgIHRoaXMuY29ubmVjdGlvbklkcy5hZGQoaWQpXG4gICAgICAgIHJldHVybiBpZFxuICAgIH1cblxuICAgIGRpc2Nvbm5lY3QoaWQ6IG51bWJlcik6IHZvaWQge1xuICAgICAgICBzdXBlci5kaXNjb25uZWN0KGlkKVxuICAgICAgICB0aGlzLmNvbm5lY3Rpb25JZHMuZGVsZXRlKGlkKVxuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuZW1pdChcImRlc3Ryb3lcIilcbiAgICAgICAgZm9yIChjb25zdCBpZCBvZiB0aGlzLmNvbm5lY3Rpb25JZHMudmFsdWVzKCkpIHtcbiAgICAgICAgICAgIHN1cGVyLmRpc2Nvbm5lY3QoaWQpXG4gICAgICAgIH1cbiAgICB9XG59XG4iLCAiaW1wb3J0IHR5cGUgR09iamVjdCBmcm9tIFwiZ2k6Ly9HT2JqZWN0XCJcblxudHlwZSBUeXBlID0geyBuZXcgKC4uLmFyZ3M6IGFueVtdKTogR09iamVjdC5PYmplY3QgfVxuXG4vLyBAdHMtZXhwZWN0LWVycm9yIG1pc3NpbmcgdHlwZXNcbmNvbnN0IG1vZCA9IGltcG9ydChcInJlc291cmNlOi8vL29yZy9nbm9tZS9zaGVsbC9taXNjL3NpZ25hbFRyYWNrZXIuanNcIilcblxuZXhwb3J0IGNvbnN0IHJlZ2lzdGVyRGVzdHJveWFibGVUeXBlOiAodHlwZTogVHlwZSkgPT4gdm9pZCA9IGF3YWl0IG1vZFxuICAgIC50aGVuKChtb2QpID0+IG1vZC5yZWdpc3RlckRlc3Ryb3lhYmxlVHlwZSlcbiAgICAuY2F0Y2goKCkgPT4gKCkgPT4gdm9pZCAwKVxuIiwgImltcG9ydCB7IEZyYWdtZW50IH0gZnJvbSBcIi4vRnJhZ21lbnQuanNcIlxuaW1wb3J0IHsgQWNjZXNzb3IsIFN0YXRlLCBjcmVhdGVTdGF0ZSB9IGZyb20gXCIuL3N0YXRlLmpzXCJcbmltcG9ydCB7IGVudiB9IGZyb20gXCIuL2Vudi5qc1wiXG5pbXBvcnQgeyBnZXRTY29wZSwgb25DbGVhbnVwLCBTY29wZSB9IGZyb20gXCIuL3Njb3BlLmpzXCJcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuaW1wb3J0IHR5cGUgQ2x1dHRlciBmcm9tIFwiZ2k6Ly9DbHV0dGVyXCJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbmltcG9ydCB0eXBlIEd0ayBmcm9tIFwiZ2k6Ly9HdGs/dmVyc2lvbj0zLjBcIlxuXG5pbnRlcmZhY2UgRm9yUHJvcHM8SXRlbSwgRWwgZXh0ZW5kcyBKU1guRWxlbWVudCwgS2V5PiB7XG4gICAgZWFjaDogQWNjZXNzb3I8SXRlcmFibGU8SXRlbT4+XG4gICAgY2hpbGRyZW46IChpdGVtOiBJdGVtLCBpbmRleDogQWNjZXNzb3I8bnVtYmVyPikgPT4gRWxcblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHRvIHJ1biBmb3IgZWFjaCByZW1vdmVkIGVsZW1lbnQuXG4gICAgICogVGhlIGRlZmF1bHQgdmFsdWUgZGVwZW5kcyBvbiB0aGUgZW52aXJvbm1lbnQ6XG4gICAgICpcbiAgICAgKiAtICoqR3RrNCoqOiBudWxsXG4gICAgICogLSAqKkd0azMqKjoge0BsaW5rIEd0ay5XaWRnZXQucHJvdG90eXBlLmRlc3Ryb3l9XG4gICAgICogLSAqKkdub21lKio6IHtAbGluayBDbHV0dGVyLkFjdG9yLnByb3RvdHlwZS5kZXN0cm95fVxuICAgICAqL1xuICAgIGNsZWFudXA/OiBudWxsIHwgKChlbGVtZW50OiBFbCwgaXRlbTogSXRlbSwgaW5kZXg6IG51bWJlcikgPT4gdm9pZClcblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHRoYXQgZ2VuZXJhdGVzIHRoZSBrZXkgZm9yIGVhY2ggaXRlbS5cbiAgICAgKlxuICAgICAqIEJ5IGRlZmF1bHQgaXRlbXMgYXJlIG1hcHBlZCBieTpcbiAgICAgKiAtIHZhbHVlIGluIGNhc2Ugb2YgcHJpbWl0aXZlIHZhbHVlc1xuICAgICAqIC0gcmVmZXJlbmNlIG90aGVyd2lzZVxuICAgICAqL1xuICAgIGlkPzogKGl0ZW06IEl0ZW0pID0+IEtleSB8IEl0ZW1cbn1cblxuLy8gVE9ETzogc3VwcG9ydCBHaW8uTGlzdE1vZGVsXG5cbmV4cG9ydCBmdW5jdGlvbiBGb3I8SXRlbSwgRWwgZXh0ZW5kcyBKU1guRWxlbWVudCwgS2V5Pih7XG4gICAgZWFjaCxcbiAgICBjaGlsZHJlbjogbWtDaGlsZCxcbiAgICBjbGVhbnVwLFxuICAgIGlkID0gKGl0ZW06IEl0ZW0pID0+IGl0ZW0sXG59OiBGb3JQcm9wczxJdGVtLCBFbCwgS2V5Pik6IEZyYWdtZW50PEVsPiB7XG4gICAgdHlwZSBNYXBJdGVtID0geyBpdGVtOiBJdGVtOyBjaGlsZDogRWw7IGluZGV4OiBTdGF0ZTxudW1iZXI+OyBzY29wZTogU2NvcGUgfVxuXG4gICAgY29uc3QgY3VycmVudFNjb3BlID0gZ2V0U2NvcGUoKVxuICAgIGNvbnN0IG1hcCA9IG5ldyBNYXA8SXRlbSB8IEtleSwgTWFwSXRlbT4oKVxuICAgIGNvbnN0IGZyYWdtZW50ID0gbmV3IEZyYWdtZW50PEVsPigpXG5cbiAgICBmdW5jdGlvbiByZW1vdmUoeyBpdGVtLCBjaGlsZCwgaW5kZXg6IFtpbmRleF0sIHNjb3BlIH06IE1hcEl0ZW0pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhbnVwID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIGNsZWFudXAoY2hpbGQsIGl0ZW0sIGluZGV4LmdldCgpKVxuICAgICAgICB9IGVsc2UgaWYgKGNsZWFudXAgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGVudi5kZWZhdWx0Q2xlYW51cChjaGlsZClcbiAgICAgICAgfVxuICAgICAgICBzY29wZS5kaXNwb3NlKClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYWxsYmFjayhpdGFyZWFibGU6IEl0ZXJhYmxlPEl0ZW0+KSB7XG4gICAgICAgIGNvbnN0IGl0ZW1zID0gWy4uLml0YXJlYWJsZV1cbiAgICAgICAgY29uc3QgaWRzID0gaXRlbXMubWFwKGlkKVxuICAgICAgICBjb25zdCBpZFNldCA9IG5ldyBTZXQoaWRzKVxuXG4gICAgICAgIC8vIGNsZWFudXAgY2hpbGRyZW4gbWlzc2luZyBmcm9tIGFyclxuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBtYXAuZW50cmllcygpKSB7XG4gICAgICAgICAgICAvLyB0aGVyZSBpcyBubyBnZW5lcmljIHdheSB0byBpbnNlcnQgY2hpbGQgYXQgaW5kZXhcbiAgICAgICAgICAgIC8vIHNvIHdlIHNvcnQgYnkgcmVtb3ZpbmcgZXZlcnkgY2hpbGQgYW5kIHJlYXBwZW5kaW5nIGluIG9yZGVyXG4gICAgICAgICAgICBmcmFnbWVudC5yZW1vdmVDaGlsZCh2YWx1ZS5jaGlsZClcblxuICAgICAgICAgICAgaWYgKCFpZFNldC5oYXMoa2V5KSkge1xuICAgICAgICAgICAgICAgIHJlbW92ZSh2YWx1ZSlcbiAgICAgICAgICAgICAgICBtYXAuZGVsZXRlKGtleSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHVwZGF0ZSBpbmRleCBhbmQgYWRkIG5ldyBpdGVtc1xuICAgICAgICBpdGVtcy5tYXAoKGl0ZW0sIGkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IGlkc1tpXVxuICAgICAgICAgICAgaWYgKG1hcC5oYXMoa2V5KSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICAgICAgaW5kZXg6IFssIHNldEluZGV4XSxcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQsXG4gICAgICAgICAgICAgICAgfSA9IG1hcC5nZXQoa2V5KSFcbiAgICAgICAgICAgICAgICBzZXRJbmRleChpKVxuICAgICAgICAgICAgICAgIGlmIChmcmFnbWVudC5oYXNDaGlsZChjaGlsZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBkdXBsaWNhdGUga2V5cyBmb3VuZDogJHtrZXl9YClcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBmcmFnbWVudC5hZGRDaGlsZChjaGlsZClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IFtpbmRleCwgc2V0SW5kZXhdID0gY3JlYXRlU3RhdGUoaSlcbiAgICAgICAgICAgICAgICBjb25zdCBzY29wZSA9IG5ldyBTY29wZShjdXJyZW50U2NvcGUpXG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGQgPSBzY29wZS5ydW4oKCkgPT4gbWtDaGlsZChpdGVtLCBpbmRleCkpXG4gICAgICAgICAgICAgICAgbWFwLnNldChrZXksIHsgaXRlbSwgY2hpbGQsIGluZGV4OiBbaW5kZXgsIHNldEluZGV4XSwgc2NvcGUgfSlcbiAgICAgICAgICAgICAgICBmcmFnbWVudC5hZGRDaGlsZChjaGlsZClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBjb25zdCBkaXNwb3NlID0gZWFjaC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICBjYWxsYmFjayhlYWNoLmdldCgpKVxuICAgIH0pXG4gICAgY2FsbGJhY2soZWFjaC5nZXQoKSlcblxuICAgIG9uQ2xlYW51cCgoKSA9PiB7XG4gICAgICAgIGRpc3Bvc2UoKVxuXG4gICAgICAgIGZvciAoY29uc3QgdmFsdWUgb2YgbWFwLnZhbHVlcygpKSB7XG4gICAgICAgICAgICByZW1vdmUodmFsdWUpXG4gICAgICAgIH1cblxuICAgICAgICBtYXAuY2xlYXIoKVxuICAgIH0pXG5cbiAgICByZXR1cm4gZnJhZ21lbnRcbn1cbiIsICJpbXBvcnQgeyBGcmFnbWVudCB9IGZyb20gXCIuL0ZyYWdtZW50LmpzXCJcbmltcG9ydCB7IEFjY2Vzc29yIH0gZnJvbSBcIi4vc3RhdGUuanNcIlxuaW1wb3J0IHsgZW52IH0gZnJvbSBcIi4vZW52LmpzXCJcbmltcG9ydCB7IGdldFNjb3BlLCBvbkNsZWFudXAsIFNjb3BlIH0gZnJvbSBcIi4vc2NvcGUuanNcIlxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG5pbXBvcnQgQ2x1dHRlciBmcm9tIFwiZ2k6Ly9DbHV0dGVyXCJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbmltcG9ydCB0eXBlIEd0ayBmcm9tIFwiZ2k6Ly9HdGs/dmVyc2lvbj0zLjBcIlxuXG5pbnRlcmZhY2UgV2l0aFByb3BzPFQsIEUgZXh0ZW5kcyBKU1guRWxlbWVudD4ge1xuICAgIHZhbHVlOiBBY2Nlc3NvcjxUPlxuICAgIGNoaWxkcmVuOiAodmFsdWU6IFQpID0+IEUgfCBcIlwiIHwgZmFsc2UgfCBudWxsIHwgdW5kZWZpbmVkXG5cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB0byBydW4gZm9yIGVhY2ggcmVtb3ZlZCBlbGVtZW50LlxuICAgICAqIFRoZSBkZWZhdWx0IHZhbHVlIGRlcGVuZHMgb24gdGhlIGVudmlyb25tZW50OlxuICAgICAqXG4gICAgICogLSAqKkd0azQqKjogbnVsbFxuICAgICAqIC0gKipHdGszKio6IHtAbGluayBHdGsuV2lkZ2V0LnByb3RvdHlwZS5kZXN0cm95fVxuICAgICAqIC0gKipHbm9tZSoqOiB7QGxpbmsgQ2x1dHRlci5BY3Rvci5wcm90b3R5cGUuZGVzdHJveX1cbiAgICAgKi9cbiAgICBjbGVhbnVwPzogbnVsbCB8ICgoZWxlbWVudDogRSkgPT4gdm9pZClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFdpdGg8VCwgRSBleHRlbmRzIEpTWC5FbGVtZW50Pih7XG4gICAgdmFsdWUsXG4gICAgY2hpbGRyZW46IG1rQ2hpbGQsXG4gICAgY2xlYW51cCxcbn06IFdpdGhQcm9wczxULCBFPik6IEZyYWdtZW50PEU+IHtcbiAgICBjb25zdCBjdXJyZW50U2NvcGUgPSBnZXRTY29wZSgpXG4gICAgY29uc3QgZnJhZ21lbnQgPSBuZXcgRnJhZ21lbnQ8RT4oKVxuXG4gICAgbGV0IHNjb3BlOiBTY29wZVxuXG4gICAgZnVuY3Rpb24gY2FsbGJhY2sodjogVCkge1xuICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIGZyYWdtZW50LmNoaWxkcmVuKSB7XG4gICAgICAgICAgICBmcmFnbWVudC5yZW1vdmVDaGlsZChjaGlsZClcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjbGVhbnVwID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICBjbGVhbnVwKGNoaWxkKVxuICAgICAgICAgICAgfSBlbHNlIGlmIChjbGVhbnVwICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZW52LmRlZmF1bHRDbGVhbnVwKGNoaWxkKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc2NvcGUpIHNjb3BlLmRpc3Bvc2UoKVxuICAgICAgICB9XG5cbiAgICAgICAgc2NvcGUgPSBuZXcgU2NvcGUoY3VycmVudFNjb3BlKVxuICAgICAgICBjb25zdCBjaCA9IHNjb3BlLnJ1bigoKSA9PiBta0NoaWxkKHYpKVxuICAgICAgICBpZiAoY2ggIT09IFwiXCIgJiYgY2ggIT09IGZhbHNlICYmIGNoICE9PSBudWxsICYmIGNoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGZyYWdtZW50LmFkZENoaWxkKGNoKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgZGlzcG9zZSA9IHZhbHVlLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgIGNhbGxiYWNrKHZhbHVlLmdldCgpKVxuICAgIH0pXG4gICAgY2FsbGJhY2sodmFsdWUuZ2V0KCkpXG5cbiAgICBvbkNsZWFudXAoKCkgPT4ge1xuICAgICAgICBzY29wZS5kaXNwb3NlKClcbiAgICAgICAgZGlzcG9zZSgpXG4gICAgfSlcblxuICAgIHJldHVybiBmcmFnbWVudFxufVxuIiwgImltcG9ydCB7IGNyZWF0ZUJpbmRpbmcsIGNyZWF0ZUNvbXB1dGVkLCBGb3IsIFdpdGggfSBmcm9tIFwiYWdzXCI7XG5pbXBvcnQgeyBHZGssIEd0ayB9IGZyb20gXCJhZ3MvZ3RrNFwiO1xuXG5pbXBvcnQgQXN0YWxUcmF5IGZyb20gXCJnaTovL0FzdGFsVHJheVwiXG5pbXBvcnQgR2lvIGZyb20gXCJnaTovL0dpbz92ZXJzaW9uPTIuMFwiO1xuaW1wb3J0IHsgdmFyaWFibGVUb0Jvb2xlYW4gfSBmcm9tIFwiLi4vLi4vc2NyaXB0cy91dGlsc1wiO1xuaW1wb3J0IEdPYmplY3QgZnJvbSBcImdpOi8vR09iamVjdD92ZXJzaW9uPTIuMFwiO1xuXG5cbmNvbnN0IGFzdGFsVHJheSA9IEFzdGFsVHJheS5nZXRfZGVmYXVsdCgpO1xuXG5mdW5jdGlvbiBwb3BvdmVyRnJvbU1vZGVsKG1vZGVsOiBHaW8uTWVudU1vZGVsLCBhY3Rpb25Hcm91cDogR2lvLkFjdGlvbkdyb3VwIHwgbnVsbCk6IEd0ay5Qb3BvdmVyTWVudSB7XG4gICAgY29uc3QgbWVudSA9IEd0ay5Qb3BvdmVyTWVudS5uZXdfZnJvbV9tb2RlbChtb2RlbCk7XG4gICAgbWVudS5pbnNlcnRfYWN0aW9uX2dyb3VwKFwiZGJ1c21lbnVcIiwgYWN0aW9uR3JvdXApXG5cbiAgICByZXR1cm4gbWVudTtcbn1cblxuZXhwb3J0IGNvbnN0IFRyYXkgPSAoKSA9PiB7XG4gICAgY29uc3QgaXRlbXMgPSBjcmVhdGVCaW5kaW5nKGFzdGFsVHJheSwgXCJpdGVtc1wiKS5hcyhpdGVtcyA9PiBpdGVtcy5maWx0ZXIoaXRlbSA9PiBpdGVtPy5naWNvbikpO1xuXG4gICAgcmV0dXJuIDxHdGsuQm94IGNsYXNzPXtcInRyYXlcIn0gdmlzaWJsZT17dmFyaWFibGVUb0Jvb2xlYW4oaXRlbXMpfSBzcGFjaW5nPXsxMH0+XG4gICAgICAgIDxGb3IgZWFjaD17aXRlbXN9PlxuICAgICAgICAgICAgeyhpdGVtOiBBc3RhbFRyYXkuVHJheUl0ZW0pID0+IDxHdGsuQm94IGNsYXNzPXtcIml0ZW1cIn0+XG5cbiAgICAgICAgICAgICAgICA8V2l0aCB2YWx1ZT17Y3JlYXRlQ29tcHV0ZWQoW1xuICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZUJpbmRpbmcoaXRlbSwgXCJhY3Rpb25Hcm91cFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVCaW5kaW5nKGl0ZW0sIFwibWVudU1vZGVsXCIpXG4gICAgICAgICAgICAgICAgICBdKX0+XG4gICAgICAgICAgICAgICAgICAgIHsoW2FjdGlvbkdyb3VwLCBtZW51TW9kZWxdOiBbR2lvLkFjdGlvbkdyb3VwLCBHaW8uTWVudU1vZGVsXSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBvcG92ZXIgPSBwb3BvdmVyRnJvbU1vZGVsKG1lbnVNb2RlbCwgYWN0aW9uR3JvdXApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDxHdGsuTWVudUJ1dHRvbiBjbGFzcz17XCJpdGVtLWJ1dHRvblwifSB0b29sdGlwTWFya3VwPXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZUJpbmRpbmcoaXRlbSwgXCJ0b29sdGlwTWFya3VwXCIpfSB0b29sdGlwVGV4dD17XG4gICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVCaW5kaW5nKGl0ZW0sIFwidG9vbHRpcFRleHRcIil9IHBvcG92ZXI9e3BvcG92ZXJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAkPXsoc2VsZikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbm5zOiBNYXA8R09iamVjdC5PYmplY3QsIG51bWJlcj4gPSBuZXcgTWFwKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZ2VzdHVyZUNsaWNrID0gR3RrLkdlc3R1cmVDbGljay5uZXcoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuYWRkX2NvbnRyb2xsZXIoZ2VzdHVyZUNsaWNrKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5zLnNldChnZXN0dXJlQ2xpY2ssIGdlc3R1cmVDbGljay5jb25uZWN0KFwicmVsZWFzZWRcIiwgKGdlc3R1cmUsIF8sIHgsIHkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoZ2VzdHVyZS5nZXRfY3VycmVudF9idXR0b24oKSA9PT0gR2RrLkJVVFRPTl9QUklNQVJZKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmFjdGl2YXRlKHgsIHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYoZ2VzdHVyZS5nZXRfY3VycmVudF9idXR0b24oKSA9PT0gR2RrLkJVVFRPTl9TRUNPTkRBUlkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uYWJvdXRfdG9fc2hvdygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5wb3B1cCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgICAgICAgICAgICB9fT5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICA8R3RrLkltYWdlIGdpY29uPXtjcmVhdGVCaW5kaW5nKGl0ZW0sIFwiZ2ljb25cIil9IHBpeGVsU2l6ZT17MTZ9IC8+XG4gICAgICAgICAgICAgICAgICAgICAgPC9HdGsuTWVudUJ1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICA8L1dpdGg+XG4gICAgICAgICAgICA8L0d0ay5Cb3g+fVxuICAgICAgICA8L0Zvcj5cbiAgICA8L0d0ay5Cb3g+XG59XG4iLCAiaW1wb3J0IEFzdGFsSU8gZnJvbSBcImdpOi8vQXN0YWxJT1wiXG5pbXBvcnQgeyBBY2Nlc3NvciB9IGZyb20gXCIuLi9nbmltL3NyYy9qc3gvaW5kZXguanNcIlxuaW1wb3J0IHsgZXhlY0FzeW5jIH0gZnJvbSBcIi4vcHJvY2Vzcy5qc1wiXG5cbmV4cG9ydCB0eXBlIFRpbWUgPSBBc3RhbElPLlRpbWVcbmV4cG9ydCBjb25zdCBUaW1lID0gQXN0YWxJTy5UaW1lXG5cbmV4cG9ydCBmdW5jdGlvbiBpbnRlcnZhbChpbnRlcnZhbDogbnVtYmVyLCBjYWxsYmFjaz86ICgpID0+IHZvaWQpIHtcbiAgICByZXR1cm4gQXN0YWxJTy5UaW1lLmludGVydmFsKGludGVydmFsLCAoKSA9PiB2b2lkIGNhbGxiYWNrPy4oKSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRpbWVvdXQodGltZW91dDogbnVtYmVyLCBjYWxsYmFjaz86ICgpID0+IHZvaWQpIHtcbiAgICByZXR1cm4gQXN0YWxJTy5UaW1lLnRpbWVvdXQodGltZW91dCwgKCkgPT4gdm9pZCBjYWxsYmFjaz8uKCkpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpZGxlKGNhbGxiYWNrPzogKCkgPT4gdm9pZCkge1xuICAgIHJldHVybiBBc3RhbElPLlRpbWUuaWRsZSgoKSA9PiB2b2lkIGNhbGxiYWNrPy4oKSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVBvbGwoXG4gICAgaW5pdDogc3RyaW5nLFxuICAgIGludGVydmFsOiBudW1iZXIsXG4gICAgZXhlYzogc3RyaW5nIHwgc3RyaW5nW10sXG4pOiBBY2Nlc3NvcjxzdHJpbmc+XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQb2xsPFQ+KFxuICAgIGluaXQ6IFQsXG4gICAgaW50ZXJ2YWw6IG51bWJlcixcbiAgICBleGVjOiBzdHJpbmcgfCBzdHJpbmdbXSxcbiAgICB0cmFuc2Zvcm06IChzdGRvdXQ6IHN0cmluZywgcHJldjogVCkgPT4gVCxcbik6IEFjY2Vzc29yPFQ+XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQb2xsPFQ+KFxuICAgIGluaXQ6IFQsXG4gICAgaW50ZXJ2YWw6IG51bWJlcixcbiAgICBmbjogKHByZXY6IFQpID0+IFQgfCBQcm9taXNlPFQ+LFxuKTogQWNjZXNzb3I8VD5cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVBvbGw8VD4oXG4gICAgaW5pdDogVCxcbiAgICBpdmFsOiBudW1iZXIsXG4gICAgZXhlY09yRm46IHN0cmluZyB8IHN0cmluZ1tdIHwgKChwcmV2OiBUKSA9PiBUIHwgUHJvbWlzZTxUPiksXG4gICAgdHJhbnNmb3JtPzogKHN0ZG91dDogc3RyaW5nLCBwcmV2OiBUKSA9PiBULFxuKTogQWNjZXNzb3I8VD4ge1xuICAgIGxldCBjdXJyZW50VmFsdWUgPSBpbml0XG4gICAgbGV0IHRpbWVyOiBBc3RhbElPLlRpbWUgfCBudWxsID0gbnVsbFxuICAgIGNvbnN0IHN1YnNjcmliZXJzID0gbmV3IFNldDwoKSA9PiB2b2lkPigpXG5cbiAgICBmdW5jdGlvbiBzdWJzY3JpYmUoY2FsbGJhY2s6ICgpID0+IHZvaWQpOiAoKSA9PiB2b2lkIHtcbiAgICAgICAgZnVuY3Rpb24gc2V0KHZhbHVlOiBUKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUgIT09IGN1cnJlbnRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRWYWx1ZSA9IHZhbHVlXG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlcnMuZm9yRWFjaCgoY2IpID0+IGNiKCkpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3Vic2NyaWJlcnMuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgdGltZXIgPSBpbnRlcnZhbChpdmFsLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBleGVjT3JGbiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gZXhlY09yRm4oY3VycmVudFZhbHVlKVxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZS50aGVuKHNldClcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldCh2YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGV4ZWNBc3luYyhleGVjT3JGbikudGhlbigoc3Rkb3V0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXQodHJhbnNmb3JtID8gdHJhbnNmb3JtKHN0ZG91dCwgY3VycmVudFZhbHVlKSA6IChzdGRvdXQgYXMgVCkpXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIHN1YnNjcmliZXJzLmFkZChjYWxsYmFjaylcblxuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgc3Vic2NyaWJlcnMuZGVsZXRlKGNhbGxiYWNrKVxuICAgICAgICAgICAgaWYgKHN1YnNjcmliZXJzLnNpemUgPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aW1lcj8uY2FuY2VsKClcbiAgICAgICAgICAgICAgICB0aW1lciA9IG51bGxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgQWNjZXNzb3IoKCkgPT4gY3VycmVudFZhbHVlLCBzdWJzY3JpYmUpXG59XG4iLCAiaW1wb3J0IEFzdGFsSU8gZnJvbSBcImdpOi8vQXN0YWxJT1wiXG5pbXBvcnQgeyBBY2Nlc3NvciB9IGZyb20gXCIuLi9nbmltL3NyYy9qc3gvaW5kZXguanNcIlxuXG50eXBlIEFyZ3MgPSB7XG4gICAgY21kOiBzdHJpbmcgfCBzdHJpbmdbXVxuICAgIG91dD86IChzdGRvdXQ6IHN0cmluZykgPT4gdm9pZFxuICAgIGVycj86IChzdGRlcnI6IHN0cmluZykgPT4gdm9pZFxufVxuXG5leHBvcnQgdHlwZSBQcm9jZXNzID0gQXN0YWxJTy5Qcm9jZXNzXG5leHBvcnQgY29uc3QgUHJvY2VzcyA9IEFzdGFsSU8uUHJvY2Vzc1xuXG5leHBvcnQgZnVuY3Rpb24gc3VicHJvY2VzcyhhcmdzOiBBcmdzKTogQXN0YWxJTy5Qcm9jZXNzXG5cbmV4cG9ydCBmdW5jdGlvbiBzdWJwcm9jZXNzKFxuICAgIGNtZDogc3RyaW5nIHwgc3RyaW5nW10sXG4gICAgb25PdXQ/OiAoc3Rkb3V0OiBzdHJpbmcpID0+IHZvaWQsXG4gICAgb25FcnI/OiAoc3RkZXJyOiBzdHJpbmcpID0+IHZvaWQsXG4pOiBBc3RhbElPLlByb2Nlc3NcblxuZXhwb3J0IGZ1bmN0aW9uIHN1YnByb2Nlc3MoXG4gICAgYXJnc09yQ21kOiBBcmdzIHwgc3RyaW5nIHwgc3RyaW5nW10sXG4gICAgb25PdXQ6IChzdGRvdXQ6IHN0cmluZykgPT4gdm9pZCA9IHByaW50LFxuICAgIG9uRXJyOiAoc3RkZXJyOiBzdHJpbmcpID0+IHZvaWQgPSBwcmludGVycixcbikge1xuICAgIGNvbnN0IGFyZ3MgPSBBcnJheS5pc0FycmF5KGFyZ3NPckNtZCkgfHwgdHlwZW9mIGFyZ3NPckNtZCA9PT0gXCJzdHJpbmdcIlxuICAgIGNvbnN0IHsgY21kLCBlcnIsIG91dCB9ID0ge1xuICAgICAgICBjbWQ6IGFyZ3MgPyBhcmdzT3JDbWQgOiBhcmdzT3JDbWQuY21kLFxuICAgICAgICBlcnI6IGFyZ3MgPyBvbkVyciA6IGFyZ3NPckNtZC5lcnIgfHwgb25FcnIsXG4gICAgICAgIG91dDogYXJncyA/IG9uT3V0IDogYXJnc09yQ21kLm91dCB8fCBvbk91dCxcbiAgICB9XG5cbiAgICBjb25zdCBwcm9jID0gQXJyYXkuaXNBcnJheShjbWQpXG4gICAgICAgID8gQXN0YWxJTy5Qcm9jZXNzLnN1YnByb2Nlc3N2KGNtZClcbiAgICAgICAgOiBBc3RhbElPLlByb2Nlc3Muc3VicHJvY2VzcyhjbWQpXG5cbiAgICBwcm9jLmNvbm5lY3QoXCJzdGRvdXRcIiwgKF8sIHN0ZG91dDogc3RyaW5nKSA9PiBvdXQoc3Rkb3V0KSlcbiAgICBwcm9jLmNvbm5lY3QoXCJzdGRlcnJcIiwgKF8sIHN0ZGVycjogc3RyaW5nKSA9PiBlcnIoc3RkZXJyKSlcbiAgICByZXR1cm4gcHJvY1xufVxuXG4vKiogQHRocm93cyB7R0xpYi5FcnJvcn0gVGhyb3dzIHN0ZGVyciAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4ZWMoY21kOiBzdHJpbmcgfCBzdHJpbmdbXSkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGNtZCkgPyBBc3RhbElPLlByb2Nlc3MuZXhlY3YoY21kKSA6IEFzdGFsSU8uUHJvY2Vzcy5leGVjKGNtZClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4ZWNBc3luYyhjbWQ6IHN0cmluZyB8IHN0cmluZ1tdKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShjbWQpKSB7XG4gICAgICAgICAgICBBc3RhbElPLlByb2Nlc3MuZXhlY19hc3luY3YoY21kLCAoXywgcmVzKSA9PiB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShBc3RhbElPLlByb2Nlc3MuZXhlY19hc3luY3ZfZmluaXNoKHJlcykpXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBBc3RhbElPLlByb2Nlc3MuZXhlY19hc3luYyhjbWQsIChfLCByZXMpID0+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKEFzdGFsSU8uUHJvY2Vzcy5leGVjX2ZpbmlzaChyZXMpKVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcilcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN1YnByb2Nlc3MoaW5pdDogc3RyaW5nLCBleGVjOiBzdHJpbmcgfCBzdHJpbmdbXSk6IEFjY2Vzc29yPHN0cmluZz5cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN1YnByb2Nlc3M8VD4oXG4gICAgaW5pdDogVCxcbiAgICBleGVjOiBzdHJpbmcgfCBzdHJpbmdbXSxcbiAgICB0cmFuc2Zvcm06IChzdGRvdXQ6IHN0cmluZywgcHJldjogVCkgPT4gVCxcbik6IEFjY2Vzc29yPFQ+XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTdWJwcm9jZXNzPFQ+KFxuICAgIGluaXQ6IFQsXG4gICAgZXhlYzogc3RyaW5nIHwgc3RyaW5nW10sXG4gICAgdHJhbnNmb3JtPzogKHN0ZG91dDogc3RyaW5nLCBwcmV2OiBUKSA9PiBULFxuKTogQWNjZXNzb3I8VD4ge1xuICAgIGxldCBjdXJyZW50VmFsdWUgPSBpbml0XG4gICAgbGV0IHByb2M6IEFzdGFsSU8uUHJvY2VzcyB8IG51bGwgPSBudWxsXG4gICAgY29uc3Qgc3Vic2NyaWJlcnMgPSBuZXcgU2V0PCgpID0+IHZvaWQ+KClcblxuICAgIGZ1bmN0aW9uIHN1YnNjcmliZShjYWxsYmFjazogKCkgPT4gdm9pZCk6ICgpID0+IHZvaWQge1xuICAgICAgICBpZiAoc3Vic2NyaWJlcnMuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgcHJvYyA9IHN1YnByb2Nlc3MoZXhlYywgKHN0ZG91dCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdHJhbnNmb3JtID8gdHJhbnNmb3JtKHN0ZG91dCwgY3VycmVudFZhbHVlKSA6IChzdGRvdXQgYXMgVClcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFZhbHVlICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50VmFsdWUgPSB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVycy5mb3JFYWNoKChjYikgPT4gY2IoKSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgc3Vic2NyaWJlcnMuYWRkKGNhbGxiYWNrKVxuXG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBzdWJzY3JpYmVycy5kZWxldGUoY2FsbGJhY2spXG4gICAgICAgICAgICBpZiAoc3Vic2NyaWJlcnMuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHByb2M/LmtpbGwoKVxuICAgICAgICAgICAgICAgIHByb2MgPSBudWxsXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEFjY2Vzc29yKCgpID0+IGN1cnJlbnRWYWx1ZSwgc3Vic2NyaWJlKVxufVxuIiwgImltcG9ydCB7IGNyZWF0ZVBvbGwgfSBmcm9tIFwiYWdzL3RpbWVcIjtcbmltcG9ydCB7IGV4ZWMsIGV4ZWNBc3luYyB9IGZyb20gXCJhZ3MvcHJvY2Vzc1wiO1xuaW1wb3J0IHsgQWNjZXNzb3IsIEZvciwgV2l0aCB9IGZyb20gXCJhZ3NcIjtcbmltcG9ydCB7IEFzdGFsLCBHdGsgfSBmcm9tIFwiYWdzL2d0azRcIjtcblxuaW1wb3J0IEdMaWIgZnJvbSBcImdpOi8vR0xpYj92ZXJzaW9uPTIuMFwiO1xuaW1wb3J0IEdpbyBmcm9tIFwiZ2k6Ly9HaW8/dmVyc2lvbj0yLjBcIjtcblxuXG4vKiogZ25pbSBkb2Vzbid0IGV4cG9ydCB0aGlzLCBzbyB3ZSBuZWVkIHRvIGRvIGl0IGFnYWluICovXG5leHBvcnQgdHlwZSBXaWRnZXROb2RlVHlwZSA9IEFycmF5PEpTWC5FbGVtZW50PiB8IEpTWC5FbGVtZW50IHwgbnVtYmVyIHwgc3RyaW5nIHwgYm9vbGVhbiB8IG51bGwgfCB1bmRlZmluZWQ7XG5cbmV4cG9ydCBjb25zdCBkZWNvZGVyID0gbmV3IFRleHREZWNvZGVyKFwidXRmLThcIiksXG4gICAgZW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigpO1xuXG5leHBvcnQgY29uc3QgdGltZSA9IGNyZWF0ZVBvbGwoR0xpYi5EYXRlVGltZS5uZXdfbm93X2xvY2FsKCksIDUwMCwgKCkgPT4gXG4gICAgR0xpYi5EYXRlVGltZS5uZXdfbm93X2xvY2FsKCkpO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0SHlwcmxhbmRJbnN0YW5jZVNpZygpOiAoc3RyaW5nfG51bGwpIHtcbiAgICByZXR1cm4gR0xpYi5nZXRlbnYoXCJIWVBSTEFORF9JTlNUQU5DRV9TSUdOQVRVUkVcIik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRIeXBybGFuZFZlcnNpb24oKTogc3RyaW5nIHtcbiAgICByZXR1cm4gZXhlYyhgJHtHTGliLmdldGVudihcIkhZUFJMQU5EX0NNRFwiKSB8fCBcIkh5cHJsYW5kXCJ9IC0tdmVyc2lvbiB8IGhlYWQgLW4xYCkuc3BsaXQoXCIgXCIpWzFdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gb21pdE9iamVjdEtleXM8T2JqVCA9IG9iamVjdD4ob2JqOiBPYmpULCBrZXlzOiBrZXlvZiBPYmpUfEFycmF5PGtleW9mIE9ialQ+KTogT2JqVCB7XG4gICAgY29uc3QgZmluYWxPYmplY3QgPSB7IC4uLm9iaiB9O1xuXG4gICAgZm9yKGNvbnN0IG9iaktleSBvZiBPYmplY3Qua2V5cyhmaW5hbE9iamVjdCBhcyBvYmplY3QpKSB7XG4gICAgICAgIGlmKCFBcnJheS5pc0FycmF5KGtleXMpKSB7XG4gICAgICAgICAgICBpZihvYmpLZXkgPT09IGtleXMpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgZmluYWxPYmplY3Rba2V5cyBhcyBrZXlvZiB0eXBlb2YgZmluYWxPYmplY3RdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IoY29uc3Qgb21pdEtleSBvZiBrZXlzKSB7XG4gICAgICAgICAgICBpZihvYmpLZXkgPT09IG9taXRLZXkpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgZmluYWxPYmplY3Rbb2JqS2V5IGFzIGtleW9mIHR5cGVvZiBmaW5hbE9iamVjdF07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmluYWxPYmplY3Q7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2YXJpYWJsZVRvQm9vbGVhbih2YXJpYWJsZTogYW55fEFycmF5PGFueT58QWNjZXNzb3I8QXJyYXk8YW55Pnxhbnk+KTogYm9vbGVhbnxBY2Nlc3Nvcjxib29sZWFuPiB7XG4gICAgcmV0dXJuICh2YXJpYWJsZSBpbnN0YW5jZW9mIEFjY2Vzc29yKSA/XG4gICAgICAgIHZhcmlhYmxlLmFzKHYgPT4gQXJyYXkuaXNBcnJheSh2KSA/XG4gICAgICAgICAgICAodiBhcyBBcnJheTxhbnk+KS5sZW5ndGggPiAwXG4gICAgICAgIDogQm9vbGVhbih2KSlcbiAgICA6IEFycmF5LmlzQXJyYXkodmFyaWFibGUpID9cbiAgICAgICAgdmFyaWFibGUubGVuZ3RoID4gMFxuICAgIDogQm9vbGVhbih2YXJpYWJsZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm08VmFsdWVUeXBlID0gYW55fEFycmF5PGFueT4sIFJUeXBlID0gYW55PihcbiAgICB2OiBBY2Nlc3NvcjxWYWx1ZVR5cGU+fFZhbHVlVHlwZSwgZm46ICh2OiBWYWx1ZVR5cGUpID0+IFJUeXBlXG4pOiBSVHlwZXxBY2Nlc3NvcjxSVHlwZT4ge1xuXG4gICAgcmV0dXJuICh2IGluc3RhbmNlb2YgQWNjZXNzb3IpID9cbiAgICAgICAgdi5hcyhmbilcbiAgICA6IGZuKHYpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtV2lkZ2V0PFZhbHVlVHlwZSA9IHVua25vd24+KFxuICAgIHY6IEFjY2Vzc29yPFZhbHVlVHlwZXxBcnJheTxWYWx1ZVR5cGU+PnxWYWx1ZVR5cGV8QXJyYXk8VmFsdWVUeXBlPiwgXG4gICAgZm46ICh2OiBWYWx1ZVR5cGUsIGk/OiBBY2Nlc3NvcjxudW1iZXI+fG51bWJlcikgPT4gSlNYLkVsZW1lbnRcbik6IFdpZGdldE5vZGVUeXBlIHtcblxuICAgIHJldHVybiAodiBpbnN0YW5jZW9mIEFjY2Vzc29yKSA/XG4gICAgICAgIEFycmF5LmlzQXJyYXkodi5nZXQoKSkgP1xuICAgICAgICAgICAgRm9yKHtcbiAgICAgICAgICAgICAgICBlYWNoOiB2IGFzIEFjY2Vzc29yPEFycmF5PFZhbHVlVHlwZT4+LFxuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiAoY3ZhbCwgaSkgPT4gZm4oY3ZhbCwgaSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIDogV2l0aCh7XG4gICAgICAgICAgICB2YWx1ZTogdiBhcyBBY2Nlc3NvcjxWYWx1ZVR5cGU+LFxuICAgICAgICAgICAgY2hpbGRyZW46IGZuXG4gICAgICAgIH0pXG4gICAgOiAoQXJyYXkuaXNBcnJheSh2KSA/XG4gICAgICAgIHYubWFwKHZhbCA9PiBmbih2YWwpKVxuICAgIDogZm4odikpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWFrZURpcmVjdG9yeShkaXI6IHN0cmluZyk6IHZvaWQge1xuICAgIGV4ZWNBc3luYyhbIFwibWtkaXJcIiwgXCItcFwiLCBkaXIgXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWxldGVGaWxlKHBhdGg6IHN0cmluZyk6IHZvaWQge1xuICAgIGV4ZWNBc3luYyhbIFwicm1cIiwgXCItclwiLCBwYXRoIF0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGxheVN5c3RlbUJlbGwoKTogdm9pZCB7XG4gICAgZXhlY0FzeW5jKFwiY2FuYmVycmEtZ3RrLXBsYXkgLWkgYmVsbFwiKS5jYXRjaCgoZTogRXJyb3IpID0+IHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgQ291bGRuJ3QgcGxheSBzeXN0ZW0gYmVsbC4gU3RkZXJyOiAke2UubWVzc2FnZX1cXG4ke2Uuc3RhY2t9YCk7XG4gICAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0luc3RhbGxlZChjb21tYW5kTmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgY29uc3QgcHJvYyA9IEdpby5TdWJwcm9jZXNzLm5ldyhbXCJiYXNoXCIsIFwiLWNcIiwgYGNvbW1hbmQgLXYgJHtjb21tYW5kTmFtZX1gXSxcbiAgICAgICAgR2lvLlN1YnByb2Nlc3NGbGFncy5TVERPVVRfUElQRSB8IEdpby5TdWJwcm9jZXNzRmxhZ3MuU1RERVJSX1BJUEUpO1xuXG4gICAgY29uc3QgWyAsIHN0ZG91dCwgc3RkZXJyIF0gPSBwcm9jLmNvbW11bmljYXRlX3V0ZjgobnVsbCwgbnVsbCk7XG4gICAgaWYoc3Rkb3V0ICYmICFzdGRlcnIpIFxuICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZFNsaWRlck1hcmtzRnJvbU1pbk1heChzbGlkZXI6IEFzdGFsLlNsaWRlciwgYW1vdW50T2ZNYXJrczogbnVtYmVyID0gMiwgbWFya3VwPzogKHN0cmluZyB8IG51bGwpKSB7XG4gICAgaWYobWFya3VwICYmICFtYXJrdXAuaW5jbHVkZXMoXCJ7fVwiKSkgXG4gICAgICAgIG1hcmt1cCA9IGAke21hcmt1cH17fWBcblxuICAgIHNsaWRlci5hZGRfbWFyayhzbGlkZXIubWluLCBHdGsuUG9zaXRpb25UeXBlLkJPVFRPTSwgbWFya3VwID8gXG4gICAgICAgIG1hcmt1cC5yZXBsYWNlQWxsKFwie31cIiwgYCR7c2xpZGVyLm1pbn1gKSA6IG51bGwpO1xuXG4gICAgY29uc3QgbnVtID0gKGFtb3VudE9mTWFya3MgLSAxKTtcbiAgICBmb3IobGV0IGkgPSAxOyBpIDw9IG51bTsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHBhcnQgPSAoc2xpZGVyLm1heCAvIG51bSkgfCAwO1xuXG4gICAgICAgIGlmKGkgPiBudW0pIHtcbiAgICAgICAgICAgIHNsaWRlci5hZGRfbWFyayhzbGlkZXIubWF4LCBHdGsuUG9zaXRpb25UeXBlLkJPVFRPTSwgYCR7c2xpZGVyLm1heH1LYCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHNsaWRlci5hZGRfbWFyayhwYXJ0KmksIEd0ay5Qb3NpdGlvblR5cGUuQk9UVE9NLCBtYXJrdXAgPyBcbiAgICAgICAgICAgIG1hcmt1cC5yZXBsYWNlQWxsKFwie31cIiwgYCR7cGFydCppfWApIDogbnVsbCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNsaWRlcjtcbn1cbiIsICIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlICovXG5pbXBvcnQgR3RrIGZyb20gXCJnaTovL0d0az92ZXJzaW9uPTQuMFwiXG5pbXBvcnQgQXN0YWwgZnJvbSBcImdpOi8vQXN0YWw/dmVyc2lvbj00LjBcIlxuaW1wb3J0IHsgQ0NQcm9wcyB9IGZyb20gXCIuLi8uLi9nbmltL3NyYy9qc3gvaW5kZXguanNcIlxuaW1wb3J0IHsgaW50cmluc2ljRWxlbWVudHMgfSBmcm9tIFwiLi4vLi4vZ25pbS9zcmMvZ3RrNC9qc3gtcnVudGltZS5qc1wiXG5cbnR5cGUgUHJvcHM8VCBleHRlbmRzIEd0ay5XaWRnZXQsIFByb3BzPiA9IENDUHJvcHM8VCwgUGFydGlhbDxQcm9wcz4+XG5cbk9iamVjdC5hc3NpZ24oaW50cmluc2ljRWxlbWVudHMsIHtcbiAgICBib3g6IEd0ay5Cb3gsXG4gICAgYnV0dG9uOiBHdGsuQnV0dG9uLFxuICAgIGNlbnRlcmJveDogR3RrLkNlbnRlckJveCxcbiAgICAvLyBjaXJjdWxhcnByb2dyZXNzOiBBc3RhbC5DaXJjdWxhclByb2dyZXNzLFxuICAgIGRyYXdpbmdhcmVhOiBHdGsuRHJhd2luZ0FyZWEsXG4gICAgZW50cnk6IEd0ay5FbnRyeSxcbiAgICBpbWFnZTogR3RrLkltYWdlLFxuICAgIGxhYmVsOiBHdGsuTGFiZWwsXG4gICAgbGV2ZWxiYXI6IEd0ay5MZXZlbEJhcixcbiAgICBtZW51YnV0dG9uOiBHdGsuTWVudUJ1dHRvbixcbiAgICBvdmVybGF5OiBHdGsuT3ZlcmxheSxcbiAgICBwb3BvdmVyOiBHdGsuUG9wb3ZlcixcbiAgICByZXZlYWxlcjogR3RrLlJldmVhbGVyLFxuICAgIHNjcm9sbGVkd2luZG93OiBHdGsuU2Nyb2xsZWRXaW5kb3csXG4gICAgc2xpZGVyOiBBc3RhbC5TbGlkZXIsXG4gICAgc3RhY2s6IEd0ay5TdGFjayxcbiAgICBzd2l0Y2g6IEd0ay5Td2l0Y2gsXG4gICAgdG9nZ2xlYnV0dG9uOiBHdGsuVG9nZ2xlQnV0dG9uLFxuICAgIHdpbmRvdzogQXN0YWwuV2luZG93LFxufSlcblxuZGVjbGFyZSBnbG9iYWwge1xuICAgIG5hbWVzcGFjZSBKU1gge1xuICAgICAgICBpbnRlcmZhY2UgSW50cmluc2ljRWxlbWVudHMge1xuICAgICAgICAgICAgYm94OiBQcm9wczxHdGsuQm94LCBHdGsuQm94LkNvbnN0cnVjdG9yUHJvcHM+XG4gICAgICAgICAgICBidXR0b246IFByb3BzPEd0ay5CdXR0b24sIEd0ay5CdXR0b24uQ29uc3RydWN0b3JQcm9wcz5cbiAgICAgICAgICAgIGNlbnRlcmJveDogUHJvcHM8R3RrLkNlbnRlckJveCwgR3RrLkNlbnRlckJveC5Db25zdHJ1Y3RvclByb3BzPlxuICAgICAgICAgICAgLy8gY2lyY3VsYXJwcm9ncmVzczogUHJvcHM8QXN0YWwuQ2lyY3VsYXJQcm9ncmVzcywgQXN0YWwuQ2lyY3VsYXJQcm9ncmVzcy5Db25zdHJ1Y3RvclByb3BzPlxuICAgICAgICAgICAgZHJhd2luZ2FyZWE6IFByb3BzPEd0ay5EcmF3aW5nQXJlYSwgR3RrLkRyYXdpbmdBcmVhLkNvbnN0cnVjdG9yUHJvcHM+XG4gICAgICAgICAgICBlbnRyeTogUHJvcHM8R3RrLkVudHJ5LCBHdGsuRW50cnkuQ29uc3RydWN0b3JQcm9wcz5cbiAgICAgICAgICAgIGltYWdlOiBQcm9wczxHdGsuSW1hZ2UsIEd0ay5JbWFnZS5Db25zdHJ1Y3RvclByb3BzPlxuICAgICAgICAgICAgbGFiZWw6IFByb3BzPEd0ay5MYWJlbCwgR3RrLkxhYmVsLkNvbnN0cnVjdG9yUHJvcHM+XG4gICAgICAgICAgICBsZXZlbGJhcjogUHJvcHM8R3RrLkxldmVsQmFyLCBHdGsuTGV2ZWxCYXIuQ29uc3RydWN0b3JQcm9wcz5cbiAgICAgICAgICAgIG1lbnVidXR0b246IFByb3BzPEd0ay5NZW51QnV0dG9uLCBHdGsuTWVudUJ1dHRvbi5Db25zdHJ1Y3RvclByb3BzPlxuICAgICAgICAgICAgb3ZlcmxheTogUHJvcHM8R3RrLk92ZXJsYXksIEd0ay5PdmVybGF5LkNvbnN0cnVjdG9yUHJvcHM+XG4gICAgICAgICAgICBwb3BvdmVyOiBQcm9wczxHdGsuUG9wb3ZlciwgR3RrLlBvcG92ZXIuQ29uc3RydWN0b3JQcm9wcz5cbiAgICAgICAgICAgIHJldmVhbGVyOiBQcm9wczxHdGsuUmV2ZWFsZXIsIEd0ay5SZXZlYWxlci5Db25zdHJ1Y3RvclByb3BzPlxuICAgICAgICAgICAgc2Nyb2xsZWR3aW5kb3c6IFByb3BzPEd0ay5TY3JvbGxlZFdpbmRvdywgR3RrLlNjcm9sbGVkV2luZG93LkNvbnN0cnVjdG9yUHJvcHM+XG4gICAgICAgICAgICBzbGlkZXI6IFByb3BzPEFzdGFsLlNsaWRlciwgQXN0YWwuU2xpZGVyLkNvbnN0cnVjdG9yUHJvcHM+XG4gICAgICAgICAgICBzdGFjazogUHJvcHM8R3RrLlN0YWNrLCBHdGsuU3RhY2suQ29uc3RydWN0b3JQcm9wcz5cbiAgICAgICAgICAgIHN3aXRjaDogUHJvcHM8R3RrLlN3aXRjaCwgR3RrLlN3aXRjaC5Db25zdHJ1Y3RvclByb3BzPlxuICAgICAgICAgICAgdG9nZ2xlYnV0dG9uOiBQcm9wczxHdGsuVG9nZ2xlQnV0dG9uLCBHdGsuVG9nZ2xlQnV0dG9uLkNvbnN0cnVjdG9yUHJvcHM+XG4gICAgICAgICAgICB3aW5kb3c6IFByb3BzPEFzdGFsLldpbmRvdywgQXN0YWwuV2luZG93LkNvbnN0cnVjdG9yUHJvcHM+XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCAqIGZyb20gXCIuLi8uLi9nbmltL3NyYy9ndGs0L2pzeC1ydW50aW1lLmpzXCJcbiIsICJpbXBvcnQgR3RrIGZyb20gXCJnaTovL0d0az92ZXJzaW9uPTQuMFwiXG5pbXBvcnQgR2lvIGZyb20gXCJnaTovL0dpbz92ZXJzaW9uPTIuMFwiXG5pbXBvcnQgR09iamVjdCBmcm9tIFwiZ2k6Ly9HT2JqZWN0XCJcbmltcG9ydCB7IGdldFR5cGUsIG9uQ2xlYW51cCwgQWNjZXNzb3IsIEZyYWdtZW50IH0gZnJvbSBcIi4uL2pzeC9pbmRleC5qc1wiXG5pbXBvcnQgeyBjb25maWd1ZSB9IGZyb20gXCIuLi9qc3gvZW52LmpzXCJcblxuY29uc3QgZHVtbXlCdWlsZGVyID0gbmV3IEd0ay5CdWlsZGVyKClcblxuZnVuY3Rpb24gYWRkKHBhcmVudDogR3RrLkJ1aWxkYWJsZSwgY2hpbGQ6IEdPYmplY3QuT2JqZWN0LCBfOiBudW1iZXIpIHtcbiAgICBpZiAoIXNwZWNpYWxBZGQocGFyZW50LCBjaGlsZCwgXykpIHtcbiAgICAgICAgcGFyZW50LnZmdW5jX2FkZF9jaGlsZChkdW1teUJ1aWxkZXIsIGNoaWxkLCBnZXRUeXBlKGNoaWxkKSlcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHNwZWNpYWxSZW1vdmUoX3BhcmVudDogR09iamVjdC5PYmplY3QsIF9jaGlsZDogR09iamVjdC5PYmplY3QpIHtcbiAgICAvLyBUT0RPOiBhZGQgYW55IHNwZWNpYWwgY2FzZVxuICAgIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBzcGVjaWFsQWRkKHBhcmVudDogR09iamVjdC5PYmplY3QsIGNoaWxkOiBHT2JqZWN0Lk9iamVjdCwgXzogbnVtYmVyKSB7XG4gICAgLy8gVE9ETzogYWRkIGFueSBvdGhlciBzcGVjaWFsIGNhc2VcbiAgICBpZiAoXG4gICAgICAgIGNoaWxkIGluc3RhbmNlb2YgR3RrLkFkanVzdG1lbnQgJiZcbiAgICAgICAgXCJzZXRfYWRqdXN0bWVudFwiIGluIHBhcmVudCAmJlxuICAgICAgICB0eXBlb2YgcGFyZW50LnNldF9hZGp1c3RtZW50ID09PSBcImZ1bmN0aW9uXCJcbiAgICApIHtcbiAgICAgICAgcGFyZW50LnNldF9hZGp1c3RtZW50KGNoaWxkKVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIGlmIChcbiAgICAgICAgY2hpbGQgaW5zdGFuY2VvZiBHdGsuV2lkZ2V0ICYmXG4gICAgICAgIHBhcmVudCBpbnN0YW5jZW9mIEd0ay5TdGFjayAmJlxuICAgICAgICBjaGlsZC5uYW1lICE9PSBcIlwiICYmXG4gICAgICAgIGNoaWxkLm5hbWUgIT09IG51bGwgJiZcbiAgICAgICAgZ2V0VHlwZShjaGlsZCkgPT09IFwibmFtZWRcIlxuICAgICkge1xuICAgICAgICBwYXJlbnQuYWRkX25hbWVkKGNoaWxkLCBjaGlsZC5uYW1lKVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIEd0ay5Qb3BvdmVyICYmIHBhcmVudCBpbnN0YW5jZW9mIEd0ay5NZW51QnV0dG9uKSB7XG4gICAgICAgIHBhcmVudC5zZXRfcG9wb3ZlcihjaGlsZClcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICAgIGNoaWxkIGluc3RhbmNlb2YgR2lvLk1lbnVNb2RlbCAmJlxuICAgICAgICAocGFyZW50IGluc3RhbmNlb2YgR3RrLk1lbnVCdXR0b24gfHwgcGFyZW50IGluc3RhbmNlb2YgR3RrLlBvcG92ZXJNZW51KVxuICAgICkge1xuICAgICAgICBwYXJlbnQuc2V0X21lbnVfbW9kZWwoY2hpbGQpXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgR2lvLk1lbnVJdGVtICYmIHBhcmVudCBpbnN0YW5jZW9mIEdpby5NZW51KSB7XG4gICAgICAgIC8vIFRPRE86XG4gICAgfVxuXG4gICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgR3RrLldpbmRvdyAmJiBwYXJlbnQgaW5zdGFuY2VvZiBHdGsuQXBwbGljYXRpb24pIHtcbiAgICAgICAgcGFyZW50LmFkZF93aW5kb3coY2hpbGQpXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgR3RrLlRleHRCdWZmZXIgJiYgcGFyZW50IGluc3RhbmNlb2YgR3RrLlRleHRWaWV3KSB7XG4gICAgICAgIHBhcmVudC5zZXRfYnVmZmVyKGNoaWxkKVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiByZW1vdmUocGFyZW50OiBHT2JqZWN0Lk9iamVjdCwgY2hpbGQ6IEdPYmplY3QuT2JqZWN0KSB7XG4gICAgaWYgKHNwZWNpYWxSZW1vdmUocGFyZW50LCBjaGlsZCkpIHJldHVyblxuXG4gICAgaWYgKFwic2V0X2NoaWxkXCIgaW4gcGFyZW50ICYmIHR5cGVvZiBwYXJlbnQuc2V0X2NoaWxkID09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gcGFyZW50LnNldF9jaGlsZChudWxsKVxuICAgIH1cblxuICAgIGlmIChcInJlbW92ZVwiIGluIHBhcmVudCAmJiB0eXBlb2YgcGFyZW50LnJlbW92ZSA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIHBhcmVudC5yZW1vdmUoY2hpbGQpXG4gICAgfVxuXG4gICAgdGhyb3cgRXJyb3IoYGNhbm5vdCByZW1vdmUgJHtjaGlsZH0gZnJvbSAke3BhcmVudH1gKVxufVxuXG5jb25zdCB7IGFkZENoaWxkLCBpbnRyaW5zaWNFbGVtZW50cyB9ID0gY29uZmlndWUoe1xuICAgIHNldENzcyhvYmplY3QsIGNzcykge1xuICAgICAgICBpZiAoIShvYmplY3QgaW5zdGFuY2VvZiBHdGsuV2lkZ2V0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnNvbGUud2FybihFcnJvcihgY2Fubm90IHNldCBjc3Mgb24gJHtvYmplY3R9YCkpXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjdHggPSBvYmplY3QuZ2V0X3N0eWxlX2NvbnRleHQoKVxuICAgICAgICBsZXQgcHJvdmlkZXI6IEd0ay5Dc3NQcm92aWRlclxuXG4gICAgICAgIGNvbnN0IHNldHRlciA9IChjc3M6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgaWYgKCFjc3MuaW5jbHVkZXMoXCJ7XCIpIHx8ICFjc3MuaW5jbHVkZXMoXCJ9XCIpKSB7XG4gICAgICAgICAgICAgICAgY3NzID0gYCogeyAke2Nzc30gfWBcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHByb3ZpZGVyKSBjdHgucmVtb3ZlX3Byb3ZpZGVyKHByb3ZpZGVyKVxuXG4gICAgICAgICAgICBwcm92aWRlciA9IG5ldyBHdGsuQ3NzUHJvdmlkZXIoKVxuICAgICAgICAgICAgcHJvdmlkZXIubG9hZF9mcm9tX3N0cmluZyhjc3MpXG4gICAgICAgICAgICBjdHguYWRkX3Byb3ZpZGVyKHByb3ZpZGVyLCBHdGsuU1RZTEVfUFJPVklERVJfUFJJT1JJVFlfVVNFUilcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjc3MgaW5zdGFuY2VvZiBBY2Nlc3Nvcikge1xuICAgICAgICAgICAgc2V0dGVyKGNzcy5nZXQoKSlcbiAgICAgICAgICAgIGNvbnN0IGRpc3Bvc2UgPSBjc3Muc3Vic2NyaWJlKCgpID0+IHNldHRlcihjc3MuZ2V0KCkpKVxuICAgICAgICAgICAgb25DbGVhbnVwKGRpc3Bvc2UpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZXR0ZXIoY3NzKVxuICAgICAgICB9XG4gICAgfSxcbiAgICBzZXRDbGFzcyhvYmplY3QsIGNsYXNzTmFtZSkge1xuICAgICAgICBpZiAoIShvYmplY3QgaW5zdGFuY2VvZiBHdGsuV2lkZ2V0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnNvbGUud2FybihFcnJvcihgY2Fubm90IHNldCBjbGFzc05hbWUgb24gJHtvYmplY3R9YCkpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2xhc3NOYW1lIGluc3RhbmNlb2YgQWNjZXNzb3IpIHtcbiAgICAgICAgICAgIG9iamVjdC5jc3NDbGFzc2VzID0gY2xhc3NOYW1lLmdldCgpLnNwbGl0KC9cXHMrLylcbiAgICAgICAgICAgIGNvbnN0IGRpc3Bvc2UgPSBjbGFzc05hbWUuc3Vic2NyaWJlKFxuICAgICAgICAgICAgICAgICgpID0+IChvYmplY3QuY3NzQ2xhc3NlcyA9IGNsYXNzTmFtZS5nZXQoKS5zcGxpdCgvXFxzKy8pKSxcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIG9uQ2xlYW51cChkaXNwb3NlKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb2JqZWN0LnNldF9jc3NfY2xhc3NlcyhjbGFzc05hbWUuc3BsaXQoL1xccysvKSlcbiAgICAgICAgfVxuICAgIH0sXG4gICAgYWRkQ2hpbGQocGFyZW50LCBjaGlsZCwgaW5kZXggPSAtMSkge1xuICAgICAgICBpZiAoIShjaGlsZCBpbnN0YW5jZW9mIEdPYmplY3QuT2JqZWN0KSkge1xuICAgICAgICAgICAgY2hpbGQgPSBHdGsuTGFiZWwubmV3KFN0cmluZyhjaGlsZCkpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3BlY2lhbEFkZChwYXJlbnQsIGNoaWxkLCBpbmRleCkpIHJldHVyblxuXG4gICAgICAgIGlmIChwYXJlbnQgaW5zdGFuY2VvZiBGcmFnbWVudCkge1xuICAgICAgICAgICAgcGFyZW50LmFkZENoaWxkKGNoaWxkKVxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFyZW50IGluc3RhbmNlb2YgR3RrLkJ1aWxkYWJsZSkge1xuICAgICAgICAgICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgRnJhZ21lbnQpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGNoIG9mIGNoaWxkLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZChwYXJlbnQsIGNoLCBpbmRleClcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjaGlsZC5jb25uZWN0KFwiY2hpbGQtYWRkZWRcIiwgKF8sIGNoOiB1bmtub3duLCBpbmRleDogbnVtYmVyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghKGNoIGluc3RhbmNlb2YgR09iamVjdC5PYmplY3QpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFR5cGVFcnJvcihgY2Fubm90IGFkZCAke2NofSB0byAke3BhcmVudH1gKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGFkZENoaWxkKHBhcmVudCwgY2gsIGluZGV4KVxuICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgICAgICBjaGlsZC5jb25uZWN0KFwiY2hpbGQtcmVtb3ZlZFwiLCAoXywgY2g6IHVua25vd24pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoY2ggaW5zdGFuY2VvZiBHT2JqZWN0Lk9iamVjdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoVHlwZUVycm9yKGBjYW5ub3QgcmVtb3ZlICR7Y2h9IGZyb20gJHtwYXJlbnR9YCkpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZW1vdmUocGFyZW50LCBjaClcbiAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAgICAgb25DbGVhbnVwKCgpID0+IGNoaWxkLmRlc3Ryb3koKSlcbiAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYWRkKHBhcmVudCwgY2hpbGQsIGluZGV4KVxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBFcnJvcihgY2Fubm90IGFkZCAke2NoaWxkfSB0byAke3BhcmVudH1gKVxuICAgIH0sXG59KVxuXG5leHBvcnQgeyBGcmFnbWVudCwgaW50cmluc2ljRWxlbWVudHMgfVxuZXhwb3J0IHsganN4LCBqc3hzIH0gZnJvbSBcIi4uL2pzeC9qc3guanNcIlxuIiwgImltcG9ydCB7IEd0ayB9IGZyb20gXCJhZ3MvZ3RrNFwiO1xuaW1wb3J0IEFzdGFsSHlwcmxhbmQgZnJvbSBcImdpOi8vQXN0YWxIeXBybGFuZFwiO1xuaW1wb3J0IHsgZ2V0QXBwSWNvbiwgZ2V0U3ltYm9saWNJY29uIH0gZnJvbSBcIi4uLy4uL3NjcmlwdHMvYXBwc1wiO1xuaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSBcIi4uLy4uL3NjcmlwdHMvY29uZmlnXCI7XG5pbXBvcnQgeyBTZXBhcmF0b3IgfSBmcm9tIFwiLi4vU2VwYXJhdG9yXCI7XG5pbXBvcnQgeyBjcmVhdGVCaW5kaW5nLCBjcmVhdGVDb21wdXRlZCwgY3JlYXRlU3RhdGUsIEZvciwgV2l0aCB9IGZyb20gXCJhZ3NcIjtcbmltcG9ydCBHT2JqZWN0IGZyb20gXCJnaTovL0dPYmplY3Q/dmVyc2lvbj0yLjBcIjtcbmltcG9ydCB7IHZhcmlhYmxlVG9Cb29sZWFuIH0gZnJvbSBcIi4uLy4uL3NjcmlwdHMvdXRpbHNcIjtcblxuY29uc3QgW3Nob3dOdW1iZXJzLCBzZXRTaG93TnVtYmVyc10gPSBjcmVhdGVTdGF0ZShmYWxzZSk7XG5leHBvcnQgY29uc3Qgc2hvd1dvcmtzcGFjZU51bWJlciA9IChzaG93OiBib29sZWFuKSA9PiBcbiAgICBzZXRTaG93TnVtYmVycyhzaG93KTtcblxuXG5leHBvcnQgY29uc3QgV29ya3NwYWNlcyA9ICgpID0+IHtcbiAgICBjb25zdCB3b3Jrc3BhY2VzID0gY3JlYXRlQmluZGluZyhBc3RhbEh5cHJsYW5kLmdldF9kZWZhdWx0KCksIFwid29ya3NwYWNlc1wiKSxcbiAgICAgICAgZGVmYXVsdFdvcmtzcGFjZXMgPSB3b3Jrc3BhY2VzLmFzKHdzcyA9PiBcbiAgICAgICAgICAgIHdzcy5maWx0ZXIod3MgPT4gd3MuaWQgPiAwKS5zb3J0KChhLCBiKSA9PiBhLmlkIC0gYi5pZCkpLFxuICAgICAgICBzcGVjaWFsV29ya3NwYWNlcyA9IHdvcmtzcGFjZXMuYXMod3NzID0+IFxuICAgICAgICAgICAgd3NzLmZpbHRlcih3cyA9PiB3cy5pZCA8IDApLnNvcnQoKGEsIGIpID0+IGEuaWQgLSBiLmlkKSk7XG5cblxuICAgIHJldHVybiA8R3RrLkJveCBjbGFzcz17XCJ3b3Jrc3BhY2VzLXJvd1wifT5cbiAgICAgICAgPEd0ay5Cb3ggY2xhc3M9e1wic3BlY2lhbC13b3Jrc3BhY2VzXCJ9IHNwYWNpbmc9ezR9PlxuICAgICAgICAgICAgPEZvciBlYWNoPXtzcGVjaWFsV29ya3NwYWNlc30+XG4gICAgICAgICAgICAgICAgeyh3czogQXN0YWxIeXBybGFuZC5Xb3Jrc3BhY2UpID0+IFxuICAgICAgICAgICAgICAgICAgICA8R3RrLkJ1dHRvbiBjbGFzcz17XCJ3b3Jrc3BhY2VcIn1cbiAgICAgICAgICAgICAgICAgICAgICB0b29sdGlwVGV4dD17Y3JlYXRlQmluZGluZyh3cywgXCJuYW1lXCIpLmFzKG5hbWUgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKC9ec3BlY2lhbFxcOi8sIFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKS5jb25jYXQobmFtZS5zdWJzdHJpbmcoMSwgbmFtZS5sZW5ndGgpKTtcbiAgICAgICAgICAgICAgICAgICAgICB9KX0gb25DbGlja2VkPXsoKSA9PiBBc3RhbEh5cHJsYW5kLmdldF9kZWZhdWx0KCkuZGlzcGF0Y2goXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwidG9nZ2xlc3BlY2lhbHdvcmtzcGFjZVwiLCB3cy5uYW1lLnJlcGxhY2UoL15zcGVjaWFsWzpdLywgXCJcIilcbiAgICAgICAgICAgICAgICAgICAgICApfT5cblxuICAgICAgICAgICAgICAgICAgICAgICAgPFdpdGggdmFsdWU9e2NyZWF0ZUJpbmRpbmcod3MsIFwibGFzdENsaWVudFwiKX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhsYXN0Q2xpZW50OiBBc3RhbEh5cHJsYW5kLkNsaWVudHxudWxsKSA9PiBsYXN0Q2xpZW50ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxHdGsuSW1hZ2UgY2xhc3M9XCJsYXN0LWNsaWVudFwiIGljb25OYW1lPXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZUJpbmRpbmcobGFzdENsaWVudCwgXCJpbml0aWFsQ2xhc3NcIikuYXMoaW5pdGlhbENsYXNzID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0U3ltYm9saWNJY29uKGluaXRpYWxDbGFzcykgPz8gZ2V0QXBwSWNvbihpbml0aWFsQ2xhc3MpID8/IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImFwcGxpY2F0aW9uLXgtZXhlY3V0YWJsZS1zeW1ib2xpY1wiKX0gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9XaXRoPlxuICAgICAgICAgICAgICAgICAgICA8L0d0ay5CdXR0b24+XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgPC9Gb3I+XG4gICAgICAgIDwvR3RrLkJveD5cbiAgICAgICAgPFNlcGFyYXRvciBhbHBoYT17LjJ9IG9yaWVudGF0aW9uPXtHdGsuT3JpZW50YXRpb24uSE9SSVpPTlRBTH1cbiAgICAgICAgICBtYXJnaW49ezEyfSBzcGFjaW5nPXs4fSB2aXNpYmxlPXt2YXJpYWJsZVRvQm9vbGVhbihzcGVjaWFsV29ya3NwYWNlcyl9XG4gICAgICAgIC8+XG4gICAgICAgIDxHdGsuQm94IGNsYXNzPXtcImRlZmF1bHQtd29ya3NwYWNlc1wifSBzcGFjaW5nPXs0fSAkPXsoc2VsZikgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBjb25uczogTWFwPEdPYmplY3QuT2JqZWN0LCBBcnJheTxudW1iZXI+fG51bWJlcj4gPSBuZXcgTWFwKCk7XG4gICAgICAgICAgICAgIGNvbnN0IGNvbnRyb2xsZXJTY3JvbGwgPSBHdGsuRXZlbnRDb250cm9sbGVyU2Nyb2xsLm5ldyhcbiAgICAgICAgICAgICAgICAgIEd0ay5FdmVudENvbnRyb2xsZXJTY3JvbGxGbGFncy5WRVJUSUNBTFxuICAgICAgICAgICAgICApLCBjb250cm9sbGVyTW90aW9uID0gR3RrLkV2ZW50Q29udHJvbGxlck1vdGlvbi5uZXcoKTtcblxuICAgICAgICAgICAgICBzZWxmLmFkZF9jb250cm9sbGVyKGNvbnRyb2xsZXJTY3JvbGwpO1xuICAgICAgICAgICAgICBzZWxmLmFkZF9jb250cm9sbGVyKGNvbnRyb2xsZXJNb3Rpb24pO1xuXG4gICAgICAgICAgICAgIGNvbm5zLnNldChjb250cm9sbGVyU2Nyb2xsLCBjb250cm9sbGVyU2Nyb2xsLmNvbm5lY3QoXCJzY3JvbGxcIiwgKF8sIF9keCwgZHkpID0+IHtcbiAgICAgICAgICAgICAgICAgIGR5ID4gMCA/XG4gICAgICAgICAgICAgICAgICAgICAgQXN0YWxIeXBybGFuZC5nZXRfZGVmYXVsdCgpLmRpc3BhdGNoKFwid29ya3NwYWNlXCIsIFwiZS0xXCIpXG4gICAgICAgICAgICAgICAgICA6IEFzdGFsSHlwcmxhbmQuZ2V0X2RlZmF1bHQoKS5kaXNwYXRjaChcIndvcmtzcGFjZVwiLCBcImUrMVwiKTtcblxuICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgICBjb25ucy5zZXQoY29udHJvbGxlck1vdGlvbiwgW1xuICAgICAgICAgICAgICAgICAgY29udHJvbGxlck1vdGlvbi5jb25uZWN0KFwiZW50ZXJcIiwgKCkgPT4gc2V0U2hvd051bWJlcnModHJ1ZSkpLFxuICAgICAgICAgICAgICAgICAgY29udHJvbGxlck1vdGlvbi5jb25uZWN0KFwibGVhdmVcIiwgKCkgPT4gc2V0U2hvd051bWJlcnMoZmFsc2UpKVxuICAgICAgICAgICAgICBdKTtcblxuICAgICAgICAgICAgICBjb25ucy5zZXQoc2VsZiwgc2VsZi5jb25uZWN0KFwiZGVzdHJveVwiLCAoKSA9PiBjb25ucy5mb3JFYWNoKChpZHMsIG9iaikgPT5cbiAgICAgICAgICAgICAgICAgIEFycmF5LmlzQXJyYXkoaWRzKSA/IFxuICAgICAgICAgICAgICAgICAgICAgIGlkcy5mb3JFYWNoKGlkID0+IG9iai5kaXNjb25uZWN0KGlkKSlcbiAgICAgICAgICAgICAgICAgIDogb2JqLmRpc2Nvbm5lY3QoaWRzKVxuICAgICAgICAgICAgICApKSk7XG4gICAgICAgICAgfX0+XG4gICAgICAgICAgICA8Rm9yIGVhY2g9e2RlZmF1bHRXb3Jrc3BhY2VzfT5cbiAgICAgICAgICAgICAgICB7KHdzOiBBc3RhbEh5cHJsYW5kLldvcmtzcGFjZSwgaSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzaG93SWQgPSBjcmVhdGVDb21wdXRlZChbXG4gICAgICAgICAgICAgICAgICAgICAgICBDb25maWcuZ2V0RGVmYXVsdCgpLmJpbmRQcm9wZXJ0eShcIndvcmtzcGFjZXMuYWx3YXlzX3Nob3dfaWRcIiwgXCJib29sZWFuXCIpLmFzKEJvb2xlYW4pLFxuICAgICAgICAgICAgICAgICAgICAgICAgQ29uZmlnLmdldERlZmF1bHQoKS5iaW5kUHJvcGVydHkoXCJ3b3Jrc3BhY2VzLmVuYWJsZV9oZWxwZXJcIiwgXCJib29sZWFuXCIpLmFzKEJvb2xlYW4pLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2hvd051bWJlcnMsXG4gICAgICAgICAgICAgICAgICAgICAgICBpXG4gICAgICAgICAgICAgICAgICAgIF0sIChhbHdheXNTaG93SWRzLCBlbmFibGVIZWxwZXIsIHNob3dJZHMsIGkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGVuYWJsZUhlbHBlciAmJiAhYWx3YXlzU2hvd0lkcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByZXZpb3VzV29ya3NwYWNlID0gZGVmYXVsdFdvcmtzcGFjZXMuZ2V0KClbaS0xXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXh0V29ya3NwYWNlID0gZGVmYXVsdFdvcmtzcGFjZXMuZ2V0KClbaSsxXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKChkZWZhdWx0V29ya3NwYWNlcy5nZXQoKS5maWx0ZXIoKF8sIGlpKSA9PiBpaSA8IGkpLmxlbmd0aCA+IDAgJiYgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzV29ya3NwYWNlPy5pZCA8ICh3cy5pZC0xKSkgfHwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGRlZmF1bHRXb3Jrc3BhY2VzLmdldCgpLmZpbHRlcigoXywgaWkpID0+IGlpID4gaSkubGVuZ3RoID4gMCAmJiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dFdvcmtzcGFjZT8uaWQgPiAod3MuaWQrMSkpKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWx3YXlzU2hvd0lkcyB8fCBzaG93SWRzO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiA8R3RrLkJ1dHRvbiBjbGFzcz17Y3JlYXRlQ29tcHV0ZWQoW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVCaW5kaW5nKEFzdGFsSHlwcmxhbmQuZ2V0X2RlZmF1bHQoKSwgXCJmb2N1c2VkV29ya3NwYWNlXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93SWRcbiAgICAgICAgICAgICAgICAgICAgICBdLCAoZm9jdXNlZFdzLCBzaG93V3NOdW1iZXJzKSA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICBgd29ya3NwYWNlICR7Zm9jdXNlZFdzLmlkID09PSB3cy5pZCA/IFwiZm9jdXNcIiA6IFwiXCJ9ICR7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93V3NOdW1iZXJzID8gXCJzaG93XCIgOiBcIlwifWBcbiAgICAgICAgICAgICAgICAgICAgICApfSB0b29sdGlwVGV4dD17Y3JlYXRlQ29tcHV0ZWQoW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVCaW5kaW5nKHdzLCBcImxhc3RDbGllbnRcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZUJpbmRpbmcoQXN0YWxIeXBybGFuZC5nZXRfZGVmYXVsdCgpLCBcImZvY3VzZWRXb3Jrc3BhY2VcIilcbiAgICAgICAgICAgICAgICAgICAgICBdLCAobGFzdENsaWVudCwgZm9jdXNXcykgPT4gZm9jdXNXcy5pZCA9PT0gd3MuaWQgPyBcIlwiIDogXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGB3b3Jrc3BhY2UgJHt3cy5pZH0keyBsYXN0Q2xpZW50ID8gYCAtICR7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhbGFzdENsaWVudC50aXRsZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKGxhc3RDbGllbnQuY2xhc3MpID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgJHtsYXN0Q2xpZW50LmdldF9jbGFzcygpfTogYFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBcIlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0gJHtsYXN0Q2xpZW50LnRpdGxlfWAgOiBcIlwiIH1gXG4gICAgICAgICAgICAgICAgICAgICAgKX0gb25DbGlja2VkPXsoKSA9PiB3cy5mb2N1cygpfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICA8V2l0aCB2YWx1ZT17Y3JlYXRlQmluZGluZyh3cywgXCJsYXN0Q2xpZW50XCIpfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGxhc3RDbGllbnQ6IEFzdGFsSHlwcmxhbmQuQ2xpZW50KSA9PiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEd0ay5Cb3ggY2xhc3M9e1wibGFzdC1jbGllbnRcIn0gaGV4cGFuZD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxHdGsuUmV2ZWFsZXIgdHJhbnNpdGlvbkR1cmF0aW9uPXsyMDB9IHJldmVhbENoaWxkPXtzaG93SWR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb25UeXBlPXtHdGsuUmV2ZWFsZXJUcmFuc2l0aW9uVHlwZS5TTElERV9MRUZUfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZXhwYW5kPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEd0ay5MYWJlbCBsYWJlbD17Y3JlYXRlQmluZGluZyh3cywgXCJpZFwiKS5hcyhTdHJpbmcpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9e1wiaWRcIn0gaGV4cGFuZCAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9HdGsuUmV2ZWFsZXI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bGFzdENsaWVudCAmJiA8R3RrLkltYWdlIGNsYXNzPXtcImxhc3QtY2xpZW50LWljb25cIn0gaWNvbk5hbWU9e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVCaW5kaW5nKGxhc3RDbGllbnQsIFwiaW5pdGlhbENsYXNzXCIpLmFzKGluaXRpYWxDbGFzcyA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0U3ltYm9saWNJY29uKGluaXRpYWxDbGFzcykgPz8gZ2V0QXBwSWNvbihpbml0aWFsQ2xhc3MpID8/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJhcHBsaWNhdGlvbi14LWV4ZWN1dGFibGUtc3ltYm9saWNcIil9IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZXhwYW5kPXt0cnVlfSB2ZXhwYW5kPXt0cnVlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz59XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvR3RrLkJveD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1dpdGg+XG4gICAgICAgICAgICAgICAgICAgIDwvR3RrLkJ1dHRvbj5cbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgPC9Gb3I+XG4gICAgICAgIDwvR3RrLkJveD5cbiAgICA8L0d0ay5Cb3g+XG59XG4iLCAiaW1wb3J0IHsgR2RrLCBHdGsgfSBmcm9tIFwiYWdzL2d0azRcIjtcbmltcG9ydCB7IGV4ZWNBc3luYyB9IGZyb20gXCJhZ3MvcHJvY2Vzc1wiO1xuXG5pbXBvcnQgQXN0YWxBcHBzIGZyb20gXCJnaTovL0FzdGFsQXBwc1wiO1xuaW1wb3J0IEFzdGFsSHlwcmxhbmQgZnJvbSBcImdpOi8vQXN0YWxIeXBybGFuZFwiO1xuXG5cbmV4cG9ydCBjb25zdCB1d3NtSXNBY3RpdmU6IGJvb2xlYW4gPSBhd2FpdCBleGVjQXN5bmMoXG4gICAgXCJ1d3NtIGNoZWNrIGlzLWFjdGl2ZSBoeXBybGFuZC11d3NtLmRlc2t0b3BcIlxuKS50aGVuKCgpID0+IHRydWUpLmNhdGNoKCgpID0+IGZhbHNlKTtcbmNvbnN0IGFzdGFsQXBwczogQXN0YWxBcHBzLkFwcHMgPSBuZXcgQXN0YWxBcHBzLkFwcHMoKTtcblxubGV0IGFwcHNMaXN0OiBBcnJheTxBc3RhbEFwcHMuQXBwbGljYXRpb24+ID0gYXN0YWxBcHBzLmdldF9saXN0KCk7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRBcHBzKCk6IEFycmF5PEFzdGFsQXBwcy5BcHBsaWNhdGlvbj4ge1xuICAgIHJldHVybiBhcHBzTGlzdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZUFwcHMoKTogdm9pZCB7XG4gICAgYXN0YWxBcHBzLnJlbG9hZCgpO1xuICAgIGFwcHNMaXN0ID0gYXN0YWxBcHBzLmdldF9saXN0KCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRBc3RhbEFwcHMoKTogQXN0YWxBcHBzLkFwcHMge1xuICAgIHJldHVybiBhc3RhbEFwcHM7XG59XG5cbi8qKiBoYW5kbGVzIHJ1bm5pbmcgd2l0aCB1d3NtIGlmIGl0J3MgaW5zdGFsbGVkICovXG5leHBvcnQgZnVuY3Rpb24gZXhlY0FwcChhcHA6IEFzdGFsQXBwcy5BcHBsaWNhdGlvbnxzdHJpbmcsIGRpc3BhdGNoRXhlY0FyZ3M/OiBzdHJpbmcpIHtcbiAgICBjb25zdCBleGVjdXRhYmxlID0gKHR5cGVvZiBhcHAgPT09IFwic3RyaW5nXCIpID8gYXBwIFxuICAgICAgICA6IGFwcC5leGVjdXRhYmxlLnJlcGxhY2UoLyglZnwlRnwldXwlVXwlaXwlY3wlaykvZywgXCJcIik7XG5cbiAgICBBc3RhbEh5cHJsYW5kLmdldF9kZWZhdWx0KCkuZGlzcGF0Y2goXCJleGVjXCIsIFxuICAgICAgICBgJHtkaXNwYXRjaEV4ZWNBcmdzID8gYCR7ZGlzcGF0Y2hFeGVjQXJnc30gYCA6IFwiXCJ9JHt1d3NtSXNBY3RpdmUgPyBcInV3c20gYXBwIC0tIFwiIDogXCJcIn0ke2V4ZWN1dGFibGV9YFxuICAgICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsb29rdXBJY29uKG5hbWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBHdGsuSWNvblRoZW1lLmdldF9mb3JfZGlzcGxheShHZGsuRGlzcGxheS5nZXRfZGVmYXVsdCgpISk/Lmhhc19pY29uKG5hbWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QXBwc0J5TmFtZShhcHBOYW1lOiBzdHJpbmcpOiAoQXJyYXk8QXN0YWxBcHBzLkFwcGxpY2F0aW9uPnx1bmRlZmluZWQpIHtcbiAgICBsZXQgZm91bmQ6IEFycmF5PEFzdGFsQXBwcy5BcHBsaWNhdGlvbj4gPSBbXTtcblxuICAgIGdldEFwcHMoKS5tYXAoKGFwcDogQXN0YWxBcHBzLkFwcGxpY2F0aW9uKSA9PiB7XG4gICAgICAgIGlmKGFwcC5nZXRfbmFtZSgpLnRyaW0oKS50b0xvd2VyQ2FzZSgpID09PSBhcHBOYW1lLnRyaW0oKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgICAgfHwgKGFwcD8ud21DbGFzcyAmJiBhcHAud21DbGFzcy50cmltKCkudG9Mb3dlckNhc2UoKSA9PT0gYXBwTmFtZS50cmltKCkudG9Mb3dlckNhc2UoKSkpXG4gICAgICAgICAgICBmb3VuZC5wdXNoKGFwcCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gKGZvdW5kLmxlbmd0aCA+IDAgPyBmb3VuZCA6IHVuZGVmaW5lZCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRJY29uQnlBcHBOYW1lKGFwcE5hbWU6IHN0cmluZyk6IChzdHJpbmd8dW5kZWZpbmVkKSB7XG4gICAgaWYoIWFwcE5hbWUpIHJldHVybiB1bmRlZmluZWQ7XG5cbiAgICBpZihsb29rdXBJY29uKGFwcE5hbWUpKVxuICAgICAgIHJldHVybiBhcHBOYW1lO1xuXG4gICAgaWYobG9va3VwSWNvbihhcHBOYW1lLnRvTG93ZXJDYXNlKCkpKVxuICAgICAgIHJldHVybiBhcHBOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICBcbiAgICBjb25zdCBuYW1lUmV2ZXJzZUROUyA9IGFwcE5hbWUuc3BsaXQoJy4nKTtcbiAgICBpZihsb29rdXBJY29uKG5hbWVSZXZlcnNlRE5TW25hbWVSZXZlcnNlRE5TLmxlbmd0aCAtIDFdKSlcbiAgICAgICByZXR1cm4gbmFtZVJldmVyc2VETlNbbmFtZVJldmVyc2VETlMubGVuZ3RoIC0gMV07XG5cbiAgICBjb25zdCBmb3VuZDogKEFzdGFsQXBwcy5BcHBsaWNhdGlvbnx1bmRlZmluZWQpID0gZ2V0QXBwc0J5TmFtZShhcHBOYW1lKT8uWzBdO1xuICAgIGlmKEJvb2xlYW4oZm91bmQpKVxuICAgICAgICByZXR1cm4gZm91bmQ/Lmljb25OYW1lO1xuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEFwcEljb24oYXBwOiAoc3RyaW5nfEFzdGFsQXBwcy5BcHBsaWNhdGlvbikpOiAoc3RyaW5nfHVuZGVmaW5lZCkge1xuICAgIGlmKCFhcHApIHJldHVybiB1bmRlZmluZWQ7XG5cbiAgICBpZih0eXBlb2YgYXBwID09PSBcInN0cmluZ1wiKVxuICAgICAgICByZXR1cm4gZ2V0SWNvbkJ5QXBwTmFtZShhcHApO1xuXG4gICAgaWYoYXBwLmljb25OYW1lICYmIGxvb2t1cEljb24oYXBwLmljb25OYW1lKSlcbiAgICAgICAgcmV0dXJuIGFwcC5pY29uTmFtZTtcblxuICAgIGlmKGFwcC53bUNsYXNzKVxuICAgICAgICByZXR1cm4gZ2V0SWNvbkJ5QXBwTmFtZShhcHAud21DbGFzcyk7XG5cbiAgICByZXR1cm4gZ2V0SWNvbkJ5QXBwTmFtZShhcHAubmFtZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTeW1ib2xpY0ljb24oYXBwOiAoc3RyaW5nfEFzdGFsQXBwcy5BcHBsaWNhdGlvbikpOiAoc3RyaW5nfHVuZGVmaW5lZCkge1xuICAgIGNvbnN0IGljb24gPSBnZXRBcHBJY29uKGFwcCk7XG5cbiAgICByZXR1cm4gKGljb24gJiYgbG9va3VwSWNvbihgJHtpY29ufS1zeW1ib2xpY2ApKSA/XG4gICAgICAgIGAke2ljb259LXN5bWJvbGljYFxuICAgIDogdW5kZWZpbmVkO1xufVxuIiwgImltcG9ydCBBc3RhbCBmcm9tIFwiZ2k6Ly9Bc3RhbElPXCJcbmltcG9ydCBHaW8gZnJvbSBcImdpOi8vR2lvP3ZlcnNpb249Mi4wXCJcblxuZXhwb3J0IGZ1bmN0aW9uIHJlYWRGaWxlKHBhdGg6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIEFzdGFsLnJlYWRfZmlsZShwYXRoKSB8fCBcIlwiXG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWFkRmlsZUFzeW5jKHBhdGg6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgQXN0YWwucmVhZF9maWxlX2FzeW5jKHBhdGgsIChfLCByZXMpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShBc3RhbC5yZWFkX2ZpbGVfZmluaXNoKHJlcykgfHwgXCJcIilcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3cml0ZUZpbGUocGF0aDogc3RyaW5nLCBjb250ZW50OiBzdHJpbmcpOiB2b2lkIHtcbiAgICBBc3RhbC53cml0ZV9maWxlKHBhdGgsIGNvbnRlbnQpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3cml0ZUZpbGVBc3luYyhwYXRoOiBzdHJpbmcsIGNvbnRlbnQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIEFzdGFsLndyaXRlX2ZpbGVfYXN5bmMocGF0aCwgY29udGVudCwgKF8sIHJlcykgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKEFzdGFsLndyaXRlX2ZpbGVfZmluaXNoKHJlcykpXG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcilcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbW9uaXRvckZpbGUoXG4gICAgcGF0aDogc3RyaW5nLFxuICAgIGNhbGxiYWNrOiAoZmlsZTogc3RyaW5nLCBldmVudDogR2lvLkZpbGVNb25pdG9yRXZlbnQpID0+IHZvaWQsXG4pOiBHaW8uRmlsZU1vbml0b3Ige1xuICAgIHJldHVybiBBc3RhbC5tb25pdG9yX2ZpbGUocGF0aCwgKGZpbGU6IHN0cmluZywgZXZlbnQ6IEdpby5GaWxlTW9uaXRvckV2ZW50KSA9PiB7XG4gICAgICAgIGNhbGxiYWNrKGZpbGUsIGV2ZW50KVxuICAgIH0pIVxufVxuIiwgImltcG9ydCB7IENvbmZpZyB9IGZyb20gXCIuL2NvbmZpZ1wiO1xuaW1wb3J0IHsgdGltZW91dCB9IGZyb20gXCJhZ3MvdGltZVwiO1xuaW1wb3J0IHsgZXhlY0FzeW5jIH0gZnJvbSBcImFncy9wcm9jZXNzXCI7XG5cbmltcG9ydCBHT2JqZWN0LCB7IGdldHRlciwgcHJvcGVydHksIHJlZ2lzdGVyLCBzaWduYWwgfSBmcm9tIFwiYWdzL2dvYmplY3RcIjtcbmltcG9ydCBBc3RhbE5vdGlmZCBmcm9tIFwiZ2k6Ly9Bc3RhbE5vdGlmZFwiO1xuaW1wb3J0IEdpbyBmcm9tIFwiZ2k6Ly9HaW8/dmVyc2lvbj0yLjBcIjtcbmltcG9ydCBBc3RhbElPIGZyb20gXCJnaTovL0FzdGFsSU9cIjtcblxuXG5leHBvcnQgaW50ZXJmYWNlIEhpc3RvcnlOb3RpZmljYXRpb24ge1xuICAgIGlkOiBudW1iZXI7XG4gICAgYXBwTmFtZTogc3RyaW5nO1xuICAgIGJvZHk6IHN0cmluZztcbiAgICBzdW1tYXJ5OiBzdHJpbmc7XG4gICAgdXJnZW5jeTogQXN0YWxOb3RpZmQuVXJnZW5jeTtcbiAgICBhcHBJY29uPzogc3RyaW5nO1xuICAgIHRpbWU6IG51bWJlcjtcbiAgICBpbWFnZT86IHN0cmluZztcbn1cblxuQHJlZ2lzdGVyKHsgR1R5cGVOYW1lOiBcIk5vdGlmaWNhdGlvbnNcIiB9KVxuY2xhc3MgTm90aWZpY2F0aW9ucyBleHRlbmRzIEdPYmplY3QuT2JqZWN0IHtcbiAgICBwcml2YXRlIHN0YXRpYyBpbnN0YW5jZTogKE5vdGlmaWNhdGlvbnN8bnVsbCkgPSBudWxsO1xuXG4gICAgI25vdGlmaWNhdGlvbnM6IEFycmF5PEFzdGFsTm90aWZkLk5vdGlmaWNhdGlvbj4gPSBbXTtcbiAgICAjaGlzdG9yeTogQXJyYXk8SGlzdG9yeU5vdGlmaWNhdGlvbj4gPSBbXTtcbiAgICAjbm90aWZpY2F0aW9uc09uSG9sZDogU2V0PG51bWJlcj4gPSBuZXcgU2V0PG51bWJlcj4oKTtcbiAgICAjY29ubmVjdGlvbnM6IEFycmF5PG51bWJlcj4gPSBbXTtcblxuICAgIEBnZXR0ZXIoQXJyYXk8QXN0YWxOb3RpZmQuTm90aWZpY2F0aW9uPilcbiAgICBwdWJsaWMgZ2V0IG5vdGlmaWNhdGlvbnMoKSB7IHJldHVybiB0aGlzLiNub3RpZmljYXRpb25zIH07XG5cbiAgICBAZ2V0dGVyKEFycmF5PEhpc3RvcnlOb3RpZmljYXRpb24+KVxuICAgIHB1YmxpYyBnZXQgaGlzdG9yeSgpIHsgcmV0dXJuIHRoaXMuI2hpc3RvcnkgfTtcblxuICAgIEBwcm9wZXJ0eShOdW1iZXIpXG4gICAgcHVibGljIGhpc3RvcnlMaW1pdDogbnVtYmVyID0gMTA7XG5cblxuICAgIEBzaWduYWwoQXN0YWxOb3RpZmQuTm90aWZpY2F0aW9uKSBub3RpZmljYXRpb25BZGRlZChfbm90aWZpY2F0aW9uOiBBc3RhbE5vdGlmZC5Ob3RpZmljYXRpb24pIHt9O1xuICAgIEBzaWduYWwoTnVtYmVyKSBub3RpZmljYXRpb25SZW1vdmVkKF9pZDogbnVtYmVyKSB7fTtcbiAgICBAc2lnbmFsKE9iamVjdCkgaGlzdG9yeUFkZGVkKF9ub3RpZmljYXRpb246IE9iamVjdCkge307XG4gICAgQHNpZ25hbChOdW1iZXIpIGhpc3RvcnlSZW1vdmVkKF9pZDogbnVtYmVyKSB7fTtcbiAgICBAc2lnbmFsKE51bWJlcikgbm90aWZpY2F0aW9uUmVwbGFjZWQoX2lkOiBudW1iZXIpIHt9O1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy4jY29ubmVjdGlvbnMucHVzaChcbiAgICAgICAgICAgIEFzdGFsTm90aWZkLmdldF9kZWZhdWx0KCkuY29ubmVjdChcIm5vdGlmaWVkXCIsIChub3RpZmQsIGlkKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgbm90aWZpY2F0aW9uID0gbm90aWZkLmdldF9ub3RpZmljYXRpb24oaWQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG5vdGlmVGltZW91dCA9IENvbmZpZy5nZXREZWZhdWx0KCkuZ2V0UHJvcGVydHkoXG4gICAgICAgICAgICAgICAgICAgIGBub3RpZmljYXRpb25zLnRpbWVvdXRfJHt0aGlzLmdldFVyZ2VuY3lTdHJpbmcobm90aWZpY2F0aW9uLnVyZ2VuY3kpLnRvTG93ZXJDYXNlKCl9YCwgXG4gICAgICAgICAgICAgICAgICAgIFwibnVtYmVyXCIpIGFzIG51bWJlcjtcblxuICAgICAgICAgICAgICAgIGlmKHRoaXMuZ2V0Tm90aWZkKCkuZG9udERpc3R1cmIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRIaXN0b3J5KG5vdGlmaWNhdGlvbiwgKCkgPT4gbm90aWZpY2F0aW9uLmRpc21pc3MoKSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLmFkZE5vdGlmaWNhdGlvbihub3RpZmljYXRpb24sICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYobm90aWZpY2F0aW9uLnVyZ2VuY3kgIT09IEFzdGFsTm90aWZkLlVyZ2VuY3kuQ1JJVElDQUwgfHxcbiAgICAgICAgICAgICAgICAgICAgICAobm90aWZpY2F0aW9uLnVyZ2VuY3kgPT09IEFzdGFsTm90aWZkLlVyZ2VuY3kuQ1JJVElDQUwgJiYgXG4gICAgICAgICAgICAgICAgICAgICAgICBub3RpZlRpbWVvdXQgPiAwKSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbm90aWZUaW1lcjogKEFzdGFsSU8uVGltZXx1bmRlZmluZWQpID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlcGxhY2VkQ29ubmVjdGlvbklkOiBudW1iZXI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlbW92ZUZ1biA9ICgpID0+IHsgLy8gRnVubnkgbmFtZSBoYWhhIGxtYW8gcmVtb3ZlIGZ1biA6c2t1bGw6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90aWZUaW1lciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZih0aGlzLiNub3RpZmljYXRpb25zT25Ib2xkLmhhcyhub3RpZmljYXRpb24uaWQpKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZEhpc3Rvcnkobm90aWZpY2F0aW9uLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcGxhY2VkQ29ubmVjdGlvbklkICYmIHRoaXMuZGlzY29ubmVjdChyZXBsYWNlZENvbm5lY3Rpb25JZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlTm90aWZpY2F0aW9uKGlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgbm90aWZUaW1lciA9IHRpbWVvdXQobm90aWZUaW1lb3V0LCByZW1vdmVGdW4pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXBsYWNlZENvbm5lY3Rpb25JZCA9IHRoaXMuY29ubmVjdChcIm5vdGlmaWNhdGlvbi1yZXBsYWNlZFwiLCAoXywgaWQ6IG51bWJlcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKG5vdGlmaWNhdGlvbi5pZCAhPT0gaWQpIHJldHVybjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdGlmVGltZXI/LmNhbmNlbCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdGlmVGltZXIgPSB0aW1lb3V0KG5vdGlmVGltZW91dCwgcmVtb3ZlRnVuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KSxcblxuICAgICAgICAgICAgQXN0YWxOb3RpZmQuZ2V0X2RlZmF1bHQoKS5jb25uZWN0KFwicmVzb2x2ZWRcIiwgKG5vdGlmZCwgaWQsIF9yZWFzb24pID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZU5vdGlmaWNhdGlvbihpZCk7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRIaXN0b3J5KG5vdGlmZC5nZXRfbm90aWZpY2F0aW9uKGlkKSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMucnVuX2Rpc3Bvc2UgPSAoKSA9PiB7XG4gICAgICAgICAgICBzdXBlci5ydW5fZGlzcG9zZSgpO1xuICAgICAgICAgICAgdGhpcy4jY29ubmVjdGlvbnMubWFwKChpZDogbnVtYmVyKSA9PiBcbiAgICAgICAgICAgICAgICBBc3RhbE5vdGlmZC5nZXRfZGVmYXVsdCgpLmRpc2Nvbm5lY3QoaWQpKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGdldERlZmF1bHQoKTogTm90aWZpY2F0aW9ucyB7XG4gICAgICAgIGlmKCF0aGlzLmluc3RhbmNlKVxuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZSA9IG5ldyBOb3RpZmljYXRpb25zKCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaW5zdGFuY2U7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIHNlbmROb3RpZmljYXRpb24ocHJvcHM6IHtcbiAgICAgICAgICAgICAgICB1cmdlbmN5PzogQXN0YWxOb3RpZmQuVXJnZW5jeTtcbiAgICAgICAgICAgICAgICBhcHBOYW1lPzogc3RyaW5nO1xuICAgICAgICAgICAgICAgIGltYWdlPzogc3RyaW5nO1xuICAgICAgICAgICAgICAgIHN1bW1hcnk6IHN0cmluZztcbiAgICAgICAgICAgICAgICBib2R5Pzogc3RyaW5nO1xuICAgICAgICAgICAgICAgIHJlcGxhY2VJZD86IG51bWJlcjtcbiAgICAgICAgICAgICAgICBhY3Rpb25zPzogQXJyYXk8e1xuICAgICAgICAgICAgICAgICAgICBpZD86IChzdHJpbmd8bnVtYmVyKTtcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogc3RyaW5nO1xuICAgICAgICAgICAgICAgICAgICBvbkFjdGlvbj86ICgpID0+IHZvaWRcbiAgICAgICAgICAgICAgICB9PlxuICAgICAgICAgICAgfSk6IFByb21pc2U8e1xuICAgICAgICAgICAgICAgICAgICBpZD86IChzdHJpbmd8bnVtYmVyKTtcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogc3RyaW5nO1xuICAgICAgICAgICAgICAgICAgICBvbkFjdGlvbj86ICgpID0+IHZvaWRcbiAgICAgICAgICAgICAgICB9fG51bGx8dm9pZD4ge1xuXG4gICAgICAgIHJldHVybiBhd2FpdCBleGVjQXN5bmMoW1xuICAgICAgICAgICAgXCJub3RpZnktc2VuZFwiLCBcbiAgICAgICAgICAgICAgICAgICAgIC4uLihwcm9wcy51cmdlbmN5ID8gW1xuICAgICAgICAgICAgICAgIFwiLXVcIiwgdGhpcy5nZXRVcmdlbmN5U3RyaW5nKHByb3BzLnVyZ2VuY3kpXG4gICAgICAgICAgICBdIDogW10pLCAuLi4ocHJvcHMuYXBwTmFtZSA/IFtcbiAgICAgICAgICAgICAgICBcIi1hXCIsIHByb3BzLmFwcE5hbWVcbiAgICAgICAgICAgIF0gOiBbXSksIC4uLihwcm9wcy5pbWFnZSA/IFtcbiAgICAgICAgICAgICAgICBcIi1pXCIsIHByb3BzLmltYWdlXG4gICAgICAgICAgICBdIDogW10pLCAuLi4ocHJvcHMuYWN0aW9ucyA/IHByb3BzLmFjdGlvbnMubWFwKChhY3Rpb24pID0+XG4gICAgICAgICAgICAgICAgWyBcIi1BXCIsIGFjdGlvbi50ZXh0IF1cbiAgICAgICAgICAgICkuZmxhdCgyKSA6IFtdKSwgLi4uKHByb3BzLnJlcGxhY2VJZCA/IFtcbiAgICAgICAgICAgICAgICBcIi1yXCIsIHByb3BzLnJlcGxhY2VJZC50b1N0cmluZygpXG4gICAgICAgICAgICBdIDogW10pLCBwcm9wcy5zdW1tYXJ5LCBwcm9wcy5ib2R5ID8gcHJvcHMuYm9keSA6IFwiXCJcbiAgICAgICAgXSkudGhlbigoc3Rkb3V0KSA9PiB7XG4gICAgICAgICAgICBzdGRvdXQgPSBzdGRvdXQudHJpbSgpO1xuICAgICAgICAgICAgaWYoIXN0ZG91dCkge1xuICAgICAgICAgICAgICAgIGlmKHByb3BzLmFjdGlvbnMgJiYgcHJvcHMuYWN0aW9ucy5sZW5ndGggPiAwKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcblxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYocHJvcHMuYWN0aW9ucyAmJiBwcm9wcy5hY3Rpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhY3Rpb24gPSBwcm9wcy5hY3Rpb25zW051bWJlci5wYXJzZUludChzdGRvdXQpXTtcbiAgICAgICAgICAgICAgICBhY3Rpb24/Lm9uQWN0aW9uPy4oKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBhY3Rpb24gPz8gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KS5jYXRjaCgoZXJyOiBHaW8uSU9FcnJvckVudW0pID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYE5vdGlmaWNhdGlvbnM6IENvdWxkbid0IHNlbmQgbm90aWZpY2F0aW9uISBJcyB0aGUgZGFlbW9uIHJ1bm5pbmc/IFN0ZGVycjpcXG4ke1xuICAgICAgICAgICAgICAgIGVyci5tZXNzYWdlID8gYCR7ZXJyLm1lc3NhZ2V9XFxuYCA6IFwiXCJ9U3RhY2s6ICR7ZXJyLnN0YWNrfWApO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0VXJnZW5jeVN0cmluZyh1cmdlbmN5OiBBc3RhbE5vdGlmZC5Ob3RpZmljYXRpb258QXN0YWxOb3RpZmQuVXJnZW5jeSkge1xuICAgICAgICBzd2l0Y2goKHVyZ2VuY3kgaW5zdGFuY2VvZiBBc3RhbE5vdGlmZC5Ob3RpZmljYXRpb24pID8gXG4gICAgICAgICAgICAgICB1cmdlbmN5LnVyZ2VuY3kgOiB1cmdlbmN5KSB7XG5cbiAgICAgICAgICAgIGNhc2UgQXN0YWxOb3RpZmQuVXJnZW5jeS5MT1c6IFxuICAgICAgICAgICAgICAgIHJldHVybiBcImxvd1wiO1xuICAgICAgICAgICAgY2FzZSBBc3RhbE5vdGlmZC5VcmdlbmN5LkNSSVRJQ0FMOiBcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJjcml0aWNhbFwiO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFwibm9ybWFsXCI7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhZGRIaXN0b3J5KG5vdGlmOiBBc3RhbE5vdGlmZC5Ob3RpZmljYXRpb24sIG9uQWRkZWQ/OiAobm90aWY6IEFzdGFsTm90aWZkLk5vdGlmaWNhdGlvbikgPT4gdm9pZCk6IHZvaWQge1xuICAgICAgICBpZighbm90aWYpIHJldHVybjtcblxuICAgICAgICB0aGlzLiNoaXN0b3J5Lmxlbmd0aCA9PT0gdGhpcy5oaXN0b3J5TGltaXQgJiZcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlSGlzdG9yeSh0aGlzLiNoaXN0b3J5W3RoaXMuI2hpc3RvcnkubGVuZ3RoIC0gMV0pO1xuXG4gICAgICAgIHRoaXMuI2hpc3RvcnkubWFwKChub3RpZmIsIGkpID0+IFxuICAgICAgICAgICAgbm90aWZiLmlkID09PSBub3RpZi5pZCAmJiB0aGlzLiNoaXN0b3J5LnNwbGljZShpLCAxKSk7XG5cbiAgICAgICAgdGhpcy4jaGlzdG9yeS51bnNoaWZ0KHtcbiAgICAgICAgICAgIGlkOiBub3RpZi5pZCxcbiAgICAgICAgICAgIGFwcE5hbWU6IG5vdGlmLmFwcE5hbWUsXG4gICAgICAgICAgICBib2R5OiBub3RpZi5ib2R5LFxuICAgICAgICAgICAgc3VtbWFyeTogbm90aWYuc3VtbWFyeSxcbiAgICAgICAgICAgIHVyZ2VuY3k6IG5vdGlmLnVyZ2VuY3ksXG4gICAgICAgICAgICBhcHBJY29uOiBub3RpZi5hcHBJY29uLFxuICAgICAgICAgICAgdGltZTogbm90aWYudGltZSxcbiAgICAgICAgICAgIGltYWdlOiBub3RpZi5pbWFnZSA/IG5vdGlmLmltYWdlIDogdW5kZWZpbmVkXG4gICAgICAgIH0gYXMgSGlzdG9yeU5vdGlmaWNhdGlvbik7XG5cbiAgICAgICAgdGhpcy5ub3RpZnkoXCJoaXN0b3J5XCIpO1xuICAgICAgICB0aGlzLmVtaXQoXCJoaXN0b3J5LWFkZGVkXCIsIHRoaXMuI2hpc3RvcnlbMF0pO1xuICAgICAgICBvbkFkZGVkICYmIG9uQWRkZWQobm90aWYpO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBjbGVhckhpc3RvcnkoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHRoaXMuI2hpc3RvcnkucmV2ZXJzZSgpLm1hcCgobm90aWYpID0+IHtcbiAgICAgICAgICAgIHRoaXMuI2hpc3RvcnkgPSB0aGlzLmhpc3RvcnkuZmlsdGVyKChuKSA9PiBuLmlkICE9PSBub3RpZi5pZCk7XG4gICAgICAgICAgICB0aGlzLmVtaXQoXCJoaXN0b3J5LXJlbW92ZWRcIiwgbm90aWYuaWQpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLm5vdGlmeShcImhpc3RvcnlcIik7XG4gICAgfVxuXG4gICAgcHVibGljIHJlbW92ZUhpc3Rvcnkobm90aWY6IChIaXN0b3J5Tm90aWZpY2F0aW9ufG51bWJlcikpOiB2b2lkIHtcbiAgICAgICAgY29uc3Qgbm90aWZJZCA9ICh0eXBlb2Ygbm90aWYgPT09IFwibnVtYmVyXCIpID8gbm90aWYgOiBub3RpZi5pZDtcbiAgICAgICAgdGhpcy4jaGlzdG9yeSA9IHRoaXMuI2hpc3RvcnkuZmlsdGVyKChpdGVtOiBIaXN0b3J5Tm90aWZpY2F0aW9uKSA9PiBcbiAgICAgICAgICAgIGl0ZW0uaWQgIT09IG5vdGlmSWQpO1xuXG4gICAgICAgIHRoaXMubm90aWZ5KFwiaGlzdG9yeVwiKTtcbiAgICAgICAgdGhpcy5lbWl0KFwiaGlzdG9yeS1yZW1vdmVkXCIsIG5vdGlmSWQpO1xuICAgIH1cblxuICAgIHByaXZhdGUgYWRkTm90aWZpY2F0aW9uKG5vdGlmOiBBc3RhbE5vdGlmZC5Ob3RpZmljYXRpb24sIG9uQWRkZWQ/OiAobm90aWY6IEFzdGFsTm90aWZkLk5vdGlmaWNhdGlvbikgPT4gdm9pZCk6IHZvaWQge1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgdGhpcy4jbm90aWZpY2F0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMuI25vdGlmaWNhdGlvbnNbaV07XG5cbiAgICAgICAgICAgIGlmKGl0ZW0uaWQgIT09IG5vdGlmLmlkKSBjb250aW51ZTtcblxuICAgICAgICAgICAgdGhpcy4jbm90aWZpY2F0aW9ucy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICB0aGlzLmVtaXQoXCJub3RpZmljYXRpb24tcmVwbGFjZWRcIiwgaXRlbS5pZCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuI25vdGlmaWNhdGlvbnMudW5zaGlmdChub3RpZik7XG4gICAgICAgIHRoaXMubm90aWZ5KFwibm90aWZpY2F0aW9uc1wiKTtcbiAgICAgICAgdGhpcy5lbWl0KFwibm90aWZpY2F0aW9uLWFkZGVkXCIsIG5vdGlmKTtcbiAgICAgICAgb25BZGRlZD8uKG5vdGlmKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVtb3ZlTm90aWZpY2F0aW9uKG5vdGlmOiAoQXN0YWxOb3RpZmQuTm90aWZpY2F0aW9ufG51bWJlcikpOiB2b2lkIHtcbiAgICAgICAgY29uc3Qgbm90aWZpY2F0aW9uSWQgPSAobm90aWYgaW5zdGFuY2VvZiBBc3RhbE5vdGlmZC5Ob3RpZmljYXRpb24pID8gbm90aWYuaWQgOiBub3RpZjtcbiAgICAgICAgdGhpcy4jbm90aWZpY2F0aW9uc09uSG9sZC5oYXMobm90aWZpY2F0aW9uSWQpICYmIFxuICAgICAgICAgICAgdGhpcy4jbm90aWZpY2F0aW9uc09uSG9sZC5kZWxldGUobm90aWZpY2F0aW9uSWQpO1xuXG4gICAgICAgIHRoaXMuI25vdGlmaWNhdGlvbnMgPSB0aGlzLiNub3RpZmljYXRpb25zLmZpbHRlcigoaXRlbTogQXN0YWxOb3RpZmQuTm90aWZpY2F0aW9uKSA9PlxuICAgICAgICAgICAgaXRlbS5pZCAhPT0gbm90aWZpY2F0aW9uSWQpO1xuXG4gICAgICAgIEFzdGFsTm90aWZkLmdldF9kZWZhdWx0KCkuZ2V0X25vdGlmaWNhdGlvbihub3RpZmljYXRpb25JZCk/LmRpc21pc3MoKTtcbiAgICAgICAgdGhpcy5ub3RpZnkoXCJub3RpZmljYXRpb25zXCIpO1xuICAgICAgICB0aGlzLmVtaXQoXCJub3RpZmljYXRpb24tcmVtb3ZlZFwiLCBub3RpZmljYXRpb25JZCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXROb3RpZmljYXRpb25CeUlkKGlkOiBudW1iZXIpOiBBc3RhbE5vdGlmZC5Ob3RpZmljYXRpb258dW5kZWZpbmVkIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI25vdGlmaWNhdGlvbnMuZmlsdGVyKG5vdGlmID0+IG5vdGlmLmlkID09PSBpZCk/LlswXTtcbiAgICB9XG5cbiAgICBwdWJsaWMgaG9sZE5vdGlmaWNhdGlvbihub3RpZjogKEFzdGFsTm90aWZkLk5vdGlmaWNhdGlvbnxudW1iZXIpKTogdm9pZCB7XG4gICAgICAgIG5vdGlmID0gKHR5cGVvZiBub3RpZiA9PT0gXCJudW1iZXJcIikgPyBcbiAgICAgICAgICAgIHRoaXMuZ2V0Tm90aWZpY2F0aW9uQnlJZChub3RpZikhXG4gICAgICAgIDogbm90aWY7XG5cbiAgICAgICAgaWYoIW5vdGlmKSByZXR1cm47XG5cbiAgICAgICAgdGhpcy4jbm90aWZpY2F0aW9uc09uSG9sZC5hZGQobm90aWYuaWQpO1xuICAgIH1cblxuICAgIHB1YmxpYyB0b2dnbGVEb05vdERpc3R1cmIodmFsdWU/OiBib29sZWFuKTogYm9vbGVhbiB7XG4gICAgICAgIHZhbHVlID0gdmFsdWUgPz8gIUFzdGFsTm90aWZkLmdldF9kZWZhdWx0KCkuZG9udERpc3R1cmI7XG4gICAgICAgIEFzdGFsTm90aWZkLmdldF9kZWZhdWx0KCkuZG9udERpc3R1cmIgPSB2YWx1ZTtcblxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgcHVibGljIGdldE5vdGlmZCgpOiBBc3RhbE5vdGlmZC5Ob3RpZmQgeyByZXR1cm4gQXN0YWxOb3RpZmQuZ2V0X2RlZmF1bHQoKTsgfVxufVxuXG5leHBvcnQgeyBOb3RpZmljYXRpb25zIH07XG4iLCAiaW1wb3J0IHsgdGltZW91dCB9IGZyb20gXCJhZ3MvdGltZVwiO1xuaW1wb3J0IHsgbW9uaXRvckZpbGUsIHJlYWRGaWxlQXN5bmMgfSBmcm9tIFwiYWdzL2ZpbGVcIjtcbmltcG9ydCB7IE5vdGlmaWNhdGlvbnMgfSBmcm9tIFwiLi9ub3RpZmljYXRpb25zXCI7XG5pbXBvcnQgeyBlbmNvZGVyIH0gZnJvbSBcIi4vdXRpbHNcIjtcbmltcG9ydCBHT2JqZWN0LCB7IGdldHRlciwgcmVnaXN0ZXIgfSBmcm9tIFwiYWdzL2dvYmplY3RcIjtcblxuaW1wb3J0IEdMaWIgZnJvbSBcImdpOi8vR0xpYj92ZXJzaW9uPTIuMFwiO1xuaW1wb3J0IEdpbyBmcm9tIFwiZ2k6Ly9HaW8/dmVyc2lvbj0yLjBcIjtcbmltcG9ydCBBc3RhbElPIGZyb20gXCJnaTovL0FzdGFsSU9cIjtcbmltcG9ydCBBc3RhbE5vdGlmZCBmcm9tIFwiZ2k6Ly9Bc3RhbE5vdGlmZFwiO1xuaW1wb3J0IHsgQWNjZXNzb3IgfSBmcm9tIFwiYWdzXCI7XG5cblxuZXhwb3J0IHsgQ29uZmlnIH07XG5cbmV4cG9ydCB0eXBlIENvbmZpZ0VudHJpZXMgPSBQYXJ0aWFsPHtcbiAgICB3b3Jrc3BhY2VzOiBQYXJ0aWFsPHtcbiAgICAgICAgLyoqIHRoaXMgaXMgdGhlIGZ1bmN0aW9uIHRoYXQgc2hvd3MgdGhlIFdvcmtzcGFjZSdzIElEcyBcbiAgICAgICAgKiBhcm91bmQgdGhlIGN1cnJlbnQgd29ya3NwYWNlIGlmIG9uZSBicmVha3MgdGhlIGNyZXNjZW50IG9yZGVyLlxuICAgICAgICAqIEl0IGJhc2ljYWxseSBoZWxwcyBrZXlib2FyZCBuYXZpZ2F0aW9uIGJldHdlZW4gd29ya3NwYWNlcy5cbiAgICAgICAgKiAtLS1cbiAgICAgICAgKiBFeGFtcGxlOiAxKGVtcHR5LCBjdXJyZW50LCBzaG93cyBJRCksIDIoZW1wdHksIGRvZXMgbm90IGFwcGVhcihtYWtlcyBcbiAgICAgICAgKiB0aGUgcHJldmlvdXMgbm90IHRvIGJlIGluIGEgY3Jlc2NlbnQgb3JkZXIpKSwgMyhub3QgZW1wdHksIHNob3dzIElEKSAqL1xuICAgICAgICBlbmFibGVfaGVscGVyOiBib29sZWFuO1xuICAgICAgICAvKiogYnJlYWtzIGBlbmFibGVfaGVscGVyYCwgbWFrZXMgYWxsIHdvcmtzcGFjZXMgc2hvdyB0aGVpciByZXNwZWN0aXZlIElEIFxuICAgICAgICAqIGJ5IGRlZmF1bHQgKi9cbiAgICAgICAgYWx3YXlzX3Nob3dfaWQ6IGJvb2xlYW47XG4gICAgfT47XG5cbiAgICBjbG9jazogUGFydGlhbDx7XG4gICAgICAgIC8qKiB1c2UgdGhlIHNhbWUgZm9ybWF0IGFzIGdudSdzIGBkYXRlYCBjb21tYW5kICovXG4gICAgICAgIGRhdGVfZm9ybWF0OiBzdHJpbmc7XG4gICAgfT47XG5cbiAgICBub3RpZmljYXRpb25zOiBQYXJ0aWFsPHtcbiAgICAgICAgdGltZW91dF9sb3c6IG51bWJlcjtcbiAgICAgICAgdGltZW91dF9ub3JtYWw6IG51bWJlcjtcbiAgICAgICAgdGltZW91dF9jcml0aWNhbDogbnVtYmVyO1xuICAgIH0+O1xuXG4gICAgbmlnaHRfbGlnaHQ6IFBhcnRpYWw8e1xuICAgICAgICAvKiogd2hldGhlciB0byBzYXZlIG5pZ2h0IGxpZ2h0IHZhbHVlcyB0byBkaXNrICovXG4gICAgICAgIHNhdmVfb25fc2h1dGRvd246IGJvb2xlYW47XG4gICAgfT47XG5cbiAgICBtaXNjOiBQYXJ0aWFsPHtcbiAgICAgICAgcGxheV9iZWxsX29uX3ZvbHVtZV9jaGFuZ2U6IGJvb2xlYW47XG4gICAgfT47XG59PjtcblxudHlwZSBWYWx1ZVR5cGVzID0gXCJzdHJpbmdcIiB8IFwiYm9vbGVhblwiIHwgXCJvYmplY3RcIiB8IFwibnVtYmVyXCIgfCBcInVuZGVmaW5lZFwiIHwgXCJhbnlcIjtcblxuaW50ZXJmYWNlIENvbmZpZ1NpZ25hbHMgZXh0ZW5kcyBHT2JqZWN0Lk9iamVjdC5TaWduYWxTaWduYXR1cmVzIHtcbiAgICBcIm5vdGlmeTo6ZW50cmllc1wiOiAoZW50cmllczogQ29uZmlnRW50cmllcykgPT4gdm9pZDtcbn1cblxuQHJlZ2lzdGVyKHsgR1R5cGVOYW1lOiBcIkNvbmZpZ1wiIH0pXG5jbGFzcyBDb25maWcgZXh0ZW5kcyBHT2JqZWN0Lk9iamVjdCB7XG4gICAgcHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2U6IENvbmZpZztcblxuICAgIGRlY2xhcmUgJHNpZ25hbHM6IENvbmZpZ1NpZ25hbHM7XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IGRlZmF1bHRGaWxlID0gR2lvLkZpbGUubmV3X2Zvcl9wYXRoKFxuICAgICAgICBgJHtHTGliLmdldF91c2VyX2NvbmZpZ19kaXIoKX0vY29sb3JzaGVsbC9jb25maWcuanNvbmApO1xuXG4gICAgLyoqIHVubW9kaWZpZWQgb2JqZWN0IHdpdGggZGVmYXVsdCBlbnRyaWVzLiBVc2VyLXZhbHVlcyBhcmUgc3RvcmVkIFxuICAgICogaW4gdGhlIGBlbnRyaWVzYCBmaWVsZCAqL1xuICAgIHB1YmxpYyByZWFkb25seSBkZWZhdWx0czogQ29uZmlnRW50cmllcyA9IHtcbiAgICAgICAgbm90aWZpY2F0aW9uczoge1xuICAgICAgICAgICAgdGltZW91dF9sb3c6IDQwMDAsXG4gICAgICAgICAgICB0aW1lb3V0X25vcm1hbDogNjAwMCxcbiAgICAgICAgICAgIHRpbWVvdXRfY3JpdGljYWw6IDBcbiAgICAgICAgfSxcblxuICAgICAgICBuaWdodF9saWdodDoge1xuICAgICAgICAgICAgc2F2ZV9vbl9zaHV0ZG93bjogdHJ1ZVxuICAgICAgICB9LFxuXG4gICAgICAgIHdvcmtzcGFjZXM6IHtcbiAgICAgICAgICAgIGFsd2F5c19zaG93X2lkOiBmYWxzZSxcbiAgICAgICAgICAgIGVuYWJsZV9oZWxwZXI6IHRydWVcbiAgICAgICAgfSxcblxuICAgICAgICBjbG9jazoge1xuICAgICAgICAgICAgZGF0ZV9mb3JtYXQ6IFwiJUEgJWQsICVIOiVNXCJcbiAgICAgICAgfSxcblxuICAgICAgICBtaXNjOiB7XG4gICAgICAgICAgICBwbGF5X2JlbGxfb25fdm9sdW1lX2NoYW5nZTogdHJ1ZVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIEBnZXR0ZXIoT2JqZWN0KVxuICAgIHB1YmxpYyBnZXQgZW50cmllcygpIHsgcmV0dXJuIHRoaXMuI2VudHJpZXM7IH1cblxuICAgICNmaWxlOiBHaW8uRmlsZTtcbiAgICAjZW50cmllczogQ29uZmlnRW50cmllcyA9IHRoaXMuZGVmYXVsdHM7XG5cbiAgICBwcml2YXRlIHRpbWVvdXQ6IChBc3RhbElPLlRpbWV8Ym9vbGVhbnx1bmRlZmluZWQpO1xuICAgIHB1YmxpYyBnZXQgZmlsZSgpIHsgcmV0dXJuIHRoaXMuI2ZpbGU7IH07XG5cbiAgICBjb25zdHJ1Y3RvcihmaWxlUGF0aD86IChHaW8uRmlsZXxzdHJpbmcpKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy4jZmlsZSA9ICh0eXBlb2YgZmlsZVBhdGggPT09IFwic3RyaW5nXCIpID8gXG4gICAgICAgICAgICBHaW8uRmlsZS5uZXdfZm9yX3BhdGgoZmlsZVBhdGgpXG4gICAgICAgIDogKGZpbGVQYXRoID8/IHRoaXMuZGVmYXVsdEZpbGUpO1xuXG4gICAgICAgIGlmKCF0aGlzLiNmaWxlLnF1ZXJ5X2V4aXN0cyhudWxsKSkge1xuICAgICAgICAgICAgdGhpcy4jZmlsZS5tYWtlX2RpcmVjdG9yeV93aXRoX3BhcmVudHMobnVsbCk7XG4gICAgICAgICAgICB0aGlzLiNmaWxlLmRlbGV0ZShudWxsKTtcblxuICAgICAgICAgICAgdGhpcy4jZmlsZS5jcmVhdGVfcmVhZHdyaXRlX2FzeW5jKFxuICAgICAgICAgICAgICAgIEdpby5GaWxlQ3JlYXRlRmxhZ3MuTk9ORSwgR0xpYi5QUklPUklUWV9ERUZBVUxULCBcbiAgICAgICAgICAgICAgICBudWxsLCAoXywgYXN5bmNSZXMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW9TdHJlYW0gPSB0aGlzLiNmaWxlLmNyZWF0ZV9yZWFkd3JpdGVfZmluaXNoKGFzeW5jUmVzKTtcblxuICAgICAgICAgICAgICAgICAgICBpb1N0cmVhbS5vdXRwdXRTdHJlYW0ud3JpdGVfYnl0ZXNfYXN5bmMoXG4gICAgICAgICAgICAgICAgICAgICAgICBHTGliLkJ5dGVzLm5ldyhlbmNvZGVyLmVuY29kZShKU09OLnN0cmluZ2lmeSh0aGlzLmVudHJpZXMsIHVuZGVmaW5lZCwgNCkpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIEdMaWIuUFJJT1JJVFlfREVGQVVMVCwgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIChfLCBhc3luY1JlcykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHdyaXR0ZW5CeXRlcyA9IGlvU3RyZWFtLm91dHB1dFN0cmVhbS53cml0ZV9ieXRlc19maW5pc2goYXN5bmNSZXMpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIXdyaXR0ZW5CeXRlcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTm90aWZpY2F0aW9ucy5nZXREZWZhdWx0KCkuc2VuZE5vdGlmaWNhdGlvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBOYW1lOiBcImNvbG9yc2hlbGxcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1bW1hcnk6IFwiV3JpdGUgZXJyb3JcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvZHk6IGBDb3VsZG4ndCB3cml0ZSBkZWZhdWx0IGNvbmZpZ3VyYXRpb24gZmlsZSB0byBcIiR7dGhpcy4jZmlsZS5nZXRfcGF0aCgpIX1cImBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBtb25pdG9yRmlsZSh0aGlzLiNmaWxlLmdldF9wYXRoKCkhLCBcbiAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZih0aGlzLnRpbWVvdXQpIHJldHVybjtcbiAgICAgICAgICAgICAgICB0aGlzLnRpbWVvdXQgPSB0aW1lb3V0KDUwMCwgKCkgPT4gdGhpcy50aW1lb3V0ID0gdW5kZWZpbmVkKTtcblxuICAgICAgICAgICAgICAgIGlmKHRoaXMuI2ZpbGUucXVlcnlfZXhpc3RzKG51bGwpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGltZW91dD8uY2FuY2VsKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGltZW91dCA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWFkRmlsZSgpLmZpbmFsbHkoKCkgPT4gXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRpbWVvdXQgPSB1bmRlZmluZWQpO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBOb3RpZmljYXRpb25zLmdldERlZmF1bHQoKS5zZW5kTm90aWZpY2F0aW9uKHtcbiAgICAgICAgICAgICAgICAgICAgYXBwTmFtZTogXCJjb2xvcnNoZWxsXCIsXG4gICAgICAgICAgICAgICAgICAgIHN1bW1hcnk6IFwiQ29uZmlnIGVycm9yXCIsXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6IGBDb3VsZCBub3QgaG90LXJlbG9hZCBjb25maWd1cmF0aW9uOiBjb25maWcgZmlsZSBub3QgZm91bmQgaW4gXFxgJHt0aGlzLiNmaWxlLmdldF9wYXRoKCkhfVxcYCwgbGFzdCB2YWxpZCBjb25maWd1cmF0aW9uIGlzIGJlaW5nIHVzZWQuIE1heWJlIGl0IGdvdCBkZWxldGVkP2BcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGdldERlZmF1bHQoKTogQ29uZmlnIHtcbiAgICAgICAgaWYoIXRoaXMuaW5zdGFuY2UpXG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlID0gbmV3IENvbmZpZygpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmluc3RhbmNlO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgcmVhZEZpbGUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGF3YWl0IHJlYWRGaWxlQXN5bmModGhpcy4jZmlsZS5nZXRfcGF0aCgpISkudGhlbigoY29udGVudCkgPT4ge1xuICAgICAgICAgICAgbGV0IGNvbmZpZzogKENvbmZpZ0VudHJpZXN8dW5kZWZpbmVkKTtcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25maWcgPSBKU09OLnBhcnNlKGNvbnRlbnQpIGFzIENvbmZpZ0VudHJpZXM7XG4gICAgICAgICAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgICAgICAgICBOb3RpZmljYXRpb25zLmdldERlZmF1bHQoKS5zZW5kTm90aWZpY2F0aW9uKHtcbiAgICAgICAgICAgICAgICAgICAgdXJnZW5jeTogQXN0YWxOb3RpZmQuVXJnZW5jeS5OT1JNQUwsXG4gICAgICAgICAgICAgICAgICAgIGFwcE5hbWU6IFwiY29sb3JzaGVsbFwiLFxuICAgICAgICAgICAgICAgICAgICBzdW1tYXJ5OiBcIkNvbmZpZyBwYXJzaW5nIGVycm9yXCIsXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6IGBBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSBwYXJzaW5nIGNvbG9yc2hlbGwncyBjb25maWcgZmlsZTogXFxuRmlsZTogJHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuI2ZpbGUuZ2V0X3BhdGgoKSF9XFxuJHtcbiAgICAgICAgICAgICAgICAgICAgICAgIChlIGFzIFN5bnRheEVycm9yKS5tZXNzYWdlfVxcbiR7KGUgYXMgU3ludGF4RXJyb3IpLnN0YWNrfWBcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYoIWNvbmZpZykgcmV0dXJuO1xuXG5cbiAgICAgICAgICAgIC8vIG9ubHkgY2hhbmdlIHZhbGlkIGVudHJpZXMgdGhhdCBhcmUgYXZhaWxhYmxlIGluIHRoZSBkZWZhdWx0cyAod2l0aCAxIG9mIGRlcHRoKVxuICAgICAgICAgICAgZm9yKGNvbnN0IGsgb2YgT2JqZWN0LmtleXModGhpcy5lbnRyaWVzKSkge1xuICAgICAgICAgICAgICAgIGlmKGNvbmZpZ1trIGFzIGtleW9mIHR5cGVvZiBjb25maWddID09PSB1bmRlZmluZWQpIFxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgICAgICAgICAvLyBUT0RPIG5lZWRzIG1vcmUgd29yaywgbGlrZSBvYmplY3QtcmVjdXJzaXZlKGluZmluaXRlIGRlcHRoKSBlbnRyeSBhdHRyaWJ1dGlvbnNcbiAgICAgICAgICAgICAgICB0aGlzLmVudHJpZXNbayBhcyBrZXlvZiB0eXBlb2YgdGhpcy5lbnRyaWVzXSA9IGNvbmZpZ1trIGFzIGtleW9mIHR5cGVvZiBjb25maWddO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLm5vdGlmeShcImVudHJpZXNcIik7XG4gICAgICAgIH0pLmNhdGNoKChlOiBHaW8uSU9FcnJvckVudW0pID0+IHtcbiAgICAgICAgICAgIE5vdGlmaWNhdGlvbnMuZ2V0RGVmYXVsdCgpLnNlbmROb3RpZmljYXRpb24oe1xuICAgICAgICAgICAgICAgICAgICB1cmdlbmN5OiBBc3RhbE5vdGlmZC5VcmdlbmN5Lk5PUk1BTCxcbiAgICAgICAgICAgICAgICAgICAgYXBwTmFtZTogXCJjb2xvcnNoZWxsXCIsXG4gICAgICAgICAgICAgICAgICAgIHN1bW1hcnk6IFwiQ29uZmlnIHJlYWQgZXJyb3JcIixcbiAgICAgICAgICAgICAgICAgICAgYm9keTogYEFuIGVycm9yIG9jY3VycmVkIHdoaWxlIHJlYWRpbmcgY29sb3JzaGVsbCdzIGNvbmZpZyBmaWxlOiBcXG5GaWxlOiAke2Ake1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4jZmlsZS5nZXRfcGF0aCgpIX1cXG4ke2UubWVzc2FnZSA/IGAke2UubWVzc2FnZX1cXG5gIDogXCJcIn0ke2Uuc3RhY2t9YC5yZXBsYWNlKC9bPD5dL2csIFwiXFxcXCZcIil9YFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYmluZFByb3BlcnR5KHByb3BlcnR5UGF0aDogKGtleW9mIENvbmZpZ0VudHJpZXN8c3RyaW5nKSwgZXhwZWN0VHlwZT86IFZhbHVlVHlwZXMpOiBBY2Nlc3Nvcjxhbnl8dW5kZWZpbmVkPiB7XG4gICAgICAgIHJldHVybiBuZXcgQWNjZXNzb3I8Q29uZmlnRW50cmllcz4oKCkgPT4gdGhpcy5nZXRQcm9wZXJ0eShwcm9wZXJ0eVBhdGgsIGV4cGVjdFR5cGUpLCAoY2FsbGJhY2s6ICgpID0+IHZvaWQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGlkID0gdGhpcy5jb25uZWN0KFwibm90aWZ5OjplbnRyaWVzXCIsICgpID0+IGNhbGxiYWNrKCkpO1xuICAgICAgICAgICAgcmV0dXJuICgpID0+IHRoaXMuZGlzY29ubmVjdChpZCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRQcm9wZXJ0eShwYXRoOiBzdHJpbmcsIGV4cGVjdFR5cGU/OiBWYWx1ZVR5cGVzKTogKGFueXx1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldFByb3BlcnR5KHBhdGgsIHRoaXMuZW50cmllcywgZXhwZWN0VHlwZSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFByb3BlcnR5RGVmYXVsdChwYXRoOiBzdHJpbmcsIGV4cGVjdFR5cGU/OiBWYWx1ZVR5cGVzKTogKGFueXx1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldFByb3BlcnR5KHBhdGgsIHRoaXMuZGVmYXVsdHMsIGV4cGVjdFR5cGUpO1xuICAgIH1cblxuICAgIHByaXZhdGUgX2dldFByb3BlcnR5KHBhdGg6IHN0cmluZywgZW50cmllczogQ29uZmlnRW50cmllcywgZXhwZWN0VHlwZT86IFZhbHVlVHlwZXMpOiAoYW55fHVuZGVmaW5lZCkge1xuICAgICAgICBsZXQgcHJvcGVydHk6IGFueSA9IGVudHJpZXM7XG4gICAgICAgIGNvbnN0IHBhdGhBcnJheSA9IHBhdGguc3BsaXQoJy4nKS5maWx0ZXIoc3RyID0+IHN0cik7XG5cbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHBhdGhBcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgY3VycmVudFBhdGggPSBwYXRoQXJyYXlbaV07XG5cbiAgICAgICAgICAgIHByb3BlcnR5ID0gcHJvcGVydHlbY3VycmVudFBhdGggYXMga2V5b2YgdHlwZW9mIHByb3BlcnR5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKGV4cGVjdFR5cGUgIT09IFwiYW55XCIgJiYgdHlwZW9mIHByb3BlcnR5ICE9PSBleHBlY3RUeXBlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBDb25maWc6IHByb3BlcnR5IHdpdGggcGF0aCBcXGAke3BhdGhcbiAgICAgICAgICAgICAgICB9XFxgIGlzIGVpdGhlciBcXGB1bmRlZmluZWRcXGAgb3Igbm90IGluIHRoZSBleHBlY3RlZCB2YWx1ZSB0eXBlIFxcYCR7ZXhwZWN0VHlwZVxuICAgICAgICAgICAgICAgIH1cXGAsIHJldHVybmluZyBkZWZhdWx0IHZhbHVlYCk7XG5cbiAgICAgICAgICAgIHByb3BlcnR5ID0gdGhpcy5kZWZhdWx0cztcblxuICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHBhdGhBcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRQYXRoID0gcGF0aEFycmF5W2ldO1xuXG4gICAgICAgICAgICAgICAgcHJvcGVydHkgPSBwcm9wZXJ0eVtjdXJyZW50UGF0aCBhcyBrZXlvZiB0eXBlb2YgcHJvcGVydHldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYoZXhwZWN0VHlwZSAhPT0gXCJhbnlcIiAmJiB0eXBlb2YgcHJvcGVydHkgIT09IGV4cGVjdFR5cGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYENvbmZpZzogcHJvcGVydHkgd2l0aCBwYXRoIFxcYCR7cGF0aH1cXGAgbm90IGZvdW5kIGluIGRlZmF1bHRzL3VzZXItZW50cmllcywgcmV0dXJuaW5nIFxcYHVuZGVmaW5lZFxcYGApO1xuICAgICAgICAgICAgcHJvcGVydHkgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcHJvcGVydHk7XG4gICAgfVxufVxuIiwgImltcG9ydCB7IEFjY2Vzc29yIH0gZnJvbSBcImFnc1wiO1xuaW1wb3J0IHsgR3RrIH0gZnJvbSBcImFncy9ndGs0XCI7XG5cblxuZXhwb3J0IGludGVyZmFjZSBTZXBhcmF0b3JQcm9wcyB7XG4gICAgY2xhc3M/OiBzdHJpbmc7XG4gICAgYWxwaGE/OiBudW1iZXI7XG4gICAgY3NzQ29sb3I/OiBzdHJpbmc7XG4gICAgb3JpZW50YXRpb24/OiBHdGsuT3JpZW50YXRpb247XG4gICAgc2l6ZT86IG51bWJlcjtcbiAgICBzcGFjaW5nPzogbnVtYmVyO1xuICAgIG1hcmdpbj86IG51bWJlcjtcbiAgICB2aXNpYmxlPzogYm9vbGVhbiB8IEFjY2Vzc29yPGJvb2xlYW4+O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gU2VwYXJhdG9yKHByb3BzOiBTZXBhcmF0b3JQcm9wcyA9IHtcbiAgICBvcmllbnRhdGlvbjogR3RrLk9yaWVudGF0aW9uLkhPUklaT05UQUxcbn0pIHtcbiAgICBwcm9wcy5hbHBoYSA9IHByb3BzLmFscGhhID8gXG4gICAgICAgIChwcm9wcy5hbHBoYSA+IDEgPyBcbiAgICAgICAgICAgIHByb3BzLmFscGhhIC8gMTAwXG4gICAgICAgIDogcHJvcHMuYWxwaGEpXG4gICAgOiAxO1xuXG4gICAgcHJvcHMub3JpZW50YXRpb24gPSBwcm9wcy5vcmllbnRhdGlvbiA/PyBHdGsuT3JpZW50YXRpb24uSE9SSVpPTlRBTDtcblxuICAgIHJldHVybiA8R3RrLkJveCBuYW1lPXtcInNlcGFyYXRvclwifSB2ZXhwYW5kPXtwcm9wcy5vcmllbnRhdGlvbiA9PT0gR3RrLk9yaWVudGF0aW9uLkhPUklaT05UQUx9XG4gICAgICBoZXhwYW5kPXtwcm9wcy5vcmllbnRhdGlvbiA9PT0gR3RrLk9yaWVudGF0aW9uLlZFUlRJQ0FMfVxuICAgICAgY2xhc3M9e2BzZXBhcmF0b3IgJHsgcHJvcHMub3JpZW50YXRpb24gPT09IEd0ay5PcmllbnRhdGlvbi5WRVJUSUNBTCA/IFxuICAgICAgICBcInZlcnRpY2FsXCIgOiBcImhvcml6b250YWxcIiB9YH0gdmlzaWJsZT17cHJvcHMudmlzaWJsZX1cbiAgICAgIGNzcz17YC52ZXJ0aWNhbCB7IHBhZGRpbmc6ICR7cHJvcHMuc3BhY2luZyA/PyAwfXB4ICR7cHJvcHMubWFyZ2luID8/IDd9cHg7IH1cbiAgICAgICAgLmhvcml6b250YWwgeyBwYWRkaW5nOiAke3Byb3BzLm1hcmdpbiA/PyA0fXB4ICR7cHJvcHMuc3BhY2luZyA/PyAwfXB4OyB9YH0+XG5cbiAgICAgICAgPEd0ay5Cb3ggY2xhc3M9e2Ake3Byb3BzLm9yaWVudGF0aW9uID09PSBHdGsuT3JpZW50YXRpb24uVkVSVElDQUwgPyBcbiAgICAgICAgICAgIFwidmVydGljYWxcIlxuICAgICAgICAgIDogXCJob3Jpem9udGFsXCJ9ICR7cHJvcHMuY2xhc3MgPz8gXCJcIn1gfVxuICAgICAgICAgIHZleHBhbmQ9e3Byb3BzLm9yaWVudGF0aW9uID09PSBHdGsuT3JpZW50YXRpb24uSE9SSVpPTlRBTH1cbiAgICAgICAgICBoZXhwYW5kPXtwcm9wcy5vcmllbnRhdGlvbiA9PT0gR3RrLk9yaWVudGF0aW9uLlZFUlRJQ0FMfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBjc3M9e2AqIHtcbiAgICAgICAgICAgICAgYmFja2dyb3VuZDogJHsgcHJvcHMuY3NzQ29sb3IgPz8gXCJsaWdodGdyYXlcIiB9O1xuICAgICAgICAgICAgICBvcGFjaXR5OiAke3Byb3BzLmFscGhhfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC5ob3Jpem9udGFsIHsgbWluLXdpZHRoOiAkeyBwcm9wcy5zaXplID8/IDEgfXB4OyB9XG4gICAgICAgICAgICAudmVydGljYWwgeyBtaW4taGVpZ2h0OiAkeyBwcm9wcy5zaXplID8/IDEgfXB4OyB9YH0gXG4gICAgICAgIC8+XG4gICAgPC9HdGsuQm94PlxufVxuIiwgImltcG9ydCB7IEd0ayB9IGZyb20gXCJhZ3MvZ3RrNFwiO1xuaW1wb3J0IEFzdGFsSHlwcmxhbmQgZnJvbSBcImdpOi8vQXN0YWxIeXBybGFuZFwiO1xuaW1wb3J0IHsgY3JlYXRlQmluZGluZywgV2l0aCB9IGZyb20gXCJhZ3NcIjtcbmltcG9ydCB7IHZhcmlhYmxlVG9Cb29sZWFuIH0gZnJvbSBcIi4uLy4uL3NjcmlwdHMvdXRpbHNcIjtcbmltcG9ydCB7IGdldEFwcEljb24sIGdldFN5bWJvbGljSWNvbiB9IGZyb20gXCIuLi8uLi9zY3JpcHRzL2FwcHNcIjtcbmltcG9ydCBQYW5nbyBmcm9tIFwiZ2k6Ly9QYW5nbz92ZXJzaW9uPTEuMFwiO1xuXG5jb25zdCBoeXBybGFuZCA9IEFzdGFsSHlwcmxhbmQuZ2V0X2RlZmF1bHQoKTtcblxuLy8gRml4IGVtcHR5IGZvY3VzZWQtY2xpZW50IG9uIG9wZW5pbmcgYSB3aW5kb3cgb24gYW4gZW1wdHkgd29ya3NwYWNlXG5oeXBybGFuZC5jb25uZWN0KFwiY2xpZW50LWFkZGVkXCIsICgpID0+IGh5cHJsYW5kLm5vdGlmeShcImZvY3VzZWQtY2xpZW50XCIpKTtcblxuZXhwb3J0IGNvbnN0IEZvY3VzZWRDbGllbnQgPSAoKSA9PiB7XG4gICAgY29uc3QgZm9jdXNlZENsaWVudCA9IGNyZWF0ZUJpbmRpbmcoaHlwcmxhbmQsIFwiZm9jdXNlZENsaWVudFwiKTtcblxuICAgIHJldHVybiA8R3RrLkJveCBjbGFzcz17XCJmb2N1c2VkLWNsaWVudFwifSBcbiAgICAgIHZpc2libGU9e3ZhcmlhYmxlVG9Cb29sZWFuKGNyZWF0ZUJpbmRpbmcoaHlwcmxhbmQsIFwiZm9jdXNlZENsaWVudFwiKSl9PlxuICAgICAgICA8V2l0aCB2YWx1ZT17Zm9jdXNlZENsaWVudH0+XG4gICAgICAgICAgICB7KGZvY3VzZWRDbGllbnQpID0+IGZvY3VzZWRDbGllbnQgJiYgPEd0ay5Cb3g+XG4gICAgICAgICAgICAgICAgPEd0ay5JbWFnZSBpY29uTmFtZT17XG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZUJpbmRpbmcoZm9jdXNlZENsaWVudCwgXCJjbGFzc1wiKS5hcygoY2xzcykgPT4gXG4gICAgICAgICAgICAgICAgICAgICAgICBnZXRTeW1ib2xpY0ljb24oY2xzcykgPz8gZ2V0QXBwSWNvbihjbHNzKSA/PyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0QXBwSWNvbihmb2N1c2VkQ2xpZW50LmluaXRpYWxDbGFzcykgPz8gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImFwcGxpY2F0aW9uLXgtZXhlY3V0YWJsZS1zeW1ib2xpY1wiKVxuICAgICAgICAgICAgICAgICAgfSB2ZXhwYW5kPXt0cnVlfSAvPlxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIDxHdGsuQm94IHZhbGlnbj17R3RrLkFsaWduLkNFTlRFUn0gY2xhc3M9e1widGV4dC1jb250ZW50XCJ9IFxuICAgICAgICAgICAgICAgICAgb3JpZW50YXRpb249e0d0ay5PcmllbnRhdGlvbi5WRVJUSUNBTH0+XG5cbiAgICAgICAgICAgICAgICAgICAgPEd0ay5MYWJlbCBjbGFzcz17XCJjbGFzc1wifSB4YWxpZ249ezB9IG1heFdpZHRoQ2hhcnM9ezU1fSBcbiAgICAgICAgICAgICAgICAgICAgICBlbGxpcHNpemU9e1BhbmdvLkVsbGlwc2l6ZU1vZGUuRU5EfSBcbiAgICAgICAgICAgICAgICAgICAgICBsYWJlbD17Y3JlYXRlQmluZGluZyhmb2N1c2VkQ2xpZW50LCBcImNsYXNzXCIpfVxuICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXBUZXh0PXtjcmVhdGVCaW5kaW5nKGZvY3VzZWRDbGllbnQsIFwiY2xhc3NcIil9Lz5cbiAgICAgICAgICAgICAgICAgICAgPEd0ay5MYWJlbCBjbGFzcz17XCJ0aXRsZVwifSB4YWxpZ249ezB9IG1heFdpZHRoQ2hhcnM9ezUwfSBcbiAgICAgICAgICAgICAgICAgICAgICBlbGxpcHNpemU9e1BhbmdvLkVsbGlwc2l6ZU1vZGUuRU5EfSBcbiAgICAgICAgICAgICAgICAgICAgICBsYWJlbD17Y3JlYXRlQmluZGluZyhmb2N1c2VkQ2xpZW50LCBcInRpdGxlXCIpfVxuICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXBUZXh0PXtjcmVhdGVCaW5kaW5nKGZvY3VzZWRDbGllbnQsIFwidGl0bGVcIil9Lz5cbiAgICAgICAgICAgICAgICA8L0d0ay5Cb3g+XG4gICAgICAgICAgICA8L0d0ay5Cb3g+fVxuICAgICAgICA8L1dpdGg+XG4gICAgPC9HdGsuQm94Pjtcbn1cbiIsICJpbXBvcnQgQXN0YWxJTyBmcm9tIFwiZ2k6Ly9Bc3RhbElPXCI7XG5pbXBvcnQgR0xpYiBmcm9tIFwiZ2k6Ly9HTGliP3ZlcnNpb249Mi4wXCI7XG5pbXBvcnQgR2lvIGZyb20gXCJnaTovL0dpbz92ZXJzaW9uPTIuMFwiO1xuXG5pbXBvcnQgR09iamVjdCwgeyBnZXR0ZXIsIHJlZ2lzdGVyLCBzaWduYWwgfSBmcm9tIFwiYWdzL2dvYmplY3RcIjtcbmltcG9ydCB7IHRpbWVvdXQgfSBmcm9tIFwiYWdzL3RpbWVcIjtcbmltcG9ydCB7IG1vbml0b3JGaWxlLCByZWFkRmlsZSB9IGZyb20gXCJhZ3MvZmlsZVwiOyBcbmltcG9ydCB7IGV4ZWNBc3luYyB9IGZyb20gXCJhZ3MvcHJvY2Vzc1wiO1xuXG5cbmludGVyZmFjZSBDbGlwYm9hcmRTaWduYWxzIGV4dGVuZHMgR09iamVjdC5PYmplY3QuU2lnbmFsU2lnbmF0dXJlcyB7XG4gICAgY29waWVkOiBDbGlwYm9hcmRbXCJjb3BpZWRcIl07XG4gICAgd2lwZWQ6IENsaXBib2FyZFtcIndpcGVkXCJdO1xufTtcblxuZXhwb3J0IGVudW0gQ2xpcGJvYXJkSXRlbVR5cGUge1xuICAgIFRFWFQgPSAwLFxuICAgIElNQUdFID0gMVxufVxuXG5leHBvcnQgY2xhc3MgQ2xpcGJvYXJkSXRlbSB7XG4gICAgaWQ6IG51bWJlcjtcbiAgICB0eXBlOiBDbGlwYm9hcmRJdGVtVHlwZTtcbiAgICBwcmV2aWV3OiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihpZDogbnVtYmVyLCB0eXBlOiBDbGlwYm9hcmRJdGVtVHlwZSwgcHJldmlldzogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgICAgdGhpcy5wcmV2aWV3ID0gcHJldmlldztcbiAgICB9XG59XG5cbmV4cG9ydCB7IENsaXBib2FyZCB9O1xuXG4vKiogQ2xpcGhpc3QgTWFuYWdlciBhbmQgZXZlbnQgbGlzdGVuZXJcbiAgKiBUaGlzIG9ubHkgc3VwcG9ydHMgd2lwZSBhbmQgc3RvcmUgZXZlbnRzIGZyb20gY2xpcGhpc3QgKi9cbkByZWdpc3Rlcih7IEdUeXBlTmFtZTogXCJDbGlwYm9hcmRcIiB9KVxuY2xhc3MgQ2xpcGJvYXJkIGV4dGVuZHMgR09iamVjdC5PYmplY3Qge1xuICAgIHByaXZhdGUgc3RhdGljIGluc3RhbmNlOiBDbGlwYm9hcmQ7XG5cbiAgICBkZWNsYXJlICRzaWduYWxzOiBDbGlwYm9hcmRTaWduYWxzO1xuXG4gICAgI2RiRmlsZTogR2lvLkZpbGU7XG4gICAgI2RiTW9uaXRvcjogR2lvLkZpbGVNb25pdG9yO1xuICAgICN1cGRhdGVEb25lOiBib29sZWFuID0gZmFsc2U7XG4gICAgI2hpc3RvcnkgPSBuZXcgQXJyYXk8Q2xpcGJvYXJkSXRlbT47XG4gICAgI2NoYW5nZXNUaW1lb3V0OiAoQXN0YWxJTy5UaW1lfHVuZGVmaW5lZCk7XG4gICAgI2lnbm9yZUNoYW5nZXM6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIEBzaWduYWwoR09iamVjdC5UWVBFX0pTT0JKRUNUKSBjb3BpZWQoX2l0ZW06IG9iamVjdCkge31cbiAgICBAc2lnbmFsKCkgd2lwZWQoKSB7fTtcblxuXG4gICAgQGdldHRlcihBcnJheSlcbiAgICBwdWJsaWMgZ2V0IGhpc3RvcnkoKSB7IHJldHVybiB0aGlzLiNoaXN0b3J5OyB9XG5cblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMuI2RiRmlsZSA9IHRoaXMuZ2V0Q2xpcGhpc3REYXRhYmFzZSgpO1xuXG4gICAgICAgIHRoaXMuI2RiTW9uaXRvciA9IG1vbml0b3JGaWxlKHRoaXMuI2RiRmlsZS5nZXRfcGF0aCgpISwgKCkgPT4ge1xuICAgICAgICAgICAgaWYodGhpcy4jaWdub3JlQ2hhbmdlcyB8fCB0aGlzLiNjaGFuZ2VzVGltZW91dCkgXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgICAgICB0aGlzLiNjaGFuZ2VzVGltZW91dCA9IHRpbWVvdXQoMzAwLCAoKSA9PiB0aGlzLiNjaGFuZ2VzVGltZW91dCA9IHVuZGVmaW5lZCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmKHRoaXMuI3VwZGF0ZURvbmUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZURhdGFiYXNlKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmluaXQoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYodGhpcy4jZGJGaWxlLnF1ZXJ5X2V4aXN0cyhudWxsKSkge1xuICAgICAgICAgICAgdGhpcy5pbml0KCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zb2xlLmxvZyhcIkNsaXBib2FyZDogY2xpcGhpc3QgZGF0YWJhc2Ugbm90IGZvdW5kLiBUcnkgY29weWluZyBzb21ldGhpbmcgZmlyc3QhXCIpO1xuICAgIH1cblxuICAgIHZmdW5jX2Rpc3Bvc2UoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuI2RiTW9uaXRvci5jYW5jZWwoKTtcbiAgICAgICAgdGhpcy4jZGJNb25pdG9yLnVucmVmKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpbml0KCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkNsaXBib2FyZDogU3RhcnRpbmcgdG8gcmVhZCBjbGlwaGlzdCBoaXN0b3J5Li4uXCIpO1xuXG4gICAgICAgIHRoaXMudXBkYXRlRGF0YWJhc2UoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQ2xpcGJvYXJkOiBEb25lIHJlYWRpbmcgY2xpcGhpc3QgaGlzdG9yeSFcIik7XG4gICAgICAgIH0pLmNhdGNoKChlcnIpID0+IFxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgQ2xpcGJvYXJkOiBBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSByZWFkaW5nIGNsaXBoaXN0IGhpc3RvcnkuIFN0ZGVycjogJHtlcnJ9YClcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgY29weUFzeW5jKGNvbnRlbnQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBhd2FpdCBleGVjQXN5bmMoYHdsLWNvcHkgXCIke2NvbnRlbnR9XCJgKS5jYXRjaCgoZXJyOiBHaW8uSU9FcnJvckVudW0pID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYENsaXBib2FyZDogQ291bGRuJ3QgY29weSB0ZXh0IHVzaW5nIHdsLWNvcHkuIFN0ZGVycjpcXG5cXHQke2Vyci5tZXNzYWdlXG4gICAgICAgICAgICAgICAgfSB8IFN0YWNrOlxcblxcdFxcdCR7ZXJyLnN0YWNrfWApO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgc2VsZWN0SXRlbShpdGVtVG9TZWxlY3Q6IG51bWJlcnxDbGlwYm9hcmRJdGVtKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBhd2FpdCB0aGlzLmdldEl0ZW1Db250ZW50KGl0ZW1Ub1NlbGVjdCk7XG4gICAgICAgIGxldCByZXM6IGJvb2xlYW4gPSB0cnVlO1xuXG4gICAgICAgIGlmKGl0ZW0pIFxuICAgICAgICAgICAgYXdhaXQgdGhpcy5jb3B5QXN5bmMoaXRlbSkuY2F0Y2goKCkgPT4gcmVzID0gZmFsc2UpO1xuXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgLyoqIEdldHMgaGlzdG9yeSBpdGVtJ3MgY29udGVudCBieSBpdHMgSUQuXG4gICAgICAgICogQHJldHVybnMgdGhlIGNsaXBib2FyZCBpdGVtJ3MgY29udGVudCAqL1xuICAgIHB1YmxpYyBhc3luYyBnZXRJdGVtQ29udGVudChpdGVtOiBudW1iZXJ8Q2xpcGJvYXJkSXRlbSk6IFByb21pc2U8c3RyaW5nfHVuZGVmaW5lZD4ge1xuICAgICAgICBjb25zdCBpZCA9ICh0eXBlb2YgaXRlbSA9PT0gXCJudW1iZXJcIikgP1xuICAgICAgICAgICAgaXRlbSA6IGl0ZW0uaWQ7XG5cbiAgICAgICAgY29uc3QgY21kID0gR2lvLlN1YnByb2Nlc3MubmV3KFsgXCJjbGlwaGlzdFwiLCBcImRlY29kZVwiLCBpZC50b1N0cmluZygpIF0sIFxuICAgICAgICAgICAgR2lvLlN1YnByb2Nlc3NGbGFncy5TVERPVVRfUElQRSB8IEdpby5TdWJwcm9jZXNzRmxhZ3MuU1RERVJSX1BJUEUpO1xuXG4gICAgICAgIGNvbnN0IFsgLCBzdGRvdXQsIHN0ZGVyciBdID0gY21kLmNvbW11bmljYXRlX3V0ZjgobnVsbCwgbnVsbCk7XG5cbiAgICAgICAgaWYoc3RkZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBDbGlwYm9hcmQ6IEFuIGVycm9yIG9jY3VycmVkIHdoaWxlIGdldHRpbmcgaXRlbSBjb250ZW50LiBTdGRlcnI6XFxuJHtzdGRlcnJ9YCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc3Rkb3V0O1xuICAgIH1cblxuICAgIC8qKiBTZWFyY2hlcyBmb3IgdGhlIGNsaXBoaXN0IGRhdGFiYXNlIGZpbGUgXG4gICAgICAqIFdpbGwgbm90IHdvcmsgaWYgY2xpcGhpc3QgY29uZmlnIGZpbGUgaXMgbm90IG9uIGRlZmF1bHQgcGF0aCAqL1xuICAgIHByaXZhdGUgZ2V0Q2xpcGhpc3REYXRhYmFzZSgpOiBHaW8uRmlsZSB7XG4gICAgICAgIC8vIENoZWNrIGlmIGVudiB2YXJpYWJsZSBpcyBzZXRcbiAgICAgICAgY29uc3QgcGF0aCA9IEdMaWIuZ2V0ZW52KFwiQ0xJUEhJU1RfREJfUEFUSFwiKTtcbiAgICAgICAgaWYocGF0aCAhPSBudWxsKSBcbiAgICAgICAgICAgIHJldHVybiBHaW8uRmlsZS5uZXdfZm9yX3BhdGgocGF0aCk7XG5cbiAgICAgICAgLy8gQ2hlY2sgY29uZmlnIGZpbGVcbiAgICAgICAgY29uc3QgY29uZkZpbGUgPSBHaW8uRmlsZS5uZXdfZm9yX3BhdGgoYCR7R0xpYi5nZXRfdXNlcl9jb25maWdfZGlyKCl9L2NsaXBoaXN0L2NvbmZpZ2ApO1xuICAgICAgICBpZihjb25mRmlsZS5xdWVyeV9leGlzdHMobnVsbCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGNsaXBoaXN0Q29uZiA9IHJlYWRGaWxlKGNvbmZGaWxlLmdldF9wYXRoKCkhKTtcbiAgICAgICAgICAgIGZvcihjb25zdCBsaW5lIG9mIGNsaXBoaXN0Q29uZi5zcGxpdCgnXFxuJykubWFwKGwgPT4gbC50cmltKCkpKSB7XG4gICAgICAgICAgICAgICAgaWYobGluZS5zdGFydHNXaXRoKCcjJykpXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgWyBrZXksIHZhbHVlIF0gPSBsaW5lLnNwbGl0KCdcXHMnLCAxKTtcbiAgICAgICAgICAgICAgICBpZihrZXkgPT09IFwiZGItcGF0aFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBHaW8uRmlsZS5uZXdfZm9yX3BhdGgodmFsdWUudHJpbVN0YXJ0KCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJldHVybiBkZWZhdWx0IHBhdGggaWYgbm9uZSBvZiB0aGUgYWJvdmUgbWF0Y2hlc1xuICAgICAgICByZXR1cm4gR2lvLkZpbGUubmV3X2Zvcl9wYXRoKGAke0dMaWIuZ2V0X3VzZXJfY2FjaGVfZGlyKCl9L2NsaXBoaXN0L2RiYCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRDb250ZW50VHlwZShwcmV2aWV3OiBzdHJpbmcpOiBDbGlwYm9hcmRJdGVtVHlwZSB7XG4gICAgICAgIHJldHVybiAvXlxcW1xcWy4qYmluYXJ5IGRhdGEuKnguKlxcXVxcXSQvdS50ZXN0KHByZXZpZXcpID9cbiAgICAgICAgICAgIENsaXBib2FyZEl0ZW1UeXBlLklNQUdFXG4gICAgICAgIDogQ2xpcGJvYXJkSXRlbVR5cGUuVEVYVDtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgd2lwZUhpc3Rvcnkobm9FeGVjPzogYm9vbGVhbik6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBpZihub0V4ZWMpIHtcbiAgICAgICAgICAgIHRoaXMuI2hpc3RvcnkgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuZW1pdChcIndpcGVkXCIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy4jaWdub3JlQ2hhbmdlcyA9IHRydWU7XG4gICAgICAgIGF3YWl0IGV4ZWNBc3luYyhcImNsaXBoaXN0IHdpcGVcIikudGhlbigoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLiNoaXN0b3J5ID0gW107XG4gICAgICAgICAgICB0aGlzLmVtaXQoXCJ3aXBlZFwiKTtcbiAgICAgICAgfSkuY2F0Y2goKGVycjogR2lvLklPRXJyb3JFbnVtKSA9PiBcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYENsaXBib2FyZDogQW4gZXJyb3Igb2NjdXJyZWQgb24gY2xpcGhpc3QgZGF0YWJhc2Ugd2lwZS4gU3RkZXJyOiAke1xuICAgICAgICAgICAgICAgIGVyci5tZXNzYWdlID8gYCR7ZXJyLm1lc3NhZ2V9XFxuYCA6IFwiXCJ9JHtlcnIuc3RhY2t9YClcbiAgICAgICAgKS5maW5hbGx5KCgpID0+IHRoaXMuI2lnbm9yZUNoYW5nZXMgPSBmYWxzZSk7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIHVwZGF0ZURhdGFiYXNlKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCBwcm9jID0gR2lvLlN1YnByb2Nlc3MubmV3KFsgXCJjbGlwaGlzdFwiLCBcImxpc3RcIiBdLFxuICAgICAgICAgICAgR2lvLlN1YnByb2Nlc3NGbGFncy5TVERPVVRfUElQRSB8IEdpby5TdWJwcm9jZXNzRmxhZ3MuU1RERVJSX1BJUEUpO1xuXG4gICAgICAgIHByb2MuY29tbXVuaWNhdGVfdXRmOF9hc3luYyhudWxsLCBudWxsLCAoXywgYXN5bmNSZXMpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IFsgc3VjY2Vzcywgc3Rkb3V0LCBzdGRlcnIgXSA9IHByb2MuY29tbXVuaWNhdGVfdXRmOF9maW5pc2goYXN5bmNSZXMpO1xuXG4gICAgICAgICAgICBpZighc3VjY2VzcyB8fCBzdGRlcnIpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiQ2xpcGJvYXJkOiBDb3VsZG4ndCBjb21tdW5pY2F0ZSB3aXRoIGNsaXBoaXN0ISBJcyBpdCBpbnN0YWxsZWQ/XCIpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYoIXN0ZG91dC50cmltKCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLndpcGVIaXN0b3J5KHRydWUpO1xuICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5KFwiaGlzdG9yeVwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1zID0gc3Rkb3V0LnNwbGl0KCdcXG4nKTtcblxuICAgICAgICAgICAgaWYodGhpcy4jdXBkYXRlRG9uZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IFsgaWQsIHByZXZpZXcgXSA9IGl0ZW1zWzBdLnNwbGl0KCdcXHQnKTtcbiAgICAgICAgICAgICAgICBjb25zdCBjbGlwSXRlbSA9IHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IE51bWJlci5wYXJzZUludChpZCksXG4gICAgICAgICAgICAgICAgICAgIHByZXZpZXcsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IHRoaXMuZ2V0Q29udGVudFR5cGUocHJldmlldylcbiAgICAgICAgICAgICAgICB9IGFzIENsaXBib2FyZEl0ZW07XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy4jaGlzdG9yeS51bnNoaWZ0KGNsaXBJdGVtKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcImNvcGllZFwiLCBjbGlwSXRlbSk7XG4gICAgICAgICAgICAgICAgdGhpcy5ub3RpZnkoXCJoaXN0b3J5XCIpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yKGNvbnN0IGl0ZW0gb2YgaXRlbXMpIHtcbiAgICAgICAgICAgICAgICBpZighaXRlbSkgY29udGludWU7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBbIGlkLCBwcmV2aWV3IF0gPSBpdGVtLnNwbGl0KCdcXHQnKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IGNsaXBJdGVtID0ge1xuICAgICAgICAgICAgICAgICAgICBpZDogTnVtYmVyLnBhcnNlSW50KGlkKSxcbiAgICAgICAgICAgICAgICAgICAgcHJldmlldyxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogdGhpcy5nZXRDb250ZW50VHlwZShwcmV2aWV3KVxuICAgICAgICAgICAgICAgIH0gYXMgQ2xpcGJvYXJkSXRlbTtcblxuICAgICAgICAgICAgICAgIHRoaXMuI2hpc3RvcnkucHVzaChjbGlwSXRlbSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoXCJjb3BpZWRcIiwgY2xpcEl0ZW0pO1xuICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5KFwiaGlzdG9yeVwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy4jdXBkYXRlRG9uZSA9IHRydWU7XG5cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBnZXREZWZhdWx0KCk6IENsaXBib2FyZCB7XG4gICAgICAgIGlmKCF0aGlzLmluc3RhbmNlKVxuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZSA9IG5ldyBDbGlwYm9hcmQoKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5pbnN0YW5jZTtcbiAgICB9XG59XG4iLCAiaW1wb3J0IHsgY3JlYXRlQmluZGluZywgY3JlYXRlU3RhdGUsIFdpdGggfSBmcm9tIFwiYWdzXCI7XG5pbXBvcnQgeyBleGVjQXN5bmMgfSBmcm9tIFwiYWdzL3Byb2Nlc3NcIjtcbmltcG9ydCB7IEd0ayB9IGZyb20gXCJhZ3MvZ3RrNFwiO1xuaW1wb3J0IHsgZ2V0U3ltYm9saWNJY29uIH0gZnJvbSBcIi4uLy4uL3NjcmlwdHMvYXBwc1wiO1xuaW1wb3J0IHsgU2VwYXJhdG9yIH0gZnJvbSBcIi4uL1NlcGFyYXRvclwiO1xuaW1wb3J0IHsgV2luZG93cyB9IGZyb20gXCIuLi8uLi93aW5kb3dzXCI7XG5pbXBvcnQgeyBDbGlwYm9hcmQgfSBmcm9tIFwiLi4vLi4vc2NyaXB0cy9jbGlwYm9hcmRcIjtcblxuaW1wb3J0IEdPYmplY3QgZnJvbSBcImFncy9nb2JqZWN0XCI7XG5pbXBvcnQgQXN0YWxNcHJpcyBmcm9tIFwiZ2k6Ly9Bc3RhbE1wcmlzXCI7XG5pbXBvcnQgUGFuZ28gZnJvbSBcImdpOi8vUGFuZ28/dmVyc2lvbj0xLjBcIjtcblxuXG5leHBvcnQgY29uc3QgZHVtbXlQbGF5ZXIgPSBBc3RhbE1wcmlzLlBsYXllci5uZXcoXCJjb2xvcnNoZWxsRHVtbXlcIik7XG5cbmV4cG9ydCBsZXQgW3BsYXllciwgc2V0UGxheWVyXSA9IGNyZWF0ZVN0YXRlKGR1bW15UGxheWVyKTtcblxuZXhwb3J0IGNvbnN0IE1lZGlhID0gKCkgPT4ge1xuICAgIGNvbnN0IGNvbm5lY3Rpb25zOiBNYXA8R09iamVjdC5PYmplY3QsIEFycmF5PG51bWJlcj58bnVtYmVyPiA9IG5ldyBNYXAoKTtcblxuICAgIGlmKEFzdGFsTXByaXMuZ2V0X2RlZmF1bHQoKS5wbGF5ZXJzWzBdKVxuICAgICAgICBzZXRQbGF5ZXIoQXN0YWxNcHJpcy5nZXRfZGVmYXVsdCgpLnBsYXllcnNbMF0pO1xuXG4gICAgY29ubmVjdGlvbnMuc2V0KEFzdGFsTXByaXMuZ2V0X2RlZmF1bHQoKSwgW1xuICAgICAgICBBc3RhbE1wcmlzLmdldF9kZWZhdWx0KCkuY29ubmVjdChcInBsYXllci1hZGRlZFwiLCAoXywgcGxheWVyKSA9PiBcbiAgICAgICAgICAgIHBsYXllci5hdmFpbGFibGUgJiYgc2V0UGxheWVyKHBsYXllcikpLFxuXG4gICAgICAgIEFzdGFsTXByaXMuZ2V0X2RlZmF1bHQoKS5jb25uZWN0KFwicGxheWVyLWNsb3NlZFwiLCAoXywgY2xvc2VkUGxheWVyKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBwbGF5ZXJzID0gQXN0YWxNcHJpcy5nZXRfZGVmYXVsdCgpLnBsYXllcnMuZmlsdGVyKHBsID0+IHBsPy5hdmFpbGFibGUpO1xuXG4gICAgICAgICAgICBpZihwbGF5ZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBzZXRQbGF5ZXIocGxheWVyc1swXSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfSBlbHNlIHNldFBsYXllcihkdW1teVBsYXllcik7XG4gICAgICAgIH0pXG4gICAgXSk7XG5cbiAgICByZXR1cm4gPEd0ay5Cb3ggY2xhc3M9e1wibWVkaWFcIn0gdmlzaWJsZT17cGxheWVyKChwbCkgPT4gcGwuYXZhaWxhYmxlKX1cbiAgICAgICQ9eyhzZWxmKSA9PiB7XG4gICAgICAgICAgY29uc3QgZ2VzdHVyZUNsaWNrID0gR3RrLkdlc3R1cmVDbGljay5uZXcoKSxcbiAgICAgICAgICAgICAgY29udHJvbGxlck1vdGlvbiA9IEd0ay5FdmVudENvbnRyb2xsZXJNb3Rpb24ubmV3KCksXG4gICAgICAgICAgICAgIGNvbnRyb2xsZXJTY3JvbGwgPSBHdGsuRXZlbnRDb250cm9sbGVyU2Nyb2xsLm5ldyhcbiAgICAgICAgICAgICAgICAgIEd0ay5FdmVudENvbnRyb2xsZXJTY3JvbGxGbGFncy5WRVJUSUNBTCk7XG5cbiAgICAgICAgICBzZWxmLmFkZF9jb250cm9sbGVyKGdlc3R1cmVDbGljayk7XG4gICAgICAgICAgc2VsZi5hZGRfY29udHJvbGxlcihjb250cm9sbGVyTW90aW9uKTtcbiAgICAgICAgICBzZWxmLmFkZF9jb250cm9sbGVyKGNvbnRyb2xsZXJTY3JvbGwpO1xuXG4gICAgICAgICAgY29ubmVjdGlvbnMuc2V0KGdlc3R1cmVDbGljaywgZ2VzdHVyZUNsaWNrLmNvbm5lY3QoXCJyZWxlYXNlZFwiLCAoKSA9PlxuICAgICAgICAgICAgICBXaW5kb3dzLmdldERlZmF1bHQoKS50b2dnbGUoXCJjZW50ZXItd2luZG93XCIpKSk7XG5cbiAgICAgICAgICBjb25uZWN0aW9ucy5zZXQoY29udHJvbGxlclNjcm9sbCwgXG4gICAgICAgICAgICAgIGNvbnRyb2xsZXJTY3JvbGwuY29ubmVjdChcInNjcm9sbFwiLCAoXywgX2R4LCBkeSkgPT4ge1xuICAgICAgICAgICAgICAgICAgaWYoQXN0YWxNcHJpcy5nZXRfZGVmYXVsdCgpLnBsYXllcnMubGVuZ3RoID09PSAxICYmIFxuICAgICAgICAgICAgICAgICAgICAgcGxheWVyLmdldCgpPy5idXNOYW1lID09PSBBc3RhbE1wcmlzLmdldF9kZWZhdWx0KCkucGxheWVyc1swXS5idXNOYW1lKSBcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgY29uc3QgcGxheWVycyA9IEFzdGFsTXByaXMuZ2V0X2RlZmF1bHQoKS5wbGF5ZXJzO1xuXG4gICAgICAgICAgICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgcGxheWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBsID0gcGxheWVyc1tpXTtcblxuICAgICAgICAgICAgICAgICAgICAgIGlmKHBsLmJ1c05hbWUgIT09IHBsYXllci5nZXQoKS5idXNOYW1lKSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICBpZihkeSA+IDAgJiYgcGxheWVyc1tpLTFdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNldFBsYXllcihwbGF5ZXJzW2ktMV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICBpZihkeSA8IDAgJiYgcGxheWVyc1tpKzFdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNldFBsYXllcihwbGF5ZXJzW2krMV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICk7XG5cbiAgICAgICAgICBjb25uZWN0aW9ucy5zZXQoY29udHJvbGxlck1vdGlvbiwgW1xuICAgICAgICAgICAgICBjb250cm9sbGVyTW90aW9uLmNvbm5lY3QoXCJlbnRlclwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICBjb25zdCByZXZlYWxlciA9IHNlbGYuZ2V0X2xhc3RfY2hpbGQoKSBhcyBHdGsuUmV2ZWFsZXI7XG4gICAgICAgICAgICAgICAgICByZXZlYWxlci5zZXRfcmV2ZWFsX2NoaWxkKHRydWUpO1xuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgY29udHJvbGxlck1vdGlvbi5jb25uZWN0KFwibGVhdmVcIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgY29uc3QgcmV2ZWFsZXIgPSBzZWxmLmdldF9sYXN0X2NoaWxkKCkgYXMgR3RrLlJldmVhbGVyO1xuICAgICAgICAgICAgICAgICAgcmV2ZWFsZXIuc2V0X3JldmVhbF9jaGlsZChmYWxzZSk7XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgXSk7XG5cbiAgICAgICAgICBjb25uZWN0aW9ucy5zZXQoc2VsZiwgc2VsZi5jb25uZWN0KFwiZGVzdHJveVwiLCAoKSA9PiBcbiAgICAgICAgICAgICAgY29ubmVjdGlvbnMuZm9yRWFjaCgoaWRzLCBvYmopID0+IEFycmF5LmlzQXJyYXkoaWRzKSA/XG4gICAgICAgICAgICAgICAgICBpZHMuZm9yRWFjaChpZCA9PiBvYmouZGlzY29ubmVjdChpZCkpXG4gICAgICAgICAgICAgIDogb2JqLmRpc2Nvbm5lY3QoaWRzKSlcbiAgICAgICAgICApKTtcbiAgICAgIH19PlxuXG4gICAgICAgIDxHdGsuQm94IHNwYWNpbmc9ezR9IHZpc2libGU9e3BsYXllcihwbCA9PiBwbC5hdmFpbGFibGUpfT5cbiAgICAgICAgICAgIDxXaXRoIHZhbHVlPXtwbGF5ZXIocGwgPT4gcGwuYXZhaWxhYmxlKX0+XG4gICAgICAgICAgICAgICAgeyhhdmFpbGFibGU6IGJvb2xlYW4pID0+IGF2YWlsYWJsZSAmJiA8R3RrLkJveD5cbiAgICAgICAgICAgICAgICAgICAgPEd0ay5JbWFnZSBjbGFzcz17XCJwbGF5ZXItaWNvblwifSBpY29uTmFtZT17Y3JlYXRlQmluZGluZyhwbGF5ZXIuZ2V0KCksIFwiYnVzTmFtZVwiKS5hcygoYnVzTmFtZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzcGxpdE5hbWUgPSBidXNOYW1lLnNwbGl0KCcuJykuZmlsdGVyKHN0ciA9PiBzdHIgIT09IFwiXCIgJiYgIXN0ci50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCdpbnN0YW5jZScpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldFN5bWJvbGljSWNvbihzcGxpdE5hbWVbc3BsaXROYW1lLmxlbmd0aCAtIDFdKSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRTeW1ib2xpY0ljb24oc3BsaXROYW1lW3NwbGl0TmFtZS5sZW5ndGggLSAxXSkhXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogXCJmb2xkZXItbXVzaWMtc3ltYm9saWNcIjtcbiAgICAgICAgICAgICAgICAgICAgICB9KX0gXG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIDxHdGsuTGFiZWwgY2xhc3M9e1widGl0bGVcIn0gbGFiZWw9e2NyZWF0ZUJpbmRpbmcocGxheWVyLmdldCgpLCBcInRpdGxlXCIpLmFzKHRpdGxlID0+XG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZSA/PyBcIk5vIFRpdGxlXCIpfSBtYXhXaWR0aENoYXJzPXsyMH0gZWxsaXBzaXplPXtQYW5nby5FbGxpcHNpemVNb2RlLkVORH1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgPFNlcGFyYXRvciBvcmllbnRhdGlvbj17R3RrLk9yaWVudGF0aW9uLkhPUklaT05UQUx9IHNpemU9ezF9IG1hcmdpbj17NX1cbiAgICAgICAgICAgICAgICAgICAgICBhbHBoYT17LjN9IHNwYWNpbmc9ezZ9IC8+XG4gICAgICAgICAgICAgICAgICAgIDxHdGsuTGFiZWwgY2xhc3M9e1wiYXJ0aXN0XCJ9IGxhYmVsPXtjcmVhdGVCaW5kaW5nKHBsYXllci5nZXQoKSwgXCJhcnRpc3RcIikuYXMoYXJ0aXN0ID0+XG4gICAgICAgICAgICAgICAgICAgICAgICBhcnRpc3QgPz8gXCJObyBBcnRpc3RcIil9IG1heFdpZHRoQ2hhcnM9ezE4fSBlbGxpcHNpemU9e1BhbmdvLkVsbGlwc2l6ZU1vZGUuRU5EfVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDwvR3RrLkJveD59XG4gICAgICAgICAgICA8L1dpdGg+XG4gICAgICAgIDwvR3RrLkJveD5cbiAgICAgICAgPEd0ay5SZXZlYWxlciB0cmFuc2l0aW9uVHlwZT17R3RrLlJldmVhbGVyVHJhbnNpdGlvblR5cGUuU0xJREVfUklHSFR9IHRyYW5zaXRpb25EdXJhdGlvbj17MjYwfVxuICAgICAgICAgIHJldmVhbENoaWxkPXtmYWxzZX0+XG5cbiAgICAgICAgICAgIDxXaXRoIHZhbHVlPXtwbGF5ZXIocGwgPT4gcGwuYXZhaWxhYmxlKX0+XG4gICAgICAgICAgICAgICAgeyhhdmFpbGFibGU6IGJvb2xlYW4pID0+IGF2YWlsYWJsZSAmJiA8R3RrLkJveCBjbGFzcz17XCJtZWRpYS1jb250cm9scyBidXR0b24tcm93XCJ9PlxuICAgICAgICAgICAgICAgICAgICA8R3RrLkJ1dHRvbiBjbGFzcz17XCJsaW5rXCJ9IGljb25OYW1lPXtcImVkaXQtcGFzdGUtc3ltYm9saWNcIn0gXG4gICAgICAgICAgICAgICAgICAgICAgdG9vbHRpcFRleHQ9e1wiQ29weSBsaW5rIHRvIENsaXBib2FyZFwifSBvbkNsaWNrZWQ9eygpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhlY0FzeW5jKGBwbGF5ZXJjdGwgLS1wbGF5ZXI9JHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllci5nZXQoKS5idXNOYW1lLnJlcGxhY2UoL15vcmdcXC5tcHJpc1xcLk1lZGlhUGxheWVyMlxcLi9pLCBcIlwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9IG1ldGFkYXRhIHhlc2FtOnVybGApLnRoZW4obGluayA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDbGlwYm9hcmQuZ2V0RGVmYXVsdCgpLmNvcHlBc3luYyhsaW5rKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goKGU6IEVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBNZWRpYTogY291bGRuJ3QgY29weSBtZWRpYSBsaW5rLiBTdGRlcnI6IFxcbiR7ZS5tZXNzYWdlfVxcbiR7ZS5zdGFja31gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgPEd0ay5CdXR0b24gY2xhc3M9e1wicHJldmlvdXNcIn0gaWNvbk5hbWU9e1wibWVkaWEtc2tpcC1iYWNrd2FyZC1zeW1ib2xpY1wifVxuICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXBUZXh0PXtcIlByZXZpb3VzXCJ9IG9uQ2xpY2tlZD17KCkgPT4gXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllci5nZXQoKS5jYW5Hb1ByZXZpb3VzICYmIHBsYXllci5nZXQoKS5wcmV2aW91cygpfVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICA8R3RrLkJ1dHRvbiBjbGFzcz17XCJwbGF5LXBhdXNlXCJ9IGljb25OYW1lPXtjcmVhdGVCaW5kaW5nKHBsYXllci5nZXQoKSwgXCJwbGF5YmFja1N0YXR1c1wiKS5hcyhzdGF0dXMgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1cyA9PT0gQXN0YWxNcHJpcy5QbGF5YmFja1N0YXR1cy5QQVVTRUQgPyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm1lZGlhLXBsYXliYWNrLXN0YXJ0LXN5bWJvbGljXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogXCJtZWRpYS1wbGF5YmFjay1wYXVzZS1zeW1ib2xpY1wiKX1cbiAgICAgICAgICAgICAgICAgICAgICB0b29sdGlwVGV4dD17XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZUJpbmRpbmcocGxheWVyLmdldCgpLCBcInBsYXliYWNrU3RhdHVzXCIpLmFzKHN0YXR1cyA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzID09PSBBc3RhbE1wcmlzLlBsYXliYWNrU3RhdHVzLlBBVVNFRCA/IFwiUGxheVwiIDogXCJQYXVzZVwiKVxuICAgICAgICAgICAgICAgICAgICAgIH0gb25DbGlja2VkPXsoKSA9PiBwbGF5ZXIuZ2V0KCkucGxheV9wYXVzZSgpfVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICA8R3RrLkJ1dHRvbiBjbGFzcz17XCJuZXh0XCJ9IGljb25OYW1lPXtcIm1lZGlhLXNraXAtZm9yd2FyZC1zeW1ib2xpY1wifVxuICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXBUZXh0PXtcIk5leHRcIn0gb25DbGlja2VkPXsoKSA9PiBwbGF5ZXIuZ2V0KCkuY2FuR29OZXh0ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllci5nZXQoKS5uZXh0KCl9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9HdGsuQm94Pn1cbiAgICAgICAgICAgIDwvV2l0aD5cbiAgICAgICAgPC9HdGsuUmV2ZWFsZXI+XG4gICAgPC9HdGsuQm94PlxufVxuIiwgImltcG9ydCBHTGliIGZyb20gXCJnaTovL0dMaWI/dmVyc2lvbj0yLjBcIjtcblxuXG5jb25zdCBpMThuS2V5cyA9IHtcbiAgICBcImVuX1VTXCI6IChhd2FpdCBpbXBvcnQoXCIuL2xhbmcvZW5fVVNcIikpLmRlZmF1bHQsXG4gICAgXCJwdF9CUlwiOiAoYXdhaXQgaW1wb3J0KFwiLi9sYW5nL3B0X0JSXCIpKS5kZWZhdWx0LFxuICAgIFwicnVfUlVcIjogKGF3YWl0IGltcG9ydChcIi4vbGFuZy9ydV9SVVwiKSkuZGVmYXVsdFxufTtcblxuY29uc3QgbGFuZ3VhZ2VzOiBBcnJheTxzdHJpbmc+ID0gT2JqZWN0LmtleXMoaTE4bktleXMpO1xubGV0IGxhbmd1YWdlOiBzdHJpbmcgPSBnZXRTeXN0ZW1MYW5ndWFnZSgpO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3lzdGVtTGFuZ3VhZ2UoKTogc3RyaW5nIHtcbiAgICBjb25zdCBzeXNMYW5ndWFnZTogKHN0cmluZ3xudWxsfHVuZGVmaW5lZCkgPSBHTGliLmdldGVudihcIkxBTkdcIikgfHwgR0xpYi5nZXRlbnYoXCJMQU5HVUFHRVwiKTtcblxuICAgIGlmKCFzeXNMYW5ndWFnZSkge1xuICAgICAgICBjb25zb2xlLmxvZyhgW1dBUk5JTkddIENvdWxkbid0IGdldCBzeXN0ZW0gbGFuZ3VhZ2UsIGZhbGxiYWNrIHRvIGRlZmF1bHQgJHtsYW5ndWFnZXNbMF19YCk7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiW1RJUF0gUGxlYXNlIHNldCB0aGUgTEFORyBvciBMQU5HVUFHRSBlbnZpcm9ubWVudCB2YXJpYWJsZVwiKTtcblxuICAgICAgICByZXR1cm4gbGFuZ3VhZ2VzWzBdO1xuICAgIH1cblxuICAgIHJldHVybiBzeXNMYW5ndWFnZS5zcGxpdCgnLicpWzBdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0TGFuZ3VhZ2UobGFuZzogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBsYW5ndWFnZXMubWFwKChjdXI6IHN0cmluZykgPT4ge1xuICAgICAgICBpZihjdXIgPT09IGxhbmcpIHtcbiAgICAgICAgICAgIGxhbmd1YWdlID0gbGFuZztcbiAgICAgICAgICAgIHJldHVybiBsYW5nO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICB0aHJvdyBuZXcgRXJyb3IoYChpMThuL2ludGwpIENvdWxkbid0IHNldCBsYW5ndWFnZTogJHtsYW5nfWAsIHtcbiAgICAgICAgY2F1c2U6IGBMYW5ndWFnZSAke2xhbmd9IG5vdCBmb3VuZCBpbiBsYW5ndWFnZXMgb2YgdHlwZSAke3R5cGVvZiBsYW5ndWFnZXN9YFxuICAgIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHIoa2V5OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGxldCByZXN1bHQgPSBpMThuS2V5c1tsYW5ndWFnZSBhcyBrZXlvZiB0eXBlb2YgaTE4bktleXNdLFxuICAgICAgICBkZWZSZXN1bHQgPSBpMThuS2V5c1tsYW5ndWFnZXNbMF0gYXMga2V5b2YgdHlwZW9mIGkxOG5LZXlzXTtcblxuICAgIGZvcihjb25zdCBrZXlTdHJpbmcgb2Yga2V5LnNwbGl0KCcuJykpIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0W2tleVN0cmluZyBhcyBrZXlvZiB0eXBlb2YgcmVzdWx0XSBhcyBuZXZlcjtcbiAgICAgICAgZGVmUmVzdWx0ID0gZGVmUmVzdWx0W2tleVN0cmluZyBhcyBrZXlvZiB0eXBlb2YgZGVmUmVzdWx0XSBhcyBuZXZlcjtcbiAgICB9XG5cbiAgICByZXR1cm4gKHR5cGVvZiByZXN1bHQgPT0gXCJzdHJpbmdcIikgPyBcbiAgICAgICAgICAgIHJlc3VsdCBcbiAgICAgICAgOiAoKHR5cGVvZiBkZWZSZXN1bHQgPT0gXCJzdHJpbmdcIikgPyBcbiAgICAgICAgICAgZGVmUmVzdWx0IFxuICAgICAgICA6IFwibm90IGZvdW5kIC8gaXMgbm90IG9mIHR5cGUgXFxcInN0cmluZ1xcXCJcIik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0ckdldCgpIHtcbiAgICByZXR1cm4gaTE4bktleXNbZ2V0U3lzdGVtTGFuZ3VhZ2UoKSBhcyBrZXlvZiB0eXBlb2YgaTE4bktleXNdO1xufVxuIiwgImltcG9ydCB7IEd0ayB9IGZyb20gXCJhZ3MvZ3RrNFwiO1xuaW1wb3J0IHsgV2luZG93cyB9IGZyb20gXCIuLi8uLi93aW5kb3dzXCI7XG5pbXBvcnQgeyBjcmVhdGVCaW5kaW5nIH0gZnJvbSBcImFnc1wiO1xuaW1wb3J0IHsgdHIgfSBmcm9tIFwiLi4vLi4vaTE4bi9pbnRsXCI7XG5cbmV4cG9ydCBjb25zdCBBcHBzID0gKCkgPT4gXG4gICAgPEd0ay5CdXR0b24gY2xhc3M9e2NyZWF0ZUJpbmRpbmcoV2luZG93cy5nZXREZWZhdWx0KCksIFwib3BlbldpbmRvd3NcIikuYXMoKG9wZW5XaW5kb3dzKSA9PiBcbiAgICAgICAgICAgIGBhcHBzICR7T2JqZWN0Lmhhc093bihvcGVuV2luZG93cywgXCJhcHBzLXdpbmRvd1wiKSA/IFwib3BlblwiIDogXCJcIn1gXG4gICAgICAgICl9ICQ9eyhzZWxmKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjb25uczogQXJyYXk8bnVtYmVyPiA9IFtcbiAgICAgICAgICAgICAgICBzZWxmLmNvbm5lY3QoXCJjbGlja2VkXCIsIChfKSA9PiBXaW5kb3dzLmdldERlZmF1bHQoKS5vcGVuKFwiYXBwcy13aW5kb3dcIikpLFxuICAgICAgICAgICAgICAgIHNlbGYuY29ubmVjdChcImRlc3Ryb3lcIiwgKF8pID0+IGNvbm5zLmZvckVhY2goaWQgPT4gc2VsZi5kaXNjb25uZWN0KGlkKSkpXG4gICAgICAgICAgICBdO1xuICAgICAgICB9fSBpY29uTmFtZT17XCJhcHBsaWNhdGlvbnMtb3RoZXItc3ltYm9saWNcIn0gaGFsaWduPXtHdGsuQWxpZ24uQ0VOVEVSfVxuICAgICAgICBoZXhwYW5kPXt0cnVlfSB0b29sdGlwVGV4dD17dHIoXCJhcHBzXCIpfVxuICAgIC8+O1xuIiwgImltcG9ydCB7IEd0ayB9IGZyb20gXCJhZ3MvZ3RrNFwiO1xuaW1wb3J0IHsgV2luZG93cyB9IGZyb20gXCIuLi8uLi93aW5kb3dzXCI7XG5pbXBvcnQgeyBjcmVhdGVCaW5kaW5nIH0gZnJvbSBcImFnc1wiO1xuaW1wb3J0IHsgdGltZSB9IGZyb20gXCIuLi8uLi9zY3JpcHRzL3V0aWxzXCI7XG5pbXBvcnQgeyBDb25maWcgfSBmcm9tIFwiLi4vLi4vc2NyaXB0cy9jb25maWdcIjtcblxuZXhwb3J0IGNvbnN0IENsb2NrID0gKCkgPT4gXG4gICAgPEd0ay5CdXR0b24gY2xhc3M9e2NyZWF0ZUJpbmRpbmcoV2luZG93cy5nZXREZWZhdWx0KCksIFwib3BlbldpbmRvd3NcIikuYXMoKHdpbnMpID0+XG4gICAgICAgIGBjbG9jayAke09iamVjdC5oYXNPd24od2lucywgXCJjZW50ZXItd2luZG93XCIpID8gXCJvcGVuXCIgOiBcIlwifWApfVxuICAgICAgICAkPXsoc2VsZikgPT4ge1xuICAgICAgICAgICAgY29uc3QgY29ubnM6IEFycmF5PG51bWJlcj4gPSBbXG4gICAgICAgICAgICAgICAgc2VsZi5jb25uZWN0KFwiY2xpY2tlZFwiLCAoXykgPT4gV2luZG93cy5nZXREZWZhdWx0KCkudG9nZ2xlKFwiY2VudGVyLXdpbmRvd1wiKSksXG4gICAgICAgICAgICAgICAgc2VsZi5jb25uZWN0KFwiZGVzdHJveVwiLCAoXykgPT4gY29ubnMuZm9yRWFjaChpZCA9PiBzZWxmLmRpc2Nvbm5lY3QoaWQpKSlcbiAgICAgICAgICAgIF07XG4gICAgICAgIH19XG4gICAgICAgIGxhYmVsPXt0aW1lKChkdCkgPT4gZHQuZm9ybWF0KFxuICAgICAgICAgICAgQ29uZmlnLmdldERlZmF1bHQoKS5nZXRQcm9wZXJ0eShcImNsb2NrLmRhdGVfZm9ybWF0XCIsIFwic3RyaW5nXCIpKSBcbiAgICAgICAgICAgICAgICA/PyBcIkFuIGVycm9yIG9jY3VycmVkXCJcbiAgICAgICAgKX1cbiAgICAvPjtcbiIsICJpbXBvcnQgeyBleGVjQXN5bmMgfSBmcm9tIFwiYWdzL3Byb2Nlc3NcIjtcbmltcG9ydCB7IGdldHRlciwgcmVnaXN0ZXIsIHNpZ25hbCB9IGZyb20gXCJhZ3MvZ29iamVjdFwiO1xuaW1wb3J0IHsgR2RrIH0gZnJvbSBcImFncy9ndGs0XCI7XG5pbXBvcnQgeyBtYWtlRGlyZWN0b3J5IH0gZnJvbSBcIi4vdXRpbHNcIjtcbmltcG9ydCB7IE5vdGlmaWNhdGlvbnMgfSBmcm9tIFwiLi9ub3RpZmljYXRpb25zXCI7XG5pbXBvcnQgeyB0aW1lIH0gZnJvbSBcIi4vdXRpbHNcIjtcblxuaW1wb3J0IEdPYmplY3QgZnJvbSBcImFncy9nb2JqZWN0XCI7XG5pbXBvcnQgR0xpYiBmcm9tIFwiZ2k6Ly9HTGliP3ZlcnNpb249Mi4wXCI7XG5pbXBvcnQgR2lvIGZyb20gXCJnaTovL0dpbz92ZXJzaW9uPTIuMFwiO1xuXG5cbmV4cG9ydCB7IFJlY29yZGluZyB9O1xuXG5AcmVnaXN0ZXIoeyBHVHlwZU5hbWU6IFwiUmVjb3JkaW5nXCIgfSlcbmNsYXNzIFJlY29yZGluZyBleHRlbmRzIEdPYmplY3QuT2JqZWN0IHtcbiAgICBwcml2YXRlIHN0YXRpYyBpbnN0YW5jZTogUmVjb3JkaW5nO1xuXG4gICAgQHNpZ25hbCgpIHN0YXJ0ZWQoKSB7fTtcbiAgICBAc2lnbmFsKCkgc3RvcHBlZCgpIHt9O1xuXG4gICAgI3JlY29yZGluZzogYm9vbGVhbiA9IGZhbHNlO1xuICAgICNwYXRoOiBzdHJpbmcgPSBcIn4vUmVjb3JkaW5nc1wiO1xuXG4gICAgLyoqIERlZmF1bHQgZXh0ZW5zaW9uOiBtcDQoaDI2NCkgKi9cbiAgICAjZXh0ZW5zaW9uOiBzdHJpbmcgPSBcIm1wNFwiO1xuICAgICNyZWNvcmRBdWRpbzogYm9vbGVhbiA9IGZhbHNlO1xuICAgICNhcmVhOiAoR2RrLlJlY3RhbmdsZXxudWxsKSA9IG51bGw7XG4gICAgI3N0YXJ0ZWRBdDogbnVtYmVyID0gLTE7XG4gICAgI3Byb2Nlc3M6IChHaW8uU3VicHJvY2Vzc3xudWxsKSA9IG51bGw7XG4gICAgI291dHB1dDogKHN0cmluZ3xudWxsKSA9IG51bGw7XG5cbiAgICAvKiogR0xpYi5EYXRlVGltZSBvZiB3aGVuIHJlY29yZGluZyBzdGFydGVkIFxuICAgICogaXRzIHZhbHVlIGNhbiBiZSBgLTFgIGlmIHVuZGVmaW5lZChubyByZWNvcmRpbmcgaXMgaGFwcGVuaW5nKSAqL1xuICAgIEBnZXR0ZXIoTnVtYmVyKVxuICAgIHB1YmxpYyBnZXQgc3RhcnRlZEF0KCkgeyByZXR1cm4gdGhpcy4jc3RhcnRlZEF0OyB9XG5cbiAgICBAZ2V0dGVyKEJvb2xlYW4pXG4gICAgcHVibGljIGdldCByZWNvcmRpbmcoKSB7IHJldHVybiB0aGlzLiNyZWNvcmRpbmc7IH1cbiAgICBwcml2YXRlIHNldCByZWNvcmRpbmcobmV3VmFsdWU6IGJvb2xlYW4pIHtcbiAgICAgICAgKCFuZXdWYWx1ZSAmJiB0aGlzLiNyZWNvcmRpbmcpID8gXG4gICAgICAgICAgICB0aGlzLnN0b3BSZWNvcmRpbmcoKSBcbiAgICAgICAgOiB0aGlzLnN0YXJ0UmVjb3JkaW5nKHRoaXMuI2FyZWEgfHwgdW5kZWZpbmVkKTtcblxuICAgICAgICB0aGlzLiNyZWNvcmRpbmcgPSBuZXdWYWx1ZTtcbiAgICAgICAgdGhpcy5ub3RpZnkoXCJyZWNvcmRpbmdcIik7XG4gICAgfVxuXG4gICAgQGdldHRlcihTdHJpbmcpXG4gICAgcHVibGljIGdldCBwYXRoKCkgeyByZXR1cm4gdGhpcy4jcGF0aDsgfVxuICAgIHB1YmxpYyBzZXQgcGF0aChuZXdQYXRoOiBzdHJpbmcpIHtcbiAgICAgICAgaWYodGhpcy5yZWNvcmRpbmcpIHJldHVybjtcblxuICAgICAgICB0aGlzLiNwYXRoID0gbmV3UGF0aDtcbiAgICAgICAgdGhpcy5ub3RpZnkoXCJwYXRoXCIpO1xuICAgIH1cblxuICAgIEBnZXR0ZXIoU3RyaW5nKVxuICAgIHB1YmxpYyBnZXQgZXh0ZW5zaW9uKCkgeyByZXR1cm4gdGhpcy4jZXh0ZW5zaW9uOyB9XG4gICAgcHVibGljIHNldCBleHRlbnNpb24obmV3RXh0OiBzdHJpbmcpIHtcbiAgICAgICAgaWYodGhpcy5yZWNvcmRpbmcpIHJldHVybjtcblxuICAgICAgICB0aGlzLiNleHRlbnNpb24gPSBuZXdFeHQ7XG4gICAgICAgIHRoaXMubm90aWZ5KFwiZXh0ZW5zaW9uXCIpO1xuICAgIH1cblxuICAgIC8qKiBSZWNvcmRpbmcgb3V0cHV0IGZpbGUgbmFtZS4gJU5VTEwgaWYgc2NyZWVuIGlzIG5vdCBiZWluZyByZWNvcmRlZCAqL1xuICAgIHB1YmxpYyBnZXQgb3V0cHV0KCkgeyByZXR1cm4gdGhpcy4jb3V0cHV0OyB9XG5cbiAgICAvKiogQ3VycmVudGx5IHVuc3VwcG9ydGVkIHByb3BlcnR5ICovXG4gICAgcHVibGljIGdldCByZWNvcmRBdWRpbygpIHsgcmV0dXJuIHRoaXMuI3JlY29yZEF1ZGlvOyB9XG4gICAgcHVibGljIHNldCByZWNvcmRBdWRpbyhuZXdWYWx1ZTogYm9vbGVhbikge1xuICAgICAgICBpZih0aGlzLnJlY29yZGluZykgcmV0dXJuO1xuXG4gICAgICAgIHRoaXMuI3JlY29yZEF1ZGlvID0gbmV3VmFsdWU7XG4gICAgICAgIHRoaXMubm90aWZ5KFwicmVjb3JkLWF1ZGlvXCIpO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBjb25zdCB2aWRlb3NEaXIgPSBHTGliLmdldF91c2VyX3NwZWNpYWxfZGlyKEdMaWIuVXNlckRpcmVjdG9yeS5ESVJFQ1RPUllfVklERU9TKTtcbiAgICAgICAgaWYodmlkZW9zRGlyKSB0aGlzLiNwYXRoID0gYCR7dmlkZW9zRGlyfS9SZWNvcmRpbmdzYDtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGdldERlZmF1bHQoKSB7XG4gICAgICAgIGlmKCF0aGlzLmluc3RhbmNlKVxuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZSA9IG5ldyBSZWNvcmRpbmcoKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5pbnN0YW5jZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhcnRSZWNvcmRpbmcoYXJlYT86IEdkay5SZWN0YW5nbGUpIHtcbiAgICAgICAgaWYodGhpcy5yZWNvcmRpbmcpIFxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2NyZWVuIFJlY29yZGluZyBpcyBhbHJlYWR5IHJ1bm5pbmchXCIpO1xuXG4gICAgICAgIHRoaXMuI291dHB1dCA9IGAke3RpbWUuZ2V0KCkuZm9ybWF0KFwiJVktJW0tJWQtJUglTSVTXCIpfV9yZWMuJHt0aGlzLmV4dGVuc2lvbiB8fCBcIm1wNFwifWA7XG4gICAgICAgIHRoaXMuI3JlY29yZGluZyA9IHRydWU7XG4gICAgICAgIHRoaXMubm90aWZ5KFwicmVjb3JkaW5nXCIpO1xuICAgICAgICB0aGlzLmVtaXQoXCJzdGFydGVkXCIpO1xuICAgICAgICBtYWtlRGlyZWN0b3J5KHRoaXMucGF0aCk7XG5cbiAgICAgICAgY29uc3QgY2FuY2VsbGFibGUgPSBHaW8uQ2FuY2VsbGFibGUubmV3KCk7XG4gICAgICAgIGNhbmNlbGxhYmxlLmNhbmNlbCA9ICgpID0+IHt9O1xuXG4gICAgICAgIGNvbnN0IGFyZWFTdHJpbmcgPSBgJHthcmVhPy54ID8/IDB9LCR7YXJlYT8ueSA/PyAwfSAke2FyZWE/LndpZHRoID8/IDF9eCR7YXJlYT8uaGVpZ2h0ID8/IDF9YDtcblxuICAgICAgICB0aGlzLiNwcm9jZXNzID0gR2lvLlN1YnByb2Nlc3MubmV3KFtcbiAgICAgICAgICAgIFwid2YtcmVjb3JkZXJcIiwgXG4gICAgICAgICAgICAuLi4oYXJlYSA/IFsgYC1nYCwgYXJlYVN0cmluZyBdIDogW10pLFxuICAgICAgICAgICAgXCItZlwiLFxuICAgICAgICAgICAgYCR7dGhpcy5wYXRofS8ke3RoaXMub3V0cHV0IX1gXG4gICAgICAgIF0sIEdpby5TdWJwcm9jZXNzRmxhZ3MuU1RET1VUX1BJUEUgfCBHaW8uU3VicHJvY2Vzc0ZsYWdzLlNUREVSUl9QSVBFKTtcblxuICAgICAgICB0aGlzLiNwcm9jZXNzLndhaXRfYXN5bmMoY2FuY2VsbGFibGUsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc3RvcFJlY29yZGluZygpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLiNzdGFydGVkQXQgPSB0aW1lLmdldCgpLnRvX3VuaXgoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RvcFJlY29yZGluZygpIHtcbiAgICAgICAgaWYoIXRoaXMuI3Byb2Nlc3MpIHJldHVybjtcblxuICAgICAgICAhdGhpcy4jcHJvY2Vzcy5nZXRfaWZfZXhpdGVkKCkgJiYgZXhlY0FzeW5jKFtcbiAgICAgICAgICAgIFwia2lsbFwiLCBcIi1zXCIsIFwiU0lHVEVSTVwiLCB0aGlzLiNwcm9jZXNzLmdldF9pZGVudGlmaWVyKCkhXG4gICAgICAgIF0pO1xuXG4gICAgICAgIGNvbnN0IHBhdGggPSB0aGlzLiNwYXRoO1xuICAgICAgICBjb25zdCBvdXRwdXQgPSB0aGlzLiNvdXRwdXQ7XG5cbiAgICAgICAgdGhpcy4jcHJvY2VzcyA9IG51bGw7XG4gICAgICAgIHRoaXMuI3JlY29yZGluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLiNzdGFydGVkQXQgPSAtMTtcbiAgICAgICAgdGhpcy4jb3V0cHV0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5ub3RpZnkoXCJyZWNvcmRpbmdcIik7XG4gICAgICAgIHRoaXMuZW1pdChcInN0b3BwZWRcIik7XG5cbiAgICAgICAgTm90aWZpY2F0aW9ucy5nZXREZWZhdWx0KCkuc2VuZE5vdGlmaWNhdGlvbih7XG4gICAgICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIlZpZXdcIixcbiAgICAgICAgICAgICAgICAgICAgb25BY3Rpb246ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4ZWNBc3luYyhbXCJuYXV0aWx1c1wiLCBcIi1zXCIsIG91dHB1dCEsIHBhdGhdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIk9wZW5cIixcbiAgICAgICAgICAgICAgICAgICAgb25BY3Rpb246ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4ZWNBc3luYyhbXCJ4ZGctb3BlblwiLCBgJHtwYXRofS8ke291dHB1dH1gXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgYXBwTmFtZTogXCJTY3JlZW4gUmVjb3JkaW5nXCIsXG4gICAgICAgICAgICBzdW1tYXJ5OiBcIlNjcmVlbiBSZWNvcmRpbmcgc2F2ZWRcIixcbiAgICAgICAgICAgIGJvZHk6IGBTYXZlZCBhcyAke3BhdGh9LyR7b3V0cHV0fWBcbiAgICAgICAgfSk7XG4gICAgfVxufTtcbiIsICJpbXBvcnQgeyBHdGsgfSBmcm9tIFwiYWdzL2d0azRcIjtcbmltcG9ydCB7IFdpcmVwbHVtYmVyIH0gZnJvbSBcIi4uLy4uL3NjcmlwdHMvdm9sdW1lXCI7XG5pbXBvcnQgeyBOb3RpZmljYXRpb25zIH0gZnJvbSBcIi4uLy4uL3NjcmlwdHMvbm90aWZpY2F0aW9uc1wiO1xuaW1wb3J0IHsgV2luZG93cyB9IGZyb20gXCIuLi8uLi93aW5kb3dzXCI7XG5pbXBvcnQgeyBSZWNvcmRpbmcgfSBmcm9tIFwiLi4vLi4vc2NyaXB0cy9yZWNvcmRpbmdcIjtcbmltcG9ydCB7IEFjY2Vzc29yLCBjcmVhdGVCaW5kaW5nLCBjcmVhdGVDb21wdXRlZCB9IGZyb20gXCJhZ3NcIjtcbmltcG9ydCB7IHRpbWUsIHZhcmlhYmxlVG9Cb29sZWFuIH0gZnJvbSBcIi4uLy4uL3NjcmlwdHMvdXRpbHNcIjtcblxuaW1wb3J0IEFzdGFsQmx1ZXRvb3RoIGZyb20gXCJnaTovL0FzdGFsQmx1ZXRvb3RoXCI7XG5pbXBvcnQgQXN0YWxOZXR3b3JrIGZyb20gXCJnaTovL0FzdGFsTmV0d29ya1wiO1xuaW1wb3J0IEFzdGFsV3AgZnJvbSBcImdpOi8vQXN0YWxXcFwiO1xuaW1wb3J0IEdPYmplY3QgZnJvbSBcImdpOi8vR09iamVjdD92ZXJzaW9uPTIuMFwiO1xuXG5cbmV4cG9ydCBjb25zdCBTdGF0dXMgPSAoKSA9PiBcbiAgICA8R3RrLkJ1dHRvbiBjbGFzcz17Y3JlYXRlQmluZGluZyhXaW5kb3dzLmdldERlZmF1bHQoKSwgXCJvcGVuV2luZG93c1wiKS5hcygob3BlbldpbnMpID0+IFxuICAgICAgICBPYmplY3QuaGFzT3duKG9wZW5XaW5zLCBcImNvbnRyb2wtY2VudGVyXCIpID8gXCJvcGVuIHN0YXR1c1wiIDogXCJzdGF0dXNcIil9XG4gICAgICBvbkNsaWNrZWQ9eygpID0+IFdpbmRvd3MuZ2V0RGVmYXVsdCgpLnRvZ2dsZShcImNvbnRyb2wtY2VudGVyXCIpfT5cblxuICAgICAgICA8R3RrLkJveD5cbiAgICAgICAgICAgIDxHdGsuQm94IGNsYXNzPXtcInZvbHVtZS1pbmRpY2F0b3JzXCJ9IHNwYWNpbmc9ezV9PlxuICAgICAgICAgICAgICAgIDxWb2x1bWVTdGF0dXMgY2xhc3M9XCJzaW5rXCIgZW5kcG9pbnQ9e1dpcmVwbHVtYmVyLmdldERlZmF1bHQoKS5nZXREZWZhdWx0U2luaygpfVxuICAgICAgICAgICAgICAgICAgaWNvbj17Y3JlYXRlQmluZGluZyhXaXJlcGx1bWJlci5nZXREZWZhdWx0KCkuZ2V0RGVmYXVsdFNpbmsoKSwgXCJ2b2x1bWVJY29uXCIpLmFzKGljb24gPT4gXG4gICAgICAgICAgICAgICAgICAgICAgIVdpcmVwbHVtYmVyLmdldERlZmF1bHQoKS5pc011dGVkU2luaygpICYmIFxuICAgICAgICAgICAgICAgICAgICAgICAgICBXaXJlcGx1bWJlci5nZXREZWZhdWx0KCkuZ2V0U2lua1ZvbHVtZSgpID4gMCA/IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvblxuICAgICAgICAgICAgICAgICAgICAgICAgICA6IFwiYXVkaW8tdm9sdW1lLW11dGVkLXN5bWJvbGljXCIpXG4gICAgICAgICAgICAgICAgICB9IC8+XG5cbiAgICAgICAgICAgICAgICA8Vm9sdW1lU3RhdHVzIGNsYXNzPVwic291cmNlXCIgZW5kcG9pbnQ9e1dpcmVwbHVtYmVyLmdldERlZmF1bHQoKS5nZXREZWZhdWx0U291cmNlKCl9XG4gICAgICAgICAgICAgICAgICBpY29uPXtjcmVhdGVCaW5kaW5nKFdpcmVwbHVtYmVyLmdldERlZmF1bHQoKS5nZXREZWZhdWx0U291cmNlKCksIFwidm9sdW1lSWNvblwiKS5hcyhpY29uID0+IFxuICAgICAgICAgICAgICAgICAgICAgICFXaXJlcGx1bWJlci5nZXREZWZhdWx0KCkuaXNNdXRlZFNvdXJjZSgpICYmIFxuICAgICAgICAgICAgICAgICAgICAgICAgICBXaXJlcGx1bWJlci5nZXREZWZhdWx0KCkuZ2V0U291cmNlVm9sdW1lKCkgPiAwID8gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogXCJhdWRpby12b2x1bWUtbXV0ZWQtc3ltYm9saWNcIilcbiAgICAgICAgICAgICAgICAgIH0gLz5cbiAgICAgICAgICAgIDwvR3RrLkJveD5cbiAgICAgICAgICAgIDxHdGsuUmV2ZWFsZXIgcmV2ZWFsQ2hpbGQ9e2NyZWF0ZUJpbmRpbmcoUmVjb3JkaW5nLmdldERlZmF1bHQoKSwgXCJyZWNvcmRpbmdcIil9XG4gICAgICAgICAgICAgIHRyYW5zaXRpb25EdXJhdGlvbj17NTAwfSB0cmFuc2l0aW9uVHlwZT17R3RrLlJldmVhbGVyVHJhbnNpdGlvblR5cGUuU0xJREVfTEVGVH0+XG5cbiAgICAgICAgICAgICAgICA8R3RrLkJveD5cbiAgICAgICAgICAgICAgICAgICAgPEd0ay5JbWFnZSBjbGFzcz17XCJyZWNvcmRpbmcgc3RhdGVcIn0gaWNvbk5hbWU9e1wibWVkaWEtcmVjb3JkLXN5bWJvbGljXCJ9XG4gICAgICAgICAgICAgICAgICAgICAgY3NzPXtcIm1hcmdpbi1yaWdodDogNnB4O1wifSAvPlxuXG4gICAgICAgICAgICAgICAgICAgIDxHdGsuTGFiZWwgY2xhc3M9e1wicmVjLXRpbWVcIn0gbGFiZWw9e2NyZWF0ZUNvbXB1dGVkKFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlQmluZGluZyhSZWNvcmRpbmcuZ2V0RGVmYXVsdCgpLCBcInJlY29yZGluZ1wiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZVxuICAgICAgICAgICAgICAgICAgICAgIF0sIChyZWNvcmRpbmcsIGRhdGVUaW1lKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFyZWNvcmRpbmcgfHwgIVJlY29yZGluZy5nZXREZWZhdWx0KCkuc3RhcnRlZEF0KSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIi4uLlwiO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0YXJ0ZWRBdFNlY29uZHMgPSBkYXRlVGltZS50b191bml4KCkgLSBSZWNvcmRpbmcuZ2V0RGVmYXVsdCgpLnN0YXJ0ZWRBdCE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHN0YXJ0ZWRBdFNlY29uZHMgPD0gMCkgcmV0dXJuIFwiMDA6MDBcIjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtaW51dGVzID0gTWF0aC5mbG9vcihzdGFydGVkQXRTZWNvbmRzIC8gNjApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzZWNvbmRzID0gTWF0aC5mbG9vcihzdGFydGVkQXRTZWNvbmRzICUgNjApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBgJHsgbWludXRlcyA8IDEwID8gYDAke21pbnV0ZXN9YCA6IG1pbnV0ZXMgfTokeyBzZWNvbmRzIDwgMTAgPyBgMCR7c2Vjb25kc31gIDogc2Vjb25kcyB9YDtcbiAgICAgICAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L0d0ay5Cb3g+XG4gICAgICAgICAgICA8L0d0ay5SZXZlYWxlcj5cbiAgICAgICAgICAgIDxTdGF0dXNJY29ucyAvPlxuICAgICAgICA8L0d0ay5Cb3g+XG4gICAgPC9HdGsuQnV0dG9uPiBhcyBHdGsuQnV0dG9uO1xuXG5mdW5jdGlvbiBWb2x1bWVTdGF0dXMocHJvcHM6IHsgY2xhc3M/OiBzdHJpbmcsIGVuZHBvaW50OiBBc3RhbFdwLkVuZHBvaW50LCBpY29uPzogKHN0cmluZ3xBY2Nlc3NvcjxzdHJpbmc+KSB9KSB7XG4gICAgcmV0dXJuIDxHdGsuQm94IHNwYWNpbmc9ezJ9IGNsYXNzPXtwcm9wcy5jbGFzc30gJD17KHNlbGYpID0+IHtcbiAgICAgICAgICBjb25zdCBjb25uczogTWFwPEdPYmplY3QuT2JqZWN0LCBudW1iZXI+ID0gbmV3IE1hcCgpO1xuICAgICAgICAgIGNvbnN0IGNvbnRyb2xsZXJTY3JvbGwgPSBHdGsuRXZlbnRDb250cm9sbGVyU2Nyb2xsLm5ldyhcbiAgICAgICAgICAgICAgR3RrLkV2ZW50Q29udHJvbGxlclNjcm9sbEZsYWdzLlZFUlRJQ0FMKTtcblxuICAgICAgICAgIGNvbm5zLnNldChjb250cm9sbGVyU2Nyb2xsLCBjb250cm9sbGVyU2Nyb2xsLmNvbm5lY3QoXCJzY3JvbGxcIiwgKF8sIF9keCwgZHkpID0+IHtcbiAgICAgICAgICAgICAgKGR5ID4gMCkgP1xuICAgICAgICAgICAgICAgICAgV2lyZXBsdW1iZXIuZ2V0RGVmYXVsdCgpLmRlY3JlYXNlRW5kcG9pbnRWb2x1bWUocHJvcHMuZW5kcG9pbnQsIDUpXG4gICAgICAgICAgICAgIDogV2lyZXBsdW1iZXIuZ2V0RGVmYXVsdCgpLmluY3JlYXNlRW5kcG9pbnRWb2x1bWUocHJvcHMuZW5kcG9pbnQsIDUpO1xuICAgICAgICAgIH0pKTtcblxuICAgICAgICAgIGNvbm5zLnNldChzZWxmLCBzZWxmLmNvbm5lY3QoXCJkZXN0cm95XCIsICgpID0+IGNvbm5zLmZvckVhY2goKGlkLCBvYmopID0+XG4gICAgICAgICAgICAgIG9iai5kaXNjb25uZWN0KGlkKSkpKTtcbiAgICAgIH19PlxuXG4gICAgICAgIHtwcm9wcy5pY29uICYmIDxHdGsuSW1hZ2UgaWNvbk5hbWU9e3Byb3BzLmljb259IC8+fVxuICAgICAgICA8R3RrLkxhYmVsIGNsYXNzPXtcInZvbHVtZVwifSBsYWJlbD17Y3JlYXRlQmluZGluZyhwcm9wcy5lbmRwb2ludCwgXCJ2b2x1bWVcIikuYXModm9sID0+XG4gICAgICAgICAgICBgJHtNYXRoLmZsb29yKHZvbCAqIDEwMCl9JWApfSAvPlxuICAgIDwvR3RrLkJveD4gYXMgR3RrLkJveDtcbn1cblxuZnVuY3Rpb24gU3RhdHVzSWNvbnMoKSB7XG4gICAgcmV0dXJuIDxHdGsuQm94IGNsYXNzPXtcInN0YXR1cy1pY29uc1wifSBzcGFjaW5nPXs4fT5cbiAgICAgICAgPEd0ay5JbWFnZSBpY29uTmFtZT17Y3JlYXRlQ29tcHV0ZWQoW1xuICAgICAgICAgICAgICBjcmVhdGVCaW5kaW5nKEFzdGFsQmx1ZXRvb3RoLmdldF9kZWZhdWx0KCksIFwiaXNQb3dlcmVkXCIpLFxuICAgICAgICAgICAgICBjcmVhdGVCaW5kaW5nKEFzdGFsQmx1ZXRvb3RoLmdldF9kZWZhdWx0KCksIFwiaXNDb25uZWN0ZWRcIilcbiAgICAgICAgICBdLCAocG93ZXJlZCwgY29ubmVjdGVkKSA9PiB7XG4gICAgICAgICAgICAgIHJldHVybiBwb3dlcmVkID8gKFxuICAgICAgICAgICAgICAgICAgY29ubmVjdGVkID8gXG4gICAgICAgICAgICAgICAgICAgICAgXCJibHVldG9vdGgtYWN0aXZlLXN5bWJvbGljXCJcbiAgICAgICAgICAgICAgICAgIDogXCJibHVldG9vdGgtc3ltYm9saWNcIlxuICAgICAgICAgICAgICApIDogXCJibHVldG9vdGgtZGlzYWJsZWQtc3ltYm9saWNcIlxuICAgICAgICAgIH0pfSBjbGFzcz17XCJibHVldG9vdGggc3RhdGVcIn0gdmlzaWJsZT17XG4gICAgICAgICAgICAgIGNyZWF0ZUJpbmRpbmcoQXN0YWxCbHVldG9vdGguZ2V0X2RlZmF1bHQoKSwgXCJhZGFwdGVyXCIpLmFzKEJvb2xlYW4pXG4gICAgICAgICAgfSBcbiAgICAgICAgLz5cblxuICAgICAgICA8R3RrLkltYWdlIGljb25OYW1lPXtjcmVhdGVCaW5kaW5nKEFzdGFsTmV0d29yay5nZXRfZGVmYXVsdCgpLCBcInByaW1hcnlcIikuYXMocHJpbWFyeSA9PiB7XG4gICAgICAgICAgICAgIHN3aXRjaChwcmltYXJ5KSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIEFzdGFsTmV0d29yay5QcmltYXJ5LldJUkVEOiByZXR1cm4gQXN0YWxOZXR3b3JrLmdldF9kZWZhdWx0KCkud2lyZWQuZ2V0X2ljb25fbmFtZSgpO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIEFzdGFsTmV0d29yay5QcmltYXJ5LldJRkk6IHJldHVybiBBc3RhbE5ldHdvcmsuZ2V0X2RlZmF1bHQoKS53aWZpLmdldF9pY29uX25hbWUoKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHJldHVybiBcIm5ldHdvcmstbm8tcm91dGUtc3ltYm9saWNcIjtcbiAgICAgICAgICB9KX0gY2xhc3M9e1wibmV0d29yayBzdGF0ZVwifVxuICAgICAgICAgIHZpc2libGU9e2NyZWF0ZUJpbmRpbmcoQXN0YWxOZXR3b3JrLmdldF9kZWZhdWx0KCksIFwicHJpbWFyeVwiKS5hcyhwcmltYXJ5ID0+XG4gICAgICAgICAgICAgIHByaW1hcnkgIT09IEFzdGFsTmV0d29yay5QcmltYXJ5LlVOS05PV04pfVxuICAgICAgICAvPlxuXG4gICAgICAgIDxHdGsuQm94PlxuICAgICAgICAgICAgPEd0ay5JbWFnZSBjbGFzcz17XCJiZWxsIHN0YXRlXCJ9IGljb25OYW1lPXtjcmVhdGVCaW5kaW5nKFxuICAgICAgICAgICAgICAgIE5vdGlmaWNhdGlvbnMuZ2V0RGVmYXVsdCgpLmdldE5vdGlmZCgpLCBcImRvbnREaXN0dXJiXCIpLmFzKGRuZCA9PiBkbmQgPyBcbiAgICAgICAgICAgICAgICAgICAgXCJtaW51cy1jaXJjbGUtZmlsbGVkLXN5bWJvbGljXCJcbiAgICAgICAgICAgICAgICA6IFwicHJlZmVyZW5jZXMtc3lzdGVtLW5vdGlmaWNhdGlvbnMtc3ltYm9saWNcIilcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxHdGsuSW1hZ2UgaWNvbk5hbWU9e1wiY2lyY2xlLWZpbGxlZC1zeW1ib2xpY1wifSBjbGFzcz17XCJub3RpZmljYXRpb24tY291bnRcIn1cbiAgICAgICAgICAgICAgdmlzaWJsZT17dmFyaWFibGVUb0Jvb2xlYW4oY3JlYXRlQmluZGluZyhOb3RpZmljYXRpb25zLmdldERlZmF1bHQoKSwgXCJoaXN0b3J5XCIpKX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgIDwvR3RrLkJveD5cbiAgICA8L0d0ay5Cb3g+XG59XG4iLCAiaW1wb3J0IHsgQXN0YWwsIEd0ayB9IGZyb20gXCJhZ3MvZ3RrNFwiO1xuXG5pbXBvcnQgeyBUcmF5IH0gZnJvbSBcIi4uL3dpZGdldC9iYXIvVHJheVwiO1xuaW1wb3J0IHsgV29ya3NwYWNlcyB9IGZyb20gXCIuLi93aWRnZXQvYmFyL1dvcmtzcGFjZXNcIjtcbmltcG9ydCB7IEZvY3VzZWRDbGllbnQgfSBmcm9tIFwiLi4vd2lkZ2V0L2Jhci9Gb2N1c2VkQ2xpZW50XCI7XG5pbXBvcnQgeyBNZWRpYSB9IGZyb20gXCIuLi93aWRnZXQvYmFyL01lZGlhXCI7XG5pbXBvcnQgeyBBcHBzIH0gZnJvbSBcIi4uL3dpZGdldC9iYXIvQXBwc1wiO1xuaW1wb3J0IHsgQ2xvY2sgfSBmcm9tIFwiLi4vd2lkZ2V0L2Jhci9DbG9ja1wiO1xuaW1wb3J0IHsgU3RhdHVzIH0gZnJvbSBcIi4uL3dpZGdldC9iYXIvU3RhdHVzXCI7XG5cbmV4cG9ydCBjb25zdCBCYXIgPSAobW9uOiBudW1iZXIpID0+IHtcbiAgICBjb25zdCB3aWRnZXRTcGFjaW5nID0gNDtcbiAgICByZXR1cm4gPEFzdGFsLldpbmRvdyBuYW1lc3BhY2U9e1widG9wLWJhclwifSBsYXllcj17QXN0YWwuTGF5ZXIuVE9QfVxuICAgICAgYW5jaG9yPXtBc3RhbC5XaW5kb3dBbmNob3IuVE9QIHwgQXN0YWwuV2luZG93QW5jaG9yLkxFRlQgfCBBc3RhbC5XaW5kb3dBbmNob3IuUklHSFR9XG4gICAgICBleGNsdXNpdml0eT17QXN0YWwuRXhjbHVzaXZpdHkuRVhDTFVTSVZFfSBoZWlnaHRSZXF1ZXN0PXs0Nn0gbW9uaXRvcj17bW9ufVxuICAgICAgdmlzaWJsZT17dHJ1ZX0gY2FuRm9jdXM9e2ZhbHNlfT5cbiAgICAgICAgPEd0ay5Cb3ggY2xhc3M9e1wiYmFyLWNvbnRhaW5lclwifT5cbiAgICAgICAgICAgIDxHdGsuQ2VudGVyQm94IGNsYXNzPXtcImJhci1jZW50ZXJib3hcIn0gaGV4cGFuZD5cbiAgICAgICAgICAgICAgICA8R3RrLkJveCBjbGFzcz17XCJ3aWRnZXRzLWxlZnRcIn0gaG9tb2dlbmVvdXM9e2ZhbHNlfVxuICAgICAgICAgICAgICAgICAgaGFsaWduPXtHdGsuQWxpZ24uU1RBUlR9IHNwYWNpbmc9e3dpZGdldFNwYWNpbmd9XG4gICAgICAgICAgICAgICAgICAkdHlwZT1cInN0YXJ0XCI+XG5cbiAgICAgICAgICAgICAgICAgICAgPEFwcHMgLz5cbiAgICAgICAgICAgICAgICAgICAgPFdvcmtzcGFjZXMgLz5cbiAgICAgICAgICAgICAgICAgICAgPEZvY3VzZWRDbGllbnQgLz5cbiAgICAgICAgICAgICAgICA8L0d0ay5Cb3g+XG4gICAgICAgICAgICAgICAgPEd0ay5Cb3ggY2xhc3M9e1wid2lkZ2V0cy1jZW50ZXJcIn0gaG9tb2dlbmVvdXM9e2ZhbHNlfVxuICAgICAgICAgICAgICAgICAgc3BhY2luZz17d2lkZ2V0U3BhY2luZ30gaGFsaWduPXtHdGsuQWxpZ24uQ0VOVEVSfVxuICAgICAgICAgICAgICAgICAgJHR5cGU9XCJjZW50ZXJcIj5cblxuICAgICAgICAgICAgICAgICAgICA8Q2xvY2sgLz5cbiAgICAgICAgICAgICAgICAgICAgPE1lZGlhIC8+XG4gICAgICAgICAgICAgICAgPC9HdGsuQm94PlxuICAgICAgICAgICAgICAgIDxHdGsuQm94IGNsYXNzPXtcIndpZGdldHMtcmlnaHRcIn0gaG9tb2dlbmVvdXM9e2ZhbHNlfVxuICAgICAgICAgICAgICAgICAgc3BhY2luZz17d2lkZ2V0U3BhY2luZ30gaGFsaWduPXtHdGsuQWxpZ24uRU5EfVxuICAgICAgICAgICAgICAgICAgJHR5cGU9XCJlbmRcIj5cbiAgICAgICAgICAgICAgICAgICAgPFRyYXkgLz5cbiAgICAgICAgICAgICAgICAgICAgPFN0YXR1cyAvPlxuICAgICAgICAgICAgICAgIDwvR3RrLkJveD5cbiAgICAgICAgICAgIDwvR3RrLkNlbnRlckJveD5cbiAgICAgICAgPC9HdGsuQm94PlxuICAgIDwvQXN0YWwuV2luZG93PlxufVxuIiwgImltcG9ydCBHTGliIGZyb20gXCJnaTovL0dMaWI/dmVyc2lvbj0yLjBcIlxuaW1wb3J0IEd0ayBmcm9tIFwiZ2k6Ly9HdGs/dmVyc2lvbj00LjBcIlxuaW1wb3J0IEFzdGFsIGZyb20gXCJnaTovL0FzdGFsP3ZlcnNpb249NC4wXCJcbmltcG9ydCB7IG1rQXBwIH0gZnJvbSBcIi4uL19hcHAuanNcIlxuXG5HdGsuaW5pdCgpXG5cbi8vIHN0b3AgdGhpcyBmcm9tIGxlYWtpbmcgaW50byBzdWJwcm9jZXNzZXNcbi8vIGFuZCBnaW8gbGF1bmNoIGludm9jYXRpb25zXG5HTGliLnVuc2V0ZW52KFwiTERfUFJFTE9BRFwiKVxuXG4vLyB1c2VycyBtaWdodCB3YW50IHRvIHVzZSBBZHdhaXRhIGluIHdoaWNoIGNhc2UgaXQgaGFzIHRvIGJlIGluaXRpYWxpemVkXG4vLyBpdCBtaWdodCBiZSBjb21tb24gcGl0ZmFsbCB0byBmb3JnZXQgaXQgYmVjYXVzZSBgQXBwYCBpcyBub3QgYEFkdy5BcHBsaWNhdGlvbmBcbmF3YWl0IGltcG9ydChcImdpOi8vQWR3P3ZlcnNpb249MVwiKS50aGVuKCh7IGRlZmF1bHQ6IEFkdyB9KSA9PiBBZHcuaW5pdCgpKS5jYXRjaCgoKSA9PiB2b2lkIDApXG5cbmV4cG9ydCBkZWZhdWx0IG1rQXBwKEFzdGFsLkFwcGxpY2F0aW9uKVxuIiwgIi8qKlxuICogV29ya2Fyb3VuZCBmb3IgXCJDYW4ndCBjb252ZXJ0IG5vbi1udWxsIHBvaW50ZXIgdG8gSlMgdmFsdWUgXCJcbiAqL1xuXG5leHBvcnQge31cblxuZnVuY3Rpb24gc25ha2VpZnkoc3RyOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyXG4gICAgICAgIC5yZXBsYWNlKC8oW2Etel0pKFtBLVpdKS9nLCBcIiQxXyQyXCIpXG4gICAgICAgIC5yZXBsYWNlQWxsKFwiLVwiLCBcIl9cIilcbiAgICAgICAgLnRvTG93ZXJDYXNlKClcbn1cblxuYXN5bmMgZnVuY3Rpb24gc3VwcHJlc3M8VD4obW9kOiBQcm9taXNlPHsgZGVmYXVsdDogVCB9PiwgcGF0Y2g6IChtOiBUKSA9PiB2b2lkKSB7XG4gICAgcmV0dXJuIG1vZC50aGVuKChtKSA9PiBwYXRjaChtLmRlZmF1bHQpKS5jYXRjaCgoKSA9PiB2b2lkIDApXG59XG5cbmZ1bmN0aW9uIHBhdGNoPFAgZXh0ZW5kcyBvYmplY3Q+KHByb3RvOiBQLCBwcm9wOiBFeHRyYWN0PGtleW9mIFAsIHN0cmluZz4pIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvdG8sIHByb3AsIHtcbiAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXNbYGdldF8ke3NuYWtlaWZ5KHByb3ApfWBdKClcbiAgICAgICAgfSxcbiAgICB9KVxufVxuXG5hd2FpdCBzdXBwcmVzcyhpbXBvcnQoXCJnaTovL0FzdGFsQXBwc1wiKSwgKHsgQXBwcywgQXBwbGljYXRpb24gfSkgPT4ge1xuICAgIHBhdGNoKEFwcHMucHJvdG90eXBlLCBcImxpc3RcIilcbiAgICBwYXRjaChBcHBsaWNhdGlvbi5wcm90b3R5cGUsIFwia2V5d29yZHNcIilcbiAgICBwYXRjaChBcHBsaWNhdGlvbi5wcm90b3R5cGUsIFwiY2F0ZWdvcmllc1wiKVxufSlcblxuYXdhaXQgc3VwcHJlc3MoaW1wb3J0KFwiZ2k6Ly9Bc3RhbEJhdHRlcnlcIiksICh7IFVQb3dlciB9KSA9PiB7XG4gICAgcGF0Y2goVVBvd2VyLnByb3RvdHlwZSwgXCJkZXZpY2VzXCIpXG59KVxuXG5hd2FpdCBzdXBwcmVzcyhpbXBvcnQoXCJnaTovL0FzdGFsQmx1ZXRvb3RoXCIpLCAoeyBBZGFwdGVyLCBCbHVldG9vdGgsIERldmljZSB9KSA9PiB7XG4gICAgcGF0Y2goQWRhcHRlci5wcm90b3R5cGUsIFwidXVpZHNcIilcbiAgICBwYXRjaChCbHVldG9vdGgucHJvdG90eXBlLCBcImFkYXB0ZXJzXCIpXG4gICAgcGF0Y2goQmx1ZXRvb3RoLnByb3RvdHlwZSwgXCJkZXZpY2VzXCIpXG4gICAgcGF0Y2goRGV2aWNlLnByb3RvdHlwZSwgXCJ1dWlkc1wiKVxufSlcblxuYXdhaXQgc3VwcHJlc3MoaW1wb3J0KFwiZ2k6Ly9Bc3RhbEh5cHJsYW5kXCIpLCAoeyBIeXBybGFuZCwgTW9uaXRvciwgV29ya3NwYWNlIH0pID0+IHtcbiAgICBwYXRjaChIeXBybGFuZC5wcm90b3R5cGUsIFwiYmluZHNcIilcbiAgICBwYXRjaChIeXBybGFuZC5wcm90b3R5cGUsIFwibW9uaXRvcnNcIilcbiAgICBwYXRjaChIeXBybGFuZC5wcm90b3R5cGUsIFwid29ya3NwYWNlc1wiKVxuICAgIHBhdGNoKEh5cHJsYW5kLnByb3RvdHlwZSwgXCJjbGllbnRzXCIpXG4gICAgcGF0Y2goTW9uaXRvci5wcm90b3R5cGUsIFwiYXZhaWxhYmxlTW9kZXNcIilcbiAgICBwYXRjaChNb25pdG9yLnByb3RvdHlwZSwgXCJhdmFpbGFibGVfbW9kZXNcIilcbiAgICBwYXRjaChXb3Jrc3BhY2UucHJvdG90eXBlLCBcImNsaWVudHNcIilcbn0pXG5cbmF3YWl0IHN1cHByZXNzKGltcG9ydChcImdpOi8vQXN0YWxNcHJpc1wiKSwgKHsgTXByaXMsIFBsYXllciB9KSA9PiB7XG4gICAgcGF0Y2goTXByaXMucHJvdG90eXBlLCBcInBsYXllcnNcIilcbiAgICBwYXRjaChQbGF5ZXIucHJvdG90eXBlLCBcInN1cHBvcnRlZF91cmlfc2NoZW1lc1wiKVxuICAgIHBhdGNoKFBsYXllci5wcm90b3R5cGUsIFwic3VwcG9ydGVkVXJpU2NoZW1lc1wiKVxuICAgIHBhdGNoKFBsYXllci5wcm90b3R5cGUsIFwic3VwcG9ydGVkX21pbWVfdHlwZXNcIilcbiAgICBwYXRjaChQbGF5ZXIucHJvdG90eXBlLCBcInN1cHBvcnRlZE1pbWVUeXBlc1wiKVxuICAgIHBhdGNoKFBsYXllci5wcm90b3R5cGUsIFwiY29tbWVudHNcIilcbn0pXG5cbmF3YWl0IHN1cHByZXNzKGltcG9ydChcImdpOi8vQXN0YWxOZXR3b3JrXCIpLCAoeyBXaWZpIH0pID0+IHtcbiAgICBwYXRjaChXaWZpLnByb3RvdHlwZSwgXCJhY2Nlc3NfcG9pbnRzXCIpXG4gICAgcGF0Y2goV2lmaS5wcm90b3R5cGUsIFwiYWNjZXNzUG9pbnRzXCIpXG59KVxuXG5hd2FpdCBzdXBwcmVzcyhpbXBvcnQoXCJnaTovL0FzdGFsTm90aWZkXCIpLCAoeyBOb3RpZmQsIE5vdGlmaWNhdGlvbiB9KSA9PiB7XG4gICAgcGF0Y2goTm90aWZkLnByb3RvdHlwZSwgXCJub3RpZmljYXRpb25zXCIpXG4gICAgcGF0Y2goTm90aWZpY2F0aW9uLnByb3RvdHlwZSwgXCJhY3Rpb25zXCIpXG59KVxuXG5hd2FpdCBzdXBwcmVzcyhpbXBvcnQoXCJnaTovL0FzdGFsUG93ZXJQcm9maWxlc1wiKSwgKHsgUG93ZXJQcm9maWxlcyB9KSA9PiB7XG4gICAgcGF0Y2goUG93ZXJQcm9maWxlcy5wcm90b3R5cGUsIFwiYWN0aW9uc1wiKVxufSlcblxuYXdhaXQgc3VwcHJlc3MoaW1wb3J0KFwiZ2k6Ly9Bc3RhbFdwXCIpLCAoeyBXcCwgQXVkaW8sIFZpZGVvIH0pID0+IHtcbiAgICBwYXRjaChXcC5wcm90b3R5cGUsIFwiZW5kcG9pbnRzXCIpXG4gICAgcGF0Y2goV3AucHJvdG90eXBlLCBcImRldmljZXNcIilcbiAgICBwYXRjaChBdWRpby5wcm90b3R5cGUsIFwic3RyZWFtc1wiKVxuICAgIHBhdGNoKEF1ZGlvLnByb3RvdHlwZSwgXCJyZWNvcmRlcnNcIilcbiAgICBwYXRjaChBdWRpby5wcm90b3R5cGUsIFwibWljcm9waG9uZXNcIilcbiAgICBwYXRjaChBdWRpby5wcm90b3R5cGUsIFwic3BlYWtlcnNcIilcbiAgICBwYXRjaChBdWRpby5wcm90b3R5cGUsIFwiZGV2aWNlc1wiKVxuICAgIHBhdGNoKFZpZGVvLnByb3RvdHlwZSwgXCJzdHJlYW1zXCIpXG4gICAgcGF0Y2goVmlkZW8ucHJvdG90eXBlLCBcInJlY29yZGVyc1wiKVxuICAgIHBhdGNoKFZpZGVvLnByb3RvdHlwZSwgXCJzaW5rc1wiKVxuICAgIHBhdGNoKFZpZGVvLnByb3RvdHlwZSwgXCJzb3VyY2VzXCIpXG4gICAgcGF0Y2goVmlkZW8ucHJvdG90eXBlLCBcImRldmljZXNcIilcbn0pXG5cbmF3YWl0IHN1cHByZXNzKGltcG9ydChcImdpOi8vQXN0YWxUcmF5XCIpLCAoeyBUcmF5IH0pID0+IHtcbiAgICBwYXRjaChUcmF5LnByb3RvdHlwZSwgXCJpdGVtc1wiKVxufSlcbiIsICJpbXBvcnQgXCIuL292ZXJyaWRlcy5qc1wiXG5pbXBvcnQgeyBzZXRDb25zb2xlTG9nRG9tYWluIH0gZnJvbSBcImNvbnNvbGVcIlxuaW1wb3J0IHsgZXhpdCwgcHJvZ3JhbUFyZ3MgfSBmcm9tIFwic3lzdGVtXCJcbmltcG9ydCB7IGNyZWF0ZVJvb3QgfSBmcm9tIFwiLi4vZ25pbS9zcmMvanN4L3Njb3BlLmpzXCJcbmltcG9ydCBJTyBmcm9tIFwiZ2k6Ly9Bc3RhbElPXCJcbmltcG9ydCBHT2JqZWN0IGZyb20gXCJnaTovL0dPYmplY3RcIlxuaW1wb3J0IEdpbyBmcm9tIFwiZ2k6Ly9HaW8/dmVyc2lvbj0yLjBcIlxuaW1wb3J0IHR5cGUgQXN0YWwzIGZyb20gXCJnaTovL0FzdGFsP3ZlcnNpb249My4wXCJcbmltcG9ydCB0eXBlIEFzdGFsNCBmcm9tIFwiZ2k6Ly9Bc3RhbD92ZXJzaW9uPTQuMFwiXG5cbnR5cGUgQ29uZmlnID0gUGFydGlhbDx7XG4gICAgaW5zdGFuY2VOYW1lOiBzdHJpbmdcbiAgICBjc3M6IHN0cmluZ1xuICAgIGljb25zOiBzdHJpbmdcbiAgICBndGtUaGVtZTogc3RyaW5nXG4gICAgaWNvblRoZW1lOiBzdHJpbmdcbiAgICBjdXJzb3JUaGVtZTogc3RyaW5nXG4gICAgaG9sZDogYm9vbGVhblxuICAgIHJlcXVlc3RIYW5kbGVyKHJlcXVlc3Q6IHN0cmluZywgcmVzOiAocmVzcG9uc2U6IGFueSkgPT4gdm9pZCk6IHZvaWRcbiAgICBtYWluKC4uLmFyZ3M6IHN0cmluZ1tdKTogdm9pZFxuICAgIGNsaWVudChtZXNzYWdlOiAobXNnOiBzdHJpbmcpID0+IHN0cmluZywgLi4uYXJnczogc3RyaW5nW10pOiB2b2lkXG59PlxuXG5pbnRlcmZhY2UgQXN0YWwzSlMgZXh0ZW5kcyBBc3RhbDMuQXBwbGljYXRpb24ge1xuICAgIGV2YWwoYm9keTogc3RyaW5nKTogUHJvbWlzZTxhbnk+XG4gICAgcmVxdWVzdEhhbmRsZXI6IENvbmZpZ1tcInJlcXVlc3RIYW5kbGVyXCJdXG4gICAgYXBwbHlfY3NzKHN0eWxlOiBzdHJpbmcsIHJlc2V0PzogYm9vbGVhbik6IHZvaWRcbiAgICBxdWl0KGNvZGU/OiBudW1iZXIpOiB2b2lkXG4gICAgc3RhcnQoY29uZmlnPzogQ29uZmlnKTogdm9pZFxufVxuXG5pbnRlcmZhY2UgQXN0YWw0SlMgZXh0ZW5kcyBBc3RhbDQuQXBwbGljYXRpb24ge1xuICAgIGV2YWwoYm9keTogc3RyaW5nKTogUHJvbWlzZTxhbnk+XG4gICAgcmVxdWVzdEhhbmRsZXI/OiBDb25maWdbXCJyZXF1ZXN0SGFuZGxlclwiXVxuICAgIGFwcGx5X2NzcyhzdHlsZTogc3RyaW5nLCByZXNldD86IGJvb2xlYW4pOiB2b2lkXG4gICAgcXVpdChjb2RlPzogbnVtYmVyKTogdm9pZFxuICAgIHN0YXJ0KGNvbmZpZz86IENvbmZpZyk6IHZvaWRcbn1cblxudHlwZSBBcHAzID0gdHlwZW9mIEFzdGFsMy5BcHBsaWNhdGlvblxudHlwZSBBcHA0ID0gdHlwZW9mIEFzdGFsNC5BcHBsaWNhdGlvblxuXG5leHBvcnQgZnVuY3Rpb24gbWtBcHA8QXBwIGV4dGVuZHMgQXBwMz4oQXBwOiBBcHApOiBBc3RhbDNKU1xuZXhwb3J0IGZ1bmN0aW9uIG1rQXBwPEFwcCBleHRlbmRzIEFwcDQ+KEFwcDogQXBwKTogQXN0YWw0SlNcblxuZXhwb3J0IGZ1bmN0aW9uIG1rQXBwKEFwcDogQXBwMyB8IEFwcDQpIHtcbiAgICByZXR1cm4gbmV3IChjbGFzcyBBc3RhbEpTIGV4dGVuZHMgQXBwIHtcbiAgICAgICAgcHJpdmF0ZSBkaXNwb3NlUm9vdD86ICgpID0+IHZvaWRcblxuICAgICAgICBzdGF0aWMge1xuICAgICAgICAgICAgR09iamVjdC5yZWdpc3RlckNsYXNzKHsgR1R5cGVOYW1lOiBcIkFzdGFsSlNcIiB9LCB0aGlzIGFzIGFueSlcbiAgICAgICAgfVxuXG4gICAgICAgIGV2YWwoYm9keTogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzLCByZWopID0+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmbiA9IEZ1bmN0aW9uKGByZXR1cm4gKGFzeW5jIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHtib2R5LmluY2x1ZGVzKFwiO1wiKSA/IGJvZHkgOiBgcmV0dXJuICR7Ym9keX07YH1cbiAgICAgICAgICAgICAgICAgICAgfSlgKVxuICAgICAgICAgICAgICAgICAgICBmbigpKCkudGhlbihyZXMpLmNhdGNoKHJlailcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZWooZXJyb3IpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcXVlc3RIYW5kbGVyPzogQ29uZmlnW1wicmVxdWVzdEhhbmRsZXJcIl1cblxuICAgICAgICB2ZnVuY19zaHV0ZG93bigpOiB2b2lkIHtcbiAgICAgICAgICAgIHN1cGVyLnZmdW5jX3NodXRkb3duKClcbiAgICAgICAgICAgIHRoaXMuZGlzcG9zZVJvb3Q/LigpXG4gICAgICAgIH1cblxuICAgICAgICB2ZnVuY19yZXF1ZXN0KG1zZzogc3RyaW5nLCBjb25uOiBHaW8uU29ja2V0Q29ubmVjdGlvbik6IHZvaWQge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnJlcXVlc3RIYW5kbGVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlcXVlc3RIYW5kbGVyKG1zZywgKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIElPLndyaXRlX3NvY2soY29ubiwgU3RyaW5nKHJlc3BvbnNlKSwgKF8sIHJlcykgPT4gSU8ud3JpdGVfc29ja19maW5pc2gocmVzKSlcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdXBlci52ZnVuY19yZXF1ZXN0KG1zZywgY29ubilcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGFwcGx5X2NzcyhzdHlsZTogc3RyaW5nLCByZXNldCA9IGZhbHNlKSB7XG4gICAgICAgICAgICBzdXBlci5hcHBseV9jc3Moc3R5bGUsIHJlc2V0KVxuICAgICAgICB9XG5cbiAgICAgICAgcXVpdChjb2RlPzogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgICAgICBzdXBlci5xdWl0KClcbiAgICAgICAgICAgIGV4aXQoY29kZSA/PyAwKVxuICAgICAgICB9XG5cbiAgICAgICAgc3RhcnQoeyByZXF1ZXN0SGFuZGxlciwgY3NzLCBob2xkLCBtYWluLCBjbGllbnQsIGljb25zLCAuLi5jZmcgfTogQ29uZmlnID0ge30pIHtcbiAgICAgICAgICAgIGNvbnN0IGFwcCA9IHRoaXMgYXMgdW5rbm93biBhcyBJbnN0YW5jZVR5cGU8QXBwMyB8IEFwcDQ+XG5cbiAgICAgICAgICAgIGNsaWVudCA/Pz0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHByaW50KGBBc3RhbCBpbnN0YW5jZSBcIiR7YXBwLmluc3RhbmNlTmFtZX1cIiBhbHJlYWR5IHJ1bm5pbmdgKVxuICAgICAgICAgICAgICAgIGV4aXQoMSlcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCBjZmcpXG4gICAgICAgICAgICBzZXRDb25zb2xlTG9nRG9tYWluKGFwcC5pbnN0YW5jZU5hbWUpXG5cbiAgICAgICAgICAgIHRoaXMucmVxdWVzdEhhbmRsZXIgPSByZXF1ZXN0SGFuZGxlclxuICAgICAgICAgICAgYXBwLmNvbm5lY3QoXCJhY3RpdmF0ZVwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY3JlYXRlUm9vdCgoZGlzcG9zZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3Bvc2VSb290ID0gZGlzcG9zZVxuICAgICAgICAgICAgICAgICAgICBtYWluPy4oLi4ucHJvZ3JhbUFyZ3MpXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgYXBwLmFjcXVpcmVfc29ja2V0KClcbiAgICAgICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgICAgICAgIHJldHVybiBjbGllbnQoKG1zZykgPT4gSU8uc2VuZF9yZXF1ZXN0KGFwcC5pbnN0YW5jZU5hbWUsIG1zZykhLCAuLi5wcm9ncmFtQXJncylcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGNzcykgdGhpcy5hcHBseV9jc3MoY3NzLCBmYWxzZSlcblxuICAgICAgICAgICAgaWYgKGljb25zKSBhcHAuYWRkX2ljb25zKGljb25zKVxuXG4gICAgICAgICAgICBob2xkID8/PSB0cnVlXG4gICAgICAgICAgICBpZiAoaG9sZCkgYXBwLmhvbGQoKVxuXG4gICAgICAgICAgICBhcHAucnVuQXN5bmMoW10pXG4gICAgICAgIH1cbiAgICB9KSgpXG59XG4iLCAiaW1wb3J0IEdPYmplY3QsIHsgZ2V0dGVyLCByZWdpc3Rlciwgc2lnbmFsIH0gZnJvbSBcImFncy9nb2JqZWN0XCI7XG5pbXBvcnQgeyBBc3RhbCB9IGZyb20gXCJhZ3MvZ3RrNFwiO1xuaW1wb3J0IHsgQmFyIH0gZnJvbSBcIi4vd2luZG93L0JhclwiO1xuXG5pbXBvcnQgQXBwIGZyb20gXCJhZ3MvZ3RrNC9hcHBcIlxuaW1wb3J0IEFzdGFsSHlwcmxhbmQgZnJvbSBcImdpOi8vQXN0YWxIeXBybGFuZFwiO1xuaW1wb3J0IHsgT1NEIH0gZnJvbSBcIi4vd2luZG93L09TRFwiO1xuaW1wb3J0IHsgQ29udHJvbENlbnRlciB9IGZyb20gXCIuL3dpbmRvdy9Db250cm9sQ2VudGVyXCI7XG5pbXBvcnQgeyBGbG9hdGluZ05vdGlmaWNhdGlvbnMgfSBmcm9tIFwiLi93aW5kb3cvRmxvYXRpbmdOb3RpZmljYXRpb25zXCI7XG5pbXBvcnQgeyBDZW50ZXJXaW5kb3cgfSBmcm9tIFwiLi93aW5kb3cvQ2VudGVyV2luZG93XCI7XG5pbXBvcnQgeyBMb2dvdXRNZW51IH0gZnJvbSBcIi4vd2luZG93L0xvZ291dE1lbnVcIjtcbmltcG9ydCB7IEFwcHNXaW5kb3cgfSBmcm9tIFwiLi93aW5kb3cvQXBwc1dpbmRvd1wiO1xuXG5cbmV4cG9ydCB7IFdpbmRvd3MgfTtcblxuLyoqXG4gKiBXaW5kb3dpbmcgU3lzdGVtXG4gKiBQb3NzaWJsZSBhY3Rpb25zOiBnZXR0aW5nIHdpbmRvdyBzdGF0ZXMsIGNsb3NlLCBvcGVuLCB0b2dnbGUgd2luZG93cyBhbmRcbiAqIHJlZ2lzdGVyaW5nIHdpbmRvd3MuXG4gKiBBbHNvIGNvbnRhaW5zIHV0aWwgZnVuY3Rpb25zIHRvIGNyZWF0ZSBkeW5hbWljIHdpbmRvd3MsIG9wZW5pbmcgdGhlIHdpbmRvdyBvbmx5IG9uIGZvY3VzZWQgXG4gKiBtb25pdG9yLCBvciBhbGwgYXZhaWxhYmxlIG1vbml0b3JzIVxuICovXG5AcmVnaXN0ZXIoKVxuY2xhc3MgV2luZG93cyBleHRlbmRzIEdPYmplY3QuT2JqZWN0IHtcbiAgICBwcml2YXRlIHN0YXRpYyBpbnN0YW5jZTogKFdpbmRvd3MgfCBudWxsKTtcblxuICAgICNvcGVuV2luZG93czogUmVjb3JkPHN0cmluZywgQXN0YWwuV2luZG93IHwgQXJyYXk8QXN0YWwuV2luZG93Pj4gPSB7fTtcbiAgICAjd2luZG93Q29ubmVjdGlvbnM6IFJlY29yZDxzdHJpbmcsIChBcnJheTxudW1iZXI+IHwgQXJyYXk8QXJyYXk8bnVtYmVyPj4pPiA9IHt9O1xuICAgICNhcHBDb25uZWN0aW9uczogQXJyYXk8bnVtYmVyPiA9IFtdO1xuICAgICN3aW5kb3dzOiBSZWNvcmQ8c3RyaW5nLCAoKCkgPT4gKEFzdGFsLldpbmRvdyB8IEFycmF5PEFzdGFsLldpbmRvdz4pKT4gPSB7XG4gICAgICAgIFwiYmFyXCI6IHRoaXMuY3JlYXRlV2luZG93Rm9yTW9uaXRvcnMoQmFyKSxcbiAgICAgICAgXCJvc2RcIjogdGhpcy5jcmVhdGVXaW5kb3dGb3JGb2N1c2VkTW9uaXRvcihPU0QpLFxuICAgICAgICBcImNvbnRyb2wtY2VudGVyXCI6IHRoaXMuY3JlYXRlV2luZG93Rm9yRm9jdXNlZE1vbml0b3IoQ29udHJvbENlbnRlciksXG4gICAgICAgIFwiY2VudGVyLXdpbmRvd1wiOiB0aGlzLmNyZWF0ZVdpbmRvd0ZvckZvY3VzZWRNb25pdG9yKENlbnRlcldpbmRvdyksXG4gICAgICAgIFwibG9nb3V0LW1lbnVcIjogdGhpcy5jcmVhdGVXaW5kb3dGb3JGb2N1c2VkTW9uaXRvcihMb2dvdXRNZW51KSxcbiAgICAgICAgXCJmbG9hdGluZy1ub3RpZmljYXRpb25zXCI6IHRoaXMuY3JlYXRlV2luZG93Rm9yRm9jdXNlZE1vbml0b3IoRmxvYXRpbmdOb3RpZmljYXRpb25zKSxcbiAgICAgICAgXCJhcHBzLXdpbmRvd1wiOiB0aGlzLmNyZWF0ZVdpbmRvd0ZvckZvY3VzZWRNb25pdG9yKEFwcHNXaW5kb3cpXG4gICAgfTtcblxuICAgIEBzaWduYWwoU3RyaW5nKSBvcGVuZWQoX25hbWU6IHN0cmluZykge31cbiAgICBAc2lnbmFsKFN0cmluZykgY2xvc2VkKF9uYW1lOiBzdHJpbmcpIHt9XG5cbiAgICBnZXQgd2luZG93cygpIHsgcmV0dXJuIHRoaXMuI3dpbmRvd3M7IH1cblxuICAgIEBnZXR0ZXIoT2JqZWN0KVxuICAgIGdldCBvcGVuV2luZG93cygpOiBvYmplY3QgeyByZXR1cm4gdGhpcy4jb3BlbldpbmRvd3M7IH07XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICAvLyBMaXN0ZW4gdG8gbW9uaXRvciBldmVudHNcbiAgICAgICAgdGhpcy4jYXBwQ29ubmVjdGlvbnMucHVzaChcbiAgICAgICAgICAgIEFzdGFsSHlwcmxhbmQuZ2V0X2RlZmF1bHQoKS5jb25uZWN0KFwibW9uaXRvci1hZGRlZFwiLCAoXywgX21vbml0b3IpID0+IHtcbiAgICAgICAgICAgICAgICBBc3RhbEh5cHJsYW5kLmdldF9kZWZhdWx0KCkuZ2V0X21vbml0b3JzKCkubGVuZ3RoID4gMCAmJiBcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW9wZW4oKTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgQXN0YWxIeXBybGFuZC5nZXRfZGVmYXVsdCgpLmNvbm5lY3QoXCJtb25pdG9yLXJlbW92ZWRcIiwgKF8sIG1vbml0b3IpID0+IHtcbiAgICAgICAgICAgICAgICBPYmplY3QudmFsdWVzKHRoaXMub3BlbldpbmRvd3MpLm1hcCgod2luZG93OiAoQXJyYXk8QXN0YWwuV2luZG93PiB8IEFzdGFsLldpbmRvdyksIGk6IG51bWJlcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZihBcnJheS5pc0FycmF5KHdpbmRvdykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdyA9IHdpbmRvdyBhcyBBcnJheTxBc3RhbC5XaW5kb3c+O1xuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93Lm1hcCh3aW4gPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHdpbi5nZXRfbW9uaXRvcigpID09PSBtb25pdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbj8uY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4jb3BlbldpbmRvd3NbaV0gPSAodGhpcy4jb3BlbldpbmRvd3NbaV0gYXMgQXJyYXk8QXN0YWwuV2luZG93PikuZmlsdGVyKGl0ZW0gPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0gIT09IHdpbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCh0aGlzLiNvcGVuV2luZG93c1tpXSBhcyBBcnJheTxBc3RhbC5XaW5kb3c+KS5sZW5ndGggPCAxKSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy4jb3BlbldpbmRvd3NbaV07XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cgPSB3aW5kb3cgYXMgQXN0YWwuV2luZG93O1xuICAgICAgICAgICAgICAgICAgICBpZih3aW5kb3cuZ2V0X21vbml0b3IoKSA9PT0gbW9uaXRvcikgXG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgdmZ1bmNfZGlzcG9zZSgpIHtcbiAgICAgICAgT2JqZWN0LmtleXModGhpcy4jd2luZG93Q29ubmVjdGlvbnMpLm1hcChuYW1lID0+IFxuICAgICAgICAgICAgdGhpcy5kaXNjb25uZWN0V2luZG93KG5hbWUpKTtcblxuICAgICAgICB0aGlzLiNhcHBDb25uZWN0aW9ucy5tYXAoaWQgPT4gXG4gICAgICAgICAgICBHT2JqZWN0LnNpZ25hbF9oYW5kbGVyX2lzX2Nvbm5lY3RlZChBcHAsIGlkKSAmJiBcbiAgICAgICAgICAgICAgICBBcHAuZGlzY29ubmVjdChpZCkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZGlzY29ubmVjdFdpbmRvdyhuYW1lOiBrZXlvZiB0eXBlb2YgdGhpcy53aW5kb3dzKSB7XG4gICAgICAgIGNvbnN0IHdpbmRvdyA9IHRoaXMuI29wZW5XaW5kb3dzW25hbWVdO1xuICAgICAgICBpZighd2luZG93KSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImNvdWxkbid0IGRpc2Nvbm5lY3QsIHdpbmRvdyBpcyBub3Qgb3BlblwiKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuI3dpbmRvd0Nvbm5lY3Rpb25zW25hbWVdLm1hcCgoaWQ6IEFycmF5PG51bWJlcj4gfCBudW1iZXIpID0+IHtcbiAgICAgICAgICAgIGlmKEFycmF5LmlzQXJyYXkod2luZG93KSkge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5tYXAoKHdpbiwgaSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjdXJJZCA9IChpZCBhcyBBcnJheTxudW1iZXI+KVtpXTtcblxuICAgICAgICAgICAgICAgICAgICBHT2JqZWN0LnNpZ25hbF9oYW5kbGVyX2lzX2Nvbm5lY3RlZCh3aW4sIGN1cklkKSAmJiBcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbi5kaXNjb25uZWN0KGN1cklkKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIEdPYmplY3Quc2lnbmFsX2hhbmRsZXJfaXNfY29ubmVjdGVkKHdpbmRvdywgaWQgYXMgbnVtYmVyKSAmJlxuICAgICAgICAgICAgICAgIHdpbmRvdy5kaXNjb25uZWN0KGlkIGFzIG51bWJlcik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRlbGV0ZSB0aGlzLiN3aW5kb3dDb25uZWN0aW9uc1tuYW1lXTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNvbm5lY3RXaW5kb3cobmFtZToga2V5b2YgdHlwZW9mIHRoaXMud2luZG93cykge1xuICAgICAgICBpZihPYmplY3QuaGFzT3duKHRoaXMuI3dpbmRvd0Nvbm5lY3Rpb25zLCBuYW1lKSkgcmV0dXJuO1xuXG4gICAgICAgIGlmKCF0aGlzLiNvcGVuV2luZG93cz8uW25hbWVdKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgJHtuYW1lfSBpcyBub3Qgb3Blbiwgd2lsbCBub3QgY29ubmVjdGApO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYoQXJyYXkuaXNBcnJheSh0aGlzLiNvcGVuV2luZG93c1tuYW1lXSkpIHtcbiAgICAgICAgICAgIHRoaXMuI3dpbmRvd0Nvbm5lY3Rpb25zW25hbWVdID0gdGhpcy4jb3BlbldpbmRvd3NbbmFtZV0ubWFwKHdpbiA9PiBbXG4gICAgICAgICAgICAgICAgd2luLmNvbm5lY3QoXCJtYXBcIiwgKHdpbmRvdykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZih0aGlzLmlzVmlzaWJsZShuYW1lKSkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuI29wZW5XaW5kb3dzW25hbWVdID0gd2luZG93O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGlmeShcIm9wZW4td2luZG93c1wiKTtcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICB3aW4uY29ubmVjdChcImRlc3Ryb3lcIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc2Nvbm5lY3RXaW5kb3cobmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5KFwib3Blbi13aW5kb3dzXCIpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBdKTtcblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy4jd2luZG93Q29ubmVjdGlvbnNbbmFtZV0gPSBbXG4gICAgICAgICAgICB0aGlzLiNvcGVuV2luZG93c1tuYW1lXS5jb25uZWN0KFwibWFwXCIsICh3aW5kb3cpID0+IHtcbiAgICAgICAgICAgICAgICBpZih0aGlzLmlzVmlzaWJsZShuYW1lKSkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgdGhpcy4jb3BlbldpbmRvd3NbbmFtZV0gPSB3aW5kb3c7XG4gICAgICAgICAgICAgICAgdGhpcy5ub3RpZnkoXCJvcGVuLXdpbmRvd3NcIik7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHRoaXMuI29wZW5XaW5kb3dzW25hbWVdLmNvbm5lY3QoXCJkZXN0cm95XCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmRpc2Nvbm5lY3RXaW5kb3cobmFtZSk7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuI29wZW5XaW5kb3dzW25hbWVdO1xuICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5KFwib3Blbi13aW5kb3dzXCIpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgXTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGdldERlZmF1bHQoKTogV2luZG93cyB7XG4gICAgICAgIGlmKCF0aGlzLmluc3RhbmNlKVxuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZSA9IG5ldyBXaW5kb3dzKCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaW5zdGFuY2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHdpbmRvdyBpbnN0YW5jZSBmb3IgZXZlcnkgbW9uaXRvciBjb25uZWN0ZWRcbiAgICAgKiBAcGFyYW0gd2luZG93RnVuIGZ1bmN0aW9uOiAobW9uOiBudW1iZXIpID0+IEFzdGFsLldpbmRvdywgcmV0dXJuZWQgd2luZG93IG11c3QgdXNlIHByb3ZpZGVkIG1vbml0b3IgbnVtYmVyXG4gICAgICogQHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHdoZW4gY2FsbGVkLCByZXR1cm5zIEFycmF5PEFzdGFsLldpbmRvdz5cbiAgICAgKiBAdGhyb3dzIEVycm9yIGlmIHRoZXJlIGFyZSBubyBtb25pdG9ycyBjb25uZWN0ZWRcbiAgICAgKi9cbiAgICBwdWJsaWMgY3JlYXRlV2luZG93Rm9yTW9uaXRvcnMod2luZG93RnVuOiAobW9uOiBudW1iZXIpID0+IEdPYmplY3QuT2JqZWN0fEFzdGFsLldpbmRvdyk6ICgoKSA9PiBBcnJheTxBc3RhbC5XaW5kb3c+KSB7XG4gICAgICAgIGNvbnN0IG1vbml0b3JzID0gQXN0YWxIeXBybGFuZC5nZXRfZGVmYXVsdCgpLmdldF9tb25pdG9ycygpO1xuICAgICAgICBpZihtb25pdG9ycy5sZW5ndGggPCAxKSBcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGNyZWF0ZSB3aW5kb3cgZm9yIG1vbml0b3JzXCIsIHtcbiAgICAgICAgICAgICAgICBjYXVzZTogYE5vIG1vbml0b3JzIGNvbm5lY3RlZCBvbiBIeXBybGFuZGBcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiAoKSA9PiBtb25pdG9ycy5tYXAobW9uID0+IHdpbmRvd0Z1bihtb24uaWQpIGFzIEFzdGFsLldpbmRvdyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHdpbmRvdyBpbnN0YW5jZSBmb3IgZm9jdXNlZCBtb25pdG9yIG9ubHlcbiAgICAgKiBAcGFyYW0gd2luZG93RnVuIGZ1bmN0aW9uOiAobW9uOiBudW1iZXIpID0+IEFzdGFsLldpbmRvdywgcmV0dXJuZWQgd2luZG93IG11c3QgdXNlIHByb3ZpZGVkIG1vbml0b3IgbnVtYmVyXG4gICAgICogQHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHdoZW4gY2FsbGVkLCByZXR1cm5zIGEgQXN0YWwuV2luZG93IGluc3RhbmNlXG4gICAgICogQHRocm93cyBFcnJvciBpZiBubyBmb2N1c2VkIG1vbml0b3IgaXMgZm91bmRcbiAgICAgKi9cbiAgICBwdWJsaWMgY3JlYXRlV2luZG93Rm9yRm9jdXNlZE1vbml0b3Iod2luZG93RnVuOiAobW9uOiBudW1iZXIpID0+IEdPYmplY3QuT2JqZWN0fEFzdGFsLldpbmRvdyk6ICgoKSA9PiBBc3RhbC5XaW5kb3cpIHtcbiAgICAgICAgY29uc3QgZm9jdXNlZE1vbml0b3IgPSBBc3RhbEh5cHJsYW5kLmdldF9kZWZhdWx0KClcbiAgICAgICAgICAgIC5nZXRfbW9uaXRvcnMoKS5maWx0ZXIobW9uID0+IG1vbi5mb2N1c2VkKVswXTtcblxuICAgICAgICBpZighZm9jdXNlZE1vbml0b3IpIFxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgY3JlYXRlIHdpbmRvdyBmb3IgZm9jdXNlZCBtb25pdG9yXCIsIHsgXG4gICAgICAgICAgICAgICAgY2F1c2U6IGBObyBmb2N1c2VkIG1vbml0b3IgZm91bmQgKCR7dHlwZW9mIGZvY3VzZWRNb25pdG9yfSlgIFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuICgpID0+ICh3aW5kb3dGdW4oZm9jdXNlZE1vbml0b3IuaWQpIGFzIEFzdGFsLldpbmRvdyk7XG4gICAgfVxuXG4gICAgcHVibGljIGFkZFdpbmRvdyhuYW1lOiBzdHJpbmcsIHdpbmRvdzogKCgpID0+IChBc3RhbC5XaW5kb3cgfCBBcnJheTxBc3RhbC5XaW5kb3c+KSkpOiB2b2lkIHtcbiAgICAgICAgdGhpcy4jd2luZG93c1tuYW1lXSA9IHdpbmRvdztcbiAgICB9XG5cbiAgICBwdWJsaWMgaGFzV2luZG93KG5hbWU6IGtleW9mIHR5cGVvZiB0aGlzLndpbmRvd3MpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIEJvb2xlYW4odGhpcy53aW5kb3dzPy5bbmFtZSBhcyBrZXlvZiB0eXBlb2YgdGhpcy53aW5kb3dzXSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFdpbmRvdyhuYW1lOiAoa2V5b2YgdHlwZW9mIHRoaXMud2luZG93cyB8IHN0cmluZykpOiAoKCgpID0+IChBc3RhbC5XaW5kb3cgfCBBcnJheTxBc3RhbC5XaW5kb3c+KSkgfCB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud2luZG93cz8uW25hbWUgYXMga2V5b2YgdHlwZW9mIHRoaXMud2luZG93c107XG4gICAgfVxuXG4gICAgcHVibGljIGdldE9wZW5XaW5kb3cobmFtZTogKGtleW9mIHR5cGVvZiB0aGlzLm9wZW5XaW5kb3dzKSk6IChBc3RhbC5XaW5kb3cgfCBBcnJheTxBc3RhbC5XaW5kb3c+IHwgdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wZW5XaW5kb3dzPy5bbmFtZSBhcyBrZXlvZiB0eXBlb2YgdGhpcy5vcGVuV2luZG93c107XG4gICAgfVxuXG4gICAgcHVibGljIGdldFdpbmRvd3MoKTogQXJyYXk8KCgpID0+IChBc3RhbC5XaW5kb3cgfCBBcnJheTxBc3RhbC5XaW5kb3c+KSk+IHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC52YWx1ZXModGhpcy53aW5kb3dzKTtcbiAgICB9XG4gICAgXG4gICAgcHVibGljIGdldEZvY3VzZWRNb25pdG9ySWQoKTogKG51bWJlcnxudWxsKSB7XG4gICAgICAgIHJldHVybiBBc3RhbEh5cHJsYW5kLmdldF9kZWZhdWx0KCkuZ2V0X21vbml0b3JzKCkuZmlsdGVyKG1vbiA9PiBtb24uZm9jdXNlZCk/LlswXT8uaWQgPz8gbnVsbDtcbiAgICB9XG5cbiAgICBwdWJsaWMgaXNWaXNpYmxlKG5hbWU6IGtleW9mIHR5cGVvZiB0aGlzLndpbmRvd3MpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5oYXNPd24odGhpcy4jb3BlbldpbmRvd3MsIG5hbWUpIHx8IE9iamVjdC5oYXNPd24odGhpcy4jd2luZG93Q29ubmVjdGlvbnMsIG5hbWUpO1xuICAgIH1cblxuICAgIHB1YmxpYyBvcGVuKG5hbWU6IGtleW9mIHR5cGVvZiB0aGlzLndpbmRvd3MpOiB2b2lkIHtcbiAgICAgICAgaWYodGhpcy5pc1Zpc2libGUobmFtZSkpIHJldHVybjtcblxuICAgICAgICBsZXQgd2luZG93OiAoKCkgPT4gKEFzdGFsLldpbmRvdyB8IEFycmF5PEFzdGFsLldpbmRvdz4pKSA9IHRoaXMuZ2V0V2luZG93KG5hbWUpITtcbiAgICAgICAgY29uc3Qgb3BlbldpbmRvd3M6IChBcnJheTxBc3RhbC5XaW5kb3c+IHwgQXN0YWwuV2luZG93KSA9IHdpbmRvdygpO1xuICAgICAgICB0aGlzLiNvcGVuV2luZG93c1tuYW1lXSA9IG9wZW5XaW5kb3dzO1xuXG4gICAgICAgIHRoaXMuY29ubmVjdFdpbmRvdyhuYW1lKTtcblxuICAgICAgICB0aGlzLmVtaXQoXCJvcGVuZWRcIiwgbmFtZSk7XG4gICAgICAgIHRoaXMubm90aWZ5KFwib3Blbi13aW5kb3dzXCIpO1xuXG4gICAgICAgIGlmKEFycmF5LmlzQXJyYXkob3BlbldpbmRvd3MpKSB7XG4gICAgICAgICAgICBvcGVuV2luZG93cy5tYXAod2luID0+IHdpbi5zaG93KCkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgb3BlbldpbmRvd3Muc2hvdygpO1xuICAgIH1cblxuICAgIHB1YmxpYyBjbG9zZShuYW1lOiBrZXlvZiB0eXBlb2YgdGhpcy53aW5kb3dzKTogdm9pZCB7XG4gICAgICAgIGlmKCF0aGlzLmlzVmlzaWJsZShuYW1lKSkgcmV0dXJuO1xuICAgICAgICB0aGlzLmRpc2Nvbm5lY3RXaW5kb3cobmFtZSk7XG5cbiAgICAgICAgY29uc3Qgd2luZG93ID0gdGhpcy4jb3BlbldpbmRvd3NbbmFtZV07XG4gICAgICAgIGRlbGV0ZSB0aGlzLiNvcGVuV2luZG93c1tuYW1lXTtcblxuICAgICAgICBpZihBcnJheS5pc0FycmF5KHdpbmRvdykpIHtcbiAgICAgICAgICAgIHdpbmRvdy5tYXAod2luID0+IHdpbi5jbG9zZSgpKTtcbiAgICAgICAgICAgIHRoaXMuZW1pdChcImNsb3NlZFwiLCBuYW1lKTtcbiAgICAgICAgICAgIHRoaXMubm90aWZ5KFwib3Blbi13aW5kb3dzXCIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgd2luZG93LmNsb3NlKCk7XG4gICAgICAgIHRoaXMuZW1pdChcImNsb3NlZFwiLCBuYW1lKTtcbiAgICAgICAgdGhpcy5ub3RpZnkoXCJvcGVuLXdpbmRvd3NcIik7XG4gICAgfVxuXG4gICAgcHVibGljIHRvZ2dsZShuYW1lOiBrZXlvZiB0eXBlb2YgdGhpcy53aW5kb3dzKTogdm9pZCB7XG4gICAgICAgIHRoaXMuaXNWaXNpYmxlKG5hbWUpID8gdGhpcy5jbG9zZShuYW1lKSA6IHRoaXMub3BlbihuYW1lKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgY2xvc2VBbGwoKTogdm9pZCB7XG4gICAgICAgIE9iamVjdC5rZXlzKHRoaXMub3BlbldpbmRvd3MpLm1hcChuYW1lID0+IHRoaXMuY2xvc2UobmFtZSkpO1xuICAgIH1cblxuICAgIHB1YmxpYyByZW9wZW4oKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IG9wZW5XaW5zID0gT2JqZWN0LmtleXModGhpcy5vcGVuV2luZG93cyk7XG4gICAgICAgIHRoaXMuY2xvc2VBbGwoKTtcbiAgICAgICAgb3BlbldpbnMubWFwKG5hbWUgPT4gdGhpcy5vcGVuKG5hbWUpKTtcbiAgICB9XG59XG4iLCAiaW1wb3J0IHsgQXN0YWwsIEd0ayB9IGZyb20gXCJhZ3MvZ3RrNFwiO1xuaW1wb3J0IHsgY3JlYXRlQmluZGluZywgY3JlYXRlU3RhdGUgfSBmcm9tIFwiYWdzXCI7XG5pbXBvcnQgeyBXaXJlcGx1bWJlciB9IGZyb20gXCIuLi9zY3JpcHRzL3ZvbHVtZVwiO1xuaW1wb3J0IFBhbmdvIGZyb20gXCJnaTovL1BhbmdvP3ZlcnNpb249MS4wXCI7XG5cblxuZXhwb3J0IGVudW0gT1NETW9kZXMge1xuICAgIFNJTkssXG4gICAgQlJJR0hUTkVTUyxcbiAgICBOT05FXG59XG5cbmNvbnN0IFtvc2RNb2RlLCBzZXRPU0RNb2RlXSA9IGNyZWF0ZVN0YXRlKE9TRE1vZGVzLk5PTkUpO1xuXG5leHBvcnQgY29uc3QgT1NEID0gKG1vbjogbnVtYmVyKSA9PiB7XG4gICAgaWYob3NkTW9kZS5nZXQoKSA9PT0gT1NETW9kZXMuTk9ORSlcbiAgICAgICAgc2V0T1NETW9kZShPU0RNb2Rlcy5TSU5LKTtcblxuICAgIHJldHVybiA8QXN0YWwuV2luZG93IG5hbWVzcGFjZT17XCJvc2RcIn0gY2xhc3M9e1wib3NkLXdpbmRvd1wifSBsYXllcj17QXN0YWwuTGF5ZXIuT1ZFUkxBWX1cbiAgICAgIGFuY2hvcj17QXN0YWwuV2luZG93QW5jaG9yLkJPVFRPTX0gZm9jdXNhYmxlPXtmYWxzZX0gbWFyZ2luQm90dG9tPXs4MH0gbW9uaXRvcj17bW9ufT5cblxuICAgICAgICA8R3RrLkJveCBjbGFzcz17XCJvc2RcIn0+XG4gICAgICAgICAgICA8R3RrLkltYWdlIGNsYXNzPXtcImljb25cIn0gaWNvbk5hbWU9e2NyZWF0ZUJpbmRpbmcoV2lyZXBsdW1iZXIuZ2V0RGVmYXVsdCgpLmdldERlZmF1bHRTaW5rKCksIFxuICAgICAgICAgICAgICAgICAgXCJ2b2x1bWVJY29uXCIpLmFzKGljb24gPT4gIVdpcmVwbHVtYmVyLmdldERlZmF1bHQoKS5pc011dGVkU2luaygpICYmIFxuICAgICAgICAgICAgICAgICAgICAgIFdpcmVwbHVtYmVyLmdldERlZmF1bHQoKS5nZXRTaW5rVm9sdW1lKCkgPiAwID8gaWNvbiA6IFwiYXVkaW8tdm9sdW1lLW11dGVkLXN5bWJvbGljXCIpfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxHdGsuQm94IG9yaWVudGF0aW9uPXtHdGsuT3JpZW50YXRpb24uVkVSVElDQUx9IGNsYXNzPXtcInZvbHVtZVwifSB2ZXhwYW5kPXt0cnVlfSBoZXhwYW5kPXt0cnVlfT5cbiAgICAgICAgICAgICAgICA8R3RrLkxhYmVsIGNsYXNzPXtcImRldmljZVwifSBsYWJlbD17Y3JlYXRlQmluZGluZyhXaXJlcGx1bWJlci5nZXREZWZhdWx0KCkuZ2V0RGVmYXVsdFNpbmsoKSwgXG4gICAgICAgICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiKS5hcyhkZXNjcmlwdGlvbiA9PiBkZXNjcmlwdGlvbiA/PyBcIlNwZWFrZXJcIil9XG4gICAgICAgICAgICAgICAgICBlbGxpcHNpemU9e1BhbmdvLkVsbGlwc2l6ZU1vZGUuRU5EfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPEd0ay5MZXZlbEJhciBjbGFzcz17XCJsZXZlbGJhclwifSB2YWx1ZT17Y3JlYXRlQmluZGluZyhcbiAgICAgICAgICAgICAgICAgICAgICBXaXJlcGx1bWJlci5nZXREZWZhdWx0KCkuZ2V0RGVmYXVsdFNpbmsoKSwgXCJ2b2x1bWVcIikuYXMoKHZvbHVtZTogbnVtYmVyKSA9PiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5mbG9vcih2b2x1bWUgKiAxMDApKX0gXG4gICAgICAgICAgICAgICAgICBtYXhWYWx1ZT17V2lyZXBsdW1iZXIuZ2V0RGVmYXVsdCgpLmdldE1heFNpbmtWb2x1bWUoKX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9HdGsuQm94PlxuICAgICAgICA8L0d0ay5Cb3g+XG4gICAgPC9Bc3RhbC5XaW5kb3c+XG59XG4iLCAiaW1wb3J0IHsgQWNjZXNzb3IgfSBmcm9tIFwiYWdzXCI7XG5pbXBvcnQgeyBBc3RhbCwgR2RrLCBHdGsgfSBmcm9tIFwiYWdzL2d0azRcIjtcbmltcG9ydCBHT2JqZWN0IGZyb20gXCJnaTovL0dPYmplY3Q/dmVyc2lvbj0yLjBcIjtcblxuXG5jb25zdCB7IFRPUCwgTEVGVCwgUklHSFQsIEJPVFRPTSB9ID0gQXN0YWwuV2luZG93QW5jaG9yO1xuXG5leHBvcnQgdHlwZSBCYWNrZ3JvdW5kV2luZG93UHJvcHMgPSB7XG4gICAgLyoqIEd0a1dpbmRvdyBMYXllciAqL1xuICAgIGxheWVyPzogQXN0YWwuTGF5ZXIgfCBBY2Nlc3NvcjxBc3RhbC5MYXllcj47XG4gICAgLyoqIE1vbml0b3IgbnVtYmVyIHdoZXJlIHRoZSB3aW5kb3cgc2hvdWxkIG9wZW4gKi9cbiAgICBtb25pdG9yOiBudW1iZXIgfCBBY2Nlc3NvcjxudW1iZXI+O1xuICAgIC8qKiBDdXN0b20gc3R5bGVzaGVldCB1c2VkIGluIHRoZSB3aW5kb3cuIGRlZmF1bHQ6IGBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIC4yKWAgKi9cbiAgICBjc3M/OiBzdHJpbmcgfCBBY2Nlc3NvcjxzdHJpbmc+O1xuICAgIC8qIEZ1bmN0aW9uIHRoYXQgaXMgY2FsbGVkIHdoZW4gdGhlIHVzZXIgcmVsZWFzZXMgYSBrZXkgaW4gdGhlIGtleWJvYXJkIG9uIHRoZSB3aW5kb3cgXG4gICAgKiBUaGUgYEVzY2FwZWAga2V5IGlzIG5vdCBwYXNzZWQgdG8gdGhpcyBmdW5jdGlvbiAqL1xuICAgIGFjdGlvbktleVByZXNzZWQ/OiAod2luZG93OiBBc3RhbC5XaW5kb3csIGtleXZhbDogbnVtYmVyLCBrZXljb2RlOiBudW1iZXIpID0+IHZvaWQ7XG4gICAgLyoqIEZ1bmN0aW9uIHRoYXQgaXMgY2FsbGVkIHdoZW4gdGhlIHVzZXIgdHJpZ2dlcnMgYSBtb3VzZS1jbGljayBvciBlc2NhcGUgYWN0aW9uIG9uIHRoZSB3aW5kb3cgKi9cbiAgICBhY3Rpb25GaXJlZD86ICh3aW5kb3c6IEFzdGFsLldpbmRvdykgPT4gdm9pZDtcbiAgICAvKiogRnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgd2hlbiB0aGUgdXNlciBjbGlja3Mgb24gdGhlIHdpbmRvdyB3aXRoIHByaW1hcnkgbW91c2UgYnV0dG9uICovXG4gICAgYWN0aW9uQ2xpY2tQcmltYXJ5PzogKHdpbmRvdzogQXN0YWwuV2luZG93KSA9PiB2b2lkO1xuICAgIC8qKiBGdW5jdGlvbiB0aGF0IGlzIGNhbGxlZCB3aGVuIHRoZSB1c2VyIGNsaWNrcyBvbiB0aGUgd2luZG93IHdpdGggc2Vjb2RhcnkgbW91c2UgYnV0dG9uICovXG4gICAgYWN0aW9uQ2xpY2tTZWNvbmRhcnk/OiAod2luZG93OiBBc3RhbC5XaW5kb3cpID0+IHZvaWQ7XG4gICAga2V5bW9kZT86IEFzdGFsLktleW1vZGU7XG4gICAgZXhjbHVzaXZpdHk/OiBBc3RhbC5FeGNsdXNpdml0eTtcbn07XG5cbi8qKiBDcmVhdGVzIGEgZnVsbHNjcmVlbiBHdGtXaW5kb3cgdGhhdCBpcyB1c2VkIGZvciBtYWtpbmdcbiAqIHRoZSB1c2VyIGZvY3VzIG9uIHRoZSBjb250ZW50IGFmdGVyIHRoaXMgd2luZG93KGUuZy46IEFza1BvcHVwLFxuICogQXV0aGVudGljYXRpb24gV2luZG93KGZ1dHVyZWx5KSBvciBhbnkgUG9wdXBXaW5kb3cpXG4gKlxuICogQHBhcmFtIHByb3BzIFByb3BlcnRpZXMgZm9yIGJhY2tncm91bmQtd2luZG93XG4gKlxuICogQHJldHVybnMgVGhlIGdlbmVyYXRlZCBiYWNrZ3JvdW5kIHdpbmRvd1xuICovXG5leHBvcnQgZnVuY3Rpb24gQmFja2dyb3VuZFdpbmRvdyhwcm9wczogQmFja2dyb3VuZFdpbmRvd1Byb3BzKTogQXN0YWwuV2luZG93IHtcbiAgICBjb25zdCBjb25uczogTWFwPEdPYmplY3QuT2JqZWN0LCBudW1iZXI+ID0gbmV3IE1hcCgpO1xuXG4gICAgcmV0dXJuIDxBc3RhbC5XaW5kb3cgbmFtZXNwYWNlPXtcImJhY2tncm91bmQtd2luZG93XCJ9XG4gICAgICAgIGNzcz17cHJvcHMuY3NzID8/IFwiYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAuMik7XCJ9XG4gICAgICAgIG1vbml0b3I9e3Byb3BzLm1vbml0b3J9XG4gICAgICAgIGxheWVyPXtwcm9wcy5sYXllciA/PyBBc3RhbC5MYXllci5PVkVSTEFZfVxuICAgICAgICBhbmNob3I9e1RPUCB8IExFRlQgfCBCT1RUT00gfCBSSUdIVH1cbiAgICAgICAga2V5bW9kZT17cHJvcHMua2V5bW9kZX1cbiAgICAgICAgZXhjbHVzaXZpdHk9e3Byb3BzLmV4Y2x1c2l2aXR5ID8/IEFzdGFsLkV4Y2x1c2l2aXR5LklHTk9SRX1cbiAgICAgICAgb25EZXN0cm95PXsoXykgPT4gY29ubnMuZm9yRWFjaCgoaWQsIG9iaikgPT4gb2JqLmRpc2Nvbm5lY3QoaWQpKX1cbiAgICAgICAgJD17KHNlbGYpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGdlc3R1cmVDbGljayA9IEd0ay5HZXN0dXJlQ2xpY2submV3KCksXG4gICAgICAgICAgICAgICAgZXZlbnRDb250cm9sbGVyS2V5ID0gR3RrLkV2ZW50Q29udHJvbGxlcktleS5uZXcoKTtcblxuICAgICAgICAgICAgc2VsZi5hZGRfY29udHJvbGxlcihnZXN0dXJlQ2xpY2spO1xuICAgICAgICAgICAgc2VsZi5hZGRfY29udHJvbGxlcihldmVudENvbnRyb2xsZXJLZXkpO1xuXG4gICAgICAgICAgICBjb25ucy5zZXQoZXZlbnRDb250cm9sbGVyS2V5LCBldmVudENvbnRyb2xsZXJLZXkuY29ubmVjdChcImtleS1yZWxlYXNlZFwiLCBcbiAgICAgICAgICAgICAgICAoXywga2V5dmFsLCBrZXljb2RlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmKGtleXZhbCA9PT0gR2RrLktFWV9Fc2NhcGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzLmFjdGlvbkZpcmVkPy4oc2VsZik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBwcm9wcy5hY3Rpb25LZXlQcmVzc2VkPy4oc2VsZiwga2V5dmFsLCBrZXljb2RlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApKTtcblxuICAgICAgICAgICAgY29ubnMuc2V0KGdlc3R1cmVDbGljaywgZ2VzdHVyZUNsaWNrLmNvbm5lY3QoXCJyZWxlYXNlZFwiLCAoZ2VzdHVyZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmKGdlc3R1cmUuZ2V0X2N1cnJlbnRfYnV0dG9uKCkgPT09IEdkay5CVVRUT05fUFJJTUFSWSkge1xuICAgICAgICAgICAgICAgICAgICBwcm9wcy5hY3Rpb25DbGlja1ByaW1hcnk/LihzZWxmKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmKGdlc3R1cmUuZ2V0X2N1cnJlbnRfYnV0dG9uKCkgPT09IEdkay5CVVRUT05fU0VDT05EQVJZKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb3BzLmFjdGlvbkNsaWNrU2Vjb25kYXJ5Py4oc2VsZik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBwcm9wcy5hY3Rpb25GaXJlZD8uKHNlbGYpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9fSBcbiAgICAvPiBhcyBBc3RhbC5XaW5kb3c7XG59XG4iLCAiaW1wb3J0IHsgQXN0YWwsIEdkaywgR3RrIH0gZnJvbSBcImFncy9ndGs0XCI7XG5pbXBvcnQgeyBCYWNrZ3JvdW5kV2luZG93IH0gZnJvbSBcIi4vQmFja2dyb3VuZFdpbmRvd1wiO1xuaW1wb3J0IHsgQWNjZXNzb3IsIENDUHJvcHMsIGNyZWF0ZUNvbXB1dGVkIH0gZnJvbSBcImFnc1wiO1xuaW1wb3J0IHsgb21pdE9iamVjdEtleXMsIFdpZGdldE5vZGVUeXBlIH0gZnJvbSBcIi4uL3NjcmlwdHMvdXRpbHNcIjtcblxuaW1wb3J0IEdPYmplY3QgZnJvbSBcImFncy9nb2JqZWN0XCI7XG5cblxudHlwZSBQb3B1cFdpbmRvd1NwZWNpZmljUHJvcHMgPSB7XG4gICAgJD86IChzZWxmOiBBc3RhbC5XaW5kb3cpID0+IHZvaWQ7XG4gICAgY2hpbGRyZW4/OiBXaWRnZXROb2RlVHlwZTtcbiAgICBvbkRlc3Ryb3k/OiAoc2VsZjogQXN0YWwuV2luZG93KSA9PiB2b2lkO1xuICAgIC8qKiBTdHlsZXNoZWV0IGZvciB0aGUgYmFja2dyb3VuZCBvZiB0aGUgcG9wdXAtd2luZG93ICovXG4gICAgY3NzQmFja2dyb3VuZFdpbmRvdz86IHN0cmluZztcbiAgICBjbGFzcz86IHN0cmluZyB8IEFjY2Vzc29yPHN0cmluZz47XG4gICAgYWN0aW9uQ2xpY2tlZE91dHNpZGU/OiAoc2VsZjogQXN0YWwuV2luZG93KSA9PiB2b2lkO1xuICAgIGFjdGlvbktleVByZXNzZWQ/OiAoc2VsZjogQXN0YWwuV2luZG93LCBrZXl2YWw6IG51bWJlciwga2V5Y29kZTogbnVtYmVyKSA9PiB2b2lkO1xufTtcblxuZXhwb3J0IHR5cGUgUG9wdXBXaW5kb3dQcm9wcyA9IFBpY2s8UGFydGlhbDxDQ1Byb3BzPEFzdGFsLldpbmRvdywgQXN0YWwuV2luZG93LkNvbnN0cnVjdG9yUHJvcHM+PiwgXG4gICAgXCJtb25pdG9yXCJcbiAgICB8IFwibGF5ZXJcIlxuICAgIHwgXCJleGNsdXNpdml0eVwiXG4gICAgfCBcIm1hcmdpbkxlZnRcIlxuICAgIHwgXCJtYXJnaW5Ub3BcIlxuICAgIHwgXCJtYXJnaW5SaWdodFwiXG4gICAgfCBcIm1hcmdpbkJvdHRvbVwiXG4gICAgfCBcImN1cnNvclwiXG4gICAgfCBcImNhbkZvY3VzXCJcbiAgICB8IFwiaGFzRm9jdXNcIlxuICAgIHwgXCJ0b29sdGlwTWFya3VwXCJcbiAgICB8IFwibmFtZXNwYWNlXCJcbiAgICB8IFwid2lkdGhSZXF1ZXN0XCJcbiAgICB8IFwiaGVpZ2h0UmVxdWVzdFwiXG4gICAgfCBcImhhbGlnblwiXG4gICAgfCBcInZhbGlnblwiXG4gICAgfCBcInZleHBhbmRcIlxuICAgIHwgXCJoZXhwYW5kXCI+ICYgUG9wdXBXaW5kb3dTcGVjaWZpY1Byb3BzO1xuXG5jb25zdCB7IFRPUCwgTEVGVCwgUklHSFQsIEJPVFRPTSB9ID0gQXN0YWwuV2luZG93QW5jaG9yO1xuXG5leHBvcnQgZnVuY3Rpb24gUG9wdXBXaW5kb3cocHJvcHM6IFBvcHVwV2luZG93UHJvcHMpOiBHT2JqZWN0Lk9iamVjdCB7XG4gICAgcHJvcHMubGF5ZXIgPz89IEFzdGFsLkxheWVyLk9WRVJMQVk7XG5cbiAgICBjb25zdCBiZ1dpbmRvdyA9IHByb3BzLmNzc0JhY2tncm91bmRXaW5kb3cgPyAoPEJhY2tncm91bmRXaW5kb3dcbiAgICAgICAgbW9uaXRvcj17cHJvcHMubW9uaXRvciA/PyAwfVxuICAgICAgICBsYXllcj17cHJvcHMubGF5ZXJ9XG4gICAgICAgIGNzcz17cHJvcHMuY3NzQmFja2dyb3VuZFdpbmRvd30gLz4gYXMgQXN0YWwuV2luZG93KVxuICAgIDogdW5kZWZpbmVkO1xuICAgIFxuICAgIGNvbnN0IG9taXR0ZWRQcm9wcyA9IG9taXRPYmplY3RLZXlzKHByb3BzLCBbXG4gICAgICAgIFwiY2hpbGRyZW5cIixcbiAgICAgICAgXCJhY3Rpb25LZXlQcmVzc2VkXCIsXG4gICAgICAgIFwiYWN0aW9uQ2xpY2tlZE91dHNpZGVcIixcbiAgICAgICAgXCJjc3NCYWNrZ3JvdW5kV2luZG93XCIsXG4gICAgICAgIFwibWFyZ2luVG9wXCIsXG4gICAgICAgIFwibWFyZ2luTGVmdFwiLFxuICAgICAgICBcIm1hcmdpblJpZ2h0XCIsXG4gICAgICAgIFwibWFyZ2luQm90dG9tXCJcbiAgICBdKTtcblxuICAgIHJldHVybiA8QXN0YWwuV2luZG93IHsuLi5vbWl0dGVkUHJvcHN9IHZpc2libGVcbiAgICAgIG5hbWVzcGFjZT17cHJvcHMubmFtZXNwYWNlID8/IFwicG9wdXAtd2luZG93XCJ9IGNsYXNzPXtcbiAgICAgICAgICAocHJvcHMuY2xhc3MgaW5zdGFuY2VvZiBBY2Nlc3NvcikgPyBcbiAgICAgICAgICAgICAgKChwcm9wcy5uYW1lc3BhY2UgaW5zdGFuY2VvZiBBY2Nlc3NvcikgP1xuICAgICAgICAgICAgICAgICAgIGNyZWF0ZUNvbXB1dGVkKFtwcm9wcy5jbGFzcywgcHJvcHMubmFtZXNwYWNlXSwgKGNsc3MsIG5hbWVzcGFjZSkgPT5cbiAgICAgICAgICAgICAgICAgICAgICBgcG9wdXAtd2luZG93ICR7Y2xzc30gJHtuYW1lc3BhY2V9YClcbiAgICAgICAgICAgICAgIDogcHJvcHMuY2xhc3MuYXMoY2xzcyA9PiBgcG9wdXAtd2luZG93ICR7Y2xzc30gJHtwcm9wcy5uYW1lc3BhY2UgPz8gXCJcIn1gKSlcbiAgICAgICAgICA6IGBwb3B1cC13aW5kb3cgJHtwcm9wcy5jbGFzcyA/PyBcIlwifSAke3Byb3BzLm5hbWVzcGFjZSA/PyBcIlwifWBcbiAgICAgIH0ga2V5bW9kZT17QXN0YWwuS2V5bW9kZS5FWENMVVNJVkV9IGFuY2hvcj17VE9QIHwgTEVGVCB8IFJJR0hUIHwgQk9UVE9NfVxuICAgICAgZXhjbHVzaXZpdHk9e3Byb3BzLmV4Y2x1c2l2aXR5ID8/IEFzdGFsLkV4Y2x1c2l2aXR5Lk5PUk1BTH1cbiAgICAgIG9uRGVzdHJveT17KHNlbGYpID0+IHtcbiAgICAgICAgICBiZ1dpbmRvdz8uY2xvc2UoKTtcbiAgICAgICAgICBwcm9wcy5vbkRlc3Ryb3k/LihzZWxmKTtcbiAgICAgIH19XG4gICAgICAkPXsoc2VsZikgPT4ge1xuICAgICAgICAgIHByb3BzLmFjdGlvbkNsaWNrZWRPdXRzaWRlID8/PSAoXzogQXN0YWwuV2luZG93KSA9PiBzZWxmLmNsb3NlKCk7XG5cbiAgICAgICAgICBjb25zdCBjb25uczogTWFwPEdPYmplY3QuT2JqZWN0LCBudW1iZXI+ID0gbmV3IE1hcCgpO1xuICAgICAgICAgIGNvbnN0IGdlc3R1cmVDbGljayA9IEd0ay5HZXN0dXJlQ2xpY2submV3KCk7XG4gICAgICAgICAgY29uc3Qga2V5Q29udHJvbGxlciA9IEd0ay5FdmVudENvbnRyb2xsZXJLZXkubmV3KCk7XG4gICAgICAgICAgY29uc3QgYWxsb2NhdGlvbiA9IChzZWxmLmdldF9jaGlsZCgpISBhcyBHdGsuQm94KS5nZXRfZmlyc3RfY2hpbGQoKSEuZ2V0X2FsbG9jYXRpb24oKTtcbiAgICAgICAgICBcbiAgICAgICAgICBzZWxmLmFkZF9jb250cm9sbGVyKGdlc3R1cmVDbGljayk7XG4gICAgICAgICAgc2VsZi5hZGRfY29udHJvbGxlcihrZXlDb250cm9sbGVyKTtcblxuICAgICAgICAgIGNvbm5zLnNldChnZXN0dXJlQ2xpY2ssIGdlc3R1cmVDbGljay5jb25uZWN0KFwicmVsZWFzZWRcIiwgKF8sIF9fLCB4LCB5KSA9PiB7XG4gICAgICAgICAgICAgIGlmKCh4IDwgYWxsb2NhdGlvbi54IHx8IHggPiAoYWxsb2NhdGlvbi54ICsgYWxsb2NhdGlvbi53aWR0aCkpIHx8XG4gICAgICAgICAgICAgICAgICh5IDwgYWxsb2NhdGlvbi55IHx8IHkgPiAoYWxsb2NhdGlvbi55ICsgYWxsb2NhdGlvbi5oZWlnaHQpKSkge1xuXG4gICAgICAgICAgICAgICAgICAvLyBEaXNjb25uZWN0IHNpZ25hbHMgYmVjYXVzZSB3aW5kb3cgaXMgYmVpbmcgY2xvc2VkXG4gICAgICAgICAgICAgICAgICBjb25ucy5mb3JFYWNoKChpZCwgb2JqKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgb2JqLmRpc2Nvbm5lY3QoaWQpO1xuICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgIHByb3BzLmFjdGlvbkNsaWNrZWRPdXRzaWRlIShzZWxmKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH0pKTtcblxuICAgICAgICAgIGNvbm5zLnNldChrZXlDb250cm9sbGVyLCBrZXlDb250cm9sbGVyLmNvbm5lY3QoXCJrZXktcHJlc3NlZFwiLCAoXywga2V5dmFsLCBrZXljb2RlKSA9PiB7XG4gICAgICAgICAgICAgIGlmKGtleXZhbCA9PT0gR2RrLktFWV9Fc2NhcGUpIHtcbiAgICAgICAgICAgICAgICAgIGNvbm5zLmZvckVhY2goKGlkLCBvYmopID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICBvYmouZGlzY29ubmVjdChpZCk7XG4gICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgcHJvcHMuYWN0aW9uQ2xpY2tlZE91dHNpZGUhKHNlbGYpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcHJvcHMuYWN0aW9uS2V5UHJlc3NlZD8uKHNlbGYsIGtleXZhbCwga2V5Y29kZSk7XG4gICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgY29ubnMuc2V0KHNlbGYsIHNlbGYuY29ubmVjdChcImRlc3Ryb3lcIiwgKCkgPT4gY29ubnMuZm9yRWFjaCgoaWQsIG9iaikgPT5cbiAgICAgICAgICAgICAgb2JqLmRpc2Nvbm5lY3QoaWQpKSkpO1xuXG4gICAgICAgICAgcHJvcHMuJD8uKHNlbGYpO1xuICAgICAgfX0+XG4gICAgICAgICAgPEd0ay5Cb3ggaGFsaWduPXtwcm9wcy5oYWxpZ259IHZhbGlnbj17cHJvcHMudmFsaWdufSBoZXhwYW5kIHZleHBhbmQgY3NzPXtgYm94IHtcbiAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogJHtwcm9wcy5tYXJnaW5MZWZ0ID8/IDB9cHg7XG4gICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAke3Byb3BzLm1hcmdpblJpZ2h0ID8/IDB9cHg7XG4gICAgICAgICAgICAgICAgbWFyZ2luLXRvcDogJHtwcm9wcy5tYXJnaW5Ub3AgPz8gMH1weDtcbiAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAke3Byb3BzLm1hcmdpbkJvdHRvbSA/PyAwfXB4O1xuICAgICAgICAgICAgfWBcbiAgICAgICAgICB9PlxuICAgICAgICAgIFxuICAgICAgICAgICAgICA8R3RrLkJveCB3aWR0aFJlcXVlc3Q9e3Byb3BzLndpZHRoUmVxdWVzdH0gaGVpZ2h0UmVxdWVzdD17cHJvcHMuaGVpZ2h0UmVxdWVzdH1cbiAgICAgICAgICAgICAgICAkPXsoc2VsZikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBnZXN0dXJlQ2xpY2sgPSBHdGsuR2VzdHVyZUNsaWNrLm5ldygpO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmFkZF9jb250cm9sbGVyKGdlc3R1cmVDbGljayk7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2xpY2tDb25uID0gZ2VzdHVyZUNsaWNrLmNvbm5lY3QoXCJyZWxlYXNlZFwiLCAoKSA9PiB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVzdHJveUNvbm4gPSBzZWxmLmNvbm5lY3QoXCJkZXN0cm95XCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdlc3R1cmVDbGljay5kaXNjb25uZWN0KGNsaWNrQ29ubik7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmRpc2Nvbm5lY3QoZGVzdHJveUNvbm4pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9fT5cbiAgICAgICAgICAgICAgICAgIHtwcm9wcy5jaGlsZHJlbn1cbiAgICAgICAgICAgICAgPC9HdGsuQm94PlxuICAgICAgICAgIDwvR3RrLkJveD5cbiAgICA8L0FzdGFsLldpbmRvdz47XG59XG4iLCAiaW1wb3J0IHsgR2RrLCBHdGsgfSBmcm9tIFwiYWdzL2d0azRcIjtcbmltcG9ydCB7IFNlcGFyYXRvciB9IGZyb20gXCIuL1NlcGFyYXRvclwiO1xuaW1wb3J0IHsgSGlzdG9yeU5vdGlmaWNhdGlvbiwgTm90aWZpY2F0aW9ucyB9IGZyb20gXCIuLi9zY3JpcHRzL25vdGlmaWNhdGlvbnNcIjtcbmltcG9ydCB7IGdldEFwcEljb24sIGdldFN5bWJvbGljSWNvbiB9IGZyb20gXCIuLi9zY3JpcHRzL2FwcHNcIjtcblxuaW1wb3J0IEFzdGFsTm90aWZkIGZyb20gXCJnaTovL0FzdGFsTm90aWZkXCI7XG5pbXBvcnQgUGFuZ28gZnJvbSBcImdpOi8vUGFuZ28/dmVyc2lvbj0xLjBcIjtcbmltcG9ydCBHTGliIGZyb20gXCJnaTovL0dMaWI/dmVyc2lvbj0yLjBcIjtcbmltcG9ydCBHT2JqZWN0IGZyb20gXCJnaTovL0dPYmplY3Q/dmVyc2lvbj0yLjBcIjtcblxuZnVuY3Rpb24gZ2V0Tm90aWZpY2F0aW9uSW1hZ2Uobm90aWY6IEFzdGFsTm90aWZkLk5vdGlmaWNhdGlvbnxIaXN0b3J5Tm90aWZpY2F0aW9uKTogKHN0cmluZ3x1bmRlZmluZWQpIHtcbiAgICBjb25zdCBpbWcgPSBub3RpZi5pbWFnZSB8fCBub3RpZi5hcHBJY29uO1xuXG4gICAgaWYoIWltZyB8fCAhaW1nLmluY2x1ZGVzKCcvJykpIFxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuXG4gICAgc3dpdGNoKHRydWUpIHtcbiAgICAgICAgY2FzZSAvXlsvXS8udGVzdChpbWcpOiBcbiAgICAgICAgICAgIHJldHVybiBgZmlsZTovLyR7aW1nfWA7XG5cbiAgICAgICAgY2FzZSAvXlt+XS8udGVzdChpbWcpOlxuICAgICAgICBjYXNlIC9eZmlsZTpcXC9cXC9bfl0vaS50ZXN0KGltZyk6XG4gICAgICAgICAgICByZXR1cm4gYGZpbGU6Ly8ke0dMaWIuZ2V0X2hvbWVfZGlyKCl9LyR7aW1nLnJlcGxhY2UoL14oZmlsZVxcOlxcL1xcL3xbfl18ZmlsZVxcOlxcL1xcW35dKS9pLCBcIlwiKX1gO1xuICAgIH1cblxuICAgIHJldHVybiBpbWc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBOb3RpZmljYXRpb25XaWRnZXQoeyBub3RpZmljYXRpb24sIGFjdGlvbkNsaWNrZWQsIGhvbGRPbkhvdmVyLCBzaG93VGltZSwgYWN0aW9uQ2xvc2UgfToge1xuICAgICAgICBub3RpZmljYXRpb246IEFzdGFsTm90aWZkLk5vdGlmaWNhdGlvbnxudW1iZXJ8SGlzdG9yeU5vdGlmaWNhdGlvbjtcbiAgICAgICAgYWN0aW9uQ2xpY2tlZD86IChub3RpZjogQXN0YWxOb3RpZmQuTm90aWZpY2F0aW9ufEhpc3RvcnlOb3RpZmljYXRpb24pID0+IHZvaWQ7XG4gICAgICAgIGFjdGlvbkNsb3NlPzogKG5vdGlmOiBBc3RhbE5vdGlmZC5Ob3RpZmljYXRpb258SGlzdG9yeU5vdGlmaWNhdGlvbikgPT4gdm9pZDtcbiAgICAgICAgaG9sZE9uSG92ZXI/OiBib29sZWFuO1xuICAgICAgICBzaG93VGltZT86IGJvb2xlYW47IC8vIEl0J3Mgc2hvd1RpbWUgOnNwZWFraW5nX2hlYWQ6IDpib29tOiA6YmFuZ2Jhbmc6XG4gICAgfSk6IEd0ay5XaWRnZXQge1xuXG4gICAgbm90aWZpY2F0aW9uID0gKHR5cGVvZiBub3RpZmljYXRpb24gPT09IFwibnVtYmVyXCIpID8gXG4gICAgICAgIEFzdGFsTm90aWZkLmdldF9kZWZhdWx0KCkuZ2V0X25vdGlmaWNhdGlvbihub3RpZmljYXRpb24pXG4gICAgOiBub3RpZmljYXRpb247XG5cbiAgICBjb25zdCBjb25uczogTWFwPEdPYmplY3QuT2JqZWN0LCBBcnJheTxudW1iZXI+PiA9IG5ldyBNYXAoKTtcblxuICAgIHJldHVybiA8R3RrLkJveCBoZXhwYW5kIGNsYXNzPXtgbm90aWZpY2F0aW9uICR7XG4gICAgICAgICAgTm90aWZpY2F0aW9ucy5nZXREZWZhdWx0KCkuZ2V0VXJnZW5jeVN0cmluZyhub3RpZmljYXRpb24udXJnZW5jeSlcbiAgICAgIH1gfSBvcmllbnRhdGlvbj17R3RrLk9yaWVudGF0aW9uLlZFUlRJQ0FMfSBzcGFjaW5nPXs1fVxuICAgICAgJD17KHNlbGYpID0+IHtcbiAgICAgICAgICBjb25zdCBldmVudENvbnRyb2xsZXJNb3Rpb24gPSBHdGsuRXZlbnRDb250cm9sbGVyTW90aW9uLm5ldygpLFxuICAgICAgICAgICAgICBnZXN0dXJlQ2xpY2sgPSBHdGsuR2VzdHVyZUNsaWNrLm5ldygpO1xuXG4gICAgICAgICAgc2VsZi5hZGRfY29udHJvbGxlcihldmVudENvbnRyb2xsZXJNb3Rpb24pO1xuICAgICAgICAgIHNlbGYuYWRkX2NvbnRyb2xsZXIoZ2VzdHVyZUNsaWNrKTtcblxuICAgICAgICAgIGNvbm5zLnNldChldmVudENvbnRyb2xsZXJNb3Rpb24sIFtcbiAgICAgICAgICAgICAgZXZlbnRDb250cm9sbGVyTW90aW9uLmNvbm5lY3QoXCJlbnRlclwiLCAoKSA9PiBcbiAgICAgICAgICAgICAgICAgIGhvbGRPbkhvdmVyICYmIE5vdGlmaWNhdGlvbnMuZ2V0RGVmYXVsdCgpLmhvbGROb3RpZmljYXRpb24obm90aWZpY2F0aW9uLmlkKSksXG4gICAgICAgICAgICAgIGV2ZW50Q29udHJvbGxlck1vdGlvbi5jb25uZWN0KFwibGVhdmVcIiwgKCkgPT4gXG4gICAgICAgICAgICAgICAgICBob2xkT25Ib3ZlciAmJiBOb3RpZmljYXRpb25zLmdldERlZmF1bHQoKS5yZW1vdmVOb3RpZmljYXRpb24obm90aWZpY2F0aW9uLmlkKSlcbiAgICAgICAgICBdKTtcblxuICAgICAgICAgIGNvbm5zLnNldChnZXN0dXJlQ2xpY2ssIFtcbiAgICAgICAgICAgICAgZ2VzdHVyZUNsaWNrLmNvbm5lY3QoXCJyZWxlYXNlZFwiLCAoZ2VzdHVyZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgZ2VzdHVyZS5nZXRfY3VycmVudF9idXR0b24oKSA9PT0gR2RrLkJVVFRPTl9QUklNQVJZICYmXG4gICAgICAgICAgICAgICAgICAgICAgYWN0aW9uQ2xpY2tlZD8uKG5vdGlmaWNhdGlvbik7XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgXSk7XG4gICAgICB9fSBvbkRlc3Ryb3k9eyhfKSA9PiB7XG4gICAgICAgICAgY29ubnMuZm9yRWFjaCgoaWRzLCBvYmopID0+IGlkcy5mb3JFYWNoKGlkID0+IG9iai5kaXNjb25uZWN0KGlkKSkpO1xuICAgICAgfX0+XG5cbiAgICAgICAgPEd0ay5Cb3ggY2xhc3M9e1widG9wXCJ9IGhleHBhbmQ+XG4gICAgICAgICAgICA8R3RrLkltYWdlIGNzcz17XCJmb250LXNpemU6IDE2cHg7XCJ9ICQ9eyhzZWxmKSA9PiB7XG4gICAgICAgICAgICAgICAgICBjb25zdCBpY29uID0gZ2V0U3ltYm9saWNJY29uKG5vdGlmaWNhdGlvbi5hcHBJY29uID8/IG5vdGlmaWNhdGlvbi5hcHBOYW1lKSA/PyBcbiAgICAgICAgICAgICAgICAgICAgICBnZXRTeW1ib2xpY0ljb24obm90aWZpY2F0aW9uLmFwcE5hbWUpID8/IGdldEFwcEljb24obm90aWZpY2F0aW9uLmFwcE5hbWUpO1xuXG4gICAgICAgICAgICAgICAgICBpZihpY29uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgc2VsZi5zZXRfZnJvbV9pY29uX25hbWUoaWNvbik7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBzZWxmLnNldF92aXNpYmxlKGZhbHNlKTtcbiAgICAgICAgICAgIH19IC8+XG4gICAgICAgICAgICA8R3RrLkxhYmVsIGNsYXNzPXtcImFwcC1uYW1lXCJ9IGhhbGlnbj17R3RrLkFsaWduLlNUQVJUfSBoZXhwYW5kPXt0cnVlfSBcbiAgICAgICAgICAgICAgbGFiZWw9e25vdGlmaWNhdGlvbi5hcHBOYW1lIHx8IFwiQXBwbGljYXRpb25cIn0gLz5cblxuICAgICAgICAgICAgPEd0ay5MYWJlbCBjbGFzcz17XCJ0aW1lXCJ9IHZpc2libGU9e3Nob3dUaW1lfSB4YWxpZ249ezF9IFxuICAgICAgICAgICAgICBsYWJlbD17R0xpYi5EYXRlVGltZS5uZXdfZnJvbV91bml4X2xvY2FsKG5vdGlmaWNhdGlvbi50aW1lKS5mb3JtYXQoXCIlSDolTVwiKSA/PyBcIlwifSAvPlxuXG4gICAgICAgICAgICA8R3RrLkJ1dHRvbiBoYWxpZ249e0d0ay5BbGlnbi5FTkR9IGljb25OYW1lPXtcIndpbmRvdy1jbG9zZS1zeW1ib2xpY1wifSBcbiAgICAgICAgICAgICAgY2xhc3M9e1wiY2xvc2UgaWNvblwifS8+XG4gICAgICAgIDwvR3RrLkJveD5cbiAgICAgICAgPFNlcGFyYXRvciBhbHBoYT17LjF9IG9yaWVudGF0aW9uPXtHdGsuT3JpZW50YXRpb24uVkVSVElDQUx9IC8+XG4gICAgICAgIDxHdGsuQm94IGNsYXNzPXtcImNvbnRlbnRcIn0gJD17KHNlbGYpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGltYWdlID0gZ2V0Tm90aWZpY2F0aW9uSW1hZ2Uobm90aWZpY2F0aW9uKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaW1hZ2UgJiZcbiAgICAgICAgICAgICAgICBzZWxmLnByZXBlbmQoR3RrLlBpY3R1cmUubmV3X2Zvcl9maWxlbmFtZShpbWFnZSkpO1xuICAgICAgICAgIH19PlxuXG4gICAgICAgICAgICA8R3RrLkJveCBjbGFzcz17XCJ0ZXh0XCJ9IG9yaWVudGF0aW9uPXtHdGsuT3JpZW50YXRpb24uVkVSVElDQUx9XG4gICAgICAgICAgICAgIHZleHBhbmQ9e3RydWV9PlxuXG4gICAgICAgICAgICAgICAgPEd0ay5MYWJlbCBjbGFzcz17XCJzdW1tYXJ5XCJ9IHVzZU1hcmt1cD17dHJ1ZX0gaGV4cGFuZD17ZmFsc2V9IHhhbGlnbj17MH1cbiAgICAgICAgICAgICAgICAgIHZleHBhbmQgZWxsaXBzaXplPXtQYW5nby5FbGxpcHNpemVNb2RlLkVORH0gbGFiZWw9e1xuICAgICAgICAgICAgICAgICAgICAgIG5vdGlmaWNhdGlvbi5zdW1tYXJ5LnJlcGxhY2UoL1smXS9nLCBcIiZhbXA7XCIpfVxuICAgICAgICAgICAgICAgIC8+XG5cbiAgICAgICAgICAgICAgICA8R3RrLkxhYmVsIGNsYXNzPXtcImJvZHlcIn0gdXNlTWFya3VwPXt0cnVlfSB4YWxpZ249ezB9IHdyYXA9e3RydWV9IGhleHBhbmQ9e2ZhbHNlfVxuICAgICAgICAgICAgICAgICAgdmV4cGFuZCB3cmFwTW9kZT17UGFuZ28uV3JhcE1vZGUuV09SRF9DSEFSfSBsYWJlbD17XG4gICAgICAgICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uLmJvZHkucmVwbGFjZSgvWyZdL2csIFwiJmFtcDtcIil9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvR3RrLkJveD5cbiAgICAgICAgPC9HdGsuQm94PlxuXG4gICAgICAgIDxHdGsuQm94IGNsYXNzPXtcImFjdGlvbiBidXR0b24tcm93XCJ9IGhleHBhbmQ9e3RydWV9IHZpc2libGU9e1xuICAgICAgICAgICAgKG5vdGlmaWNhdGlvbiBpbnN0YW5jZW9mIEFzdGFsTm90aWZkLk5vdGlmaWNhdGlvbikgJiZcbiAgICAgICAgICAgICAgICAobm90aWZpY2F0aW9uLmFjdGlvbnMuZmlsdGVyKGFjdGlvbiA9PiBhY3Rpb24ubGFiZWwudG9Mb3dlckNhc2UoKSAhPT0gXCJ2aWV3XCIpLmxlbmd0aCA+IDApXG4gICAgICAgIH0+XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIChub3RpZmljYXRpb24gaW5zdGFuY2VvZiBBc3RhbE5vdGlmZC5Ob3RpZmljYXRpb24pICYmIFxuICAgICAgICAgICAgICAgIG5vdGlmaWNhdGlvbi5hY3Rpb25zLmZpbHRlcihhID0+IGEubGFiZWwudG9Mb3dlckNhc2UoKSAhPT0gXCJ2aWV3XCIpLm1hcChhY3Rpb24gPT5cbiAgICAgICAgICAgICAgICAgICAgPEd0ay5CdXR0b24gY2xhc3M9e1wiYWN0aW9uXCJ9IGxhYmVsPXthY3Rpb24ubGFiZWx9IFxuICAgICAgICAgICAgICAgICAgICAgIGhleHBhbmQ9e3RydWV9IG9uQ2xpY2tlZD17KF8pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uLmludm9rZShhY3Rpb24uaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb25DbG9zZT8uKG5vdGlmaWNhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgLz4pXG4gICAgICAgICAgICB9XG4gICAgICAgIDwvR3RrLkJveD5cbiAgICA8L0d0ay5Cb3g+IGFzIEd0ay5XaWRnZXQ7XG59XG4iLCAiaW1wb3J0IHsgR3RrIH0gZnJvbSBcImFncy9ndGs0XCI7XG5pbXBvcnQgeyBIaXN0b3J5Tm90aWZpY2F0aW9uLCBOb3RpZmljYXRpb25zIH0gZnJvbSBcIi4uLy4uL3NjcmlwdHMvbm90aWZpY2F0aW9uc1wiO1xuaW1wb3J0IHsgTm90aWZpY2F0aW9uV2lkZ2V0IH0gZnJvbSBcIi4uL05vdGlmaWNhdGlvblwiO1xuaW1wb3J0IHsgdHIgfSBmcm9tIFwiLi4vLi4vaTE4bi9pbnRsXCI7XG5pbXBvcnQgeyBjcmVhdGVCaW5kaW5nLCBGb3IgfSBmcm9tIFwiYWdzXCI7XG5pbXBvcnQgQXN0YWxOb3RpZmQgZnJvbSBcImdpOi8vQXN0YWxOb3RpZmQ/dmVyc2lvbj0wLjFcIjtcblxuXG5leHBvcnQgY29uc3QgTm90aWZIaXN0b3J5ID0gKCkgPT4gXG4gICAgPEd0ay5Cb3ggb3JpZW50YXRpb249e0d0ay5PcmllbnRhdGlvbi5WRVJUSUNBTH0gXG4gICAgICBjbGFzcz17Y3JlYXRlQmluZGluZyhOb3RpZmljYXRpb25zLmdldERlZmF1bHQoKSwgXCJoaXN0b3J5XCIpLmFzKGhpc3RvcnkgPT4gXG4gICAgICAgICAgYGhpc3RvcnkgJHtoaXN0b3J5Lmxlbmd0aCA8IDEgPyBcImhpZGVcIiA6IFwiXCJ9YCl9PlxuXG4gICAgICAgIDxHdGsuU2Nyb2xsZWRXaW5kb3cgY2xhc3M9e1wiaGlzdG9yeS1zY3JvbGxhYmxlXCJ9IGhzY3JvbGxiYXJQb2xpY3k9e0d0ay5Qb2xpY3lUeXBlLk5FVkVSfVxuICAgICAgICAgIHZzY3JvbGxiYXJQb2xpY3k9e0d0ay5Qb2xpY3lUeXBlLkFVVE9NQVRJQ30gcHJvcGFnYXRlTmF0dXJhbEhlaWdodD17dHJ1ZX1cbiAgICAgICAgICBvblNob3c9eyhzZWxmKSA9PiB7XG4gICAgICAgICAgICAgIGlmKCEoc2VsZi5nZXRfY2hpbGQoKSEgYXMgR3RrLlZpZXdwb3J0KS5nZXRfY2hpbGQoKSkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgIHNlbGYubWluQ29udGVudEhlaWdodCA9IFxuICAgICAgICAgICAgICAgICAgKChzZWxmLmdldF9jaGlsZCgpISBhcyBHdGsuVmlld3BvcnQpLmdldF9jaGlsZCgpIGFzIEd0ay5Cb3hcbiAgICAgICAgICAgICAgICAgICAgICApLmdldF9maXJzdF9jaGlsZCgpIS5nZXRfYWxsb2NhdGlvbigpLmhlaWdodCBcbiAgICAgICAgICAgICAgICAgIHx8IDA7XG4gICAgICAgICAgfX0+XG5cbiAgICAgICAgICAgIDxHdGsuQm94IGNsYXNzPXtcIm5vdGlmaWNhdGlvbnNcIn0gaGV4cGFuZD17dHJ1ZX0gb3JpZW50YXRpb249e0d0ay5PcmllbnRhdGlvbi5WRVJUSUNBTH1cbiAgICAgICAgICAgICAgc3BhY2luZz17NH0gdmFsaWduPXtHdGsuQWxpZ24uU1RBUlR9PlxuXG4gICAgICAgICAgICAgICAgPEZvciBlYWNoPXtjcmVhdGVCaW5kaW5nKE5vdGlmaWNhdGlvbnMuZ2V0RGVmYXVsdCgpLCBcImhpc3RvcnlcIil9PlxuICAgICAgICAgICAgICAgICAgICB7KG5vdGlmOiBBc3RhbE5vdGlmZC5Ob3RpZmljYXRpb258SGlzdG9yeU5vdGlmaWNhdGlvbikgPT4gXG4gICAgICAgICAgICAgICAgICAgICAgICA8Tm90aWZpY2F0aW9uV2lkZ2V0IG5vdGlmaWNhdGlvbj17bm90aWZ9IHNob3dUaW1lPXt0cnVlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb25DbG9zZT17KG4pID0+IE5vdGlmaWNhdGlvbnMuZ2V0RGVmYXVsdCgpLnJlbW92ZUhpc3Rvcnkobi5pZCl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbkNsaWNrZWQ9eyhuKSA9PiBOb3RpZmljYXRpb25zLmdldERlZmF1bHQoKS5yZW1vdmVIaXN0b3J5KG4uaWQpfVxuICAgICAgICAgICAgICAgICAgICAvPn1cbiAgICAgICAgICAgICAgICA8L0Zvcj5cbiAgICAgICAgICAgIDwvR3RrLkJveD5cbiAgICAgICAgPC9HdGsuU2Nyb2xsZWRXaW5kb3c+XG5cbiAgICAgICAgPEd0ay5Cb3ggaGV4cGFuZD17dHJ1ZX0gY2xhc3M9e1wiYnV0dG9uLXJvd1wifSBoYWxpZ249e0d0ay5BbGlnbi5FTkR9PlxuICAgICAgICAgICAgPEd0ay5CdXR0b24gY2xhc3M9e1wiY2xlYXItYWxsXCJ9IGljb25OYW1lPXtcImVkaXQtY2xlYXItYWxsLXN5bWJvbGljXCJ9XG4gICAgICAgICAgICAgIGxhYmVsPXt0cihcImNsZWFyXCIpfSBvbkNsaWNrZWQ9e05vdGlmaWNhdGlvbnMuZ2V0RGVmYXVsdCgpLmNsZWFySGlzdG9yeX0gLz5cbiAgICAgICAgPC9HdGsuQm94PlxuICAgIDwvR3RrLkJveD4gYXMgR3RrLkJveDtcbiIsICJpbXBvcnQgeyBleGVjQXN5bmMgfSBmcm9tIFwiYWdzL3Byb2Nlc3NcIjtcbmltcG9ydCB7IHRpbWVvdXQgfSBmcm9tIFwiYWdzL3RpbWVcIjtcbmltcG9ydCBHT2JqZWN0LCB7IHJlZ2lzdGVyLCBnZXR0ZXIgfSBmcm9tIFwiYWdzL2dvYmplY3RcIjtcbmltcG9ydCB7IG1vbml0b3JGaWxlIH0gZnJvbSBcImFncy9maWxlXCI7XG5cbmltcG9ydCBBc3RhbElPIGZyb20gXCJnaTovL0FzdGFsSU9cIjtcbmltcG9ydCBHaW8gZnJvbSBcImdpOi8vR2lvP3ZlcnNpb249Mi4wXCI7XG5pbXBvcnQgR0xpYiBmcm9tIFwiZ2k6Ly9HTGliP3ZlcnNpb249Mi4wXCI7XG5cblxuZXhwb3J0IHsgV2FsbHBhcGVyIH07XG5cbkByZWdpc3Rlcih7IEdUeXBlTmFtZTogXCJXYWxscGFwZXJcIiB9KVxuY2xhc3MgV2FsbHBhcGVyIGV4dGVuZHMgR09iamVjdC5PYmplY3Qge1xuICAgIHByaXZhdGUgc3RhdGljIGluc3RhbmNlOiBXYWxscGFwZXI7XG4gICAgI3dhbGxwYXBlcjogKHN0cmluZ3x1bmRlZmluZWQpO1xuICAgICNzcGxhc2g6IGJvb2xlYW4gPSB0cnVlO1xuICAgICNtb25pdG9yOiBHaW8uRmlsZU1vbml0b3I7XG4gICAgI2h5cHJwYXBlckZpbGU6IEdpby5GaWxlO1xuICAgICN3YWxscGFwZXJzUGF0aDogc3RyaW5nO1xuICAgICNpZ25vcmVXYXRjaDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgQGdldHRlcihCb29sZWFuKVxuICAgIHB1YmxpYyBnZXQgc3BsYXNoKCkgeyByZXR1cm4gdGhpcy4jc3BsYXNoOyB9XG4gICAgcHVibGljIHNldCBzcGxhc2goc2hvd1NwbGFzaDogYm9vbGVhbikge1xuICAgICAgICB0aGlzLiNzcGxhc2ggPSBzaG93U3BsYXNoO1xuICAgICAgICB0aGlzLm5vdGlmeShcInNwbGFzaFwiKTtcbiAgICB9XG5cbiAgICAvKiogY3VycmVudCB3YWxscGFwZXIncyBjb21wbGV0ZSBwYXRoXG4gICAgKiBjYW4gYmUgYW4gZW1wdHkgc3RyaW5nIGlmIHVuZGVmaW5lZCAqL1xuICAgIEBnZXR0ZXIoU3RyaW5nKVxuICAgIHB1YmxpYyBnZXQgd2FsbHBhcGVyKCkgeyByZXR1cm4gdGhpcy4jd2FsbHBhcGVyID8/IFwiXCI7IH1cbiAgICBwdWJsaWMgc2V0IHdhbGxwYXBlcihuZXdWYWx1ZTogc3RyaW5nKSB7IHRoaXMuc2V0V2FsbHBhcGVyKG5ld1ZhbHVlKTsgfVxuXG4gICAgcHVibGljIGdldCB3YWxscGFwZXJzUGF0aCgpIHsgcmV0dXJuIHRoaXMuI3dhbGxwYXBlcnNQYXRoOyB9XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLiN3YWxscGFwZXJzUGF0aCA9IEdMaWIuZ2V0ZW52KFwiV0FMTFBBUEVSU1wiKSA/PyBcbiAgICAgICAgICAgIGAke0dMaWIuZ2V0X2hvbWVfZGlyKCl9L3dhbGxwYXBlcnNgO1xuXG4gICAgICAgIHRoaXMuI2h5cHJwYXBlckZpbGUgPSBHaW8uRmlsZS5uZXdfZm9yX3BhdGgoYCR7XG4gICAgICAgICAgICBHTGliLmdldF91c2VyX2NvbmZpZ19kaXIoKX0vaHlwci9oeXBycGFwZXIuY29uZmApO1xuXG4gICAgICAgIHRoaXMuZ2V0V2FsbHBhcGVyKCkudGhlbigod2FsbCkgPT4ge1xuICAgICAgICAgICAgaWYod2FsbD8udHJpbSgpKSB0aGlzLiN3YWxscGFwZXIgPSB3YWxsLnRyaW0oKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbGV0IHRtZW91dDogKEFzdGFsSU8uVGltZXx1bmRlZmluZWQpID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIHRoaXMuI21vbml0b3IgPSBtb25pdG9yRmlsZSh0aGlzLiNoeXBycGFwZXJGaWxlLmdldF9wYXRoKCkhLCAoXywgZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmKGV2ZW50ICE9PSBHaW8uRmlsZU1vbml0b3JFdmVudC5DSEFOR0VEICYmIGV2ZW50ICE9PSBHaW8uRmlsZU1vbml0b3JFdmVudC5DUkVBVEVEICYmXG4gICAgICAgICAgICAgIGV2ZW50ICE9PSBHaW8uRmlsZU1vbml0b3JFdmVudC5NT1ZFRF9JTilcbiAgICAgICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgICAgIGlmKHRtZW91dCkgcmV0dXJuO1xuICAgICAgICAgICAgZWxzZSB0bWVvdXQgPSB0aW1lb3V0KDE1MDAsICgpID0+IHRtZW91dCA9IHVuZGVmaW5lZCk7XG5cbiAgICAgICAgICAgIGlmKHRoaXMuI2lnbm9yZVdhdGNoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4jaWdub3JlV2F0Y2ggPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IFsgbG9hZGVkLCB0ZXh0IF0gPSB0aGlzLiNoeXBycGFwZXJGaWxlLmxvYWRfY29udGVudHMobnVsbCk7XG4gICAgICAgICAgICBpZighbG9hZGVkKSBcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiV2FsbHBhcGVyOiBDb3VsZG4ndCByZWFkIGNoYW5nZXMgaW5zaWRlIHRoZSBoeXBycGFwZXIgZmlsZSFcIik7XG5cbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSBuZXcgVGV4dERlY29kZXIoKS5kZWNvZGUodGV4dCk7XG5cbiAgICAgICAgICAgIGlmKGNvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICBsZXQgc2V0V2FsbDogYm9vbGVhbiA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICBmb3IoY29uc3QgbGluZSBvZiBjb250ZW50LnNwbGl0KCdcXG4nKSkge1xuICAgICAgICAgICAgICAgICAgICBpZihsaW5lLnRyaW0oKS5zdGFydHNXaXRoKCcjJykpXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBsaW5lU3BsaXQgPSBsaW5lLnNwbGl0KCc9Jyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IGxpbmVTcGxpdFswXS50cmltKCksXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGxpbmVTcGxpdC5maWx0ZXIoKF8sIGkpID0+IGkgIT09IDApLmpvaW4oJz0nKS50cmltKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoKGtleSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInNwbGFzaFwiOiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNwbGFzaCA9ICgvKHllc3x0cnVlfG9ufGVuYWJsZXxlbmFibGVkfDEpLiovLnRlc3QodmFsdWUpKSA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIndhbGxwYXBlclwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHRoaXMuI3dhbGxwYXBlciAhPT0gdmFsdWUgJiYgc2V0V2FsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFdhbGxwYXBlcih2YWx1ZSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRXYWxsID0gZmFsc2U7IC8vIHdhbGxwYXBlciBhbHJlYWR5IHNldFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB2ZnVuY19kaXNwb3NlKCk6IHZvaWQge1xuICAgICAgICB0aGlzLiNtb25pdG9yLmNhbmNlbCgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0RGVmYXVsdCgpOiBXYWxscGFwZXIge1xuICAgICAgICBpZighdGhpcy5pbnN0YW5jZSlcbiAgICAgICAgICAgIHRoaXMuaW5zdGFuY2UgPSBuZXcgV2FsbHBhcGVyKCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaW5zdGFuY2U7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB3cml0ZUNoYW5nZXMoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuI2lnbm9yZVdhdGNoID0gdHJ1ZTsgLy8gdGVsbCBtb25pdG9yIHRvIGlnbm9yZSBmaWxlIHJlcGxhY2VcbiAgICAgICAgdGhpcy4jaHlwcnBhcGVyRmlsZS5yZXBsYWNlX2FzeW5jKG51bGwsIGZhbHNlLFxuICAgICAgICAgICAgR2lvLkZpbGVDcmVhdGVGbGFncy5SRVBMQUNFX0RFU1RJTkFUSU9OLFxuICAgICAgICAgICAgR0xpYi5QUklPUklUWV9ERUZBVUxULCBudWxsLCAoXywgcmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzID0gdGhpcy4jaHlwcnBhcGVyRmlsZS5yZXBsYWNlX2ZpbmlzaChyZXN1bHQpO1xuICAgICAgICAgICAgICAgIGlmKHJlcykge1xuICAgICAgICAgICAgICAgICAgICAvLyBzdWNjZXNzXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuI2lnbm9yZVdhdGNoID0gdHJ1ZTsgLy8gdGVsbCBtb25pdG9yIHRvIGlnbm9yZSB0aGlzIGNoYW5nZVxuICAgICAgICAgICAgICAgICAgICByZXMud3JpdGVfYnl0ZXNfYXN5bmMobmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKGAjIFRoaXMgZmlsZSB3YXMgYXV0b21hdGljYWxseSBnZW5lcmF0ZWQgYnkgY29sb3Itc2hlbGxcblxuICAgICAgICAgICAgICAgICAgICAgICAgcHJlbG9hZCA9ICR7dGhpcy4jd2FsbHBhcGVyfVxuICAgICAgICAgICAgICAgICAgICAgICAgc3BsYXNoID0gJHt0aGlzLiNzcGxhc2h9XG4gICAgICAgICAgICAgICAgICAgICAgICB3YWxscGFwZXIgPSAsICR7dGhpcy4jd2FsbHBhcGVyfWAuc3BsaXQoJ1xcbicpLm1hcChzdHIgPT4gc3RyLnRyaW1TdGFydCgpKS5qb2luKCdcXG4nKSksXG4gICAgICAgICAgICAgICAgICAgICAgICBHTGliLlBSSU9SSVRZX0RFRkFVTFQsIG51bGwsIChfLCBhc3luY1JlcykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKF8hLndyaXRlX2ZpbmlzaChhc3luY1JlcykpIHJlcy5mbHVzaChudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXMuY2xvc2UobnVsbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFdhbGxwYXBlcjogYW4gZXJyb3Igb2NjdXJyZWQgd2hlbiB0cnlpbmcgdG8gcmVwbGFjZSB0aGUgaHlwcnBhcGVyIGZpbGVgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgZ2V0V2FsbHBhcGVyKCk6IFByb21pc2U8c3RyaW5nfHVuZGVmaW5lZD4ge1xuICAgICAgICByZXR1cm4gYXdhaXQgZXhlY0FzeW5jKFwic2ggLWMgXFxcImh5cHJjdGwgaHlwcnBhcGVyIGxpc3RhY3RpdmUgfCB0YWlsIC1uIDFcXFwiXCIpLnRoZW4oc3Rkb3V0ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYWRlZDogKHN0cmluZ3x1bmRlZmluZWQpID0gc3Rkb3V0LnNwbGl0KCc9JylbMV0/LnRyaW0oKTtcblxuICAgICAgICAgICAgaWYoIWxvYWRlZCkgXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBXYWxscGFwZXI6IENvdWxkbid0IGdldCB3YWxscGFwZXIuIFRoZXJlIGlzKGFyZSkgbm8gbG9hZGVkIHdhbGxwYXBlcihzKWApO1xuXG4gICAgICAgICAgICByZXR1cm4gbG9hZGVkO1xuICAgICAgICB9KS5jYXRjaCgoZXJyOiBHaW8uSU9FcnJvckVudW0pID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFdhbGxwYXBlcjogQ291bGRuJ3QgZ2V0IHdhbGxwYXBlci4gU3RkZXJyOiBcXG4ke2Vyci5tZXNzYWdlID8gYCR7ZXJyLm1lc3NhZ2V9IC9gIDogXCJcIn0gU3RhY2s6IFxcbiAke2Vyci5zdGFja31gKTtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyByZWxvYWRDb2xvcnMoKTogdm9pZCB7XG4gICAgICAgIGV4ZWNBc3luYyhgd2FsIC10IC0tY29sczE2IGRhcmtlbiAtaSBcIiR7dGhpcy4jd2FsbHBhcGVyfVwiYCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIldhbGxwYXBlcjogcmVsb2FkZWQgc2hlbGwgY29sb3JzXCIpO1xuICAgICAgICB9KS5jYXRjaChyID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFdhbGxwYXBlcjogQ291bGRuJ3QgdXBkYXRlIHNoZWxsIGNvbG9ycy4gU3RkZXJyOiAke3J9YCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRXYWxscGFwZXIocGF0aDogc3RyaW5nfEdpby5GaWxlLCB3cml0ZTogYm9vbGVhbiA9IHRydWUpOiB2b2lkIHtcbiAgICAgICAgZXhlY0FzeW5jKFwiaHlwcmN0bCBoeXBycGFwZXIgdW5sb2FkIGFsbFwiKS50aGVuKCgpID0+IFxuICAgICAgICAgICAgZXhlY0FzeW5jKGBoeXByY3RsIGh5cHJwYXBlciBwcmVsb2FkICR7cGF0aH1gKS50aGVuKCgpID0+IFxuICAgICAgICAgICAgICAgIGV4ZWNBc3luYyhgaHlwcmN0bCBoeXBycGFwZXIgd2FsbHBhcGVyICR7cGF0aH1gKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4jd2FsbHBhcGVyID0gKHR5cGVvZiBwYXRoID09PSBcInN0cmluZ1wiKSA/IHBhdGggOiBwYXRoLmdldF9wYXRoKCkhO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbG9hZENvbG9ycygpO1xuICAgICAgICAgICAgICAgICAgICB3cml0ZSAmJiB0aGlzLndyaXRlQ2hhbmdlcygpO1xuICAgICAgICAgICAgICAgIH0pLmNhdGNoKHIgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBXYWxscGFwZXI6IENvdWxkbid0IHNldCB3YWxscGFwZXIuIFN0ZGVycjogJHtyfWApO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApLmNhdGNoKHIgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFdhbGxwYXBlcjogQ291bGRuJ3QgcHJlbG9hZCBpbWFnZS4gU3RkZXJyOiAke3J9YCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICApLmNhdGNoKHIgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgV2FsbHBhcGVyOiBDb3VsZG4ndCB1bmxvYWQgaW1hZ2VzIGZyb20gbWVtb3J5LiBTdGRlcnI6ICR7cn1gKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIHBpY2tXYWxscGFwZXIoKTogUHJvbWlzZTxzdHJpbmd8dW5kZWZpbmVkPiB7XG4gICAgICAgIHJldHVybiAoYXdhaXQgZXhlY0FzeW5jKGB6ZW5pdHkgLS1maWxlLXNlbGVjdGlvbmApLnRoZW4od2FsbCA9PiB7XG4gICAgICAgICAgICBpZighd2FsbC50cmltKCkpIHJldHVybiB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgIHRoaXMuc2V0V2FsbHBhcGVyKHdhbGwpO1xuICAgICAgICAgICAgcmV0dXJuIHdhbGw7XG4gICAgICAgIH0pLmNhdGNoKHIgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgV2FsbHBhcGVyOiBDb3VsZG4ndCBwaWNrIHdhbGxwYXBlciwgaXMgXFxgemVuaXR5XFxgIGluc3RhbGxlZD8gU3RkZXJyOiAke3J9YCk7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9KSk7XG4gICAgfVxufVxuIiwgImltcG9ydCB7IEd0ayB9IGZyb20gXCJhZ3MvZ3RrNFwiO1xuaW1wb3J0IHsgV2luZG93cyB9IGZyb20gXCIuLi8uLi93aW5kb3dzXCI7XG5pbXBvcnQgeyBXYWxscGFwZXIgfSBmcm9tIFwiLi4vLi4vc2NyaXB0cy93YWxscGFwZXJcIjtcbmltcG9ydCB7IGV4ZWNBcHAgfSBmcm9tIFwiLi4vLi4vc2NyaXB0cy9hcHBzXCI7XG5pbXBvcnQgR0xpYiBmcm9tIFwiZ2k6Ly9HTGliP3ZlcnNpb249Mi4wXCI7XG5pbXBvcnQgeyBBY2Nlc3NvciB9IGZyb20gXCJhZ3NcIjtcbmltcG9ydCB7IGNyZWF0ZVBvbGwgfSBmcm9tIFwiYWdzL3RpbWVcIjtcblxuXG5cbmNvbnN0IHVwdGltZTogQWNjZXNzb3I8c3RyaW5nPiA9IGNyZWF0ZVBvbGwoXCJKdXN0IHR1cm5lZCBvblwiLCAxMDAwLCBcInVwdGltZSAtcFwiKTsgXG5cbmZ1bmN0aW9uIExvY2tCdXR0b24oKTogR3RrLkJ1dHRvbiB7XG4gICAgcmV0dXJuIDxHdGsuQnV0dG9uIGljb25OYW1lPXtcInN5c3RlbS1sb2NrLXNjcmVlbi1zeW1ib2xpY1wifSBcbiAgICAgIG9uQ2xpY2tlZD17KCkgPT4ge1xuICAgICAgICAgIFdpbmRvd3MuZ2V0RGVmYXVsdCgpLmNsb3NlKFwiY29udHJvbC1jZW50ZXJcIik7XG4gICAgICAgICAgZXhlY0FwcChcImh5cHJsb2NrXCIpO1xuICAgICAgfX0gXG4gICAgLz4gYXMgR3RrLkJ1dHRvbjtcbn1cblxuZnVuY3Rpb24gQ29sb3JQaWNrZXJCdXR0b24oKTogR3RrLkJ1dHRvbiB7XG4gICAgcmV0dXJuIDxHdGsuQnV0dG9uIGljb25OYW1lPXtcImNvbG9yLXNlbGVjdC1zeW1ib2xpY1wifVxuICAgICAgb25DbGlja2VkPXsoKSA9PiB7XG4gICAgICAgICAgV2luZG93cy5nZXREZWZhdWx0KCkuY2xvc2UoXCJjb250cm9sLWNlbnRlclwiKTtcbiAgICAgICAgICBleGVjQXBwKFwic2ggJEhPTUUvLmNvbmZpZy9oeXByL3NjcmlwdHMvY29sb3ItcGlja2VyLnNoXCIpO1xuICAgICAgfX1cbiAgICAvPiBhcyBHdGsuQnV0dG9uO1xufVxuXG5mdW5jdGlvbiBTY3JlZW5zaG90QnV0dG9uKCk6IEd0ay5CdXR0b24ge1xuICAgIHJldHVybiA8R3RrLkJ1dHRvbiBpY29uTmFtZT17XCJhcHBsZXRzLXNjcmVlbnNob290ZXItc3ltYm9saWNcIn1cbiAgICAgIG9uQ2xpY2tlZD17KCkgPT4ge1xuICAgICAgICAgIFdpbmRvd3MuZ2V0RGVmYXVsdCgpLmNsb3NlKFwiY29udHJvbC1jZW50ZXJcIik7XG4gICAgICAgICAgZXhlY0FwcChgc2ggJHtHTGliLmdldF91c2VyX2NvbmZpZ19kaXIoKX0vaHlwci9zY3JpcHRzL3NjcmVlbnNob3Quc2hgKTtcbiAgICAgIH19XG4gICAgLz4gYXMgR3RrLkJ1dHRvbjtcbn1cblxuZnVuY3Rpb24gU2VsZWN0V2FsbHBhcGVyQnV0dG9uKCk6IEd0ay5CdXR0b24ge1xuICAgIHJldHVybiA8R3RrLkJ1dHRvbiBpY29uTmFtZT17XCJwcmVmZXJlbmNlcy1kZXNrdG9wLXdhbGxwYXBlci1zeW1ib2xpY1wifVxuICAgICAgb25DbGlja2VkPXsoKSA9PiB7XG4gICAgICAgICAgV2luZG93cy5nZXREZWZhdWx0KCkuY2xvc2UoXCJjb250cm9sLWNlbnRlclwiKTtcbiAgICAgICAgICBXYWxscGFwZXIuZ2V0RGVmYXVsdCgpLnBpY2tXYWxscGFwZXIoKTtcbiAgICAgIH19XG4gICAgLz4gYXMgR3RrLkJ1dHRvbjtcbn1cblxuZnVuY3Rpb24gTG9nb3V0QnV0dG9uKCk6IEd0ay5CdXR0b24ge1xuICAgIHJldHVybiA8R3RrLkJ1dHRvbiBpY29uTmFtZT17XCJzeXN0ZW0tc2h1dGRvd24tc3ltYm9saWNcIn1cbiAgICAgIG9uQ2xpY2tlZD17KCkgPT4ge1xuICAgICAgICAgIFdpbmRvd3MuZ2V0RGVmYXVsdCgpLmNsb3NlKFwiY29udHJvbC1jZW50ZXJcIik7XG4gICAgICAgICAgV2luZG93cy5nZXREZWZhdWx0KCkub3BlbihcImxvZ291dC1tZW51XCIpO1xuICAgICAgfX1cbiAgICAvPiBhcyBHdGsuQnV0dG9uO1xufVxuXG5leHBvcnQgY29uc3QgUXVpY2tBY3Rpb25zID0gKCkgPT4gXG4gICAgPEd0ay5Cb3ggY2xhc3M9e1wicXVpY2thY3Rpb25zXCJ9PlxuICAgICAgICA8R3RrLkJveCBvcmllbnRhdGlvbj17R3RrLk9yaWVudGF0aW9uLlZFUlRJQ0FMfSBoYWxpZ249e0d0ay5BbGlnbi5TVEFSVH1cbiAgICAgICAgICBoZXhwYW5kPXt0cnVlfSBjbGFzcz17XCJsZWZ0XCJ9PlxuXG4gICAgICAgICAgICA8R3RrLkxhYmVsIGNsYXNzPXtcImhvc3RuYW1lXCJ9IHhhbGlnbj17MH0gdG9vbHRpcFRleHQ9e1wiSG9zdCBuYW1lXCJ9XG4gICAgICAgICAgICAgIGxhYmVsPXtHTGliLmdldF9ob3N0X25hbWUoKX0gLz5cblxuICAgICAgICAgICAgPEd0ay5Cb3g+XG4gICAgICAgICAgICAgICAgPEd0ay5JbWFnZSBpY29uTmFtZT17XCJob3VyZ2xhc3Mtc3ltYm9saWNcIn0gLz5cbiAgICAgICAgICAgICAgICA8R3RrLkxhYmVsIGNsYXNzPXtcInVwdGltZVwifSB4YWxpZ249ezB9IHRvb2x0aXBUZXh0PXtcIlVwIHRpbWVcIn1cbiAgICAgICAgICAgICAgICAgIGxhYmVsPXt1cHRpbWUuYXMoc3RyID0+IHN0ci5yZXBsYWNlKC9edXAgLywgXCJcIikpfSAvPlxuICAgICAgICAgICAgPC9HdGsuQm94PlxuICAgICAgICA8L0d0ay5Cb3g+XG5cbiAgICAgICAgPEd0ay5Cb3ggY2xhc3M9e1wicmlnaHQgYnV0dG9uLXJvd1wifSBoYWxpZ249e0d0ay5BbGlnbi5FTkR9IFxuICAgICAgICAgIGhleHBhbmQ9e3RydWV9PlxuXG4gICAgICAgICAgICA8TG9ja0J1dHRvbiAvPlxuICAgICAgICAgICAgPENvbG9yUGlja2VyQnV0dG9uIC8+XG4gICAgICAgICAgICA8U2NyZWVuc2hvdEJ1dHRvbiAvPlxuICAgICAgICAgICAgPFNlbGVjdFdhbGxwYXBlckJ1dHRvbiAvPlxuICAgICAgICAgICAgPExvZ291dEJ1dHRvbiAvPlxuICAgICAgICA8L0d0ay5Cb3g+XG4gICAgPC9HdGsuQm94PiBhcyBHdGsuQm94O1xuIiwgImltcG9ydCB7IEFzdGFsLCBHdGsgfSBmcm9tIFwiYWdzL2d0azRcIjtcbmltcG9ydCB7IFBvcHVwV2luZG93IH0gZnJvbSBcIi4uL3dpZGdldC9Qb3B1cFdpbmRvd1wiO1xuaW1wb3J0IHsgTm90aWZIaXN0b3J5IH0gZnJvbSBcIi4uL3dpZGdldC9jb250cm9sLWNlbnRlci9Ob3RpZkhpc3RvcnlcIjtcbmltcG9ydCB7IFF1aWNrQWN0aW9ucyB9IGZyb20gXCIuLi93aWRnZXQvY29udHJvbC1jZW50ZXIvUXVpY2tBY3Rpb25zXCI7XG5cblxuZXhwb3J0IGNvbnN0IENvbnRyb2xDZW50ZXIgPSAobW9uOiBudW1iZXIpID0+IFxuICAgIDxQb3B1cFdpbmRvdyBuYW1lc3BhY2U9e1wiY29udHJvbC1jZW50ZXJcIn0gY2xhc3M9e1wiY29udHJvbC1jZW50ZXJcIn1cbiAgICAgIGhhbGlnbj17R3RrLkFsaWduLkVORH0gdmFsaWduPXtHdGsuQWxpZ24uU1RBUlR9IGxheWVyPXtBc3RhbC5MYXllci5PVkVSTEFZfVxuICAgICAgbWFyZ2luVG9wPXsxMH0gbWFyZ2luUmlnaHQ9ezEwfSBtYXJnaW5Cb3R0b209ezEwfSBtb25pdG9yPXttb259XG4gICAgICB3aWR0aFJlcXVlc3Q9ezM5NX0+XG5cbiAgICAgIDxHdGsuQm94IG9yaWVudGF0aW9uPXtHdGsuT3JpZW50YXRpb24uVkVSVElDQUx9XG4gICAgICAgICAgc3BhY2luZz17MTZ9PlxuICAgICAgICAgICAgXG4gICAgICAgICAgICA8R3RrLkJveCBjbGFzcz17XCJjb250cm9sLWNlbnRlci1jb250YWluZXJcIn0gXG4gICAgICAgICAgICAgIG9yaWVudGF0aW9uPXtHdGsuT3JpZW50YXRpb24uVkVSVElDQUx9IHZleHBhbmQ9e2ZhbHNlfT5cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICA8UXVpY2tBY3Rpb25zIC8+XG4gICAgICAgICAgICA8L0d0ay5Cb3g+XG4gICAgICAgICAgICA8Tm90aWZIaXN0b3J5IC8+XG4gICAgICAgIDwvR3RrLkJveD5cbiAgICA8L1BvcHVwV2luZG93PiBhcyBBc3RhbC5XaW5kb3c7XG4iLCAiaW1wb3J0IHsgQXN0YWwsIEd0ayB9IGZyb20gXCJhZ3MvZ3RrNFwiO1xuaW1wb3J0IHsgY3JlYXRlQmluZGluZywgRm9yIH0gZnJvbSBcImFnc1wiO1xuaW1wb3J0IHsgTm90aWZpY2F0aW9ucyB9IGZyb20gXCIuLi9zY3JpcHRzL25vdGlmaWNhdGlvbnNcIjtcbmltcG9ydCB7IE5vdGlmaWNhdGlvbldpZGdldCB9IGZyb20gXCIuLi93aWRnZXQvTm90aWZpY2F0aW9uXCI7XG5pbXBvcnQgeyB2YXJpYWJsZVRvQm9vbGVhbiB9IGZyb20gXCIuLi9zY3JpcHRzL3V0aWxzXCI7XG5pbXBvcnQgQXN0YWxOb3RpZmQgZnJvbSBcImdpOi8vQXN0YWxOb3RpZmQ/dmVyc2lvbj0wLjFcIjtcblxuXG5leHBvcnQgY29uc3QgRmxvYXRpbmdOb3RpZmljYXRpb25zID0gKG1vbjogbnVtYmVyKSA9PiBcbiAgICA8QXN0YWwuV2luZG93IG5hbWVzcGFjZT17XCJmbG9hdGluZy1ub3RpZmljYXRpb25zXCJ9IG1vbml0b3I9e21vbn0gbGF5ZXI9e0FzdGFsLkxheWVyLk9WRVJMQVl9XG4gICAgICBhbmNob3I9e0FzdGFsLldpbmRvd0FuY2hvci5UT1AgfCBBc3RhbC5XaW5kb3dBbmNob3IuUklHSFR9IHdpZHRoUmVxdWVzdD17NDUwfSBcbiAgICAgIGV4Y2x1c2l2aXR5PXtBc3RhbC5FeGNsdXNpdml0eS5OT1JNQUx9PlxuXG4gICAgICAgIDxHdGsuQm94IGNsYXNzPXtcImZsb2F0aW5nLW5vdGlmaWNhdGlvbnMtY29udGFpbmVyXCJ9IFxuICAgICAgICAgIG9yaWVudGF0aW9uPXtHdGsuT3JpZW50YXRpb24uVkVSVElDQUx9IHNwYWNpbmc9ezEyfVxuICAgICAgICAgIHZpc2libGU9e3ZhcmlhYmxlVG9Cb29sZWFuKGNyZWF0ZUJpbmRpbmcoTm90aWZpY2F0aW9ucy5nZXREZWZhdWx0KCksIFwibm90aWZpY2F0aW9uc1wiKSl9PlxuXG4gICAgICAgICAgICA8Rm9yIGVhY2g9e2NyZWF0ZUJpbmRpbmcoTm90aWZpY2F0aW9ucy5nZXREZWZhdWx0KCksIFwibm90aWZpY2F0aW9uc1wiKX0+XG4gICAgICAgICAgICAgICAgeyhub3RpZjogQXN0YWxOb3RpZmQuTm90aWZpY2F0aW9uKSA9PiBcbiAgICAgICAgICAgICAgICAgICAgPEd0ay5Cb3ggY2xhc3M9e1wiZmxvYXQtbm90aWZpY2F0aW9uXCJ9PlxuICAgICAgICAgICAgICAgICAgICAgICAgPE5vdGlmaWNhdGlvbldpZGdldCBub3RpZmljYXRpb249e25vdGlmfSBzaG93VGltZT17ZmFsc2V9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbkNsb3NlPXsoKSA9PiBOb3RpZmljYXRpb25zLmdldERlZmF1bHQoKS5yZW1vdmVOb3RpZmljYXRpb24obm90aWYpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICBob2xkT25Ib3Zlcj17dHJ1ZX0gYWN0aW9uQ2xpY2tlZD17KCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgdmlld0FjdGlvbiA9IG5vdGlmLmFjdGlvbnMuZmlsdGVyKGFjdGlvbiA9PiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24ubGFiZWwudG9Mb3dlckNhc2UoKSA9PT0gXCJ2aWV3XCIpPy5bMF07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdBY3Rpb24gJiYgbm90aWYuaW52b2tlKHZpZXdBY3Rpb24uaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9HdGsuQm94PlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDwvRm9yPlxuICAgICAgICA8L0d0ay5Cb3g+XG4gICAgPC9Bc3RhbC5XaW5kb3c+IGFzIEFzdGFsLldpbmRvdztcbiIsICJpbXBvcnQgeyB0aW1lb3V0IH0gZnJvbSBcImFncy90aW1lXCI7XG5pbXBvcnQgeyBleGVjQXN5bmMgfSBmcm9tIFwiYWdzL3Byb2Nlc3NcIjtcbmltcG9ydCB7IEFzdGFsLCBHdGsgfSBmcm9tIFwiYWdzL2d0azRcIjtcbmltcG9ydCB7IENsaXBib2FyZCB9IGZyb20gXCIuLi8uLi9zY3JpcHRzL2NsaXBib2FyZFwiO1xuaW1wb3J0IHsgcGxheWVyIH0gZnJvbSBcIi4uL2Jhci9NZWRpYVwiO1xuaW1wb3J0IHsgY3JlYXRlQmluZGluZywgV2l0aCB9IGZyb20gXCJhZ3NcIjtcblxuaW1wb3J0IEFzdGFsTXByaXMgZnJvbSBcImdpOi8vQXN0YWxNcHJpc1wiO1xuaW1wb3J0IEFzdGFsSU8gZnJvbSBcImdpOi8vQXN0YWxJT1wiO1xuaW1wb3J0IEdpbyBmcm9tIFwiZ2k6Ly9HaW8/dmVyc2lvbj0yLjBcIjtcbmltcG9ydCBQYW5nbyBmcm9tIFwiZ2k6Ly9QYW5nbz92ZXJzaW9uPTEuMFwiO1xuXG5cbmV4cG9ydCBjb25zdCBCaWdNZWRpYSA9ICgpID0+IHtcbiAgICBsZXQgZHJhZ1RpbWVyOiAoQXN0YWxJTy5UaW1lfHVuZGVmaW5lZCk7XG5cbiAgICByZXR1cm4gPEd0ay5Cb3ggY2xhc3M9e1wiYmlnLW1lZGlhXCJ9IG9yaWVudGF0aW9uPXtHdGsuT3JpZW50YXRpb24uVkVSVElDQUx9IHdpZHRoUmVxdWVzdD17MjUwfVxuICAgICAgdmlzaWJsZT17cGxheWVyKHBsID0+IHBsLmF2YWlsYWJsZSl9PlxuXG4gICAgICAgIDxXaXRoIHZhbHVlPXtwbGF5ZXJ9PlxuICAgICAgICAgICAgeyhwbGF5ZXI6IEFzdGFsTXByaXMuUGxheWVyKSA9PiBwbGF5ZXIuYXZhaWxhYmxlICYmXG4gICAgICAgICAgICAgICAgPEd0ay5Cb3ggaGFsaWduPXtHdGsuQWxpZ24uQ0VOVEVSfSAkPXsoc2VsZikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFydFN1YiA9IGNyZWF0ZUJpbmRpbmcocGxheWVyLCBcImFydFVybFwiKS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmaXJzdENoaWxkID0gc2VsZi5nZXRfZmlyc3RfY2hpbGQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYWxidW1BcnQgPSBnZXRBbGJ1bUFydChwbGF5ZXIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFhbGJ1bUFydCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoZmlyc3RDaGlsZCBpbnN0YW5jZW9mIEd0ay5QaWN0dXJlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucmVtb3ZlKGZpcnN0Q2hpbGQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICBpZihmaXJzdENoaWxkIGluc3RhbmNlb2YgR3RrLlBpY3R1cmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0Q2hpbGQuc2V0X2ZpbGVuYW1lKGFsYnVtQXJ0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucHJlcGVuZChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxHdGsuUGljdHVyZSBmaWxlPXtHaW8uRmlsZS5uZXdfZm9yX3BhdGgoYWxidW1BcnQpfSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGV4cGFuZD17ZmFsc2V9IHZleHBhbmQ9e2ZhbHNlfSBtYXJnaW5Ub3A9ezZ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoUmVxdWVzdD17MTMyfSBoZWlnaHRSZXF1ZXN0PXsxMjh9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPiBhcyBHdGsuUGljdHVyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVzdHJveUlkID0gc2VsZi5jb25uZWN0KFwiZGVzdHJveVwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZGlzY29ubmVjdChkZXN0cm95SWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBhcnRTdWIoKTtcbiAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIH19PlxuXG4gICAgICAgICAgICAgICAgICAgIDxHdGsuQm94IGNsYXNzPXtcImluZm9cIn0gb3JpZW50YXRpb249e0d0ay5PcmllbnRhdGlvbi5WRVJUSUNBTH1cbiAgICAgICAgICAgICAgICAgICAgICB2YWxpZ249e0d0ay5BbGlnbi5DRU5URVJ9IHZleHBhbmQ9e3RydWV9PlxuXG4gICAgICAgICAgICAgICAgICAgICAgICA8R3RrLkxhYmVsIGNsYXNzPXtcInRpdGxlXCJ9IHRvb2x0aXBUZXh0PXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZUJpbmRpbmcocGxheWVyLCBcInRpdGxlXCIpLmFzKHRpdGxlID0+IHRpdGxlID8/IFwiTm8gVGl0bGVcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbGxpcHNpemU9e1BhbmdvLkVsbGlwc2l6ZU1vZGUuRU5EfSBtYXhXaWR0aENoYXJzPXsyNX1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8R3RrLkxhYmVsIGNsYXNzPXtcImFydGlzdFwifSB0b29sdGlwVGV4dD17XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVCaW5kaW5nKHBsYXllciwgXCJhcnRpc3RcIikuYXMoYXJ0aXN0ID0+IGFydGlzdCA/PyBcIk5vIEFydGlzdFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsbGlwc2l6ZT17UGFuZ28uRWxsaXBzaXplTW9kZS5FTkR9IG1heFdpZHRoQ2hhcnM9ezI4fSBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvR3RrLkJveD5cblxuICAgICAgICAgICAgICAgICAgICA8R3RrLkJveCBjbGFzcz17XCJwcm9ncmVzc1wifSBoZXhwYW5kPXt0cnVlfSB2aXNpYmxlPXtjcmVhdGVCaW5kaW5nKHBsYXllciwgXCJjYW5TZWVrXCIpfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxBc3RhbC5TbGlkZXIgaGV4cGFuZD17dHJ1ZX0gbWF4PXtjcmVhdGVCaW5kaW5nKHBsYXllciwgXCJsZW5ndGhcIikuYXMoTWF0aC5mbG9vcil9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtjcmVhdGVCaW5kaW5nKHBsYXllciwgXCJwb3NpdGlvblwiKS5hcyhNYXRoLmZsb29yKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2VWYWx1ZT17KF8sIHR5cGUsIHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZih0eXBlID09PSB1bmRlZmluZWQgfHwgdHlwZSA9PT0gbnVsbCkgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZighZHJhZ1RpbWVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJhZ1RpbWVyID0gdGltZW91dCgyMDAsICgpID0+IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXIucG9zaXRpb24gPSBNYXRoLmZsb29yKHZhbHVlKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyYWdUaW1lci5jYW5jZWwoKTsgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcmFnVGltZXIgPSB0aW1lb3V0KDIwMCwgKCkgPT4gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyLnBvc2l0aW9uID0gTWF0aC5mbG9vcih2YWx1ZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9HdGsuQm94PlxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgPEd0ay5DZW50ZXJCb3ggY2xhc3M9e1wiYm90dG9tXCJ9IGhleHBhbmQ9e3RydWV9IG1hcmdpbkJvdHRvbT17Nn0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8R3RrLkxhYmVsIGNsYXNzPXtcImVsYXBzZWRcIn0gdmFsaWduPXtHdGsuQWxpZ24uU1RBUlR9IGhhbGlnbj17R3RrLkFsaWduLlNUQVJUfSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9e2NyZWF0ZUJpbmRpbmcocGxheWVyLCBcInBvc2l0aW9uXCIpLmFzKHBvcyA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzZWMgPSBNYXRoLmZsb29yKHBvcyAlIDYwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwb3MgPiAwICYmIHBsYXllci5sZW5ndGggPiAwID8gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYCR7TWF0aC5mbG9vcihwb3MgLyA2MCl9OiR7c2VjIDwgMTAgPyBcIjBcIiA6IFwiXCJ9JHtzZWN9YFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBcIjA6MDBcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSl9ICR0eXBlPVwic3RhcnRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cblxuICAgICAgICAgICAgICAgICAgICAgICAgPEd0ay5Cb3ggY2xhc3M9e1wiY29udHJvbHMgYnV0dG9uLXJvd1wifSAkdHlwZT1cImNlbnRlclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxHdGsuQnV0dG9uIGNsYXNzPXtcImxpbmtcIn0gaWNvbk5hbWU9e1wiZWRpdC1wYXN0ZS1zeW1ib2xpY1wifVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9vbHRpcFRleHQ9e1wiQ29weSBsaW5rIHRvIGNsaXBib2FyZFwifVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGlja2VkPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhlY0FzeW5jKGBwbGF5ZXJjdGwgLS1wbGF5ZXI9JHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyLmJ1c05hbWUucmVwbGFjZSgvXm9yZ1xcLm1wcmlzXFwuTWVkaWFQbGF5ZXIyXFwuL2ksIFwiXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBtZXRhZGF0YSB4ZXNhbTp1cmxgKS50aGVuKGxpbmsgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDbGlwYm9hcmQuZ2V0RGVmYXVsdCgpLmNvcHlBc3luYyhsaW5rKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5jYXRjaCgoZTogRXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgTWVkaWE6IGNvdWxkbid0IGNvcHkgbWVkaWEgbGluay4gU3RkZXJyOiBcXG4ke2UubWVzc2FnZX1cXG4ke2Uuc3RhY2t9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEd0ay5CdXR0b24gY2xhc3M9e1wic2h1ZmZsZVwifSB2aXNpYmxlPXtjcmVhdGVCaW5kaW5nKHBsYXllciwgXCJzaHVmZmxlU3RhdHVzXCIpLmFzKHN0YXR1cyA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1cyAhPT0gQXN0YWxNcHJpcy5TaHVmZmxlLlVOU1VQUE9SVEVEKX0gaWNvbk5hbWU9e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlQmluZGluZyhwbGF5ZXIsIFwic2h1ZmZsZVN0YXR1c1wiKS5hcyhzdGF0dXMgPT4gc3RhdHVzID09PSBBc3RhbE1wcmlzLlNodWZmbGUuT04gPyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibWVkaWEtcGxheWxpc3Qtc2h1ZmZsZS1zeW1ib2xpY1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogXCJtZWRpYS1wbGF5bGlzdC1jb25zZWN1dGl2ZS1zeW1ib2xpY1wiKX0gdG9vbHRpcFRleHQ9e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlQmluZGluZyhwbGF5ZXIsIFwic2h1ZmZsZVN0YXR1c1wiKS5hcyhzdGF0dXMgPT4gc3RhdHVzID09PSBBc3RhbE1wcmlzLlNodWZmbGUuT04gPyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiU2h1ZmZsZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogXCJObyBzaHVmZmxlXCIpfSBvbkNsaWNrZWQ9e3BsYXllci5zaHVmZmxlfSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxHdGsuQnV0dG9uIGNsYXNzPXtcInByZXZpb3VzXCJ9IGljb25OYW1lPXtcIm1lZGlhLXNraXAtYmFja3dhcmQtc3ltYm9saWNcIn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXBUZXh0PXtcIlByZXZpb3VzXCJ9IG9uQ2xpY2tlZD17KCkgPT4gcGxheWVyLmNhbkdvUHJldmlvdXMgJiYgcGxheWVyLnByZXZpb3VzKCl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8R3RrLkJ1dHRvbiBjbGFzcz17XCJwbGF5LXBhdXNlXCJ9IHRvb2x0aXBUZXh0PXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZUJpbmRpbmcocGxheWVyLCBcInBsYXliYWNrU3RhdHVzXCIpLmFzKHN0YXR1cyA9PiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXMgPT09IEFzdGFsTXByaXMuUGxheWJhY2tTdGF0dXMuUExBWUlORyA/IFwiUGF1c2VcIiA6IFwiUGxheVwiKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb25OYW1lPXtjcmVhdGVCaW5kaW5nKHBsYXllciwgXCJwbGF5YmFja1N0YXR1c1wiKS5hcyhzdGF0dXMgPT4gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzID09PSBBc3RhbE1wcmlzLlBsYXliYWNrU3RhdHVzLlBMQVlJTkcgPyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJtZWRpYS1wbGF5YmFjay1wYXVzZS1zeW1ib2xpY1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBcIm1lZGlhLXBsYXliYWNrLXN0YXJ0LXN5bWJvbGljXCIpfSBvbkNsaWNrZWQ9e3BsYXllci5wbGF5X3BhdXNlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEd0ay5CdXR0b24gY2xhc3M9e1wibmV4dFwifSBpY29uTmFtZT17XCJtZWRpYS1za2lwLWZvcndhcmQtc3ltYm9saWNcIn0gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b29sdGlwVGV4dD17XCJOZXh0XCJ9IG9uQ2xpY2tlZD17KCkgPT4gcGxheWVyLmNhbkdvTmV4dCAmJiBwbGF5ZXIubmV4dCgpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEd0ay5CdXR0b24gY2xhc3M9e1wicmVwZWF0XCJ9IGljb25OYW1lPXtjcmVhdGVCaW5kaW5nKHBsYXllciwgXCJsb29wU3RhdHVzXCIpLmFzKHN0YXR1cyA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoc3RhdHVzID09PSBBc3RhbE1wcmlzLkxvb3AuVFJBQ0spXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIm1lZGlhLXBsYXlsaXN0LXJlcGVhdC1zb25nLXN5bWJvbGljXCI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihzdGF0dXMgPT09IEFzdGFsTXByaXMuTG9vcC5QTEFZTElTVClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwibWVkaWEtcGxheWxpc3QtcmVwZWF0LXN5bWJvbGljXCI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJsb29wLWFycm93LXN5bWJvbGljXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KX0gdmlzaWJsZT17Y3JlYXRlQmluZGluZyhwbGF5ZXIsIFwibG9vcFN0YXR1c1wiKS5hcyhzdGF0dXMgPT4gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzICE9PSBBc3RhbE1wcmlzLkxvb3AuVU5TVVBQT1JURUQpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9vbHRpcFRleHQ9e2NyZWF0ZUJpbmRpbmcocGxheWVyLCBcImxvb3BTdGF0dXNcIikuYXMoc3RhdHVzID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihzdGF0dXMgPT09IEFzdGFsTXByaXMuTG9vcC5UUkFDSylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiTG9vcCBzb25nXCI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihzdGF0dXMgPT09IEFzdGFsTXByaXMuTG9vcC5QTEFZTElTVClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiTG9vcCBwbGF5bGlzdFwiO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiTm8gbG9vcFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSl9IG9uQ2xpY2tlZD17cGxheWVyLmxvb3B9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvR3RrLkJveD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxHdGsuTGFiZWwgY2xhc3M9e1wibGVuZ3RoXCJ9IHZhbGlnbj17R3RrLkFsaWduLlNUQVJUfSBoYWxpZ249e0d0ay5BbGlnbi5FTkR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPXtjcmVhdGVCaW5kaW5nKHBsYXllciwgXCJsZW5ndGhcIikuYXMobGVuID0+IHsgLyogYmFuYW5hbmFuYW5hbmFuYSAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VjID0gTWF0aC5mbG9vcihsZW4gJSA2MCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGxlbiA+IDAgJiYgTnVtYmVyLmlzRmluaXRlKGxlbikpID8gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYCR7TWF0aC5mbG9vcihsZW4gLyA2MCl9OiR7c2VjIDwgMTAgPyBcIjBcIiA6IFwiXCJ9JHtzZWN9YFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBcIjA6MDBcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSl9ICR0eXBlPVwiZW5kXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvR3RrLkNlbnRlckJveD5cbiAgICAgICAgICAgICAgICA8L0d0ay5Cb3g+XG4gICAgICAgICAgICB9XG4gICAgICAgIDwvV2l0aD5cbiAgICA8L0d0ay5Cb3g+IGFzIEd0ay5Cb3g7XG59XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBoYW5kbGVzIGFsYnVtIGFydC9jb3ZlciBvZiBwbGF5aW5nIG1lZGlhLiBJZiBhIGZpbGUgaXMgcHJvdmlkZWRcbiAqIGJ5IHRoZSBwbGF5ZXIsIGl0IGFkZHMgdGhlIFwiZmlsZTovL1wiIHVyaSBhcyBhIHByZWZpeCwgc28geW91IGNhbiB1c2UgaXQgaW4gY3NzLlxuICpcbiAqIEBwYXJhbSBwbGF5ZXIgdGhlIHBsYXllciB5b3Ugd2FudCB0byBwdWxsIGFsYnVtIGFydCBmcm9tXG4gKiBAcmV0dXJucyBCaW5kaW5nIHRvIHBsYXllci5hcnRVcmwgY29udGFpbmluZyB0aGUgYWxidW0gYXJ0IHVyaSwgb3IgYW4gdW5kZWZpbmVkIGJpbmRpbmcgaWcgbm9uZSB3YXMgZm91bmQuXG4qICovXG5mdW5jdGlvbiBnZXRBbGJ1bUFydChwbGF5ZXI6IEFzdGFsTXByaXMuUGxheWVyKTogc3RyaW5nfHVuZGVmaW5lZCB7XG4gICAgY29uc3QgYXJ0VXJsID0gcGxheWVyLmFydFVybDtcblxuICAgIGlmKCFhcnRVcmwpIFxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuXG4gICAgaWYoYXJ0VXJsLnN0YXJ0c1dpdGgoXCIvXCIpKSBcbiAgICAgICAgcmV0dXJuIFwiZmlsZTovL1wiICsgYXJ0VXJsO1xuXG4gICAgcmV0dXJuIGFydFVybDtcbn1cbiIsICJpbXBvcnQgeyBBc3RhbCwgR3RrIH0gZnJvbSBcImFncy9ndGs0XCI7XG5cbmltcG9ydCB7IFNlcGFyYXRvciB9IGZyb20gXCIuLi93aWRnZXQvU2VwYXJhdG9yXCI7XG5pbXBvcnQgeyBQb3B1cFdpbmRvdyB9IGZyb20gXCIuLi93aWRnZXQvUG9wdXBXaW5kb3dcIjtcbmltcG9ydCB7IEJpZ01lZGlhIH0gZnJvbSBcIi4uL3dpZGdldC9jZW50ZXItd2luZG93L0JpZ01lZGlhXCI7XG5pbXBvcnQgeyB0aW1lIH0gZnJvbSBcIi4uL3NjcmlwdHMvdXRpbHNcIjtcbmltcG9ydCB7IHBsYXllciB9IGZyb20gXCIuLi93aWRnZXQvYmFyL01lZGlhXCI7XG5cbmV4cG9ydCBjb25zdCBDZW50ZXJXaW5kb3cgPSAobW9uOiBudW1iZXIpID0+IFxuICAgIDxQb3B1cFdpbmRvdyBuYW1lc3BhY2U9e1wiY2VudGVyLXdpbmRvd1wifSBtYXJnaW5Ub3A9ezEwfSBoYWxpZ249e0d0ay5BbGlnbi5DRU5URVJ9IFxuICAgICAgdmFsaWduPXtHdGsuQWxpZ24uU1RBUlR9IG1vbml0b3I9e21vbn0+XG4gICAgICBcbiAgICAgICAgPEd0ay5Cb3ggY2xhc3M9e1wiY2VudGVyLXdpbmRvdy1jb250YWluZXJcIn0gc3BhY2luZz17Nn0+XG4gICAgICAgICAgICA8R3RrLkJveCBjbGFzcz17XCJsZWZ0XCJ9IG9yaWVudGF0aW9uPXtHdGsuT3JpZW50YXRpb24uVkVSVElDQUx9PlxuICAgICAgICAgICAgICAgIDxHdGsuQm94IGNsYXNzPXtcImRhdGV0aW1lXCJ9IG9yaWVudGF0aW9uPXtHdGsuT3JpZW50YXRpb24uVkVSVElDQUx9XG4gICAgICAgICAgICAgICAgICBoYWxpZ249e0d0ay5BbGlnbi5DRU5URVJ9IHZhbGlnbj17R3RrLkFsaWduLkNFTlRFUn0gXG4gICAgICAgICAgICAgICAgICB2ZXhwYW5kPXt0cnVlfT5cblxuICAgICAgICAgICAgICAgICAgICA8R3RrLkxhYmVsIGNsYXNzPXtcInRpbWVcIn0gbGFiZWw9e3RpbWUodCA9PiB0LmZvcm1hdChcIiVIOiVNXCIpISl9IC8+XG4gICAgICAgICAgICAgICAgICAgIDxHdGsuTGFiZWwgY2xhc3M9e1wiZGF0ZVwifSBsYWJlbD17dGltZShkID0+IGQuZm9ybWF0KFwiJUEsICVCICVkXCIpISl9IC8+XG4gICAgICAgICAgICAgICAgPC9HdGsuQm94PlxuICAgICAgICAgICAgICAgIDxHdGsuQm94IGNsYXNzPXtcImNhbGVuZGFyLWJveFwifSBoZXhwYW5kPXt0cnVlfSB2YWxpZ249e0d0ay5BbGlnbi5TVEFSVH0+XG4gICAgICAgICAgICAgICAgICAgIDxHdGsuQ2FsZW5kYXIgc2hvd0hlYWRpbmc9e3RydWV9IHNob3dEYXlOYW1lcz17dHJ1ZX0gXG4gICAgICAgICAgICAgICAgICAgICAgc2hvd1dlZWtOdW1iZXJzPXtmYWxzZX0gXG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9HdGsuQm94PlxuICAgICAgICAgICAgPC9HdGsuQm94PlxuXG4gICAgICAgICAgICA8U2VwYXJhdG9yIG9yaWVudGF0aW9uPXtHdGsuT3JpZW50YXRpb24uSE9SSVpPTlRBTH0gY3NzQ29sb3I9XCJncmF5XCJcbiAgICAgICAgICAgICAgbWFyZ2luPXs1fSBzcGFjaW5nPXs4fSBhbHBoYT17LjN9IHZpc2libGU9e3BsYXllcihwbCA9PiBwbC5hdmFpbGFibGUpfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxCaWdNZWRpYSAvPlxuICAgICAgICA8L0d0ay5Cb3g+XG4gICAgPC9Qb3B1cFdpbmRvdz4gYXMgQXN0YWwuV2luZG93O1xuIiwgImltcG9ydCB7IEFzdGFsLCBHdGsgfSBmcm9tIFwiYWdzL2d0azRcIjtcbmltcG9ydCB7IFdpbmRvd3MgfSBmcm9tIFwiLi4vd2luZG93c1wiO1xuaW1wb3J0IHsgUG9wdXBXaW5kb3cgfSBmcm9tIFwiLi9Qb3B1cFdpbmRvd1wiO1xuaW1wb3J0IHsgU2VwYXJhdG9yIH0gZnJvbSBcIi4vU2VwYXJhdG9yXCI7XG5pbXBvcnQgeyB0ciB9IGZyb20gXCIuLi9pMThuL2ludGxcIjtcbmltcG9ydCB7IEFjY2Vzc29yLCBGb3IsIFdpdGggfSBmcm9tIFwiYWdzXCI7XG5pbXBvcnQgeyB2YXJpYWJsZVRvQm9vbGVhbiwgV2lkZ2V0Tm9kZVR5cGUgfSBmcm9tIFwiLi4vc2NyaXB0cy91dGlsc1wiO1xuXG5cbmV4cG9ydCB0eXBlIEN1c3RvbURpYWxvZ1Byb3BzID0ge1xuICAgIG5hbWVzcGFjZT86IHN0cmluZyB8IEFjY2Vzc29yPHN0cmluZz47XG4gICAgY2xhc3NOYW1lPzogc3RyaW5nIHwgQWNjZXNzb3I8c3RyaW5nPjtcbiAgICBjc3NCYWNrZ3JvdW5kPzogc3RyaW5nO1xuICAgIHRpdGxlPzogc3RyaW5nIHwgQWNjZXNzb3I8c3RyaW5nPjtcbiAgICB0ZXh0Pzogc3RyaW5nIHwgQWNjZXNzb3I8c3RyaW5nPjtcbiAgICBoZWlnaHRSZXF1ZXN0PzogbnVtYmVyIHwgQWNjZXNzb3I8bnVtYmVyPjtcbiAgICB3aWR0aFJlcXVlc3Q/OiBudW1iZXIgfCBBY2Nlc3NvcjxudW1iZXI+O1xuICAgIGNoaWxkT3JpZW50YXRpb24/OiBHdGsuT3JpZW50YXRpb24gfCBBY2Nlc3NvcjxHdGsuT3JpZW50YXRpb24+O1xuICAgIGNoaWxkcmVuPzogV2lkZ2V0Tm9kZVR5cGU7XG4gICAgb25GaW5pc2g/OiAoKSA9PiB2b2lkO1xuICAgIG9wdGlvbnM/OiBBcnJheTxDdXN0b21EaWFsb2dPcHRpb24+IHwgQWNjZXNzb3I8QXJyYXk8Q3VzdG9tRGlhbG9nT3B0aW9uPj47XG4gICAgb3B0aW9uc09yaWVudGF0aW9uPzogR3RrLk9yaWVudGF0aW9uIHwgQWNjZXNzb3I8R3RrLk9yaWVudGF0aW9uPjtcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ3VzdG9tRGlhbG9nT3B0aW9uIHtcbiAgICBvbkNsaWNrPzogKCkgPT4gdm9pZDtcbiAgICB0ZXh0OiBzdHJpbmcgfCBBY2Nlc3NvcjxzdHJpbmc+O1xuICAgIGNsb3NlT25DbGljaz86IGJvb2xlYW4gfCBBY2Nlc3Nvcjxib29sZWFuPjtcbn1cblxuZnVuY3Rpb24gQ3VzdG9tRGlhbG9nT3B0aW9uKHByb3BzOiBDdXN0b21EaWFsb2dPcHRpb24gJiB7IGRpYWxvZzogQXN0YWwuV2luZG93IH0pIHtcbiAgICBmdW5jdGlvbiBvbkNsaWNrZWQoKSB7XG4gICAgICAgIHByb3BzLm9uQ2xpY2s/LigpO1xuICAgICAgICBwcm9wcy5jbG9zZU9uQ2xpY2sgJiYgcHJvcHMuZGlhbG9nLmNsb3NlKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIDxHdGsuQnV0dG9uIGNsYXNzPVwib3B0aW9uXCIgaGV4cGFuZD17dHJ1ZX0gbGFiZWw9e3Byb3BzLnRleHR9IFxuICAgICAgb25DbGlja2VkPXtvbkNsaWNrZWR9IG9uQWN0aXZhdGU9e29uQ2xpY2tlZH0vPlxufVxuXG5leHBvcnQgZnVuY3Rpb24gQ3VzdG9tRGlhbG9nKHsgb3B0aW9ucyA9IFt7IHRleHQ6IHRyKFwiYWNjZXB0XCIpIH1dLCAuLi5wcm9wc306IEN1c3RvbURpYWxvZ1Byb3BzKSB7XG4gICAgbGV0IGRpYWxvZzogQXN0YWwuV2luZG93O1xuICAgIHJldHVybiBXaW5kb3dzLmdldERlZmF1bHQoKS5jcmVhdGVXaW5kb3dGb3JGb2N1c2VkTW9uaXRvcigobW9uOiBudW1iZXIpID0+IFxuICAgIDxQb3B1cFdpbmRvdyBuYW1lc3BhY2U9e3Byb3BzLm5hbWVzcGFjZSA/PyBcImN1c3RvbS1kaWFsb2dcIn0gbW9uaXRvcj17bW9ufVxuICAgICAgICAgIGNzc0JhY2tncm91bmRXaW5kb3c9e3Byb3BzLmNzc0JhY2tncm91bmQgPz8gXCJiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIC4zKTtcIn1cbiAgICAgICAgICBleGNsdXNpdml0eT17QXN0YWwuRXhjbHVzaXZpdHkuSUdOT1JFfSBsYXllcj17QXN0YWwuTGF5ZXIuT1ZFUkxBWX1cbiAgICAgICAgICBoYWxpZ249e0d0ay5BbGlnbi5DRU5URVJ9IHZhbGlnbj17R3RrLkFsaWduLkNFTlRFUn1cbiAgICAgICAgICB3aWR0aFJlcXVlc3Q9e3Byb3BzLndpZHRoUmVxdWVzdCA/PyA0MDB9IGhlaWdodFJlcXVlc3Q9e3Byb3BzLmhlaWdodFJlcXVlc3QgPz8gMjIwfVxuICAgICAgICAgIG9uRGVzdHJveT17cHJvcHMub25GaW5pc2h9ICQ9eyhzZWxmKSA9PiBkaWFsb2cgPSBzZWxmfT5cbiAgICAgICAgXG4gICAgICAgICAgPEd0ay5Cb3ggY2xhc3M9e3Byb3BzLmNsYXNzTmFtZSA/PyBcImN1c3RvbS1kaWFsb2ctY29udGFpbmVyXCJ9XG4gICAgICAgICAgICBvcmllbnRhdGlvbj17R3RrLk9yaWVudGF0aW9uLlZFUlRJQ0FMfT5cbiAgICAgICAgICAgICAgPEd0ay5MYWJlbCBjbGFzcz17XCJ0aXRsZVwifSB2aXNpYmxlPXt2YXJpYWJsZVRvQm9vbGVhbihwcm9wcy50aXRsZSl9IGxhYmVsPXtwcm9wcy50aXRsZX0gLz5cbiAgICAgICAgICAgICAgPEd0ay5MYWJlbCBjbGFzcz17XCJ0ZXh0XCJ9IHZpc2libGU9e3ZhcmlhYmxlVG9Cb29sZWFuKHByb3BzLnRleHQpfSBsYWJlbD17cHJvcHMudGV4dH0gLz5cbiAgICAgICAgICAgICAgPEd0ay5Cb3ggY2xhc3M9e1wiY3VzdG9tLWNoaWxkcmVuIGN1c3RvbS1jaGlsZFwifSB2aXNpYmxlPXt2YXJpYWJsZVRvQm9vbGVhbihwcm9wcy5jaGlsZHJlbil9XG4gICAgICAgICAgICAgICAgb3JpZW50YXRpb249e3Byb3BzLmNoaWxkT3JpZW50YXRpb24gPz8gR3RrLk9yaWVudGF0aW9uLlZFUlRJQ0FMfT5cblxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgKHByb3BzLmNoaWxkcmVuIGluc3RhbmNlb2YgQWNjZXNzb3IpID9cbiAgICAgICAgICAgICAgICAgIChBcnJheS5pc0FycmF5KHByb3BzLmNoaWxkcmVuKSA/XG4gICAgICAgICAgICAgICAgICAgIDxGb3IgZWFjaD17cHJvcHMuY2hpbGRyZW4hIGFzIEFjY2Vzc29yPEFycmF5PEpTWC5FbGVtZW50Pj59PlxuICAgICAgICAgICAgICAgICAgICAgICAgeyh3aWRnZXQpID0+IHdpZGdldCAmJiB3aWRnZXR9XG4gICAgICAgICAgICAgICAgICAgIDwvRm9yPlxuICAgICAgICAgICAgICAgICAgOiA8V2l0aCB2YWx1ZT17cHJvcHMuY2hpbGRyZW4gYXMgQWNjZXNzb3I8SlNYLkVsZW1lbnQ+fT5cbiAgICAgICAgICAgICAgICAgICAgICAgIHsod2lkZ2V0KSA9PiB3aWRnZXQgJiYgd2lkZ2V0fVxuICAgICAgICAgICAgICAgICAgICA8L1dpdGg+KVxuICAgICAgICAgICAgICAgIDogKEFycmF5LmlzQXJyYXkocHJvcHMuY2hpbGRyZW4pID8gXG4gICAgICAgICAgICAgICAgICAgIHByb3BzLmNoaWxkcmVuLm1hcCh3aWRnZXQgPT4gd2lkZ2V0ICYmIHdpZGdldCkuZmlsdGVyKHcgPT4gdylcbiAgICAgICAgICAgICAgICAgIDogcHJvcHMuY2hpbGRyZW4pXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgPC9HdGsuQm94PlxuICAgICAgICAgICAgICA8U2VwYXJhdG9yIGFscGhhPXsuMn0gdmlzaWJsZT17b3B0aW9ucyAmJiBvcHRpb25zLmxlbmd0aCA+IDB9XG4gICAgICAgICAgICAgICAgc3BhY2luZz17OH0gb3JpZW50YXRpb249e0d0ay5PcmllbnRhdGlvbi5WRVJUSUNBTH0gLz5cblxuICAgICAgICAgICAgICB7KDxHdGsuQm94IGNsYXNzPXtcIm9wdGlvbnNcIn0gb3JpZW50YXRpb249e3Byb3BzLm9wdGlvbnNPcmllbnRhdGlvbiA/PyBHdGsuT3JpZW50YXRpb24uSE9SSVpPTlRBTH1cbiAgICAgICAgICAgICAgICBoZXhwYW5kPXt0cnVlfSBoZWlnaHRSZXF1ZXN0PXszOH0gaG9tb2dlbmVvdXM9e3RydWV9PlxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIChvcHRpb25zIGluc3RhbmNlb2YgQWNjZXNzb3IpID8gXG4gICAgICAgICAgICAgICAgICAgIDxGb3IgZWFjaD17b3B0aW9uc30+XG4gICAgICAgICAgICAgICAgICAgICAgICB7KG9wdGlvbikgPT4gPEN1c3RvbURpYWxvZ09wdGlvbiB7Li4ub3B0aW9ufSBkaWFsb2c9e2RpYWxvZ30gLz59XG4gICAgICAgICAgICAgICAgICAgIDwvRm9yPlxuICAgICAgICAgICAgICAgICAgOiBvcHRpb25zLm1hcChvcHRpb24gPT4gXG4gICAgICAgICAgICAgICAgICAgICAgPEN1c3RvbURpYWxvZ09wdGlvbiB7Li4ub3B0aW9ufSBkaWFsb2c9e2RpYWxvZ30gLz4pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgPC9HdGsuQm94Pil9XG4gICAgICAgIDwvR3RrLkJveD5cbiAgICA8L1BvcHVwV2luZG93PikoKTtcbn1cbiIsICJpbXBvcnQgeyBBY2Nlc3NvciB9IGZyb20gXCJhZ3NcIjtcbmltcG9ydCB7IHRyIH0gZnJvbSBcIi4uL2kxOG4vaW50bFwiO1xuaW1wb3J0IHsgQ3VzdG9tRGlhbG9nIH0gZnJvbSBcIi4vQ3VzdG9tRGlhbG9nXCI7XG5pbXBvcnQgeyBBc3RhbCB9IGZyb20gXCJhZ3MvZ3RrNFwiO1xuXG5cbmV4cG9ydCB0eXBlIEFza1BvcHVwUHJvcHMgPSB7XG4gICAgdGl0bGU/OiBzdHJpbmcgfCBBY2Nlc3NvcjxzdHJpbmc+O1xuICAgIHRleHQ6IHN0cmluZyB8IEFjY2Vzc29yPHN0cmluZz47XG4gICAgY2FuY2VsVGV4dD86IHN0cmluZztcbiAgICBhY2NlcHRUZXh0Pzogc3RyaW5nO1xuICAgIG9uQWNjZXB0PzogKCkgPT4gdm9pZDtcbiAgICBvbkNhbmNlbD86ICgpID0+IHZvaWQ7XG59O1xuXG4vKiogXG4gKiBBIFBvcHVwIFdpZGdldCB0aGF0IGFza3MgeWVzIG9yIG5vIHRvIGEgZGVmaW5lZCBwcm9tdC4gXG4gKiBSdW5zIG9uQWNjZXB0KCkgd2hlbiB1c2VyIGFjY2VwdHMsIG9yIGVsc2Ugb25EZWNsaW5lKCkgd2hlblxuICogdXNlciBkb2Vzbid0IGFjY2VwdCAvIGNsb3NlcyB3aW5kb3cuXG4gKiBUaGlzIHdpbmRvdyBpc24ndCB1c3VhbGx5IHJlZ2lzdGVyZWQgaW4gdGhpcyBzaGVsbCB3aW5kb3dpbmcgXG4gKiBzeXN0ZW0uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBBc2tQb3B1cChwcm9wczogQXNrUG9wdXBQcm9wcyk6IEFzdGFsLldpbmRvdyB7XG4gICAgbGV0IGFjY2VwdGVkOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICByZXR1cm4gPEN1c3RvbURpYWxvZ1xuICAgICAgbmFtZXNwYWNlPXtcImFzay1wb3B1cFwifVxuICAgICAgd2lkdGhSZXF1ZXN0PXs0MDB9XG4gICAgICBoZWlnaHRSZXF1ZXN0PXsyNTB9XG4gICAgICB0aXRsZT17cHJvcHMudGl0bGUgPz8gdHIoXCJhc2tfcG9wdXAudGl0bGVcIil9XG4gICAgICB0ZXh0PXtwcm9wcy50ZXh0fVxuICAgICAgb25GaW5pc2g9eygpID0+ICFhY2NlcHRlZCAmJiBwcm9wcy5vbkNhbmNlbD8uKCl9XG4gICAgICBvcHRpb25zPXtbXG4gICAgICAgIHsgdGV4dDogcHJvcHMuY2FuY2VsVGV4dCA/PyB0cihcImNhbmNlbFwiKSB9LFxuICAgICAgICB7XG4gICAgICAgICAgICB0ZXh0OiBwcm9wcy5hY2NlcHRUZXh0ID8/IHRyKFwiYWNjZXB0XCIpLFxuICAgICAgICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICAgICAgICAgIGFjY2VwdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBwcm9wcy5vbkFjY2VwdD8uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdfSAvPiBhcyBBc3RhbC5XaW5kb3c7XG59XG4iLCAiaW1wb3J0IEFzdGFsSU8gZnJvbSBcImdpOi8vQXN0YWxJT1wiO1xuaW1wb3J0IEdMaWIgZnJvbSBcImdpOi8vR0xpYj92ZXJzaW9uPTIuMFwiO1xuXG5pbXBvcnQgR09iamVjdCwgeyBnZXR0ZXIsIHJlZ2lzdGVyIH0gZnJvbSBcImFncy9nb2JqZWN0XCI7XG5pbXBvcnQgeyBleGVjQXN5bmMsIGV4ZWMgfSBmcm9tIFwiYWdzL3Byb2Nlc3NcIjtcbmltcG9ydCB7IGludGVydmFsIH0gZnJvbSBcImFncy90aW1lXCI7XG5cbmV4cG9ydCB7IE5pZ2h0TGlnaHQgfTtcblxuQHJlZ2lzdGVyKHsgR1R5cGVOYW1lOiBcIk5pZ2h0TGlnaHRcIiB9KVxuY2xhc3MgTmlnaHRMaWdodCBleHRlbmRzIEdPYmplY3QuT2JqZWN0IHtcbiAgICBwcml2YXRlIHN0YXRpYyBpbnN0YW5jZTogTmlnaHRMaWdodDtcblxuICAgICN3YXRjaEludGVydmFsOiAoQXN0YWxJTy5UaW1lfG51bGwpID0gbnVsbDtcbiAgICAjdGVtcGVyYXR1cmU6IG51bWJlciA9IDQ1MDA7XG4gICAgI2dhbW1hOiBudW1iZXIgPSAxMDA7XG4gICAgI2lkZW50aXR5OiBib29sZWFuID0gZmFsc2U7XG5cbiAgICAjcHJldlRlbXBlcmF0dXJlOiAobnVtYmVyfG51bGwpID0gbnVsbDtcbiAgICAjcHJldkdhbW1hOiAobnVtYmVyfG51bGwpID0gbnVsbDtcblxuICAgIEBnZXR0ZXIoTnVtYmVyKVxuICAgIHB1YmxpYyBnZXQgdGVtcGVyYXR1cmUoKSB7IHJldHVybiB0aGlzLiN0ZW1wZXJhdHVyZTsgfVxuICAgIHB1YmxpYyBzZXQgdGVtcGVyYXR1cmUobmV3VmFsdWU6IG51bWJlcikgeyB0aGlzLnNldFRlbXBlcmF0dXJlKG5ld1ZhbHVlKTsgfVxuXG4gICAgQGdldHRlcihOdW1iZXIpXG4gICAgcHVibGljIGdldCBnYW1tYSgpIHsgcmV0dXJuIHRoaXMuI2dhbW1hOyB9XG4gICAgcHVibGljIHNldCBnYW1tYShuZXdWYWx1ZTogbnVtYmVyKSB7IHRoaXMuc2V0R2FtbWEobmV3VmFsdWUpOyB9XG5cbiAgICBwdWJsaWMgcmVhZG9ubHkgbWF4VGVtcGVyYXR1cmUgPSAyMDAwMDtcbiAgICBwdWJsaWMgcmVhZG9ubHkgbWluVGVtcGVyYXR1cmUgPSAxMDAwO1xuICAgIHB1YmxpYyByZWFkb25seSBpZGVudGl0eVRlbXBlcmF0dXJlID0gNjAwMDtcbiAgICBwdWJsaWMgcmVhZG9ubHkgbWF4R2FtbWEgPSAxMDA7XG5cbiAgICBAZ2V0dGVyKEJvb2xlYW4pXG4gICAgcHVibGljIGdldCBpZGVudGl0eSgpIHsgcmV0dXJuIHRoaXMuI2lkZW50aXR5OyB9XG4gICAgcHVibGljIHNldCBpZGVudGl0eShuZXdWYWx1ZTogYm9vbGVhbikge1xuICAgICAgICBuZXdWYWx1ZSA/IHRoaXMuYXBwbHlJZGVudGl0eSgpIDogdGhpcy5maWx0ZXIoKTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLiN3YXRjaEludGVydmFsID0gaW50ZXJ2YWwoMTAwMCwgKCkgPT4ge1xuICAgICAgICAgICAgZXhlY0FzeW5jKFwiaHlwcmN0bCBoeXByc3Vuc2V0IHRlbXBlcmF0dXJlXCIpLnRoZW4odCA9PiB7XG4gICAgICAgICAgICAgICAgaWYodC50cmltKCkgIT09IFwiXCIgJiYgdC50cmltKCkubGVuZ3RoIDw9IDUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsID0gTnVtYmVyLnBhcnNlSW50KHQudHJpbSgpKTtcblxuICAgICAgICAgICAgICAgICAgICBpZih0aGlzLiN0ZW1wZXJhdHVyZSAhPT0gdmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiN0ZW1wZXJhdHVyZSA9IHZhbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5KFwidGVtcGVyYXR1cmVcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KS5jYXRjaCgocikgPT4gY29uc29sZS5lcnJvcihyKSk7XG5cbiAgICAgICAgICAgIGV4ZWNBc3luYyhcImh5cHJjdGwgaHlwcnN1bnNldCBnYW1tYVwiKS50aGVuKGcgPT4ge1xuICAgICAgICAgICAgICAgIGlmKGcudHJpbSgpICE9PSBcIlwiICYmIGcudHJpbSgpLmxlbmd0aCA8PSA1KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbCA9IE51bWJlci5wYXJzZUludChnLnRyaW0oKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYodGhpcy4jZ2FtbWEgIT09IHZhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4jZ2FtbWEgPSB2YWw7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGlmeShcImdhbW1hXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkuY2F0Y2goKHIpID0+IGNvbnNvbGUuZXJyb3IocikpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnZmdW5jX2Rpc3Bvc2UgPSAoKSA9PiB0aGlzLiN3YXRjaEludGVydmFsICYmIFxuICAgICAgICAgICAgdGhpcy4jd2F0Y2hJbnRlcnZhbC5jYW5jZWwoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGdldERlZmF1bHQoKTogTmlnaHRMaWdodCB7XG4gICAgICAgIGlmKCF0aGlzLmluc3RhbmNlKVxuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZSA9IG5ldyBOaWdodExpZ2h0KCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaW5zdGFuY2U7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzZXRUZW1wZXJhdHVyZSh2YWx1ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIGlmKHZhbHVlID09PSB0aGlzLnRlbXBlcmF0dXJlKSByZXR1cm47XG5cbiAgICAgICAgaWYodmFsdWUgPiB0aGlzLm1heFRlbXBlcmF0dXJlIHx8IHZhbHVlIDwgMTAwMCkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgTmlnaHQgTGlnaHQoaHlwcnN1bnNldCk6IHByb3ZpZGVkIHRlbXBlcmF0dWUgJHt2YWx1ZVxuICAgICAgICAgICAgICAgIH0gaXMgb3V0IG9mIGJvdW5kcyAobWluOiAxMDAwOyBtYXg6ICR7dGhpcy5tYXhUZW1wZXJhdHVyZX0pYCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBleGVjQXN5bmMoYGh5cHJjdGwgaHlwcnN1bnNldCB0ZW1wZXJhdHVyZSAke3ZhbHVlfWApLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy4jdGVtcGVyYXR1cmUgPSB2YWx1ZTtcbiAgICAgICAgICAgIHRoaXMubm90aWZ5KFwidGVtcGVyYXR1cmVcIik7XG5cbiAgICAgICAgICAgIHRoaXMuI2lkZW50aXR5ID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLiNwcmV2VGVtcGVyYXR1cmUgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy4jcHJldkdhbW1hID0gbnVsbDtcbiAgICAgICAgfSkuY2F0Y2goKHIpID0+IGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICBgTmlnaHQgTGlnaHQoaHlwcnN1bnNldCk6IENvdWxkbid0IHNldCB0ZW1wZXJhdHVyZS4gU3RkZXJyOiAke3J9YFxuICAgICAgICApKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldEdhbW1hKHZhbHVlOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgaWYodmFsdWUgPT09IHRoaXMuZ2FtbWEpIHJldHVybjtcblxuICAgICAgICBpZih2YWx1ZSA+IHRoaXMubWF4R2FtbWEgfHwgdmFsdWUgPCAwKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBOaWdodCBMaWdodChoeXByc3Vuc2V0KTogcHJvdmlkZWQgZ2FtbWEgJHt2YWx1ZVxuICAgICAgICAgICAgICAgIH0gaXMgb3V0IG9mIGJvdW5kcyAobWluOiAwOyBtYXg6ICR7dGhpcy5tYXhUZW1wZXJhdHVyZX0pYCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBleGVjQXN5bmMoYGh5cHJjdGwgaHlwcnN1bnNldCBnYW1tYSAke3ZhbHVlfWApLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy4jZ2FtbWEgPSB2YWx1ZTtcbiAgICAgICAgICAgIHRoaXMubm90aWZ5KFwiZ2FtbWFcIik7XG5cbiAgICAgICAgICAgIHRoaXMuI2lkZW50aXR5ID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLiNwcmV2VGVtcGVyYXR1cmUgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy4jcHJldkdhbW1hID0gbnVsbDtcbiAgICAgICAgfSkuY2F0Y2goKHIpID0+IGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICBgTmlnaHQgTGlnaHQoaHlwcnN1bnNldCk6IENvdWxkbid0IHNldCBnYW1tYS4gU3RkZXJyOiAke3J9YFxuICAgICAgICApKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXBwbHlJZGVudGl0eSgpOiB2b2lkIHtcbiAgICAgICAgaWYodGhpcy4jaWRlbnRpdHkpIHJldHVybjtcblxuICAgICAgICB0aGlzLiNwcmV2R2FtbWEgPSB0aGlzLiNnYW1tYTtcbiAgICAgICAgdGhpcy4jcHJldlRlbXBlcmF0dXJlID0gdGhpcy4jdGVtcGVyYXR1cmU7XG5cbiAgICAgICAgdGhpcy4jaWRlbnRpdHkgPSB0cnVlO1xuICAgICAgICB0aGlzLnRlbXBlcmF0dXJlID0gdGhpcy5pZGVudGl0eVRlbXBlcmF0dXJlO1xuICAgICAgICB0aGlzLmdhbW1hID0gdGhpcy5tYXhHYW1tYTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZmlsdGVyKCk6IHZvaWQge1xuICAgICAgICBpZighdGhpcy4jaWRlbnRpdHkpIHJldHVybjtcblxuICAgICAgICB0aGlzLiNpZGVudGl0eSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNldFRlbXBlcmF0dXJlKHRoaXMuI3ByZXZUZW1wZXJhdHVyZSA/PyB0aGlzLmlkZW50aXR5VGVtcGVyYXR1cmUpO1xuICAgICAgICB0aGlzLnNldEdhbW1hKHRoaXMuI3ByZXZHYW1tYSA/PyB0aGlzLm1heEdhbW1hKTtcblxuICAgICAgICB0aGlzLiNwcmV2VGVtcGVyYXR1cmUgPSBudWxsO1xuICAgICAgICB0aGlzLiNwcmV2R2FtbWEgPSBudWxsO1xuICAgIH1cblxuICAgIHB1YmxpYyBzYXZlRGF0YSgpOiB2b2lkIHtcbiAgICAgICAgZXhlYyhgc2ggJHtHTGliLmdldF91c2VyX2NvbmZpZ19kaXIoKX0vaHlwci9zY3JpcHRzL3NhdmUtaHlwcnN1bnNldC5zaGApO1xuICAgIH1cblxuICAgIHB1YmxpYyBsb2FkRGF0YSgpOiB2b2lkIHtcbiAgICAgICAgZXhlYyhgc2ggJHtHTGliLmdldF91c2VyX2NvbmZpZ19kaXIoKX0vaHlwci9zY3JpcHRzL2xvYWQtaHlwcnN1bnNldC5zaGApO1xuICAgIH1cbn1cbiIsICJpbXBvcnQgeyBBc3RhbCwgR2RrLCBHdGsgfSBmcm9tIFwiYWdzL2d0azRcIjtcbmltcG9ydCB7IGV4ZWNBc3luYyB9IGZyb20gXCJhZ3MvcHJvY2Vzc1wiO1xuaW1wb3J0IHsgQXNrUG9wdXAsIEFza1BvcHVwUHJvcHMgfSBmcm9tIFwiLi4vd2lkZ2V0L0Fza1BvcHVwXCI7XG5pbXBvcnQgeyBXaW5kb3dzIH0gZnJvbSBcIi4uL3dpbmRvd3NcIjtcbmltcG9ydCB7IE5vdGlmaWNhdGlvbnMgfSBmcm9tIFwiLi4vc2NyaXB0cy9ub3RpZmljYXRpb25zXCI7XG5pbXBvcnQgeyBOaWdodExpZ2h0IH0gZnJvbSBcIi4uL3NjcmlwdHMvbmlnaHRsaWdodFwiO1xuaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSBcIi4uL3NjcmlwdHMvY29uZmlnXCI7XG5cbmltcG9ydCBBc3RhbE5vdGlmZCBmcm9tIFwiZ2k6Ly9Bc3RhbE5vdGlmZFwiO1xuaW1wb3J0IEdpbyBmcm9tIFwiZ2k6Ly9HaW8/dmVyc2lvbj0yLjBcIjtcbmltcG9ydCBHT2JqZWN0IGZyb20gXCJnaTovL0dPYmplY3Q/dmVyc2lvbj0yLjBcIjtcbmltcG9ydCB7IHRpbWUgfSBmcm9tIFwiLi4vc2NyaXB0cy91dGlsc1wiO1xuXG5cbmNvbnN0IHsgVE9QLCBMRUZULCBSSUdIVCwgQk9UVE9NIH0gPSBBc3RhbC5XaW5kb3dBbmNob3I7XG5cbmV4cG9ydCBjb25zdCBMb2dvdXRNZW51ID0gKG1vbjogbnVtYmVyKSA9PiBcbiAgICA8QXN0YWwuV2luZG93IG5hbWVzcGFjZT17XCJsb2dvdXQtbWVudVwifSBhbmNob3I9e1RPUCB8IExFRlQgfCBSSUdIVCB8IEJPVFRPTX1cbiAgICAgIGxheWVyPXtBc3RhbC5MYXllci5PVkVSTEFZfSBleGNsdXNpdml0eT17QXN0YWwuRXhjbHVzaXZpdHkuSUdOT1JFfVxuICAgICAga2V5bW9kZT17QXN0YWwuS2V5bW9kZS5FWENMVVNJVkV9IG1vbml0b3I9e21vbn0gJD17KHNlbGYpID0+IHtcbiAgICAgICAgICBjb25zdCBjb25uczogTWFwPEdPYmplY3QuT2JqZWN0LCBudW1iZXI+ID0gbmV3IE1hcCgpO1xuICAgICAgICAgIGNvbnN0IGNvbnRyb2xsZXJLZXkgPSBHdGsuRXZlbnRDb250cm9sbGVyS2V5Lm5ldygpO1xuXG4gICAgICAgICAgc2VsZi5hZGRfY29udHJvbGxlcihjb250cm9sbGVyS2V5KTtcbiAgICAgICAgICBjb25ucy5zZXQoY29udHJvbGxlcktleSwgY29udHJvbGxlcktleS5jb25uZWN0KFwia2V5LXJlbGVhc2VkXCIsIChfLCBrZXl2YWwpID0+IHtcbiAgICAgICAgICAgICAgaWYoa2V5dmFsID09PSBHZGsuS0VZX0VzY2FwZSlcbiAgICAgICAgICAgICAgICAgIHNlbGYuY2xvc2UoKTtcbiAgICAgICAgICB9KSk7XG4gICAgICAgICAgY29ubnMuc2V0KHNlbGYsIHNlbGYuY29ubmVjdChcImRlc3Ryb3lcIiwgKCkgPT4gY29ubnMuZm9yRWFjaCgoaWQsIG9iaikgPT5cbiAgICAgICAgICAgICAgb2JqLmRpc2Nvbm5lY3QoaWQpKSkpO1xuICAgICAgfX0+XG5cbiAgICAgICAgPEd0ay5Cb3ggY2xhc3M9e1wibG9nb3V0LW1lbnVcIn0gb3JpZW50YXRpb249e0d0ay5PcmllbnRhdGlvbi5WRVJUSUNBTH0gXG4gICAgICAgICAgJD17KHNlbGYpID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgY29ubnM6IE1hcDxHT2JqZWN0Lk9iamVjdCwgbnVtYmVyPiA9IG5ldyBNYXAoKTtcbiAgICAgICAgICAgICAgY29uc3QgZ2VzdHVyZUNsaWNrID0gR3RrLkdlc3R1cmVDbGljay5uZXcoKTtcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIHNlbGYuYWRkX2NvbnRyb2xsZXIoZ2VzdHVyZUNsaWNrKTtcblxuICAgICAgICAgICAgICBjb25ucy5zZXQoZ2VzdHVyZUNsaWNrLCBnZXN0dXJlQ2xpY2suY29ubmVjdChcInJlbGVhc2VkXCIsIChnZXN0dXJlKSA9PiB7XG4gICAgICAgICAgICAgICAgICBpZihnZXN0dXJlLmdldF9jdXJyZW50X2J1dHRvbigpID09PSBHZGsuQlVUVE9OX1BSSU1BUlkpIHtcbiAgICAgICAgICAgICAgICAgICAgICBXaW5kb3dzLmdldERlZmF1bHQoKS5jbG9zZShcImxvZ291dC1tZW51XCIpO1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgfX0+XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIDxHdGsuQm94IGNsYXNzPXtcInRvcFwifSBoZXhwYW5kPXt0cnVlfSB2ZXhwYW5kPXtmYWxzZX0gXG4gICAgICAgICAgICAgIG9yaWVudGF0aW9uPXtHdGsuT3JpZW50YXRpb24uVkVSVElDQUx9PlxuXG4gICAgICAgICAgICAgICAgPEd0ay5MYWJlbCBjbGFzcz17XCJ0aW1lXCJ9IGxhYmVsPXt0aW1lKHQgPT4gdC5mb3JtYXQoXCIlSDolTVwiKSEpfSAvPlxuICAgICAgICAgICAgICAgIDxHdGsuTGFiZWwgY2xhc3M9e1wiZGF0ZVwifSBsYWJlbD17dGltZShkID0+IGQuZm9ybWF0KFwiJUEsICVCICVkICVZXCIpISl9IC8+XG4gICAgICAgICAgICA8L0d0ay5Cb3g+XG5cbiAgICAgICAgICAgIDxHdGsuQm94IGNsYXNzPXtcImJ1dHRvbi1yb3dcIn0gaG9tb2dlbmVvdXM9e3RydWV9IGhlaWdodFJlcXVlc3Q9ezM2MH0+XG4gICAgICAgICAgICAgICAgPEd0ay5CdXR0b24gY2xhc3M9e1wicG93ZXJvZmZcIn0gaWNvbk5hbWU9e1wic3lzdGVtLXNodXRkb3duLXN5bWJvbGljXCJ9XG4gICAgICAgICAgICAgICAgICBvbkNsaWNrZWQ9eygpID0+IEFza1BvcHVwKHBvd2Vyb2ZmQXNrKX0gb25BY3RpdmF0ZT17KCkgPT4gXG4gICAgICAgICAgICAgICAgICAgICAgQXNrUG9wdXAocG93ZXJvZmZBc2spfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPEd0ay5CdXR0b24gY2xhc3M9e1wicmVib290XCJ9IGljb25OYW1lPXtcImFycm93LWNpcmN1bGFyLXRvcC1yaWdodC1zeW1ib2xpY1wifVxuICAgICAgICAgICAgICAgICAgb25DbGlja2VkPXsoKSA9PiBBc2tQb3B1cChyZWJvb3RBc2spfSBvbkFjdGl2YXRlPXsoKSA9PiBBc2tQb3B1cChyZWJvb3RBc2spfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPEd0ay5CdXR0b24gY2xhc3M9e1wic3VzcGVuZFwifSBpY29uTmFtZT17XCJ3ZWF0aGVyLWNsZWFyLW5pZ2h0LXN5bWJvbGljXCJ9XG4gICAgICAgICAgICAgICAgICBvbkNsaWNrZWQ9eygpID0+IEFza1BvcHVwKHN1c3BlbmRBc2spfSBvbkFjdGl2YXRlPXsoKSA9PiBBc2tQb3B1cChzdXNwZW5kQXNrKX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDxHdGsuQnV0dG9uIGNsYXNzPXtcImxvZ291dFwifSBpY29uTmFtZT17XCJzeXN0ZW0tbG9nLW91dC1zeW1ib2xpY1wifVxuICAgICAgICAgICAgICAgICAgb25DbGlja2VkPXsoKSA9PiBBc2tQb3B1cChsb2dvdXRBc2spfSBvbkFjdGl2YXRlPXsoKSA9PiBBc2tQb3B1cChsb2dvdXRBc2spfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0d0ay5Cb3g+XG4gICAgICAgIDwvR3RrLkJveD5cbiAgICA8L0FzdGFsLldpbmRvdz4gYXMgQXN0YWwuV2luZG93O1xuXG5jb25zdCBsb2dvdXRBc2s6IEFza1BvcHVwUHJvcHMgPSB7XG4gICAgdGl0bGU6IFwiTG9nIG91dFwiLFxuICAgIHRleHQ6IFwiQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGxvZyBvdXQ/IFlvdXIgc2Vzc2lvbiB3aWxsIGJlIGVuZGVkLlwiLFxuICAgIG9uQWNjZXB0OiAoKSA9PiB7XG4gICAgICAgIENvbmZpZy5nZXREZWZhdWx0KCkuZ2V0UHJvcGVydHkoXCJuaWdodF9saWdodC5zYXZlX29uX3NodXRkb3duXCIsIFwiYm9vbGVhblwiKSAmJiBcbiAgICAgICAgICAgIE5pZ2h0TGlnaHQuZ2V0RGVmYXVsdCgpLnNhdmVEYXRhKCk7XG5cbiAgICAgICAgZXhlY0FzeW5jKGBoeXByY3RsIGRpc3BhdGNoIGV4aXRgKS5jYXRjaCgoZXJyOiBHaW8uSU9FcnJvckVudW0pID0+IFxuICAgICAgICAgICAgTm90aWZpY2F0aW9ucy5nZXREZWZhdWx0KCkuc2VuZE5vdGlmaWNhdGlvbih7XG4gICAgICAgICAgICAgICAgYXBwTmFtZTogXCJjb2xvcnNoZWxsXCIsXG4gICAgICAgICAgICAgICAgc3VtbWFyeTogXCJDb3VsZG4ndCBleGl0IEh5cHJsYW5kXCIsXG4gICAgICAgICAgICAgICAgYm9keTogYEFuIGVycm9yIG9jY3VycmVkIGFuZCBjb2xvcnNoZWxsIGNvdWxkbid0IGV4aXQgSHlwcmxhbmQuIFN0ZGVycjogXFxuJHtcbiAgICAgICAgICAgICAgICAgICAgZXJyLm1lc3NhZ2UgPyBgJHtlcnIubWVzc2FnZX1cXG5gIDogXCJcIn0ke2Vyci5zdGFja31gLFxuICAgICAgICAgICAgICAgIHVyZ2VuY3k6IEFzdGFsTm90aWZkLlVyZ2VuY3kuTk9STUFMLFxuICAgICAgICAgICAgICAgIGFjdGlvbnM6IFt7XG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiUmVwb3J0IElzc3VlIG9uIGNvbG9yc2hlbGxcIixcbiAgICAgICAgICAgICAgICAgICAgb25BY3Rpb246ICgpID0+IGV4ZWNBc3luYyhcbiAgICAgICAgICAgICAgICAgICAgICAgIGB4ZGctb3BlbiBodHRwczovL2dpdGh1Yi5jb20vcmV0cm96aW5uZGV2L2NvbG9yc2hlbGwvaXNzdWVzL25ld2BcbiAgICAgICAgICAgICAgICAgICAgKS5jYXRjaCgoZXJyOiBHaW8uSU9FcnJvckVudW0pID0+IFxuICAgICAgICAgICAgICAgICAgICAgICAgTm90aWZpY2F0aW9ucy5nZXREZWZhdWx0KCkuc2VuZE5vdGlmaWNhdGlvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwTmFtZTogXCJjb2xvcnNoZWxsXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VtbWFyeTogXCJDb3VsZG4ndCBvcGVuIGxpbmtcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib2R5OiBgRG8geW91IGhhdmUgXFxgeGRnLXV0aWxzXFxgIGluc3RhbGxlZD8gU3RkZXJyOiBcXG4ke1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnIubWVzc2FnZSA/IGAke2Vyci5tZXNzYWdlfVxcbmAgOiBcIlwifSR7ZXJyLnN0YWNrfWBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICB9XVxuICAgICAgICAgICAgfSlcbiAgICAgICAgKVxuICAgIH1cbn07XG5cbmNvbnN0IHN1c3BlbmRBc2s6IEFza1BvcHVwUHJvcHMgPSB7XG4gICAgdGl0bGU6IFwiU3VzcGVuZFwiLFxuICAgIHRleHQ6IFwiQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIFN1c3BlbmQ/XCIsXG4gICAgb25BY2NlcHQ6ICgpID0+IGV4ZWNBc3luYyhcInN5c3RlbWN0bCBzdXNwZW5kXCIpXG59O1xuXG5jb25zdCByZWJvb3RBc2s6IEFza1BvcHVwUHJvcHMgPSB7XG4gICAgdGl0bGU6IFwiUmVib290XCIsXG4gICAgdGV4dDogXCJBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gUmVib290PyBVbnNhdmVkIHdvcmsgd2lsbCBiZSBsb3N0LlwiLFxuICAgIG9uQWNjZXB0OiAoKSA9PiB7XG4gICAgICAgIENvbmZpZy5nZXREZWZhdWx0KCkuZ2V0UHJvcGVydHkoXCJuaWdodF9saWdodC5zYXZlX29uX3NodXRkb3duXCIsIFwiYm9vbGVhblwiKSAmJiBcbiAgICAgICAgICAgIE5pZ2h0TGlnaHQuZ2V0RGVmYXVsdCgpLnNhdmVEYXRhKCk7XG5cbiAgICAgICAgZXhlY0FzeW5jKFwic3lzdGVtY3RsIHJlYm9vdFwiKTtcbiAgICB9XG59O1xuXG5jb25zdCBwb3dlcm9mZkFzazogQXNrUG9wdXBQcm9wcyA9IHtcbiAgICB0aXRsZTogXCJQb3dlciBPZmZcIixcbiAgICB0ZXh0OiBcIkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBwb3dlciBvZmY/IFVuc2F2ZWQgd29yayB3aWxsIGJlIGxvc3QuXCIsXG4gICAgb25BY2NlcHQ6ICgpID0+IHtcbiAgICAgICAgQ29uZmlnLmdldERlZmF1bHQoKS5nZXRQcm9wZXJ0eShcIm5pZ2h0X2xpZ2h0LnNhdmVfb25fc2h1dGRvd25cIiwgXCJib29sZWFuXCIpICYmIFxuICAgICAgICAgICAgTmlnaHRMaWdodC5nZXREZWZhdWx0KCkuc2F2ZURhdGEoKTtcblxuICAgICAgICBleGVjQXN5bmMoXCJzeXN0ZW1jdGwgcG93ZXJvZmZcIik7XG4gICAgfVxufTtcbiIsICJpbXBvcnQgeyBBc3RhbCwgR2RrLCBHdGsgfSBmcm9tIFwiYWdzL2d0azRcIjtcbmltcG9ydCB7IGV4ZWNBcHAsIGdldEFwcEljb24sIGdldEFwcHMsIGdldEFzdGFsQXBwcyB9IGZyb20gXCIuLi9zY3JpcHRzL2FwcHNcIjtcbmltcG9ydCB7IFBvcHVwV2luZG93IH0gZnJvbSBcIi4uL3dpZGdldC9Qb3B1cFdpbmRvd1wiO1xuXG5pbXBvcnQgQXN0YWxBcHBzIGZyb20gXCJnaTovL0FzdGFsQXBwc1wiO1xuaW1wb3J0IFBhbmdvIGZyb20gXCJnaTovL1BhbmdvP3ZlcnNpb249MS4wXCI7XG5pbXBvcnQgeyBjcmVhdGVTdGF0ZSwgRm9yIH0gZnJvbSBcImFnc1wiO1xuXG5jb25zdCBpZ25vcmVkS2V5cyA9IFtcbiAgICBHZGsuS0VZX1JpZ2h0LCBcbiAgICBHZGsuS0VZX0Rvd24sIFxuICAgIEdkay5LRVlfVXAsIFxuICAgIEdkay5LRVlfTGVmdCwgXG4gICAgR2RrLktFWV9SZXR1cm4sIFxuICAgIEdkay5LRVlfc3BhY2Vcbl07XG5cbmV4cG9ydCBjb25zdCBBcHBzV2luZG93ID0gKG1vbjogbnVtYmVyKSA9PiB7XG4gICAgY29uc3QgW3Jlc3VsdHMsIHNldFJlc3VsdHNdID0gY3JlYXRlU3RhdGUoZ2V0QXBwcygpIGFzIEFycmF5PEFzdGFsQXBwcy5BcHBsaWNhdGlvbj4pO1xuXG4gICAgY29uc3QgZW50cnk6IEd0ay5TZWFyY2hFbnRyeSA9IDxHdGsuU2VhcmNoRW50cnkgb25TZWFyY2hDaGFuZ2VkPXsoc2VsZikgPT4ge1xuICAgICAgICBzZXRSZXN1bHRzKGdldEFzdGFsQXBwcygpLmZ1enp5X3F1ZXJ5KHNlbGYudGV4dC50cmltKCkpKTtcbiAgICB9fS8+IGFzIEd0ay5TZWFyY2hFbnRyeTtcblxuICAgIHJldHVybiA8UG9wdXBXaW5kb3cgbmFtZXNwYWNlPVwiYXBwcy13aW5kb3dcIiBsYXllcj17QXN0YWwuTGF5ZXIuT1ZFUkxBWX1cbiAgICAgIGV4Y2x1c2l2aXR5PXtBc3RhbC5FeGNsdXNpdml0eS5JR05PUkV9IG1vbml0b3I9e21vbn0gbWFyZ2luVG9wPXs2NH0gXG4gICAgICBjc3NCYWNrZ3JvdW5kV2luZG93PVwiYmFja2dyb3VuZD17cmdiYSgwLCAwLCAwLCAuMilcIlxuICAgICAgYWN0aW9uS2V5UHJlc3NlZD17KF8sIGtleSkgPT4ge1xuICAgICAgICAgIGZvcihjb25zdCBpZ25vcmVkS2V5IG9mIGlnbm9yZWRLZXlzKSBcbiAgICAgICAgICAgICAgaWYoa2V5ID09PSBpZ25vcmVkS2V5KSByZXR1cm5cblxuICAgICAgICAgICFlbnRyeS5pc19mb2N1cyAmJiBlbnRyeS5ncmFiX2ZvY3VzKCk7XG4gICAgICB9fT5cblxuICAgICAgICA8R3RrLkJveCBjbGFzcz17XCJhcHBzLXdpbmRvdy1jb250YWluZXJcIn0gb3JpZW50YXRpb249e0d0ay5PcmllbnRhdGlvbi5WRVJUSUNBTH0+XG4gICAgICAgICAgICAgICAgPEd0ay5Cb3ggY2xhc3M9XCJhcHBzLWFyZWFcIj5cbiAgICAgICAgICAgICAgICAgICAgPEd0ay5TY3JvbGxlZFdpbmRvdyB2c2Nyb2xsYmFyUG9saWN5PXtHdGsuUG9saWN5VHlwZS5BVVRPTUFUSUN9XG4gICAgICAgICAgICAgICAgICAgICAgaHNjcm9sbGJhclBvbGljeT17R3RrLlBvbGljeVR5cGUuTkVWRVJ9IG92ZXJsYXlTY3JvbGxpbmc9e3RydWV9IFxuICAgICAgICAgICAgICAgICAgICAgIHByb3BhZ2F0ZU5hdHVyYWxIZWlnaHQ9e2ZhbHNlfT5cblxuICAgICAgICAgICAgICAgICAgICAgICAgPEd0ay5GbG93Qm94IHJvd1NwYWNpbmc9ezYwfSBjb2x1bW5TcGFjaW5nPXs2MH0gXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGhvbW9nZW5lb3VzPXt0cnVlfSB2aXNpYmxlPXt0cnVlfSBtaW5DaGlsZHJlblBlckxpbmU9ezF9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2YXRlT25TaW5nbGVDbGljaz17dHJ1ZX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEZvciBlYWNoPXtyZXN1bHRzfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhhcHApID0+IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEd0ay5CdXR0b24gdmlzaWJsZT17dHJ1ZX0gaGVpZ2h0UmVxdWVzdD17MTUwfSB0b29sdGlwTWFya3VwPXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYCR7YXBwLm5hbWV9JHthcHAuZGVzY3JpcHRpb24gPyBgXFxuPHNwYW4gZm9yZWdyb3VuZD1cIiM3ZjdmN2ZcIj4ke1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwLmRlc2NyaXB0aW9ufTwvc3Bhbj5gIDogXCJcIn1gLnJlcGxhY2UoL1xcJi9nLCBcIiZhbXA7XCIpfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQWN0aXZhdGU9eygpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4ZWNBcHAoYXBwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fSBvbkNsaWNrZWQ9eygpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4ZWNBcHAoYXBwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fT5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxHdGsuQm94IG9yaWVudGF0aW9uPXtHdGsuT3JpZW50YXRpb24uVkVSVElDQUx9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8R3RrLkltYWdlIGljb25OYW1lPXtnZXRBcHBJY29uKGFwcCkgPz8gXCJhcHBsaWNhdGlvbi14LWV4ZWN1dGFibGVcIn0gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEd0ay5MYWJlbCBlbGxpcHNpemU9e1BhbmdvLkVsbGlwc2l6ZU1vZGUuRU5EfSB2YWxpZ249e0d0ay5BbGlnbi5TVEFSVH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD17YXBwLm5hbWUgfHwgXCJVbm5hbWVkIEFwcFwifSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvR3RrLkJveD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvR3RrLkJ1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvRm9yPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9HdGsuRmxvd0JveD5cbiAgICAgICAgICAgICAgICAgICAgPC9HdGsuU2Nyb2xsZWRXaW5kb3c+XG4gICAgICAgICAgICAgICAgPC9HdGsuQm94PlxuICAgICAgICA8L0d0ay5Cb3g+XG4gICAgPC9Qb3B1cFdpbmRvdz5cbn1cbiIsICJpbXBvcnQgeyBtb25pdG9yRmlsZSB9IGZyb20gXCJhZ3MvZmlsZVwiO1xuaW1wb3J0IHsgZXhlY0FzeW5jIH0gZnJvbSBcImFncy9wcm9jZXNzXCI7XG5pbXBvcnQgeyB1d3NtSXNBY3RpdmUgfSBmcm9tIFwiLi9hcHBzXCI7XG5cbmltcG9ydCBBcHAgZnJvbSBcImFncy9ndGs0L2FwcFwiO1xuaW1wb3J0IEdpbyBmcm9tIFwiZ2k6Ly9HaW8/dmVyc2lvbj0yLjBcIjtcblxuXG5jb25zdCBtb25pdG9yaW5nUGF0aHMgPSBbIFwiLi9zY3JpcHRzXCIsIFwiLi93aW5kb3dcIiwgXCIuL2FwcC50c1wiLCBcImVudi5kLnRzXCIgXTtcblxuZXhwb3J0IGZ1bmN0aW9uIHJlc3RhcnRJbnN0YW5jZShpbnN0YW5jZU5hbWU/OiBzdHJpbmcpOiB2b2lkIHtcbiAgICBleGVjQXN5bmMoYGFzdGFsIC1xICR7IGluc3RhbmNlTmFtZSA/PyBBcHAuaW5zdGFuY2VOYW1lID8/IFwiYXN0YWxcIiB9YCk7XG4gICAgR2lvLlN1YnByb2Nlc3MubmV3KFxuICAgICAgICAoIHV3c21Jc0FjdGl2ZSA/IFxuICAgICAgICAgICAgWyBcInV3c21cIiwgXCJhcHBcIiwgXCItLVwiLCBcImFnc1wiLCBcInJ1blwiIF1cbiAgICAgICAgIDogWyBcImFnc1wiLCBcInJ1blwiIF0pLCBcbiAgICAgICAgR2lvLlN1YnByb2Nlc3NGbGFncy5TVERPVVRfUElQRSB8IEdpby5TdWJwcm9jZXNzRmxhZ3MuU1RERVJSX1BJUEVcbiAgICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbW9uaXRvclBhdGhzKCk6IHZvaWQge1xuICAgIG1vbml0b3JpbmdQYXRocy5tYXAoKHBhdGg6IHN0cmluZykgPT4ge1xuICAgICAgICBtb25pdG9yRmlsZShcbiAgICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgICAoKSA9PiByZXN0YXJ0SW5zdGFuY2UoKVxuICAgICAgICApXG4gICAgfSk7XG59XG4iLCAiaW1wb3J0IHsgQWNjZXNzb3IsIFdpdGggfSBmcm9tIFwiYWdzXCI7XG5pbXBvcnQgeyByZWdpc3RlciB9IGZyb20gXCJhZ3MvZ29iamVjdFwiO1xuaW1wb3J0IHsgR3RrIH0gZnJvbSBcImFncy9ndGs0XCI7XG5pbXBvcnQgUGFuZ28gZnJvbSBcImdpOi8vUGFuZ28/dmVyc2lvbj0xLjBcIjtcbmltcG9ydCB7IHZhcmlhYmxlVG9Cb29sZWFuIH0gZnJvbSBcIi4uLy4uL3NjcmlwdHMvdXRpbHNcIjtcblxuZXhwb3J0IHsgUmVzdWx0V2lkZ2V0LCBSZXN1bHRXaWRnZXRQcm9wcyB9O1xuXG50eXBlIFJlc3VsdFdpZGdldFByb3BzID0ge1xuICAgIGljb24/OiBzdHJpbmcgfCBBY2Nlc3NvcjxzdHJpbmc+IHwgSlNYLkVsZW1lbnQgfCBBY2Nlc3NvcjxKU1guRWxlbWVudD47XG4gICAgdGl0bGU6IHN0cmluZyB8IEFjY2Vzc29yPHN0cmluZz47XG4gICAgZGVzY3JpcHRpb24/OiBzdHJpbmcgfCBBY2Nlc3NvcjxzdHJpbmc+O1xuICAgIGNsb3NlT25DbGljaz86IGJvb2xlYW47XG4gICAgc2V0dXA/OiAoKSA9PiB2b2lkO1xuICAgIG9uQ2xpY2s/OiAoKSA9PiB2b2lkO1xufTtcblxuQHJlZ2lzdGVyKHsgR1R5cGVOYW1lOiBcIlJlc3VsdFdpZGdldFwiIH0pXG5jbGFzcyBSZXN1bHRXaWRnZXQgZXh0ZW5kcyBHdGsuQm94IHtcblxuICAgIHB1YmxpYyByZWFkb25seSBvbkNsaWNrOiAoKSA9PiB2b2lkO1xuICAgIHB1YmxpYyByZWFkb25seSBzZXR1cD86ICgpID0+IHZvaWQ7XG4gICAgcHVibGljIGljb24/OiAoc3RyaW5nIHwgQWNjZXNzb3I8c3RyaW5nPiB8IEpTWC5FbGVtZW50IHwgQWNjZXNzb3I8SlNYLkVsZW1lbnQ+KTtcbiAgICBwdWJsaWMgY2xvc2VPbkNsaWNrOiBib29sZWFuID0gdHJ1ZTtcblxuXG4gICAgY29uc3RydWN0b3IocHJvcHM6IFJlc3VsdFdpZGdldFByb3BzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIGNzc0NsYXNzZXM6IFtcInJlc3VsdFwiXSxcbiAgICAgICAgICAgIGhleHBhbmQ6IHRydWVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5pY29uID0gcHJvcHMuaWNvbjtcbiAgICAgICAgdGhpcy5zZXR1cCA9IHByb3BzLnNldHVwO1xuICAgICAgICB0aGlzLmNsb3NlT25DbGljayA9IHByb3BzLmNsb3NlT25DbGljayA/PyB0cnVlO1xuICAgICAgICB0aGlzLm9uQ2xpY2sgPSAoKSA9PiBwcm9wcy5vbkNsaWNrPy4oKTtcblxuICAgICAgICBpZih0aGlzLmljb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYodGhpcy5pY29uIGluc3RhbmNlb2YgQWNjZXNzb3IpIHtcbiAgICAgICAgICAgICAgICBpZih0eXBlb2YgdGhpcy5pY29uLmdldCgpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJlcGVuZCg8R3RrLkltYWdlIGljb25OYW1lPXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaWNvbiBhcyBBY2Nlc3NvcjxzdHJpbmc+XG4gICAgICAgICAgICAgICAgICAgIH0gLz4gYXMgR3RrLkltYWdlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnByZXBlbmQoPEd0ay5Cb3g+XG4gICAgICAgICAgICAgICAgICAgICAgICA8V2l0aCB2YWx1ZT17dGhpcy5pY29uIGFzIEFjY2Vzc29yPEd0ay5XaWRnZXQ+fT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KHdpZGdldCkgPT4gd2lkZ2V0fVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9XaXRoPlxuICAgICAgICAgICAgICAgICAgICA8L0d0ay5Cb3g+IGFzIEd0ay5Cb3gpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYodHlwZW9mIHRoaXMuaWNvbiA9PT0gXCJzdHJpbmdcIikgXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJlcGVuZCg8R3RrLkltYWdlIGljb25OYW1lPXt0aGlzLmljb24gYXMgc3RyaW5nfSAvPiBhcyBHdGsuSW1hZ2UpO1xuICAgICAgICAgICAgICAgIGVsc2UgXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJlcGVuZCh0aGlzLmljb24gYXMgR3RrLldpZGdldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmFwcGVuZCg8R3RrLkJveCBvcmllbnRhdGlvbj17R3RrLk9yaWVudGF0aW9uLlZFUlRJQ0FMfSB2YWxpZ249e0d0ay5BbGlnbi5DRU5URVJ9PlxuICAgICAgICAgICAgPEd0ay5MYWJlbCBjbGFzcz17XCJ0aXRsZVwifSB4YWxpZ249ezB9IGVsbGlwc2l6ZT17UGFuZ28uRWxsaXBzaXplTW9kZS5FTkR9XG4gICAgICAgICAgICAgIGxhYmVsPXtwcm9wcy50aXRsZX0gLz5cblxuICAgICAgICAgICAgPEd0ay5MYWJlbCBjbGFzcz17XCJkZXNjcmlwdGlvblwifSB2aXNpYmxlPXt2YXJpYWJsZVRvQm9vbGVhbihwcm9wcy5kZXNjcmlwdGlvbil9XG4gICAgICAgICAgICAgIGVsbGlwc2l6ZT17UGFuZ28uRWxsaXBzaXplTW9kZS5FTkR9IHhhbGlnbj17MH0gbGFiZWw9e3Byb3BzLmRlc2NyaXB0aW9uID8/IFwiXCJ9IC8+XG4gICAgICAgIDwvR3RrLkJveD4gYXMgR3RrLkJveCk7XG4gICAgfVxufVxuIiwgImltcG9ydCB7IEFzdGFsLCBHZGssIEd0ayB9IGZyb20gXCJhZ3MvZ3RrNFwiO1xuaW1wb3J0IHsgdGltZW91dCB9IGZyb20gXCJhZ3MvdGltZVwiO1xuaW1wb3J0IHsgUG9wdXBXaW5kb3cgfSBmcm9tIFwiLi4vd2lkZ2V0L1BvcHVwV2luZG93XCI7XG5pbXBvcnQgeyB1cGRhdGVBcHBzIH0gZnJvbSBcIi4uL3NjcmlwdHMvYXBwc1wiO1xuaW1wb3J0IHsgUmVzdWx0V2lkZ2V0LCBSZXN1bHRXaWRnZXRQcm9wcyB9IGZyb20gXCIuLi93aWRnZXQvcnVubmVyL1Jlc3VsdFdpZGdldFwiO1xuaW1wb3J0IHsgV2luZG93cyB9IGZyb20gXCIuLi93aW5kb3dzXCI7XG5cbmltcG9ydCBHT2JqZWN0IGZyb20gXCJhZ3MvZ29iamVjdFwiO1xuaW1wb3J0IEFzdGFsSHlwcmxhbmQgZnJvbSBcImdpOi8vQXN0YWxIeXBybGFuZFwiO1xuaW1wb3J0IEFzdGFsSU8gZnJvbSBcImdpOi8vQXN0YWxJT1wiO1xuXG5cbmV4cG9ydCBuYW1lc3BhY2UgUnVubmVyIHtcbmV4cG9ydCB0eXBlIFJ1bm5lclByb3BzID0ge1xuICAgIGhhbGlnbj86IEd0ay5BbGlnbjtcbiAgICB2YWxpZ24/OiBHdGsuQWxpZ247XG4gICAgd2lkdGg/OiBudW1iZXI7XG4gICAgaGVpZ2h0PzogbnVtYmVyO1xuICAgIGVudHJ5UGxhY2VIb2xkZXI/OiBzdHJpbmc7XG4gICAgaW5pdGlhbFRleHQ/OiBzdHJpbmc7XG4gICAgcmVzdWx0c0xpbWl0PzogbnVtYmVyO1xuICAgIHNob3dSZXN1bHRzUGxhY2VIb2xkZXJPblN0YXJ0dXA/OiBib29sZWFuO1xufTtcblxuZXhwb3J0IGludGVyZmFjZSBQbHVnaW4ge1xuICAgIC8qKiBwcmVmaXggdG8gY2FsbCB0aGUgcGx1Z2luLiBpZiB1bmRlZmluZWQsIHdpbGwgYmUgdHJpZ2dlcmVkIGxpa2UgYXBwbGljYXRpb25zIHBsdWdpbiAqL1xuICAgIHJlYWRvbmx5IHByZWZpeD86IHN0cmluZztcbiAgICAvKiogbmFtZSBvZiB0aGUgcGx1Z2luLiBlLmcuOiB3ZWJzZWFyY2gsIHNoZWxsICovXG4gICAgcmVhZG9ubHkgbmFtZT86IHN0cmluZztcbiAgICAvKiogcmFuIG9uIHJ1bm5lciBvcGVuICovXG4gICAgcmVhZG9ubHkgaW5pdD86ICgpID0+IHZvaWQ7XG4gICAgLyoqIGhhbmRsZSB0aGUgdXNlciBpbnB1dCB0byByZXR1cm4gcmVzdWx0cyAoZG9lcyBub3QgaW5jbHVkZSBwbHVnaW4ncyBwcmVmaXgpICovXG4gICAgcmVhZG9ubHkgaGFuZGxlOiAoaW5wdXRUZXh0OiBzdHJpbmcpID0+IChSZXN1bHRXaWRnZXR8QXJyYXk8UmVzdWx0V2lkZ2V0PnxudWxsfHVuZGVmaW5lZCk7XG4gICAgLyoqIHJhbiBvbiBydW5uZXIgY2xvc2UgKi9cbiAgICByZWFkb25seSBvbkNsb3NlPzogKCkgPT4gdm9pZDtcbiAgICAvKiogaGlkZSBvdGhlciBwbHVnaW5zIHdoZW4gdXNpbmcgdGhpcyBwbHVnaW4gKi9cbiAgICBwcmlvcml0aXplPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGxldCBpbnN0YW5jZTogKEFzdGFsLldpbmRvd3xudWxsKSA9IG51bGw7XG5sZXQgZ3RrRW50cnk6IChHdGsuU2VhcmNoRW50cnl8bnVsbCkgPSBudWxsO1xuY29uc3QgcGx1Z2lucyA9IG5ldyBTZXQ8UnVubmVyLlBsdWdpbj4oKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNsb3NlKCkgeyBpbnN0YW5jZT8uY2xvc2UoKTsgfVxuXG5leHBvcnQgZnVuY3Rpb24gcmVnRXhNYXRjaChzZWFyY2g6IHN0cmluZywgaXRlbTogKHN0cmluZ3xudW1iZXIpKTogYm9vbGVhbiB7XG4gICAgc2VhcmNoID0gc2VhcmNoLnJlcGxhY2UoL1tcXFxcXiQuKj8oKVtcXF17fXxdL2csIFwiXFxcXCQmXCIpO1xuXG4gICAgaWYodHlwZW9mIGl0ZW0gPT09IFwibnVtYmVyXCIpXG4gICAgICAgIHJldHVybiBuZXcgUmVnRXhwKGAke3NlYXJjaC5zcGxpdCgnJykubWFwKGMgPT4gXG4gICAgICAgICAgICBgJHtjfWApLmpvaW4oJycpfWAsXG4gICAgICAgIFwiZ1wiKS50ZXN0KGl0ZW0udG9TdHJpbmcoKSk7XG5cbiAgICByZXR1cm4gbmV3IFJlZ0V4cChgJHtzZWFyY2guc3BsaXQoJycpLm1hcChjID0+IFxuICAgICAgICBgJHtjfWApLmpvaW4oJycpfWAsXG4gICAgXCJnaVwiKS50ZXN0KGl0ZW0pO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRQbHVnaW4ocGx1Z2luOiBSdW5uZXIuUGx1Z2luLCBmb3JjZT86IGJvb2xlYW4pIHtcbiAgICBpZighZm9yY2UgJiYgcGx1Z2luLnByZWZpeCAmJiBwbHVnaW5zLmhhcyhwbHVnaW4pKSBcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBSdW5uZXIgcGx1Z2luIHdpdGggcHJlZml4ICR7cGx1Z2luLnByZWZpeH0gYWxyZWFkeSBleGlzdHNgKTtcblxuICAgIHBsdWdpbnMuZGVsZXRlKHBsdWdpbik7XG4gICAgcGx1Z2lucy5hZGQocGx1Z2luKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFBsdWdpbnMoKTogQXJyYXk8UnVubmVyLlBsdWdpbj4ge1xuICAgIHJldHVybiBbLi4ucGx1Z2lucy52YWx1ZXMoKV07XG59XG5cbi8qKiBSZW1vdmVzIGEgcGx1Z2luIGZyb20gdGhlIHJ1bm5lciBwbHVnaW5zIGxpc3RcbiAqIEByZXR1cm5zIHRydWUgaWYgcGx1Z2luIHdhcyByZW1vdmVkIG9yIGZhbHNlIGlmIHBsdWdpbiB3YXNuJ3QgZm91bmRcbiAgKi9cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVQbHVnaW4ocGx1Z2luOiBQbHVnaW4pOiBib29sZWFuIHtcbiAgICByZXR1cm4gcGx1Z2lucy5kZWxldGUocGx1Z2luKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldEVudHJ5VGV4dCh0ZXh0OiBzdHJpbmcpOiB2b2lkIHtcbiAgICBndGtFbnRyeT8uc2V0X3RleHQodGV4dCk7XG4gICAgZ3RrRW50cnk/LnNldF9wb3NpdGlvbihndGtFbnRyeS50ZXh0Lmxlbmd0aCk7XG5cbiAgICBndGtFbnRyeT8uZ3JhYl9mb2N1cygpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gb3BlbkRlZmF1bHQoaW5pdGlhbFRleHQ/OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gUnVubmVyLm9wZW5SdW5uZXIoe1xuICAgICAgICBlbnRyeVBsYWNlSG9sZGVyOiBcIlN0YXJ0IHR5cGluZy4uLlwiLFxuICAgICAgICBpbml0aWFsVGV4dCxcbiAgICAgICAgcmVzdWx0c0xpbWl0OiAyNFxuICAgIH0gYXMgUnVubmVyLlJ1bm5lclByb3BzLFxuICAgICgpID0+IFtcbiAgICAgICAgbmV3IFJlc3VsdFdpZGdldCh7XG4gICAgICAgICAgICBpY29uOiBcImFwcGxpY2F0aW9uLXgtZXhlY3V0YWJsZS1zeW1ib2xpY1wiLFxuICAgICAgICAgICAgdGl0bGU6IFwiVXNlIHlvdXIgYXBwbGljYXRpb25zXCIsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJTZWFyY2ggZm9yIGFueSBhcHAgaW5zdGFsbGVkIGluIHlvdXIgY29tcHV0ZXJcIixcbiAgICAgICAgICAgIGNsb3NlT25DbGljazogZmFsc2UsXG4gICAgICAgICAgICBvbkNsaWNrOiAoKSA9PiBndGtFbnRyeT8uZ3JhYl9mb2N1cygpXG4gICAgICAgIH0gYXMgUmVzdWx0V2lkZ2V0UHJvcHMpLFxuICAgICAgICBuZXcgUmVzdWx0V2lkZ2V0KHtcbiAgICAgICAgICAgIGljb246IFwiZWRpdC1wYXN0ZS1zeW1ib2xpY1wiLFxuICAgICAgICAgICAgdGl0bGU6IFwiU2VlIHlvdXIgY2xpcGJvYXJkIGhpc3RvcnlcIixcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlN0YXJ0IHlvdXIgc2VhcmNoIHdpdGggJz4nIHRvIGdvIHRocm91Z2ggeW91ciBjbGlwYm9hcmQgaGlzdG9yeVwiLFxuICAgICAgICAgICAgY2xvc2VPbkNsaWNrOiBmYWxzZSxcbiAgICAgICAgICAgIG9uQ2xpY2s6ICgpID0+IHNldEVudHJ5VGV4dCgnPicpXG4gICAgICAgIH0gYXMgUmVzdWx0V2lkZ2V0UHJvcHMpLFxuICAgICAgICBuZXcgUmVzdWx0V2lkZ2V0KHtcbiAgICAgICAgICAgIGljb246IFwiaW1hZ2UteC1nZW5lcmljLXN5bWJvbGljXCIsXG4gICAgICAgICAgICB0aXRsZTogXCJDaGFuZ2UgeW91ciB3YWxscGFwZXJcIixcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkFkZCAnIycgYXQgdGhlIHN0YXJ0IHRvIHNlYXJjaCB0aHJvdWdoIHRoZSB3YWxscGFwZXJzIGZvbGRlciFcIixcbiAgICAgICAgICAgIGNsb3NlT25DbGljazogZmFsc2UsXG4gICAgICAgICAgICBvbkNsaWNrOiAoKSA9PiBzZXRFbnRyeVRleHQoJyMnKSxcbiAgICAgICAgfSBhcyBSZXN1bHRXaWRnZXRQcm9wcyksXG4gICAgICAgIG5ldyBSZXN1bHRXaWRnZXQoe1xuICAgICAgICAgICAgaWNvbjogXCJ1dGlsaXRpZXMtdGVybWluYWwtc3ltYm9saWNcIixcbiAgICAgICAgICAgIHRpdGxlOiBcIlJ1biBzaGVsbCBjb21tYW5kc1wiLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQWRkICchJyBiZWZvcmUgeW91ciBjb21tYW5kIHRvIHJ1biBpdCAocHJvIHRpcDogYWRkIGEgc2Vjb25kICchJyB0byBzaG93IGNvbW1hbmQgb3V0cHV0KVwiLFxuICAgICAgICAgICAgY2xvc2VPbkNsaWNrOiBmYWxzZSxcbiAgICAgICAgICAgIG9uQ2xpY2s6ICgpID0+IHNldEVudHJ5VGV4dCgnISEnKVxuICAgICAgICB9IGFzIFJlc3VsdFdpZGdldFByb3BzKSxcbiAgICAgICAgbmV3IFJlc3VsdFdpZGdldCh7XG4gICAgICAgICAgICBpY29uOiBcIm1lZGlhLXBsYXliYWNrLXN0YXJ0LXN5bWJvbGljXCIsXG4gICAgICAgICAgICB0aXRsZTogXCJDb250cm9sIG1lZGlhXCIsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJUeXBlICc6JyB0byBjb250cm9sIHBsYXlpbmcgbWVkaWFcIixcbiAgICAgICAgICAgIGNsb3NlT25DbGljazogZmFsc2UsXG4gICAgICAgICAgICBvbkNsaWNrOiAoKSA9PiBzZXRFbnRyeVRleHQoJzonKVxuICAgICAgICB9IGFzIFJlc3VsdFdpZGdldFByb3BzKSxcbiAgICAgICAgbmV3IFJlc3VsdFdpZGdldCh7XG4gICAgICAgICAgICBpY29uOiBcImFwcGxpY2F0aW9ucy1pbnRlcm5ldC1zeW1ib2xpY1wiLFxuICAgICAgICAgICAgdGl0bGU6IFwiU2VhcmNoIHRoZSBXZWJcIixcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlN0YXJ0IHR5cGluZyB3aXRoICc/JyBwcmVmaXggdG8gc2VhcmNoIHRoZSB3ZWJcIixcbiAgICAgICAgICAgIGNsb3NlT25DbGljazogZmFsc2UsXG4gICAgICAgICAgICBvbkNsaWNrOiAoKSA9PiBzZXRFbnRyeVRleHQoJz8nKVxuICAgICAgICB9IGFzIFJlc3VsdFdpZGdldFByb3BzKVxuICAgIF0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gb3BlblJ1bm5lcihwcm9wczogUnVubmVyUHJvcHMsIHBsYWNlaG9sZGVyPzogKCkgPT4gQXJyYXk8UmVzdWx0V2lkZ2V0Pik6IEFzdGFsLldpbmRvdyB7XG4gICAgbGV0IG9uQ2xpY2tUaW1lb3V0OiAoQXN0YWxJTy5UaW1lfHVuZGVmaW5lZCk7XG4gICAgY29uc3QgY29ubmVjdGlvbnM6IE1hcDxHT2JqZWN0Lk9iamVjdCwgbnVtYmVyPiA9IG5ldyBNYXAoKTtcblxuICAgIHByb3BzLndpZHRoID8/PSA3ODA7XG4gICAgcHJvcHMuaGVpZ2h0ID8/PSA0MjA7XG5cbiAgICBndGtFbnRyeSA9IDxHdGsuU2VhcmNoRW50cnkgY2xhc3M9e1wic2VhcmNoXCJ9IHBsYWNlaG9sZGVyVGV4dD17cHJvcHMuZW50cnlQbGFjZUhvbGRlciA/PyBcIlwifVxuICAgICAgb25TZWFyY2hDaGFuZ2VkPXthc3luYyAoc2VsZikgPT4ge1xuICAgICAgICAgIHVwZGF0ZVJlc3VsdHNMaXN0KHNlbGYudGV4dCk7XG4gICAgICAgICAgcmVzdWx0c0xpc3QuZ2V0X3Jvd19hdF9pbmRleCgwKSAmJiBcbiAgICAgICAgICAgICAgcmVzdWx0c0xpc3Quc2VsZWN0X3JvdyhyZXN1bHRzTGlzdC5nZXRfcm93X2F0X2luZGV4KDApKTtcblxuICAgICAgICAgIGlmKHNlbGYudGV4dC50cmltKCkubGVuZ3RoIDwgMSAmJiAhbWFpbkJveC5nZXRfc3R5bGVfY29udGV4dCgpLmhhc19jbGFzcyhcImVtcHR5LWlucHV0XCIpKSB7XG4gICAgICAgICAgICAgIG1haW5Cb3guZ2V0X3N0eWxlX2NvbnRleHQoKS5hZGRfY2xhc3MoXCJlbXB0eS1pbnB1dFwiKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG1haW5Cb3guZ2V0X3N0eWxlX2NvbnRleHQoKS5oYXNfY2xhc3MoXCJlbXB0eS1pbnB1dFwiKSAmJlxuICAgICAgICAgICAgICBtYWluQm94LmdldF9zdHlsZV9jb250ZXh0KCkucmVtb3ZlX2NsYXNzKFwiZW1wdHktaW5wdXRcIik7XG4gICAgICB9fSBvbkFjdGl2YXRlPXsoKSA9PiB7XG4gICAgICAgICAgY29uc3QgcmVzdWx0V2lkZ2V0ID0gcmVzdWx0c0xpc3QuZ2V0X3NlbGVjdGVkX3JvdygpPy5nZXRfY2hpbGQoKTtcbiAgICAgICAgICBpZihyZXN1bHRXaWRnZXQgaW5zdGFuY2VvZiBSZXN1bHRXaWRnZXQpIHtcbiAgICAgICAgICAgICAgcmVzdWx0V2lkZ2V0Lm9uQ2xpY2soKTtcbiAgICAgICAgICAgICAgcmVzdWx0V2lkZ2V0LmNsb3NlT25DbGljayAmJiBSdW5uZXIuY2xvc2UoKTtcbiAgICAgICAgICB9XG4gICAgICB9fVxuICAgIC8+IGFzIEd0ay5TZWFyY2hFbnRyeTtcblxuICAgIGNvbnN0IG1haW5Cb3ggPSA8R3RrLkJveCBjbGFzcz17YHJ1bm5lciBtYWluICR7cHJvcHMuc2hvd1Jlc3VsdHNQbGFjZUhvbGRlck9uU3RhcnR1cCA/IFxuICAgICAgICAgIFwiZW1wdHlcIiA6IFwiXCJ9YH0gb3JpZW50YXRpb249e0d0ay5PcmllbnRhdGlvbi5WRVJUSUNBTH0gaGV4cGFuZD17dHJ1ZX1cbiAgICAgIHZhbGlnbj17R3RrLkFsaWduLlNUQVJUfT5cbiAgICAgICAge2d0a0VudHJ5fVxuICAgICAgICA8R3RrLlNjcm9sbGVkV2luZG93IGNsYXNzPXtcInJlc3VsdHMtc2Nyb2xsYWJsZVwifSB2c2Nyb2xsYmFyUG9saWN5PXtHdGsuUG9saWN5VHlwZS5BVVRPTUFUSUN9XG4gICAgICAgICAgaHNjcm9sbGJhclBvbGljeT17R3RrLlBvbGljeVR5cGUuTkVWRVJ9IGhleHBhbmQ9e3RydWV9IHZleHBhbmQ9e3RydWV9XG4gICAgICAgICAgdmlzaWJsZT17cHJvcHMuc2hvd1Jlc3VsdHNQbGFjZUhvbGRlck9uU3RhcnR1cCA/PyBmYWxzZX1cbiAgICAgICAgICBwcm9wYWdhdGVOYXR1cmFsSGVpZ2h0PXt0cnVlfSBtYXhDb250ZW50SGVpZ2h0PXtwcm9wcy5oZWlnaHR9PlxuXG4gICAgICAgICAgICA8R3RrLkxpc3RCb3ggaGV4cGFuZD17dHJ1ZX0gdmV4cGFuZD17dHJ1ZX0gLz5cbiAgICAgICAgPC9HdGsuU2Nyb2xsZWRXaW5kb3c+XG4gICAgPC9HdGsuQm94PiBhcyBHdGsuQm94O1xuXG4gICAgY29uc3Qgc2Nyb2xsYWJsZSA9IG1haW5Cb3guZ2V0X2xhc3RfY2hpbGQoKSBhcyBHdGsuU2Nyb2xsZWRXaW5kb3c7XG4gICAgY29uc3QgcmVzdWx0c0xpc3QgPSBzY3JvbGxhYmxlLmdldF9maXJzdF9jaGlsZCgpIGFzIEd0ay5MaXN0Qm94O1xuXG4gICAgaWYocHJvcHM/LnNob3dSZXN1bHRzUGxhY2VIb2xkZXJPblN0YXJ0dXAgJiYgcGxhY2Vob2xkZXIpIHtcbiAgICAgICAgY29uc3QgcGxhY2Vob2xkZXJHdGtzID0gcGxhY2Vob2xkZXIoKTtcbiAgICAgICAgcGxhY2Vob2xkZXJHdGtzLm1hcCh3aWRnZXQgPT5cbiAgICAgICAgICAgIHJlc3VsdHNMaXN0Lmluc2VydCh3aWRnZXQsIC0xKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0UGx1Z2luUmVzdWx0cyhpbnB1dDogc3RyaW5nKTogQXJyYXk8UmVzdWx0V2lkZ2V0PiB7XG4gICAgICAgIGxldCBjYWxsZWRQbHVnaW5zOiBBcnJheTxQbHVnaW4+ID0gZ2V0UGx1Z2lucygpLmZpbHRlcigocGx1Z2luKSA9PiBcbiAgICAgICAgICAgIHBsdWdpbi5wcmVmaXggPyAoaW5wdXQuc3RhcnRzV2l0aChwbHVnaW4ucHJlZml4KSA/IHRydWUgOiBmYWxzZSkgOiB0cnVlXG4gICAgICAgICkuc29ydCgocGx1Z2luKSA9PiBwbHVnaW4ucHJlZml4ICE9IG51bGwgPyAwIDogMSk7XG5cbiAgICAgICAgZm9yKGNvbnN0IHBsdWdpbiBvZiBjYWxsZWRQbHVnaW5zKSB7XG4gICAgICAgICAgICBpZihwbHVnaW4ucHJpb3JpdGl6ZSkge1xuICAgICAgICAgICAgICAgIGNhbGxlZFBsdWdpbnMgPSBbIHBsdWdpbiBdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcmVzdWx0cyA9IGNhbGxlZFBsdWdpbnMubWFwKHBsdWdpbiA9PiBwbHVnaW4uaGFuZGxlKFxuICAgICAgICAgICAgcGx1Z2luLnByZWZpeCA/IGlucHV0LnJlcGxhY2UocGx1Z2luLnByZWZpeCwgXCJcIikgOiBpbnB1dClcbiAgICAgICAgKS5maWx0ZXIodmFsdWUgPT4gdmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSAhPT0gbnVsbCkuZmxhdCgxKTtcblxuICAgICAgICByZXR1cm4gcHJvcHM/LnJlc3VsdHNMaW1pdCAhPSBudWxsICYmIFxuICAgICAgICAgICAgcHJvcHMucmVzdWx0c0xpbWl0ICE9PSBJbmZpbml0eSA/IFxuICAgICAgICAgICAgICAgIHJlc3VsdHMuc3BsaWNlKDAsIHByb3BzLnJlc3VsdHNMaW1pdClcbiAgICAgICAgICAgIDogcmVzdWx0cztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1cGRhdGVSZXN1bHRzTGlzdChlbnRyeVRleHQ6IHN0cmluZykge1xuICAgICAgICBjb25zdCB3aWRnZXRzOiBBcnJheTxSZXN1bHRXaWRnZXQ+ID0gW107XG5cbiAgICAgICAgLy8gUmVtb3ZlIGFsbCBwcmV2aW91cyByZXN1bHRzXG4gICAgICAgIHJlc3VsdHNMaXN0LnJlbW92ZV9hbGwoKTtcblxuICAgICAgICB3aWRnZXRzLnB1c2goLi4uZ2V0UGx1Z2luUmVzdWx0cyhlbnRyeVRleHQpKVxuXG4gICAgICAgIC8vIEluc2VydCBwbGFjZWhvbGRlciBpZiB0aGVyZSBhcmUgbm8gcmVzdWx0c1xuICAgICAgICBpZihwbGFjZWhvbGRlciAmJiB3aWRnZXRzLmxlbmd0aCA9PT0gMCkgXG4gICAgICAgICAgICB3aWRnZXRzLnB1c2goLi4ucGxhY2Vob2xkZXIoKSk7XG5cbiAgICAgICAgLy8gSW5zZXJ0IHJlc3VsdHMgaW5zaWRlIEd0a0xpc3RCb3hcbiAgICAgICAgd2lkZ2V0cy5tYXAoKHJlc3VsdEd0azogUmVzdWx0V2lkZ2V0KSA9PiB7XG4gICAgICAgICAgICByZXN1bHRzTGlzdC5pbnNlcnQocmVzdWx0R3RrLCAtMSk7XG5cbiAgICAgICAgICAgIGNvbnN0IGNvbm5zOiBBcnJheTxudW1iZXI+ID0gW107XG5cbiAgICAgICAgICAgIGNvbm5zLnB1c2goXG4gICAgICAgICAgICAgICAgcmVzdWx0c0xpc3QuY29ubmVjdChcInJvdy1hY3RpdmF0ZWRcIiwgKF8sIHJvdzogR3RrLkxpc3RCb3hSb3cpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgckd0ayA9IHJvdy5nZXRfY2hpbGQoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYockd0ayBpbnN0YW5jZW9mIFJlc3VsdFdpZGdldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYob25DbGlja1RpbWVvdXQpIHJldHVybjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGltZW91dCwgc28gaXQgZG9lc24ndCBmaXJlIHRoZSBldmVudCBhIGh1bmRyZWQgdGltZXMgOnNrdWxsOlxuICAgICAgICAgICAgICAgICAgICAgICAgb25DbGlja1RpbWVvdXQgPSB0aW1lb3V0KDUwMCwgKCkgPT4gb25DbGlja1RpbWVvdXQgPSB1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgckd0ay5vbkNsaWNrKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByR3RrLmNsb3NlT25DbGljayAmJiBSdW5uZXIuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIHJlc3VsdHNMaXN0LmNvbm5lY3QoXCJkZXN0cm95XCIsICgpID0+IFxuICAgICAgICAgICAgICAgICAgICBjb25ucy5mb3JFYWNoKChpZCkgPT4gcmVzdWx0c0xpc3QuZGlzY29ubmVjdChpZCkpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgd2lkZ2V0cy5sZW5ndGggPiAwID8gXG4gICAgICAgICAgICAoIXNjcm9sbGFibGUudmlzaWJsZSAmJiBzY3JvbGxhYmxlLnNob3coKSlcbiAgICAgICAgOiBzY3JvbGxhYmxlLmhpZGUoKTtcbiAgICB9XG5cbiAgICBpZighaW5zdGFuY2UpXG4gICAgICAgIGluc3RhbmNlID0gV2luZG93cy5nZXREZWZhdWx0KCkuY3JlYXRlV2luZG93Rm9yRm9jdXNlZE1vbml0b3IoKG1vbjogbnVtYmVyKSA9PiA8UG9wdXBXaW5kb3cgXG4gICAgICAgICAgbmFtZXNwYWNlPXtcInJ1bm5lclwifSBtb25pdG9yPXttb259IHdpZHRoUmVxdWVzdD17cHJvcHMud2lkdGh9IGhlaWdodFJlcXVlc3Q9e3Byb3BzLmhlaWdodH1cbiAgICAgICAgICBtYXJnaW5Ub3A9eyhBc3RhbEh5cHJsYW5kLmdldF9kZWZhdWx0KCkuZ2V0X21vbml0b3IobW9uKT8uaGVpZ2h0IC8gMikgLSAocHJvcHMuaGVpZ2h0ISAvIDIpfVxuICAgICAgICAgIGV4Y2x1c2l2aXR5PXtBc3RhbC5FeGNsdXNpdml0eS5JR05PUkV9IGhhbGlnbj17R3RrLkFsaWduLkNFTlRFUn0gdmFsaWduPXtHdGsuQWxpZ24uU1RBUlR9XG4gICAgICAgICAgJD17KCkgPT4ge1xuICAgICAgICAgICAgICBwbHVnaW5zLmZvckVhY2gocGx1Z2luID0+IFxuICAgICAgICAgICAgICAgICAgcGx1Z2luLmluaXQ/LigpKTtcblxuICAgICAgICAgICAgICBwcm9wcy5pbml0aWFsVGV4dCAmJiBcbiAgICAgICAgICAgICAgICAgIFJ1bm5lci5zZXRFbnRyeVRleHQocHJvcHMuaW5pdGlhbFRleHQpO1xuICAgICAgICAgIH19IGFjdGlvbktleVByZXNzZWQ9eyhfLCBrZXl2YWwpID0+IHtcbiAgICAgICAgICAgICAgaWYoIWd0a0VudHJ5IS5oYXNfZm9jdXMgJiYga2V5dmFsICE9PSBHZGsuS0VZX0Y1IFxuICAgICAgICAgICAgICAgICAgICYmIGtleXZhbCAhPT0gR2RrLktFWV9Eb3duICYmIGtleXZhbCAhPT0gR2RrLktFWV9VcFxuICAgICAgICAgICAgICAgICAgICYmIGtleXZhbCAhPT0gR2RrLktFWV9SZXR1cm4pIHtcbiAgICAgICAgICAgICAgICAgICAgZ3RrRW50cnkhLmdyYWJfZm9jdXMoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGtleXZhbCA9PT0gR2RrLktFWV9GNSAmJlxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVBcHBzKCk7XG4gICAgICAgICAgfX0gb25EZXN0cm95PXsoKSA9PiB7XG4gICAgICAgICAgICAgIGNvbm5lY3Rpb25zLmZvckVhY2goKGlkLCBvYmopID0+IEdPYmplY3Quc2lnbmFsX2hhbmRsZXJfaXNfY29ubmVjdGVkKG9iaiwgaWQpICYmXG4gICAgICAgICAgICAgICAgICBvYmouZGlzY29ubmVjdChpZCkpO1xuXG4gICAgICAgICAgICAgIGd0a0VudHJ5ID0gbnVsbDtcblxuICAgICAgICAgICAgICBbLi4ucGx1Z2lucy52YWx1ZXMoKV0uZm9yRWFjaChwbHVnaW4gPT5cbiAgICAgICAgICAgICAgICAgIHBsdWdpbiAmJiBwbHVnaW4ub25DbG9zZSAmJiBwbHVnaW4ub25DbG9zZSgpKTtcblxuICAgICAgICAgICAgICBpbnN0YW5jZSA9IG51bGw7XG4gICAgICAgICAgfX0+XG4gICAgICAgICAgICB7bWFpbkJveH1cbiAgICAgICAgPC9Qb3B1cFdpbmRvdz4gYXMgQXN0YWwuV2luZG93KSgpO1xuXG4gICAgcmV0dXJuIGluc3RhbmNlITtcbn1cbn1cbiIsICJpbXBvcnQgeyBXaXJlcGx1bWJlciB9IGZyb20gXCIuL3ZvbHVtZVwiO1xuaW1wb3J0IHsgV2luZG93cyB9IGZyb20gXCIuLi93aW5kb3dzXCI7XG5pbXBvcnQgeyByZXN0YXJ0SW5zdGFuY2UgfSBmcm9tIFwiLi9yZWxvYWQtaGFuZGxlclwiO1xuaW1wb3J0IHsgdGltZW91dCB9IGZyb20gXCJhZ3MvdGltZVwiO1xuaW1wb3J0IHsgUnVubmVyIH0gZnJvbSBcIi4uL3J1bm5lci9SdW5uZXJcIjtcbmltcG9ydCB7IHNob3dXb3Jrc3BhY2VOdW1iZXIgfSBmcm9tIFwiLi4vd2lkZ2V0L2Jhci9Xb3Jrc3BhY2VzXCI7XG5cbmltcG9ydCBBc3RhbElPIGZyb20gXCJnaTovL0FzdGFsSU9cIjtcbmltcG9ydCB7IHBsYXlTeXN0ZW1CZWxsIH0gZnJvbSBcIi4vdXRpbHNcIjtcbmltcG9ydCB7IENvbmZpZyB9IGZyb20gXCIuL2NvbmZpZ1wiO1xuXG5cbmxldCB3c1RpbWVvdXQ6IChBc3RhbElPLlRpbWV8dW5kZWZpbmVkKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZUFyZ3VtZW50cyhyZXF1ZXN0OiBzdHJpbmcpOiBhbnkge1xuICAgIGNvbnN0IGFyZ3M6IEFycmF5PHN0cmluZz4gPSByZXF1ZXN0LnNwbGl0KFwiIFwiKTtcbiAgICBzd2l0Y2goYXJnc1swXSkge1xuICAgICAgICBjYXNlIFwib3BlblwiOlxuICAgICAgICBjYXNlIFwiY2xvc2VcIjpcbiAgICAgICAgY2FzZSBcInRvZ2dsZVwiOlxuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZVdpbmRvd0FyZ3MoYXJncyk7XG5cbiAgICAgICAgY2FzZSBcImhlbHBcIjpcbiAgICAgICAgY2FzZSBcImhcIjpcbiAgICAgICAgICAgIHJldHVybiBnZXRIZWxwKCk7XG5cbiAgICAgICAgY2FzZSBcInZvbHVtZVwiOlxuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZVZvbHVtZUFyZ3MoYXJncyk7XG5cbiAgICAgICAgY2FzZSBcInJlbG9hZFwiOlxuICAgICAgICAgICAgcmVzdGFydEluc3RhbmNlKCk7XG4gICAgICAgICAgICByZXR1cm4gXCJSZXN0YXJ0aW5nIGluc3RhbmNlLi4uXCJcblxuICAgICAgICBjYXNlIFwid2luZG93c1wiOlxuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKFdpbmRvd3MuZ2V0RGVmYXVsdCgpLndpbmRvd3MpLm1hcChuYW1lID0+XG4gICAgICAgICAgICAgICAgYCR7bmFtZX06ICR7V2luZG93cy5nZXREZWZhdWx0KCkuaXNWaXNpYmxlKG5hbWUpID8gXCJvcGVuXCIgOiBcImNsb3NlZFwiIH1gKS5qb2luKCdcXG4nKTtcbiAgICAgICAgXG4gICAgICAgIGNhc2UgXCJydW5uZXJcIjpcbiAgICAgICAgICAgICFSdW5uZXIuaW5zdGFuY2UgPyBcbiAgICAgICAgICAgICAgICBSdW5uZXIub3BlbkRlZmF1bHQoYXJnc1sxXSB8fCB1bmRlZmluZWQpXG4gICAgICAgICAgICA6IFJ1bm5lci5jbG9zZSgpO1xuICAgICAgICAgICAgcmV0dXJuIFwiT3BlbmluZyBydW5uZXIuLi5cIlxuXG4gICAgICAgIGNhc2UgXCJwZWVrLXdvcmtzcGFjZS1udW1cIjpcbiAgICAgICAgICAgIGlmKHdzVGltZW91dCkgcmV0dXJuIFwiV29ya3NwYWNlIG51bWJlcnMgYXJlIGFscmVhZHkgc2hvd2luZ1wiO1xuXG4gICAgICAgICAgICBzaG93V29ya3NwYWNlTnVtYmVyKHRydWUpO1xuICAgICAgICAgICAgd3NUaW1lb3V0ID0gdGltZW91dCgyMjAwLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgc2hvd1dvcmtzcGFjZU51bWJlcihmYWxzZSk7XG4gICAgICAgICAgICAgICAgd3NUaW1lb3V0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gXCJUb2dnbGVkIHdvcmtzcGFjZSBudW1iZXJzXCI7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBcImNvbW1hbmQgbm90IGZvdW5kISB0cnkgY2hlY2tpbmcgaGVscFwiO1xuICAgIH1cbn1cblxuLy8gRGlkbid0IHdhbnQgdG8gYmxvYXQgdGhlIHN3aXRjaCBzdGF0ZW1lbnQsIHNvIEkganVzdCBzZXBhcmF0ZWQgaXQgaW50byBmdW5jdGlvbnNcbmZ1bmN0aW9uIGhhbmRsZVdpbmRvd0FyZ3MoYXJnczogQXJyYXk8c3RyaW5nPik6IHN0cmluZyB7XG4gICAgaWYoIWFyZ3NbMV0pIFxuICAgICAgICByZXR1cm4gXCJXaW5kb3cgYXJndW1lbnQgbm90IHNwZWNpZmllZCFcIjtcblxuICAgIGNvbnN0IHNwZWNpZmllZFdpbmRvdzogc3RyaW5nID0gYXJnc1sxXTtcblxuICAgIGlmKCFXaW5kb3dzLmdldERlZmF1bHQoKS5oYXNXaW5kb3coc3BlY2lmaWVkV2luZG93KSkgXG4gICAgICAgIHJldHVybiBgTmFtZSBcIiR7c3BlY2lmaWVkV2luZG93fVwiIG5vdCBmb3VuZCB3aW5kb3dzIG1hcCEgTWFrZSBzdXJlIHRvIGFkZCBuZXcgV2luZG93cyBvbiB0aGUgTWFwIWBcblxuICAgIHN3aXRjaChhcmdzWzBdKSB7XG4gICAgICAgIGNhc2UgXCJvcGVuXCI6XG4gICAgICAgICAgICBpZighV2luZG93cy5nZXREZWZhdWx0KCkuaXNWaXNpYmxlKHNwZWNpZmllZFdpbmRvdykpIHtcbiAgICAgICAgICAgICAgICBXaW5kb3dzLmdldERlZmF1bHQoKS5vcGVuKHNwZWNpZmllZFdpbmRvdyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGBTZXR0aW5nIHZpc2liaWxpdHkgb2Ygd2luZG93IFwiJHthcmdzWzFdfVwiIHRvIHRydWVgO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gYFdpbmRvdyBpcyBhbHJlYWR5IG9wZW4sIGlnbm9yZWRgO1xuXG4gICAgICAgIGNhc2UgXCJjbG9zZVwiOlxuICAgICAgICAgICAgaWYoV2luZG93cy5nZXREZWZhdWx0KCkuaXNWaXNpYmxlKHNwZWNpZmllZFdpbmRvdykpIHtcbiAgICAgICAgICAgICAgICBXaW5kb3dzLmdldERlZmF1bHQoKS5jbG9zZShzcGVjaWZpZWRXaW5kb3cpO1xuICAgICAgICAgICAgICAgIHJldHVybiBgU2V0dGluZyB2aXNpYmlsaXR5IG9mIHdpbmRvdyBcIiR7YXJnc1sxXX1cIiB0byBmYWxzZWBcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGBXaW5kb3cgaXMgYWxyZWFkeSBjbG9zZWQsIGlnbm9yZWRgXG5cbiAgICAgICAgY2FzZSBcInRvZ2dsZVwiOlxuICAgICAgICAgICAgaWYoIVdpbmRvd3MuZ2V0RGVmYXVsdCgpLmlzVmlzaWJsZShzcGVjaWZpZWRXaW5kb3cpKSB7XG4gICAgICAgICAgICAgICAgV2luZG93cy5nZXREZWZhdWx0KCkub3BlbihzcGVjaWZpZWRXaW5kb3cpO1xuICAgICAgICAgICAgICAgIHJldHVybiBgVG9nZ2xlIG9wZW5pbmcgd2luZG93IFwiJHthcmdzWzFdfVwiYDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgV2luZG93cy5nZXREZWZhdWx0KCkuY2xvc2Uoc3BlY2lmaWVkV2luZG93KTtcbiAgICAgICAgICAgIHJldHVybiBgVG9nZ2xlIGNsb3Npbmcgd2luZG93IFwiJHthcmdzWzFdfVwiYFxuICAgIH1cblxuICAgIHJldHVybiBcIkNvdWxkbid0IGhhbmRsZSB3aW5kb3cgbWFuYWdlbWVudCBhcmd1bWVudHNcIlxufVxuXG5mdW5jdGlvbiBoYW5kbGVWb2x1bWVBcmdzKGFyZ3M6IEFycmF5PHN0cmluZz4pIHtcbiAgICBpZighYXJnc1sxXSkgXG4gICAgICAgIHJldHVybiBgUGxlYXNlIHNwZWNpZnkgd2hhdCB5b3Ugd2FudCB0byBkbyFcXG5cXG4ke3ZvbHVtZUhlbHAoKX1gXG5cbiAgICBpZigvXihzaW5rfHNvdXJjZSkoXFwtaW5jcmVhc2V8XFwtZGVjcmVhc2V8XFwtc2V0KSQvLnRlc3QoYXJnc1sxXSkgJiYgIWFyZ3NbMl0pXG4gICAgICAgIHJldHVybiBgWW91IGZvcmdvdCB0byBhZGQgYSB2YWx1ZSB0byBiZSBzZXQhYDtcblxuICAgIGlmKE51bWJlci5pc05hTihOdW1iZXIucGFyc2VGbG9hdChhcmdzWzJdKSkgJiYgTnVtYmVyLmlzU2FmZUludGVnZXIoTnVtYmVyLnBhcnNlRmxvYXQoYXJnc1syXSkpKSBcbiAgICAgICAgcmV0dXJuIGBBcmd1bWVudCBcIiR7YXJnc1syXX0gaXMgbm90IGEgdmFsaWQgbnVtYmVyISBQbGVhc2UgdXNlIGludGVnZXJzXCJgO1xuXG4gICAgY29uc3QgY29tbWFuZDogQXJyYXk8c3RyaW5nPiA9IGFyZ3NbMV0uc3BsaXQoJy0nKTtcblxuICAgIGlmKC9oZWxwLy50ZXN0KGFyZ3NbMV0pKVxuICAgICAgICByZXR1cm4gdm9sdW1lSGVscCgpO1xuXG4gICAgc3dpdGNoKGNvbW1hbmRbMV0pIHtcbiAgICAgICAgY2FzZSBcInNldFwiOlxuICAgICAgICAgICAgY29tbWFuZFswXSA9PT0gXCJzaW5rXCIgPyBcbiAgICAgICAgICAgICAgICBXaXJlcGx1bWJlci5nZXREZWZhdWx0KCkuc2V0U2lua1ZvbHVtZShOdW1iZXIucGFyc2VJbnQoYXJnc1syXSkpXG4gICAgICAgICAgICA6IFdpcmVwbHVtYmVyLmdldERlZmF1bHQoKS5zZXRTb3VyY2VWb2x1bWUoTnVtYmVyLnBhcnNlSW50KGFyZ3NbMl0pKVxuICAgICAgICAgICAgcmV0dXJuIGBEb25lISBTZXQgJHtjb21tYW5kWzBdfSB2b2x1bWUgdG8gJHthcmdzWzJdfWA7XG5cbiAgICAgICAgY2FzZSBcIm11dGVcIjpcbiAgICAgICAgICAgIGNvbW1hbmRbMF0gPT09IFwic2lua1wiID8gXG4gICAgICAgICAgICAgICAgV2lyZXBsdW1iZXIuZ2V0RGVmYXVsdCgpLnRvZ2dsZU11dGVTaW5rKClcbiAgICAgICAgICAgIDogV2lyZXBsdW1iZXIuZ2V0RGVmYXVsdCgpLnRvZ2dsZU11dGVTb3VyY2UoKVxuXG4gICAgICAgICAgICByZXR1cm4gYERvbmUgdG9nZ2xpbmcgbXV0ZSFgO1xuXG4gICAgICAgIGNhc2UgXCJpbmNyZWFzZVwiOlxuICAgICAgICAgICAgY29tbWFuZFswXSA9PT0gXCJzaW5rXCIgP1xuICAgICAgICAgICAgICAgIFdpcmVwbHVtYmVyLmdldERlZmF1bHQoKS5pbmNyZWFzZVNpbmtWb2x1bWUoTnVtYmVyLnBhcnNlSW50KGFyZ3NbMl0pKVxuICAgICAgICAgICAgOiBXaXJlcGx1bWJlci5nZXREZWZhdWx0KCkuaW5jcmVhc2VTb3VyY2VWb2x1bWUoTnVtYmVyLnBhcnNlSW50KGFyZ3NbMl0pKVxuXG4gICAgICAgICAgICBDb25maWcuZ2V0RGVmYXVsdCgpLmdldFByb3BlcnR5KFwibWlzYy5wbGF5X2JlbGxfb25fdm9sdW1lX2NoYW5nZVwiLCBcImJvb2xlYW5cIikgPT09IHRydWUgJiZcbiAgICAgICAgICAgICAgICBwbGF5U3lzdGVtQmVsbCgpO1xuXG4gICAgICAgICAgICByZXR1cm4gYERvbmUgaW5jcmVhc2luZyB2b2x1bWUgYnkgJHthcmdzWzJdfWA7XG5cbiAgICAgICAgY2FzZSBcImRlY3JlYXNlXCI6XG4gICAgICAgICAgICBjb21tYW5kWzBdID09PSBcInNpbmtcIiA/XG4gICAgICAgICAgICAgICAgV2lyZXBsdW1iZXIuZ2V0RGVmYXVsdCgpLmRlY3JlYXNlU2lua1ZvbHVtZShOdW1iZXIucGFyc2VJbnQoYXJnc1syXSkpXG4gICAgICAgICAgICA6IFdpcmVwbHVtYmVyLmdldERlZmF1bHQoKS5kZWNyZWFzZVNvdXJjZVZvbHVtZShOdW1iZXIucGFyc2VJbnQoYXJnc1syXSkpXG5cbiAgICAgICAgICAgIENvbmZpZy5nZXREZWZhdWx0KCkuZ2V0UHJvcGVydHkoXCJtaXNjLnBsYXlfYmVsbF9vbl92b2x1bWVfY2hhbmdlXCIsIFwiYm9vbGVhblwiKSA9PT0gdHJ1ZSAmJlxuICAgICAgICAgICAgICAgIHBsYXlTeXN0ZW1CZWxsKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBgRG9uZSBkZWNyZWFzaW5nIHZvbHVtZSB0byAke2FyZ3NbMl19YDtcbiAgICB9XG5cbiAgICByZXR1cm4gYENvdWxkbid0IHJlc29sdmUgYXJndW1lbnRzISBcIiR7YXJncy5qb2luKCcgJykucmVwbGFjZShuZXcgUmVnRXhwKGBeJHthcmdzWzBdfWApLCBcIlwiKX1cImA7XG5cbiAgICBmdW5jdGlvbiB2b2x1bWVIZWxwKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBgXG5Db250cm9sIHNwZWFrZXIgYW5kIG1pY3JvcGhvbmUgdm9sdW1lcyBlYXNpbHkhXG5PcHRpb25zOlxuICAoc2lua3xzb3VyY2UpLXNldCBbbnVtYmVyXTogc2V0IHNwZWFrZXIvbWljcm9waG9uZSB2b2x1bWUuXG4gIChzaW5rfHNvdXJjZSktbXV0ZTogdG9nZ2xlIG11dGUgZm9yIHRoZSBzcGVha2VyL21pY3JvcGhvbmUgZGV2aWNlLlxuICAoc2lua3xzb3VyY2UpLWluY3JlYXNlIFtudW1iZXJdOiBpbmNyZWFzZXMgc3BlYWtlci9taWNyb3Bob25lIHZvbHVtZS5cbiAgKHNpbmt8c291cmNlKS1kZWNyZWFzZSBbbnVtYmVyXTogZGVjcmVhc2VzIHNwZWFrZXIvbWljcm9waG9uZSB2b2x1bWUuXG5gLnRyaW0oKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdldEhlbHAoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYE1hbmFnZSBBc3RhbCBXaW5kb3dzIGFuZCBkbyBtb3JlIHN0dWZmLiBGcm9tXG4gICAgICAgIHJldHJvemlubmRldidzIEh5cHJsYW5kIERvdHMsIHVzaW5nIEFzdGFsIGFuZCBBR1MgYnkgQXlsdXIuXG5cbiAgICAgICAgV2luZG93IGFuZCBBdWRpbyBvcHRpb25zOlxuICAgICAgICAgIG9wZW4gICBbd2luZG93XTogb3BlbnMgdGhlIHNwZWNpZmllZCB3aW5kb3cuXG4gICAgICAgICAgY2xvc2UgIFt3aW5kb3ddOiBjbG9zZXMgYWxsIGluc3RhbmNlcyBvZiBzcGVjaWZpZWQgd2luZG93LlxuICAgICAgICAgIHRvZ2dsZSBbd2luZG93XTogdG9nZ2xlLW9wZW4vY2xvc2UgdGhlIHNwZWNpZmllZCB3aW5kb3cuXG4gICAgICAgICAgd2luZG93czogbGlzdCBzaGVsbCB3aW5kb3dzLlxuICAgICAgICAgIHJlbG9hZDogcXVpdCB0aGlzIGluc3RhbmNlIGFuZCBzdGFydCBhIG5ldyBvbmUuXG4gICAgICAgICAgdm9sdW1lOiBzcGVha2VyIGFuZCBtaWNyb3Bob25lIHZvbHVtZSBjb250cm9sbGVyLCBzZWUgXCJ2b2x1bWUgaGVscFwiLlxuICAgICAgICAgIGgsIGhlbHA6IHNob3dzIHRoaXMgaGVscCBtZXNzYWdlLlxuICAgICAgICBcbiAgICAgICAgT3RoZXIgb3B0aW9uczpcbiAgICAgICAgICBydW5uZXIgW2luaXRpYWxfdGV4dF06IG9wZW4gdGhlIGFwcGxpY2F0aW9uIHJ1bm5lciwgb3B0aW9uYWxseSBhZGQgYW4gaW5pdGlhbCBzZWFyY2guXG4gICAgICAgICAgcGVlay13b3Jrc3BhY2UtbnVtOiBwZWVrIHRoZSB3b3Jrc3BhY2UgbnVtYmVycyBvbiBiYXIgd2luZG93LlxuXG4gICAgICAgIDIwMjUgKGMpIHJldHJvemlubmRldidzIEh5cHJsYW5kLURvdHMsIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAgICAgICAgaHR0cHM6Ly9naXRodWIuY29tL3JldHJvemlubmRldi9IeXBybGFuZC1Eb3RzXG4gICAgYC5zcGxpdCgnXFxuJykubWFwKGwgPT4gbC5yZXBsYWNlKC9eIHs4fS8sIFwiXCIpKS5qb2luKCdcXG4nKTtcbn1cbiIsICJpbXBvcnQgeyBSZXN1bHRXaWRnZXQsIFJlc3VsdFdpZGdldFByb3BzIH0gZnJvbSBcIi4uLy4uL3dpZGdldC9ydW5uZXIvUmVzdWx0V2lkZ2V0XCI7XG5pbXBvcnQgQXN0YWxBcHBzIGZyb20gXCJnaTovL0FzdGFsQXBwc1wiO1xuaW1wb3J0IHsgZXhlY0FwcCwgZ2V0QXN0YWxBcHBzLCBsb29rdXBJY29uLCB1cGRhdGVBcHBzIH0gZnJvbSBcIi4uLy4uL3NjcmlwdHMvYXBwc1wiO1xuaW1wb3J0IHsgUnVubmVyIH0gZnJvbSBcIi4uL1J1bm5lclwiO1xuXG5leHBvcnQgY29uc3QgUGx1Z2luQXBwcyA9IHtcbiAgICAvLyBEbyBub3QgcHJvdmlkZSBwcmVmaXgsIHNvIGl0IGFsd2F5cyBydW5zLlxuICAgIG5hbWU6IFwiQXBwc1wiLFxuICAgIC8vIGFzeW5jaHJvbm91c2x5LXJlZnJlc2ggYXBwcyBsaXN0IG9uIGluaXRcbiAgICBpbml0OiBhc3luYyAoKSA9PiB1cGRhdGVBcHBzKCksXG4gICAgaGFuZGxlOiAodGV4dDogc3RyaW5nKSA9PiB7XG4gICAgICAgIHJldHVybiBnZXRBc3RhbEFwcHMoKS5mdXp6eV9xdWVyeSh0ZXh0KS5tYXAoKGFwcDogQXN0YWxBcHBzLkFwcGxpY2F0aW9uKSA9PlxuICAgICAgICAgICAgbmV3IFJlc3VsdFdpZGdldCh7XG4gICAgICAgICAgICAgICAgdGl0bGU6IGFwcC5nZXRfbmFtZSgpLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBhcHAuZ2V0X2Rlc2NyaXB0aW9uKCksXG4gICAgICAgICAgICAgICAgaWNvbjogbG9va3VwSWNvbihhcHAuaWNvbk5hbWUpID8gYXBwLmljb25OYW1lIDogXCJhcHBsaWNhdGlvbi14LWV4ZWN1dGFibGUtc3ltYm9saWNcIixcbiAgICAgICAgICAgICAgICBvbkNsaWNrOiAoKSA9PiBleGVjQXBwKGFwcClcbiAgICAgICAgICAgIH0gYXMgUmVzdWx0V2lkZ2V0UHJvcHMpXG4gICAgICAgICk7XG4gICAgfVxufSBhcyBSdW5uZXIuUGx1Z2luO1xuIiwgImltcG9ydCB7IFJlc3VsdFdpZGdldCwgUmVzdWx0V2lkZ2V0UHJvcHMgfSBmcm9tIFwiLi4vLi4vd2lkZ2V0L3J1bm5lci9SZXN1bHRXaWRnZXRcIjtcbmltcG9ydCB7IFJ1bm5lciB9IGZyb20gXCIuLi9SdW5uZXJcIjtcbmltcG9ydCB7IE5vdGlmaWNhdGlvbnMgfSBmcm9tIFwiLi4vLi4vc2NyaXB0cy9ub3RpZmljYXRpb25zXCI7XG5cbmltcG9ydCBHTGliIGZyb20gXCJnaTovL0dMaWI/dmVyc2lvbj0yLjBcIjtcbmltcG9ydCBHaW8gZnJvbSBcImdpOi8vR2lvP3ZlcnNpb249Mi4wXCI7XG5cblxuZXhwb3J0IGNvbnN0IFBsdWdpblNoZWxsID0gKCgpID0+IHtcblxuICAgIGNvbnN0IHNoZWxsID0gR0xpYi5nZXRlbnYoXCJTSEVMTFwiKSA/PyBcIi9iaW4vc2hcIjtcbiAgICBjb25zdCBwcm9jTGF1bmNoZXIgPSBHaW8uU3VicHJvY2Vzc0xhdW5jaGVyLm5ldyhcbiAgICAgICAgR2lvLlN1YnByb2Nlc3NGbGFncy5TVERPVVRfUElQRSB8IEdpby5TdWJwcm9jZXNzRmxhZ3MuU1RERVJSX1BJUEUpO1xuXG4gICAgcHJvY0xhdW5jaGVyLnNldF9jd2QoR0xpYi5nZXRfaG9tZV9kaXIoKSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBwcmVmaXg6ICchJyxcbiAgICAgICAgcHJpb3JpdGl6ZTogdHJ1ZSxcbiAgICAgICAgaGFuZGxlOiAoaW5wdXQ6IHN0cmluZyk6IFJlc3VsdFdpZGdldCA9PiB7XG4gICAgICAgICAgICBsZXQgc2hvd091dHB1dE5vdGlmOiBib29sZWFuID0gZmFsc2U7XG4gICAgICAgICAgICBpZihpbnB1dC5zdGFydHNXaXRoKCchJykpIHtcbiAgICAgICAgICAgICAgICBpbnB1dCA9IGlucHV0LnJlcGxhY2UoJyEnLCBcIlwiKTtcbiAgICAgICAgICAgICAgICBzaG93T3V0cHV0Tm90aWYgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBjb21tYW5kID0gaW5wdXQgPyBHTGliLnNoZWxsX3BhcnNlX2FyZ3YoaW5wdXQpIDogdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICByZXR1cm4gbmV3IFJlc3VsdFdpZGdldCh7XG4gICAgICAgICAgICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZighY29tbWFuZCB8fCAhY29tbWFuZFswXSkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHByb2MgPSBwcm9jTGF1bmNoZXIuc3Bhd252KFsgc2hlbGwsIFwiLWNcIiwgYCR7aW5wdXR9YCBdKTtcbiAgICAgICAgICAgICAgICAgICAgcHJvYy5jb21tdW5pY2F0ZV91dGY4X2FzeW5jKG51bGwsIG51bGwsIChfLCBhc3luY1Jlc3VsdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgWyBzdWNjZXNzLCBzdGRvdXQsIHN0ZGVyciBdID0gcHJvYy5jb21tdW5pY2F0ZV91dGY4X2ZpbmlzaChhc3luY1Jlc3VsdCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFzdWNjZXNzIHx8IHN0ZGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5vdGlmaWNhdGlvbnMuZ2V0RGVmYXVsdCgpLnNlbmROb3RpZmljYXRpb24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBOYW1lOiBzaGVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VtbWFyeTogXCJDb21tYW5kIGVycm9yXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvZHk6IGBBbiBlcnJvciBvY2N1cnJlZCBvbiBcXGAke2lucHV0fVxcYC4gU3RkZXJyOiAke3N0ZGVycn1gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFzaG93T3V0cHV0Tm90aWYpIHJldHVybjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgTm90aWZpY2F0aW9ucy5nZXREZWZhdWx0KCkuc2VuZE5vdGlmaWNhdGlvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwTmFtZTogc2hlbGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VtbWFyeTogXCJDb21tYW5kIG91dHB1dFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvZHk6IHN0ZG91dFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdGl0bGU6IGBSdW4gJHtpbnB1dCA/IGAgXFxgJHtpbnB1dH1cXGBgIDogYHdpdGggJHtzaGVsbC5zcGxpdCgnLycpW3NoZWxsLnNwbGl0KCcvJykubGVuZ3RoLTFdfWB9YCxcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogKGlucHV0IHx8IHNob3dPdXRwdXROb3RpZikgJiYgYCR7aW5wdXQgPyBgJHtzaGVsbH1cXHRgIDogXCJcIn0keyBzaG93T3V0cHV0Tm90aWYgPyBcIihzaG93aW5nIG91dHB1dCBvbiBub3RpZmljYXRpb24pXCIgOiBcIlwiIH1gLFxuICAgICAgICAgICAgICAgIGljb246IFwidXRpbGl0aWVzLXRlcm1pbmFsLXN5bWJvbGljXCJcbiAgICAgICAgICAgIH0gYXMgUmVzdWx0V2lkZ2V0UHJvcHMpXG4gICAgICAgIH1cbiAgICB9IGFzIFJ1bm5lci5QbHVnaW5cbn0pKCk7XG4iLCAiaW1wb3J0IEFzdGFsSHlwcmxhbmQgZnJvbSBcImdpOi8vQXN0YWxIeXBybGFuZFwiO1xuaW1wb3J0IHsgUmVzdWx0V2lkZ2V0LCBSZXN1bHRXaWRnZXRQcm9wcyB9IGZyb20gXCIuLi8uLi93aWRnZXQvcnVubmVyL1Jlc3VsdFdpZGdldFwiO1xuaW1wb3J0IHsgUnVubmVyIH0gZnJvbSBcIi4uL1J1bm5lclwiO1xuXG5jb25zdCBzZWFyY2hFbmdpbmVzID0ge1xuICAgIGR1Y2tkdWNrZ286IFwiaHR0cHM6Ly9kdWNrZHVja2dvLmNvbS8/cT1cIixcbiAgICBnb29nbGU6IFwiaHR0cHM6Ly9nb29nbGUuY29tL3NlYXJjaD9xPVwiLFxuICAgIHlhaG9vOiBcImh0dHBzOi8vc2VhcmNoLnlhaG9vLmNvbS9zZWFyY2g/cD1cIlxufTtcblxubGV0IGVuZ2luZTogc3RyaW5nID0gc2VhcmNoRW5naW5lcy5nb29nbGU7XG5cbmV4cG9ydCBjb25zdCBQbHVnaW5XZWJTZWFyY2ggPSB7XG4gICAgcHJlZml4OiAnPycsXG4gICAgbmFtZTogXCJXZWIgU2VhcmNoXCIsXG4gICAgcHJpb3JpdGl6ZTogdHJ1ZSxcblxuICAgIGhhbmRsZTogKHNlYXJjaDogc3RyaW5nKTogUmVzdWx0V2lkZ2V0ID0+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZXN1bHRXaWRnZXQoe1xuICAgICAgICAgICAgaWNvbjogXCJzeXN0ZW0tc2VhcmNoLXN5bWJvbGljXCIsXG4gICAgICAgICAgICB0aXRsZTogc2VhcmNoIHx8IFwiVHlwZSB5b3VyIHNlYXJjaC4uLlwiLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IGBTZWFyY2ggdGhlIFdlYmAsXG4gICAgICAgICAgICBvbkNsaWNrOiAoKSA9PiBBc3RhbEh5cHJsYW5kLmdldF9kZWZhdWx0KCkuZGlzcGF0Y2goXG4gICAgICAgICAgICAgICAgXCJleGVjXCIsIFxuICAgICAgICAgICAgICAgIGB4ZGctb3BlbiBcXFwiJHtlbmdpbmUgKyBzZWFyY2h9XFxcImBcbiAgICAgICAgICAgIClcbiAgICAgICAgfSBhcyBSZXN1bHRXaWRnZXRQcm9wcyk7XG4gICAgfVxufSBhcyBSdW5uZXIuUGx1Z2luO1xuIiwgImltcG9ydCB7IGNyZWF0ZUJpbmRpbmcsIGNyZWF0ZUNvbXB1dGVkIH0gZnJvbSBcImFnc1wiO1xuaW1wb3J0IHsgUmVzdWx0V2lkZ2V0LCBSZXN1bHRXaWRnZXRQcm9wcyB9IGZyb20gXCIuLi8uLi93aWRnZXQvcnVubmVyL1Jlc3VsdFdpZGdldFwiO1xuaW1wb3J0IHsgUnVubmVyIH0gZnJvbSBcIi4uL1J1bm5lclwiO1xuaW1wb3J0IEFzdGFsTXByaXMgZnJvbSBcImdpOi8vQXN0YWxNcHJpc1wiO1xuaW1wb3J0IHsgcGxheWVyIH0gZnJvbSBcIi4uLy4uL3dpZGdldC9iYXIvTWVkaWFcIjtcblxuZXhwb3J0IGNvbnN0IFBsdWdpbk1lZGlhID0ge1xuICAgIHByZWZpeDogXCI6XCIsXG4gICAgaGFuZGxlKCkge1xuICAgICAgICBpZighcGxheWVyLmdldCgpLmF2YWlsYWJsZSkgcmV0dXJuIG5ldyBSZXN1bHRXaWRnZXQoe1xuICAgICAgICAgICAgaWNvbjogXCJmb2xkZXItbXVzaWMtc3ltYm9saWNcIixcbiAgICAgICAgICAgIHRpdGxlOiBcIkNvdWxkbid0IGZpbmQgYW55IHBsYXllcnNcIixcbiAgICAgICAgICAgIGNsb3NlT25DbGljazogZmFsc2UsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJObyBtZWRpYSAvIHBsYXllciBmb3VuZCB3aXRoIG1wcmlzXCJcbiAgICAgICAgfSBhcyBSZXN1bHRXaWRnZXRQcm9wcyk7XG5cbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIG5ldyBSZXN1bHRXaWRnZXQoe1xuICAgICAgICAgICAgICAgIGljb246IGNyZWF0ZUJpbmRpbmcocGxheWVyLmdldCgpLCBcInBsYXliYWNrU3RhdHVzXCIpLmFzKChzdGF0dXMpID0+IHN0YXR1cyA9PT0gQXN0YWxNcHJpcy5QbGF5YmFja1N0YXR1cy5QTEFZSU5HID9cbiAgICAgICAgICAgICAgICAgICAgXCJtZWRpYS1wbGF5YmFjay1wYXVzZS1zeW1ib2xpY1wiXG4gICAgICAgICAgICAgICAgOiBcIm1lZGlhLXBsYXliYWNrLXN0YXJ0LXN5bWJvbGljXCIpLFxuICAgICAgICAgICAgICAgIGNsb3NlT25DbGljazogZmFsc2UsXG4gICAgICAgICAgICAgICAgdGl0bGU6IGNyZWF0ZUNvbXB1dGVkKFtcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlQmluZGluZyhwbGF5ZXIuZ2V0KCksIFwidGl0bGVcIiksXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZUJpbmRpbmcocGxheWVyLmdldCgpLCBcImFydGlzdFwiKSxcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlQmluZGluZyhwbGF5ZXIuZ2V0KCksIFwicGxheWJhY2tTdGF0dXNcIilcbiAgICAgICAgICAgICAgICBdLCAodGl0bGUsIGFydGlzdCwgc3RhdHVzKSA9PiBgJHsgc3RhdHVzID09PSBBc3RhbE1wcmlzLlBsYXliYWNrU3RhdHVzLlBMQVlJTkcgP1xuICAgICAgICAgICAgICAgICAgICBcIlBhdXNlXCIgOiBcIlBsYXlcIlxuICAgICAgICAgICAgICAgIH0gJHt0aXRsZX0gfCAke2FydGlzdH1gKSxcbiAgICAgICAgICAgICAgICBvbkNsaWNrOiAoKSA9PiBwbGF5ZXIuZ2V0KCkucGxheV9wYXVzZSgpXG4gICAgICAgICAgICB9IGFzIFJlc3VsdFdpZGdldFByb3BzKSxcbiAgICAgICAgICAgIG5ldyBSZXN1bHRXaWRnZXQoe1xuICAgICAgICAgICAgICAgIGljb246IFwibWVkaWEtc2tpcC1iYWNrd2FyZC1zeW1ib2xpY1wiLFxuICAgICAgICAgICAgICAgIGNsb3NlT25DbGljazogZmFsc2UsXG4gICAgICAgICAgICAgICAgdGl0bGU6IGNyZWF0ZUNvbXB1dGVkKFtcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlQmluZGluZyhwbGF5ZXIuZ2V0KCksIFwidGl0bGVcIiksXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZUJpbmRpbmcocGxheWVyLmdldCgpLCBcImFydGlzdFwiKVxuICAgICAgICAgICAgICAgIF0sICh0aXRsZSwgYXJ0aXN0KSA9PlxuICAgICAgICAgICAgICAgICAgICBgR28gUHJldmlvdXMgJHsgdGl0bGUgPyB0aXRsZSA6IHBsYXllci5nZXQoKS5idXNOYW1lIH0keyBhcnRpc3QgPyBgIHwgJHthcnRpc3R9YCA6IFwiXCIgfWBcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIG9uQ2xpY2s6ICgpID0+IHBsYXllci5nZXQoKS5jYW5Hb1ByZXZpb3VzICYmIHBsYXllci5nZXQoKS5wcmV2aW91cygpXG4gICAgICAgICAgICB9IGFzIFJlc3VsdFdpZGdldFByb3BzKSxcbiAgICAgICAgICAgIG5ldyBSZXN1bHRXaWRnZXQoe1xuICAgICAgICAgICAgICAgIGljb246IFwibWVkaWEtc2tpcC1mb3J3YXJkLXN5bWJvbGljXCIsXG4gICAgICAgICAgICAgICAgY2xvc2VPbkNsaWNrOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB0aXRsZTogY3JlYXRlQ29tcHV0ZWQoW1xuICAgICAgICAgICAgICAgICAgICBjcmVhdGVCaW5kaW5nKHBsYXllci5nZXQoKSwgXCJ0aXRsZVwiKSxcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlQmluZGluZyhwbGF5ZXIuZ2V0KCksIFwiYXJ0aXN0XCIpXG4gICAgICAgICAgICAgICAgXSwgKHRpdGxlLCBhcnRpc3QpID0+XG4gICAgICAgICAgICAgICAgICAgIGBHbyBOZXh0ICR7IHRpdGxlID8gdGl0bGUgOiBwbGF5ZXIuZ2V0KCkuYnVzTmFtZSB9JHsgYXJ0aXN0ID8gYCB8ICR7YXJ0aXN0fWAgOiBcIlwiIH1gXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBvbkNsaWNrOiAoKSA9PiBwbGF5ZXIuZ2V0KCkuY2FuR29OZXh0ICYmIHBsYXllci5nZXQoKS5uZXh0KClcbiAgICAgICAgICAgIH0gYXMgUmVzdWx0V2lkZ2V0UHJvcHMpXG4gICAgICAgIF1cbiAgICB9LFxufSBhcyBSdW5uZXIuUGx1Z2luO1xuIiwgImltcG9ydCB7IFdhbGxwYXBlciB9IGZyb20gXCIuLi8uLi9zY3JpcHRzL3dhbGxwYXBlclwiO1xuaW1wb3J0IHsgUnVubmVyIH0gZnJvbSBcIi4uL1J1bm5lclwiO1xuaW1wb3J0IHsgUmVzdWx0V2lkZ2V0LCBSZXN1bHRXaWRnZXRQcm9wcyB9IGZyb20gXCIuLi8uLi93aWRnZXQvcnVubmVyL1Jlc3VsdFdpZGdldFwiO1xuXG5pbXBvcnQgR2lvIGZyb20gXCJnaTovL0dpbz92ZXJzaW9uPTIuMFwiO1xuXG5cbmNsYXNzIF9QbHVnaW5XYWxscGFwZXJzIGltcGxlbWVudHMgUnVubmVyLlBsdWdpbiB7XG4gICAgcHJlZml4ID0gXCIjXCI7XG4gICAgcHJpb3JpdGl6ZSA9IHRydWU7XG4gICAgI2ZpbGVzOiAoQXJyYXk8c3RyaW5nPnx1bmRlZmluZWQpO1xuXG4gICAgaW5pdCgpIHtcbiAgICAgICAgdGhpcy4jZmlsZXMgPSBbXTtcbiAgICAgICAgY29uc3QgZGlyID0gR2lvLkZpbGUubmV3X2Zvcl9wYXRoKFdhbGxwYXBlci5nZXREZWZhdWx0KCkud2FsbHBhcGVyc1BhdGgpO1xuICAgICAgICBpZihkaXIucXVlcnlfZmlsZV90eXBlKG51bGwsIG51bGwpID09PSBHaW8uRmlsZVR5cGUuRElSRUNUT1JZKSB7XG4gICAgICAgICAgICBmb3IoY29uc3QgZmlsZSBvZiBkaXIuZW51bWVyYXRlX2NoaWxkcmVuKFxuICAgICAgICAgICAgICAgIFwic3RhbmRhcmQ6OipcIixcbiAgICAgICAgICAgICAgICBHaW8uRmlsZVF1ZXJ5SW5mb0ZsYWdzLk5PRk9MTE9XX1NZTUxJTktTLFxuICAgICAgICAgICAgICAgIG51bGxcbiAgICAgICAgICAgICkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiNmaWxlcy5wdXNoKGAke2Rpci5nZXRfcGF0aCgpfS8ke2ZpbGUuZ2V0X25hbWUoKX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhhbmRsZShzZWFyY2g6IHN0cmluZykge1xuICAgICAgICBpZih0aGlzLiNmaWxlcyEubGVuZ3RoID4gMClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiNmaWxlcyEuZmlsdGVyKGZpbGUgPT4gLy8gbm90IHRoZSBiZXN0IHdheSB0byBzZWFyY2gsIGJ1dCBpdCB3b3Jrc1xuICAgICAgICAgICAgICAgIFJ1bm5lci5yZWdFeE1hdGNoKHNlYXJjaCwgZmlsZS5zcGxpdCgnLycpW2ZpbGUuc3BsaXQoJy8nKS5sZW5ndGgtMV0pXG4gICAgICAgICAgICApLm1hcChwYXRoID0+IG5ldyBSZXN1bHRXaWRnZXQoe1xuICAgICAgICAgICAgICAgIHRpdGxlOiBwYXRoLnNwbGl0KCcvJylbcGF0aC5zcGxpdCgnLycpLmxlbmd0aC0xXS5yZXBsYWNlKC9cXC4uKiQvLCBcIlwiKSxcbiAgICAgICAgICAgICAgICBvbkNsaWNrOiAoKSA9PiBXYWxscGFwZXIuZ2V0RGVmYXVsdCgpLnNldFdhbGxwYXBlcihwYXRoKVxuICAgICAgICAgICAgfSBhcyBSZXN1bHRXaWRnZXRQcm9wcykpO1xuXG4gICAgICAgIHJldHVybiBuZXcgUmVzdWx0V2lkZ2V0KHtcbiAgICAgICAgICAgIHRpdGxlOiBcIk5vIHdhbGxwYXBlcnMgZm91bmQhXCIsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJEZWZpbmUgdGhlICRXQUxMUEFQRVJTIHZhcmlhYmxlIG9uIEh5cHJsYW5kIG9yIGNyZWF0ZSBhIH4vd2FsbHBhcGVycyBkaXJlY3RvcnlcIixcbiAgICAgICAgICAgIGljb246IFwiaW1hZ2UtbWlzc2luZy1zeW1ib2xpY1wiXG4gICAgICAgIH0gYXMgUmVzdWx0V2lkZ2V0UHJvcHMpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IFBsdWdpbldhbGxwYXBlcnMgPSBuZXcgX1BsdWdpbldhbGxwYXBlcnMoKTtcbiIsICJpbXBvcnQgeyBtb25pdG9yRmlsZSwgcmVhZEZpbGUgfSBmcm9tIFwiYWdzL2ZpbGVcIjtcbmltcG9ydCB7IHRpbWVvdXQgfSBmcm9tIFwiYWdzL3RpbWVcIjtcbmltcG9ydCB7IGV4ZWMsIGV4ZWNBc3luYyB9IGZyb20gXCJhZ3MvcHJvY2Vzc1wiO1xuXG5pbXBvcnQgQXN0YWxJTyBmcm9tIFwiZ2k6Ly9Bc3RhbElPXCI7XG5pbXBvcnQgQXBwIGZyb20gXCJhZ3MvZ3RrNC9hcHBcIjtcbmltcG9ydCBHaW8gZnJvbSBcImdpOi8vR2lvP3ZlcnNpb249Mi4wXCI7XG5pbXBvcnQgR0xpYiBmcm9tIFwiZ2k6Ly9HTGliP3ZlcnNpb249Mi4wXCI7XG5cblxuLyoqIGhhbmRsZXMgc3R5bGVzaGVldCBjb21waWxpbmcgYW5kIHJlbG9hZGluZyAqL1xuZXhwb3J0IGNsYXNzIFN0eWxlc2hlZXQge1xuICAgIHByaXZhdGUgc3RhdGljIGluc3RhbmNlOiBTdHlsZXNoZWV0O1xuICAgICN3YXRjaERlbGF5OiAoQXN0YWxJTy5UaW1lfHVuZGVmaW5lZCk7XG4gICAgI291dHB1dFBhdGggPSBHaW8uRmlsZS5uZXdfZm9yX3BhdGgoYCR7R0xpYi5nZXRfdXNlcl9zdGF0ZV9kaXIoKX0vYWdzL3N0eWxlYCk7XG4gICAgI3N0eWxlcyA9IFtcbiAgICAgICAgXCIuL3N0eWxlXCIsXG4gICAgICAgIFwiLi9zdHlsZS5zY3NzXCJcbiAgICBdO1xuXG4gICAgcHVibGljIGFzeW5jIGNvbXBpbGVTYXNzKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zb2xlLmxvZyhcIlN0eWxlc2hlZXQ6IENvbXBpbGluZyBTYXNzXCIpO1xuXG4gICAgICAgIGV4ZWMoYGJhc2ggLWMgXCJzYXNzICR7dGhpcy4jc3R5bGVzLm1hcChzdHlsZSA9PiBgLUkgJHtzdHlsZX1gKS5qb2luKCdcXHMnKX0gJHtcbiAgICAgICAgICAgIHRoaXMuI291dHB1dFBhdGguZ2V0X3BhdGgoKSF9L3N0eWxlLmNzc1wiYCk7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIHJlYXBwbHkoY3NzRmlsZVBhdGg6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zb2xlLmxvZyhcIlN0eWxlc2hlZXQ6IEFwcGx5aW5nIHN0eWxlc2hlZXRcIik7XG5cbiAgICAgICAgY29uc3QgY29udGVudCA9IHJlYWRGaWxlKGNzc0ZpbGVQYXRoKTtcblxuICAgICAgICBpZihjb250ZW50KSB7XG4gICAgICAgICAgICBBcHAucmVzZXRfY3NzKCk7XG4gICAgICAgICAgICBBcHAuYXBwbHlfY3NzKGNvbnRlbnQpO1xuXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlN0eWxlc2hlZXQ6IGRvbmUgYXBwbHlpbmcgc3R5bGVzaGVldCB0byBzaGVsbFwiKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYFN0eWxlc2hlZXQ6IEFuIGVycm9yIG9jY3VycmVkIHdoaWxlIHRyeWluZyB0byByZWFkIHRoZSBjc3MgZmlsZTogJHtcbiAgICAgICAgICAgIGNzc0ZpbGVQYXRofWApO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBjb21waWxlQXBwbHkoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGF3YWl0IHRoaXMuY29tcGlsZVNhc3MoKS5jYXRjaCgoZXJyOiBHaW8uSU9FcnJvckVudW0pID0+IFxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgU3R5bGVzaGVldDogQW4gRXJyb3Igb2NjdXJyZWQgYW5kIFNhc3MgY291bGRuJ3QgYmUgY29tcGlsZWQuIFN0ZGVycjpcXG4ke2Vyci5tZXNzYWdlID8gXG4gICAgICAgICAgICAgICAgYFxcdCR7ZXJyLm1lc3NhZ2V9XFxuYCA6IFwiXCJ9JHtlcnIuc3RhY2t9XFxuYClcbiAgICAgICAgKS50aGVuKCgpID0+IHRoaXMucmVhcHBseSh0aGlzLiNvdXRwdXRQYXRoLmdldF9wYXRoKCkhICsgXCIvc3R5bGUuY3NzXCIpKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGdldERlZmF1bHQoKTogU3R5bGVzaGVldCB7XG4gICAgICAgIGlmKCF0aGlzLmluc3RhbmNlKVxuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZSA9IG5ldyBTdHlsZXNoZWV0KCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaW5zdGFuY2U7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIChhc3luYyAoKSA9PiAhdGhpcy4jb3V0cHV0UGF0aC5xdWVyeV9leGlzdHMobnVsbCkgJiYgXG4gICAgICAgICAgICB0aGlzLiNvdXRwdXRQYXRoLm1ha2VfZGlyZWN0b3J5X3dpdGhfcGFyZW50cyhudWxsKSkoKTtcblxuICAgICAgICB0aGlzLiNzdHlsZXMubWFwKChwYXRoOiBzdHJpbmcpID0+XG4gICAgICAgICAgICBtb25pdG9yRmlsZShcbiAgICAgICAgICAgICAgICBgJHtwYXRofWAsXG4gICAgICAgICAgICAgICAgKGZpbGU6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZih0aGlzLiN3YXRjaERlbGF5IHx8IGZpbGUuZW5kc1dpdGgoJ34nKSB8fCBOdW1iZXIuaXNOYU4oZmlsZSkpIFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuI3dhdGNoRGVsYXkgPSB0aW1lb3V0KDI1MCwgKCkgPT4gdGhpcy4jd2F0Y2hEZWxheSA9IHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBTdHlsZXNoZWV0OiBcXGAke2ZpbGUuc3RhcnRzV2l0aChHTGliLmdldF9ob21lX2RpcigpKSA/IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGUucmVwbGFjZShHTGliLmdldF9ob21lX2RpcigpLCAnficpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGZpbGV9XFxgIGNoYW5nZWRgKVxuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29tcGlsZUFwcGx5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKVxuICAgICAgICApXG5cbiAgICAgICAgbW9uaXRvckZpbGUoXG4gICAgICAgICAgICBgJHtHTGliLmdldF91c2VyX2NhY2hlX2RpcigpfS93YWwvY29sb3JzLnNjc3NgLFxuICAgICAgICAgICAgKGZpbGU6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgIGV4ZWNBc3luYyhgYmFzaCAtYyBcImNwIC1mICR7ZmlsZX0gLi9zdHlsZS9fd2FsLnNjc3NcImApLmNhdGNoKHIgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBTdHlsZXNoZWV0OiBGYWlsZWQgdG8gY29weSBweXdhbCBzdHlsZXNoZWV0IHRvIHN0eWxlIGRpci4gU3RkZXJyOiAke3J9YCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxufVxuIiwgImltcG9ydCB7IEd0ayB9IGZyb20gXCJhZ3MvZ3RrNFwiO1xuaW1wb3J0IHsgQ2xpcGJvYXJkIH0gZnJvbSBcIi4uLy4uL3NjcmlwdHMvY2xpcGJvYXJkXCI7XG5pbXBvcnQgeyBSZXN1bHRXaWRnZXQgfSBmcm9tIFwiLi4vLi4vd2lkZ2V0L3J1bm5lci9SZXN1bHRXaWRnZXRcIjtcbmltcG9ydCB7IFJ1bm5lciB9IGZyb20gXCIuLi9SdW5uZXJcIjtcblxuXG5leHBvcnQgY29uc3QgUGx1Z2luQ2xpcGJvYXJkID0ge1xuICAgIHByZWZpeDogJz4nLFxuICAgIHByaW9yaXRpemU6IHRydWUsXG4gICAgaGFuZGxlOiAoc2VhcmNoKSA9PiB7XG4gICAgICAgIGlmKENsaXBib2FyZC5nZXREZWZhdWx0KCkuaGlzdG9yeS5sZW5ndGggPCAxKSBcbiAgICAgICAgICAgIHJldHVybiA8UmVzdWx0V2lkZ2V0IGljb249e1wiZWRpdC1wYXN0ZS1zeW1ib2xpY1wifSB0aXRsZT17XCJDbGlwYm9hcmQgaXMgZW1wdHlcIn1cbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbj17XCJDb3B5IHNvbWV0aGluZyBhbmQgaXQgd2lsbCBiZSBzaG93biByaWdodCBoZXJlIVwifVxuICAgICAgICAgICAgLz47XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gQ2xpcGJvYXJkLmdldERlZmF1bHQoKS5oaXN0b3J5LmZpbHRlcihpdGVtID0+IC8vIG5vdCB0aGUgYmVzdCB3YXkgdG8gc2VhcmNoLCBidXQgaXQgd29ya3NcbiAgICAgICAgICAgICAgICBSdW5uZXIucmVnRXhNYXRjaChzZWFyY2gsIGl0ZW0uaWQpIHx8IFJ1bm5lci5yZWdFeE1hdGNoKHNlYXJjaCwgaXRlbS5wcmV2aWV3KSkubWFwKChpdGVtKSA9PlxuICAgICAgICAgICAgPFJlc3VsdFdpZGdldCBpY29uPXs8R3RrLkxhYmVsIGxhYmVsPXtgJHtpdGVtLmlkfWB9IFxuICAgICAgICAgICAgICBjc3M9e1wiZm9udC1zaXplOiAxNnB4OyBtYXJnaW4tcmlnaHQ6IDhweDsgZm9udC13ZWlnaHQ6IDYwMDtcIn0gLz59IFxuICAgICAgICAgICAgICB0aXRsZT17aXRlbS5wcmV2aWV3fSBvbkNsaWNrPXsoKSA9PiBDbGlwYm9hcmQuZ2V0RGVmYXVsdCgpLnNlbGVjdEl0ZW0oaXRlbSkuY2F0Y2goKGVycjogRXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFJ1bm5lcihQbHVnaW4vQ2xpcGJvYXJkKTogQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgc2VsZWN0aW5nIGNsaXBib2FyZCBpdGVtLiBTdGRlcnI6XFxuJHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnIubWVzc2FnZSA/IGAke2Vyci5tZXNzYWdlfVxcbmAgOiBcIlwifVN0YWNrOiAke2Vyci5zdGFja31gXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8+KTtcbiAgICB9XG59IGFzIFJ1bm5lci5QbHVnaW47XG4iLCAiaW1wb3J0IHsgV2lyZXBsdW1iZXIgfSBmcm9tIFwiLi9zY3JpcHRzL3ZvbHVtZVwiO1xuaW1wb3J0IHsgaGFuZGxlQXJndW1lbnRzIH0gZnJvbSBcIi4vc2NyaXB0cy9hcmctaGFuZGxlclwiO1xuaW1wb3J0IHsgVGltZSwgdGltZW91dCB9IGZyb20gXCJhZ3MvdGltZVwiO1xuaW1wb3J0IHsgUnVubmVyIH0gZnJvbSBcIi4vcnVubmVyL1J1bm5lclwiO1xuaW1wb3J0IHsgUGx1Z2luQXBwcyB9IGZyb20gXCIuL3J1bm5lci9wbHVnaW5zL2FwcHNcIjtcbmltcG9ydCB7IFBsdWdpblNoZWxsIH0gZnJvbSBcIi4vcnVubmVyL3BsdWdpbnMvc2hlbGxcIjtcbmltcG9ydCB7IFBsdWdpbldlYlNlYXJjaCB9IGZyb20gXCIuL3J1bm5lci9wbHVnaW5zL3dlYnNlYXJjaFwiO1xuaW1wb3J0IHsgUGx1Z2luTWVkaWEgfSBmcm9tIFwiLi9ydW5uZXIvcGx1Z2lucy9tZWRpYVwiO1xuaW1wb3J0IHsgV2luZG93cyB9IGZyb20gXCIuL3dpbmRvd3NcIjtcbmltcG9ydCB7IE5vdGlmaWNhdGlvbnMgfSBmcm9tIFwiLi9zY3JpcHRzL25vdGlmaWNhdGlvbnNcIjtcbmltcG9ydCB7IFBsdWdpbldhbGxwYXBlcnMgfSBmcm9tIFwiLi9ydW5uZXIvcGx1Z2lucy93YWxscGFwZXJzXCI7XG5pbXBvcnQgeyBXYWxscGFwZXIgfSBmcm9tIFwiLi9zY3JpcHRzL3dhbGxwYXBlclwiO1xuaW1wb3J0IHsgU3R5bGVzaGVldCB9IGZyb20gXCIuL3NjcmlwdHMvc3R5bGVzaGVldFwiO1xuaW1wb3J0IHsgQ2xpcGJvYXJkIH0gZnJvbSBcIi4vc2NyaXB0cy9jbGlwYm9hcmRcIjtcbmltcG9ydCB7IFBsdWdpbkNsaXBib2FyZCB9IGZyb20gXCIuL3J1bm5lci9wbHVnaW5zL2NsaXBib2FyZFwiO1xuaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSBcIi4vc2NyaXB0cy9jb25maWdcIjtcblxuaW1wb3J0IEFwcCBmcm9tIFwiYWdzL2d0azQvYXBwXCJcbmltcG9ydCBHT2JqZWN0IGZyb20gXCJhZ3MvZ29iamVjdFwiO1xuaW1wb3J0IEFzdGFsTm90aWZkIGZyb20gXCJnaTovL0FzdGFsTm90aWZkXCI7XG5cblxubGV0IG9zZFRpbWVyOiAoVGltZXx1bmRlZmluZWQpLCBvc2RUaW1lb3V0ID0gMzUwMDtcbmxldCBjb25uZWN0aW9ucyA9IG5ldyBNYXA8R09iamVjdC5PYmplY3QsIChBcnJheTxudW1iZXI+IHwgbnVtYmVyKT4oKTtcblxuY29uc3QgZGVmYXVsdFdpbmRvd3M6IEFycmF5PGtleW9mIHR5cGVvZiBXaW5kb3dzLnByb3RvdHlwZS53aW5kb3dzPiA9IFsgXCJiYXJcIiBdO1xuY29uc3QgcnVubmVyUGx1Z2luczogQXJyYXk8UnVubmVyLlBsdWdpbj4gPSBbXG4gICAgUGx1Z2luQXBwcyxcbiAgICBQbHVnaW5TaGVsbCxcbiAgICBQbHVnaW5XZWJTZWFyY2gsXG4gICAgUGx1Z2luTWVkaWEsXG4gICAgUGx1Z2luV2FsbHBhcGVycyxcbiAgICBQbHVnaW5DbGlwYm9hcmRcbl07XG5cbkFwcC5zdGFydCh7XG4gICAgaW5zdGFuY2VOYW1lOiBcImFzdGFsXCIsXG4gICAgaWNvbnM6IFwiaWNvbnMvXCIsXG4gICAgcmVxdWVzdEhhbmRsZXI6IChyZXF1ZXN0OiBzdHJpbmcsIHJlc3BvbnNlOiAocmVzdWx0OiBhbnkpID0+IHZvaWQpOiB2b2lkID0+IHtcbiAgICAgICAgcmVzcG9uc2UoaGFuZGxlQXJndW1lbnRzKHJlcXVlc3QpKTtcbiAgICB9LFxuICAgIG1haW46ICguLi5fYXJnczogQXJyYXk8c3RyaW5nPikgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhgSW5pdGlhbGl6ZWQgYXN0YWwgaW5zdGFuY2UgYXM6ICR7IEFwcC5pbnN0YW5jZU5hbWUgfHwgXCJhc3RhbFwiIH1gKTtcblxuICAgICAgICBjb25zb2xlLmxvZyhcIkNvbmZpZzogaW5pdGlhbGl6aW5nIGNvbmZpZ3VyYXRpb24gZmlsZVwiKTtcbiAgICAgICAgQ29uZmlnLmdldERlZmF1bHQoKTtcblxuICAgICAgICBTdHlsZXNoZWV0LmdldERlZmF1bHQoKS5jb21waWxlQXBwbHkoKTtcblxuICAgICAgICBBcHAudmZ1bmNfZGlzcG9zZSA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRGlzY29ubmVjdGluZyBzdHVmZlwiKTtcbiAgICAgICAgICAgIGNvbm5lY3Rpb25zLmZvckVhY2goKHYsIGspID0+IEFycmF5LmlzQXJyYXkodikgPyBcbiAgICAgICAgICAgICAgICB2Lm1hcChpZCA9PiBrLmRpc2Nvbm5lY3QoaWQpKVxuICAgICAgICAgICAgOiBrLmRpc2Nvbm5lY3QodikpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIEluaXQgY2xpcGJvYXJkIG1vZHVsZVxuICAgICAgICBDbGlwYm9hcmQuZ2V0RGVmYXVsdCgpO1xuXG4gICAgICAgIGNvbm5lY3Rpb25zLnNldChXaXJlcGx1bWJlci5nZXREZWZhdWx0KCksIFtcbiAgICAgICAgICAgIFdpcmVwbHVtYmVyLmdldERlZmF1bHQoKS5nZXREZWZhdWx0U2luaygpLmNvbm5lY3QoXCJub3RpZnk6OnZvbHVtZVwiLCAoKSA9PiBcbiAgICAgICAgICAgICAgICB0cmlnZ2VyT1NEKCkpXG4gICAgICAgIF0pO1xuXG4gICAgICAgIGNvbm5lY3Rpb25zLnNldChOb3RpZmljYXRpb25zLmdldERlZmF1bHQoKSwgW1xuICAgICAgICAgICAgTm90aWZpY2F0aW9ucy5nZXREZWZhdWx0KCkuY29ubmVjdChcIm5vdGlmaWNhdGlvbi1hZGRlZFwiLCAoXywgX25vdGlmOiBBc3RhbE5vdGlmZC5Ob3RpZmljYXRpb24pID0+IHtcbiAgICAgICAgICAgICAgICBXaW5kb3dzLmdldERlZmF1bHQoKS5vcGVuKFwiZmxvYXRpbmctbm90aWZpY2F0aW9uc1wiKTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgTm90aWZpY2F0aW9ucy5nZXREZWZhdWx0KCkuY29ubmVjdChcIm5vdGlmaWNhdGlvbi1yZW1vdmVkXCIsIChfOiBOb3RpZmljYXRpb25zLCBfaWQ6IG51bWJlcikgPT4ge1xuICAgICAgICAgICAgICAgIF8ubm90aWZpY2F0aW9ucy5sZW5ndGggPT09IDAgJiYgV2luZG93cy5nZXREZWZhdWx0KCkuY2xvc2UoXCJmbG9hdGluZy1ub3RpZmljYXRpb25zXCIpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgXSk7XG5cbiAgICAgICAgY29uc29sZS5sb2coXCJJbml0aWFsaXppbmcgd2FsbHBhcGVyIGhhbmRsZXJcIik7XG4gICAgICAgIFdhbGxwYXBlci5nZXREZWZhdWx0KCk7XG5cbiAgICAgICAgY29uc29sZS5sb2coXCJBZGRpbmcgcnVubmVyIHBsdWdpbnNcIik7XG4gICAgICAgIHJ1bm5lclBsdWdpbnMubWFwKHBsdWdpbiA9PiBSdW5uZXIuYWRkUGx1Z2luKHBsdWdpbikpO1xuXG4gICAgICAgIGNvbnNvbGUubG9nKFwiT3BlbmluZyBkZWZhdWx0IHdpbmRvd3NcIik7XG4gICAgICAgIC8vIE9wZW4gb3Blbk9uU3RhcnQgd2luZG93c1xuICAgICAgICBkZWZhdWx0V2luZG93cy5tYXAobmFtZSA9PiB7XG4gICAgICAgICAgICBpZihXaW5kb3dzLmdldERlZmF1bHQoKS5pc1Zpc2libGUobmFtZSkpIHJldHVybjtcbiAgICAgICAgICAgIFdpbmRvd3MuZ2V0RGVmYXVsdCgpLm9wZW4obmFtZSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn0pO1xuXG5mdW5jdGlvbiB0cmlnZ2VyT1NEKCkge1xuICAgIGlmKFdpbmRvd3MuZ2V0RGVmYXVsdCgpLmlzVmlzaWJsZShcImNvbnRyb2wtY2VudGVyXCIpKSByZXR1cm47XG5cbiAgICBXaW5kb3dzLmdldERlZmF1bHQoKS5vcGVuKFwib3NkXCIpO1xuXG4gICAgaWYoIW9zZFRpbWVyKSB7XG4gICAgICAgIG9zZFRpbWVyID0gdGltZW91dChvc2RUaW1lb3V0LCAoKSA9PiB7XG4gICAgICAgICAgICBvc2RUaW1lciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIFdpbmRvd3MuZ2V0RGVmYXVsdCgpLmNsb3NlKFwib3NkXCIpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgb3NkVGltZXIuY2FuY2VsKCk7XG4gICAgb3NkVGltZXIgPSB0aW1lb3V0KG9zZFRpbWVvdXQsICgpID0+IHtcbiAgICAgICAgV2luZG93cy5nZXREZWZhdWx0KCkuY2xvc2UoXCJvc2RcIik7XG4gICAgICAgIG9zZFRpbWVyID0gdW5kZWZpbmVkO1xuICAgIH0pO1xufVxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFFTztBQUZQO0FBQUE7QUFBQTtBQUVBLElBQU8sZ0JBQVE7QUFBQSxNQUNYLFVBQVU7QUFBQSxNQUVWLFFBQVE7QUFBQSxNQUNSLFFBQVE7QUFBQSxNQUNSLFNBQVM7QUFBQSxNQUNULFFBQVE7QUFBQSxNQUVSLFdBQVc7QUFBQSxNQUNYLGNBQWM7QUFBQSxNQUNkLFNBQVM7QUFBQSxNQUNULFlBQVk7QUFBQSxNQUNaLE1BQU07QUFBQSxNQUNOLFNBQVM7QUFBQSxNQUNULE1BQU07QUFBQSxNQUVOLE9BQU87QUFBQSxNQUVQLFNBQVM7QUFBQSxNQUNULFlBQVk7QUFBQSxNQUVaLGdCQUFnQjtBQUFBLFFBQ1osT0FBTztBQUFBLFVBQ0gsU0FBUztBQUFBLFVBQ1QsVUFBVTtBQUFBLFVBQ1YsTUFBTTtBQUFBLFVBRU4sU0FBUztBQUFBLFlBQ0wsU0FBUztBQUFBLFlBQ1QsVUFBVTtBQUFBLFlBQ1YsT0FBTztBQUFBLFVBQ1g7QUFBQSxVQUNBLFdBQVc7QUFBQSxZQUNQLE9BQU87QUFBQSxZQUNQLGVBQWU7QUFBQSxZQUNmLGNBQWM7QUFBQSxVQUNsQjtBQUFBLFVBQ0EsS0FBSztBQUFBLFlBQ0QsT0FBTztBQUFBLFVBQ1g7QUFBQSxVQUNBLGFBQWE7QUFBQSxZQUNULE9BQU87QUFBQSxZQUNQLGNBQWM7QUFBQSxVQUNsQjtBQUFBLFFBQ0o7QUFBQSxRQUNBLE9BQU87QUFBQSxVQUNILGVBQWU7QUFBQSxVQUNmLE9BQU87QUFBQSxZQUNILE9BQU87QUFBQSxZQUNQLGFBQWE7QUFBQSxVQUNqQjtBQUFBLFVBQ0EsWUFBWTtBQUFBLFlBQ1IsT0FBTztBQUFBLFlBQ1AsYUFBYTtBQUFBLFVBQ2pCO0FBQUEsVUFDQSxhQUFhO0FBQUEsWUFDVCxPQUFPO0FBQUEsWUFDUCxhQUFhO0FBQUEsWUFDYixPQUFPO0FBQUEsWUFDUCxhQUFhO0FBQUEsVUFDakI7QUFBQSxVQUNBLFdBQVc7QUFBQSxZQUNQLE9BQU87QUFBQSxZQUNQLGFBQWE7QUFBQSxZQUNiLGFBQWE7QUFBQSxZQUNiLFVBQVU7QUFBQSxZQUNWLGdCQUFnQjtBQUFBLFlBQ2hCLG1CQUFtQjtBQUFBLFlBQ25CLGtCQUFrQjtBQUFBLFlBQ2xCLGdCQUFnQjtBQUFBLFlBQ2hCLGVBQWU7QUFBQSxZQUNmLGNBQWM7QUFBQSxZQUNkLGFBQWE7QUFBQSxVQUNqQjtBQUFBLFVBQ0EsU0FBUztBQUFBLFlBQ0wsT0FBTztBQUFBLFlBQ1AsV0FBVztBQUFBLFVBQ2Y7QUFBQSxRQUNKO0FBQUEsTUFDSjtBQUFBLE1BQ0EsV0FBVztBQUFBLFFBQ1AsT0FBTztBQUFBLE1BQ1g7QUFBQSxJQUNKO0FBQUE7QUFBQTs7O0FDckZBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFFTztBQUZQO0FBQUE7QUFBQTtBQUVBLElBQU8sZ0JBQVE7QUFBQSxNQUNYLFVBQVU7QUFBQSxNQUVWLFFBQVE7QUFBQSxNQUNSLFFBQVE7QUFBQSxNQUNSLFNBQVM7QUFBQSxNQUNULFFBQVE7QUFBQSxNQUVSLFdBQVc7QUFBQSxNQUNYLGNBQWM7QUFBQSxNQUNkLFNBQVM7QUFBQSxNQUNULFlBQVk7QUFBQSxNQUNaLFNBQVM7QUFBQSxNQUNULE1BQU07QUFBQSxNQUVOLFlBQVk7QUFBQSxNQUNaLFNBQVM7QUFBQSxNQUVULE1BQU07QUFBQSxNQUNOLE9BQU87QUFBQSxNQUVQLGdCQUFnQjtBQUFBLFFBQ1osT0FBTztBQUFBLFVBQ0gsU0FBUztBQUFBLFVBQ1QsVUFBVTtBQUFBLFVBQ1YsTUFBTTtBQUFBLFVBRU4sU0FBUztBQUFBLFlBQ0wsU0FBUztBQUFBLFlBQ1QsVUFBVTtBQUFBLFlBQ1YsT0FBTztBQUFBLFVBQ1g7QUFBQSxVQUNBLFdBQVc7QUFBQSxZQUNQLE9BQU87QUFBQSxZQUNQLGVBQWU7QUFBQSxZQUNmLGNBQWM7QUFBQSxVQUNsQjtBQUFBLFVBQ0EsS0FBSztBQUFBLFlBQ0QsT0FBTztBQUFBLFVBQ1g7QUFBQSxVQUNBLGFBQWE7QUFBQSxZQUNULE9BQU87QUFBQSxZQUNQLGNBQWM7QUFBQSxVQUNsQjtBQUFBLFFBQ0o7QUFBQSxRQUNBLE9BQU87QUFBQSxVQUNILGVBQWU7QUFBQSxVQUNmLE9BQU87QUFBQSxZQUNILE9BQU87QUFBQSxZQUNQLGFBQWE7QUFBQSxVQUNqQjtBQUFBLFVBQ0EsWUFBWTtBQUFBLFlBQ1IsT0FBTztBQUFBLFlBQ1AsYUFBYTtBQUFBLFVBQ2pCO0FBQUEsVUFDQSxhQUFhO0FBQUEsWUFDVCxPQUFPO0FBQUEsWUFDUCxhQUFhO0FBQUEsWUFDYixhQUFhO0FBQUEsWUFDYixPQUFPO0FBQUEsVUFDWDtBQUFBLFVBQ0EsV0FBVztBQUFBLFlBQ1AsT0FBTztBQUFBLFlBQ1AsYUFBYTtBQUFBLFlBQ2IsYUFBYTtBQUFBLFlBQ2IsVUFBVTtBQUFBLFlBQ1YsZ0JBQWdCO0FBQUEsWUFDaEIsbUJBQW1CO0FBQUEsWUFDbkIsa0JBQWtCO0FBQUEsWUFDbEIsYUFBYTtBQUFBLFlBQ2IsY0FBYztBQUFBLFlBQ2QsZUFBZTtBQUFBLFlBQ2YsZ0JBQWdCO0FBQUEsVUFDcEI7QUFBQSxVQUNBLFNBQVM7QUFBQSxZQUNMLE9BQU87QUFBQSxZQUNQLFdBQVc7QUFBQSxVQUNmO0FBQUEsUUFDSjtBQUFBLE1BQ0o7QUFBQSxNQUNBLFdBQVc7QUFBQSxRQUNQLE9BQU87QUFBQSxNQUNYO0FBQUEsSUFDSjtBQUFBO0FBQUE7OztBQ3JGQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBRU87QUFGUDtBQUFBO0FBQUE7QUFFQSxJQUFPLGdCQUFRO0FBQUEsTUFDWCxVQUFVO0FBQUEsTUFFVixRQUFRO0FBQUEsTUFDUixRQUFRO0FBQUEsTUFDUixTQUFTO0FBQUEsTUFDVCxRQUFRO0FBQUEsTUFFUixXQUFXO0FBQUEsTUFDWCxjQUFjO0FBQUEsTUFDZCxTQUFTO0FBQUEsTUFDVCxZQUFZO0FBQUEsTUFDWixNQUFNO0FBQUEsTUFDTixTQUFTO0FBQUEsTUFDVCxNQUFNO0FBQUEsTUFFTixPQUFPO0FBQUEsTUFFUCxTQUFTO0FBQUEsTUFDVCxZQUFZO0FBQUEsTUFFWixnQkFBZ0I7QUFBQSxRQUNaLE9BQU87QUFBQSxVQUNILFNBQVM7QUFBQSxVQUNULFVBQVU7QUFBQSxVQUNWLE1BQU07QUFBQSxVQUVOLFNBQVM7QUFBQSxZQUNMLFNBQVM7QUFBQSxZQUNULFVBQVU7QUFBQSxZQUNWLE9BQU87QUFBQSxVQUNYO0FBQUEsVUFDQSxXQUFXO0FBQUEsWUFDUCxPQUFPO0FBQUEsWUFDUCxlQUFlO0FBQUEsWUFDZixjQUFjO0FBQUEsVUFDbEI7QUFBQSxVQUNBLEtBQUs7QUFBQSxZQUNELE9BQU87QUFBQSxVQUNYO0FBQUEsVUFDQSxhQUFhO0FBQUEsWUFDVCxPQUFPO0FBQUEsWUFDUCxjQUFjO0FBQUEsVUFDbEI7QUFBQSxRQUNKO0FBQUEsUUFDQSxPQUFPO0FBQUEsVUFDSCxlQUFlO0FBQUEsVUFDZixPQUFPO0FBQUEsWUFDSCxPQUFPO0FBQUEsWUFDUCxhQUFhO0FBQUEsVUFDakI7QUFBQSxVQUNBLFlBQVk7QUFBQSxZQUNSLE9BQU87QUFBQSxZQUNQLGFBQWE7QUFBQSxVQUNqQjtBQUFBLFVBQ0EsYUFBYTtBQUFBLFlBQ1QsT0FBTztBQUFBLFlBQ1AsYUFBYTtBQUFBLFlBQ2IsT0FBTztBQUFBLFlBQ1AsYUFBYTtBQUFBLFVBQ2pCO0FBQUEsVUFDQSxXQUFXO0FBQUEsWUFDUCxPQUFPO0FBQUEsWUFDUCxhQUFhO0FBQUEsWUFDYixhQUFhO0FBQUEsWUFDYixVQUFVO0FBQUEsWUFDVixnQkFBZ0I7QUFBQSxZQUNoQixtQkFBbUI7QUFBQSxZQUNuQixrQkFBa0I7QUFBQSxZQUNsQixnQkFBZ0I7QUFBQSxZQUNoQixlQUFlO0FBQUEsWUFDZixjQUFjO0FBQUEsWUFDZCxhQUFhO0FBQUEsVUFDakI7QUFBQSxVQUNBLFNBQVM7QUFBQSxZQUNMLE9BQU87QUFBQSxZQUNQLFdBQVc7QUFBQSxVQUNmO0FBQUEsUUFDSjtBQUFBLE1BQ0o7QUFBQSxNQUNBLFdBQVc7QUFBQSxRQUNQLE9BQU87QUFBQSxNQUNYO0FBQUEsSUFDSjtBQUFBO0FBQUE7OztBQzFFQSxPQUFPLGFBQWE7QUFDcEIsT0FBTyxVQUFVOzs7QUNWVixTQUFTLFNBQVMsS0FBYTtBQUNsQyxTQUFPLElBQ0YsUUFBUSxtQkFBbUIsT0FBTyxFQUNsQyxXQUFXLEtBQUssR0FBRyxFQUNuQixZQUFZO0FBQ3JCO0FBRU8sU0FBUyxTQUFTLEtBQWE7QUFDbEMsU0FBTyxJQUNGLFFBQVEsbUJBQW1CLE9BQU8sRUFDbEMsV0FBVyxLQUFLLEdBQUcsRUFDbkIsWUFBWTtBQUNyQjtBQThDTyxTQUFTLHFCQUF1QyxRQUFXLE1BQWdDO0FBQzlGLFNBQU8sZUFBZSxRQUFRLE9BQU8sU0FBUyxJQUFJLEVBQUUsV0FBVyxLQUFLLEdBQUcsQ0FBQyxJQUFJO0FBQUEsSUFDeEUsY0FBYztBQUFBLElBQ2QsWUFBWTtBQUFBLElBQ1osT0FBTyxNQUFNLE9BQU8sSUFBSTtBQUFBLEVBQzVCLENBQUM7QUFDTDtBQUdPLFNBQVMsSUFBSSxLQUFxQixNQUFjLE9BQVk7QUFDL0QsUUFBTSxNQUFNLFNBQVMsSUFBSTtBQUN6QixRQUFNQSxVQUFTLE9BQU8sR0FBRztBQUN6QixRQUFNLFNBQVMsT0FBTyxHQUFHO0FBRXpCLE1BQUk7QUFFSixNQUFJQSxXQUFVLE9BQU8sT0FBTyxJQUFJQSxPQUFNLE1BQU0sWUFBWTtBQUNwRCxjQUFXLElBQUlBLE9BQU0sRUFBb0I7QUFBQSxFQUM3QyxPQUFPO0FBQ0gsY0FBVSxJQUFJLElBQXdCO0FBQUEsRUFDMUM7QUFFQSxNQUFJLFlBQVksT0FBTztBQUNuQixRQUFJLFVBQVUsT0FBTyxPQUFPLElBQUksTUFBTSxNQUFNLFlBQVk7QUFDcEQ7QUFBQyxNQUFDLElBQUksTUFBTSxFQUF1QixLQUFLO0FBQUEsSUFDNUMsT0FBTztBQUNILGFBQU8sT0FBTyxLQUFLLEVBQUUsQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDO0FBQUEsSUFDeEM7QUFBQSxFQUNKO0FBQ0o7OztBRDFFQSxJQUFNLE9BQU8sT0FBTyxpQkFBaUI7QUFDckMsSUFBTSxFQUFFLGdCQUFnQixhQUFhLFFBQVEsSUFBSTtBQUNqRCxJQUFNLEVBQUUsUUFBUSxNQUFNLGNBQWMsSUFBSTtBQUtqQyxJQUFNLGNBQWMsUUFBUTtBQUc1QixJQUFNLGtCQUFrQixRQUFRO0FBSWhDLElBQU0sWUFBWSxRQUFRO0FBRzFCLElBQU0sYUFBYSxRQUFRO0FBOENsQyxTQUFTLFlBQ0wsS0FDTTtBQUNOLE1BQUksSUFBSSxRQUFTLE9BQU0sTUFBTSxrQ0FBa0M7QUFDL0QsTUFBSSxJQUFJLE9BQVEsT0FBTSxNQUFNLGlDQUFpQztBQUU3RCxNQUFJLE9BQU8sSUFBSSxTQUFTLFVBQVU7QUFDOUIsVUFBTSxNQUFNLDJDQUEyQztBQUFBLEVBQzNEO0FBRUEsU0FBTyxJQUFJO0FBQ2Y7QUFZTyxTQUFTLFNBQVksaUJBQTZDO0FBQ3JFLFNBQU8sU0FDSCxHQUNBLEtBQ0EsU0FDMEI7QUFDMUIsVUFBTSxZQUFZLFlBQVksR0FBRztBQUNqQyxVQUFNLE1BQU0sU0FBUyxTQUFTO0FBQzlCLFVBQU0sT0FBc0IsSUFBSTtBQUVoQyxTQUFLLGVBQWUsQ0FBQztBQUNyQixTQUFLLFdBQVcsU0FBUyxJQUFJLEVBQUUsT0FBTyxXQUFXLFdBQVcsTUFBTSxnQkFBZ0I7QUFFbEYsUUFBSSxlQUFlLFdBQVk7QUFDM0IsMkJBQXFCLE1BQU0sU0FBd0M7QUFFbkUsVUFBSSxXQUFXLFFBQVEsU0FBVTtBQUVqQyxxQkFBZSxNQUFNLFdBQVc7QUFBQSxRQUM1QixZQUFZO0FBQUEsUUFDWixjQUFjO0FBQUEsUUFDZCxJQUFJLEdBQU07QUFDTixjQUFJLEtBQUssSUFBSSxFQUFFLEdBQUcsTUFBTSxHQUFHO0FBQ3ZCLGlCQUFLLElBQUksRUFBRSxHQUFHLElBQUk7QUFDbEIsaUJBQUssT0FBTyxHQUFHO0FBQUEsVUFDbkI7QUFBQSxRQUNKO0FBQUEsUUFDQSxNQUFTO0FBQ0wsaUJBQU8sS0FBSyxJQUFJLEVBQUUsR0FBRztBQUFBLFFBQ3pCO0FBQUEsTUFDSixDQUFpQztBQUFBLElBQ3JDLENBQUM7QUFFRCxXQUFPLFNBQVUsTUFBUztBQUN0QixZQUFNLE9BQVMsS0FBcUIsSUFBSSxNQUFNLENBQUM7QUFDL0MsV0FBSyxHQUFHLElBQUk7QUFDWixhQUFPO0FBQUEsSUFDWDtBQUFBLEVBQ0o7QUFDSjtBQXFCTyxTQUFTLE9BQVUsaUJBQTZDO0FBQ25FLFNBQU8sU0FBU0MsUUFBT0EsU0FBMkIsS0FBMEM7QUFDeEYsVUFBTSxZQUFZLFlBQVksR0FBRztBQUNqQyxVQUFNLE9BQXNCLElBQUk7QUFDaEMsVUFBTSxRQUFTLEtBQUssZUFBZSxDQUFDO0FBQ3BDLFFBQUksYUFBYSxPQUFPO0FBQ3BCLFlBQU0sRUFBRSxPQUFPLEtBQUssSUFBSSxNQUFNLFNBQVM7QUFDdkMsWUFBTSxTQUFTLElBQUksRUFBRSxPQUFPLFFBQVEsV0FBVyxVQUFVLEtBQUs7QUFBQSxJQUNsRSxPQUFPO0FBQ0gsWUFBTSxTQUFTLElBQUksRUFBRSxPQUFPLFdBQVcsVUFBVSxNQUFNLGdCQUFnQjtBQUFBLElBQzNFO0FBQ0EsV0FBT0E7QUFBQSxFQUNYO0FBQ0o7QUE2Rk8sU0FBUyxVQUlULE1BSVk7QUFDZixTQUFPLFNBQVUsUUFBUSxLQUFLO0FBQzFCLFFBQUksSUFBSSxRQUFTLE9BQU0sTUFBTSxrQ0FBa0M7QUFDL0QsUUFBSSxJQUFJLE9BQVEsT0FBTSxNQUFNLGlDQUFpQztBQUU3RCxRQUFJLE9BQU8sSUFBSSxTQUFTLFVBQVU7QUFDOUIsWUFBTSxNQUFNLHFDQUFxQztBQUFBLElBQ3JEO0FBRUEsVUFBTSxhQUFhLFNBQVMsSUFBSSxJQUFJO0FBQ3BDLFVBQU0sT0FBc0IsSUFBSTtBQUNoQyxVQUFNLFVBQVcsS0FBSyxZQUFZLENBQUM7QUFFbkMsUUFBSSxNQUFNLFFBQVEsS0FBSyxDQUFDLENBQUMsR0FBRztBQUN4QixZQUFNLENBQUMsUUFBUSxZQUFZLE9BQU8sSUFBSTtBQU10QyxjQUFRLFVBQVUsSUFBSTtBQUFBLFFBQ2xCO0FBQUEsUUFDQSxTQUFTLFNBQVMsV0FBVztBQUFBLFFBQzdCLGFBQWEsT0FBTyxJQUFJLENBQUMsTUFBTyxZQUFZLElBQUksRUFBRSxTQUFTLENBQUU7QUFBQSxRQUM3RCxHQUFJLGNBQWM7QUFBQSxVQUNkLGFBQWEsWUFBWSxhQUFhLFdBQVcsU0FBUztBQUFBLFFBQzlEO0FBQUEsUUFDQSxHQUFJLFNBQVMsU0FBUztBQUFBLFVBQ2xCLE9BQU8sUUFBUTtBQUFBLFFBQ25CO0FBQUEsUUFDQSxHQUFJLE9BQU8sU0FBUyxnQkFBZ0IsWUFBWTtBQUFBLFVBQzVDLGFBQWEsUUFBUTtBQUFBLFFBQ3pCO0FBQUEsTUFDSjtBQUFBLElBQ0osT0FBTztBQUNILFlBQU0sU0FBUztBQUNmLGNBQVEsVUFBVSxJQUFJO0FBQUEsUUFDbEI7QUFBQSxRQUNBLGFBQWEsT0FBTyxJQUFJLENBQUMsTUFBTyxZQUFZLElBQUksRUFBRSxTQUFTLENBQUU7QUFBQSxNQUNqRTtBQUFBLElBQ0o7QUFFQSxXQUFPLFlBQWEsUUFBUTtBQUN4QixhQUFPLEtBQUssS0FBSyxZQUFZLEdBQUcsTUFBTTtBQUFBLElBQzFDO0FBQUEsRUFDSjtBQUNKO0FBRUEsSUFBTSxTQUFTLEtBQUssS0FBSztBQUN6QixJQUFNLFNBQVMsRUFBRSxLQUFLO0FBQ3RCLElBQU0sVUFBVSxLQUFLLEtBQUs7QUFDMUIsSUFBTSxXQUFXO0FBQ2pCLElBQU0sV0FBVztBQUNqQixJQUFNLFdBQVcsT0FBTztBQUN4QixJQUFNLFdBQVcsT0FBTztBQUV4QixTQUFTLGVBQWUsTUFBc0IsTUFBYyxPQUFtQjtBQUMzRSxVQUFRLE1BQU07QUFBQSxJQUNWLEtBQUssUUFBUTtBQUNULGFBQU8sVUFBVSxRQUFRLE1BQU0sSUFBSSxJQUFJLE9BQU8sS0FBSztBQUFBLElBQ3ZELEtBQUssUUFBUTtBQUNULGFBQU8sVUFBVSxPQUFPLE1BQU0sSUFBSSxJQUFJLE9BQU8sRUFBRTtBQUFBLElBQ25ELEtBQUssUUFBUTtBQUNULGFBQU8sVUFBVSxJQUFJLE1BQU0sSUFBSSxJQUFJLE9BQU8sUUFBUSxRQUFRLENBQUM7QUFBQSxJQUMvRCxLQUFLLFFBQVE7QUFDVCxhQUFPLFVBQVUsS0FBSyxNQUFNLElBQUksSUFBSSxPQUFPLEdBQUcsU0FBUyxDQUFDO0FBQUEsSUFDNUQsS0FBSyxRQUFRO0FBQ1QsYUFBTyxVQUFVLE1BQU0sTUFBTSxJQUFJLElBQUksT0FBTyxVQUFVLFVBQVUsQ0FBQztBQUFBLElBQ3JFLEtBQUssUUFBUTtBQUNULGFBQU8sVUFBVSxPQUFPLE1BQU0sSUFBSSxJQUFJLE9BQU8sR0FBRyxPQUFPLGtCQUFrQixDQUFDO0FBQUEsSUFDOUUsS0FBSyxRQUFRO0FBQ1QsYUFBTyxVQUFVLE1BQU0sTUFBTSxJQUFJLElBQUksT0FBTyxVQUFVLFVBQVUsQ0FBQztBQUFBLElBQ3JFLEtBQUssUUFBUTtBQUNULGFBQU8sVUFBVSxPQUFPLE1BQU0sSUFBSSxJQUFJLE9BQU8sT0FBTyxXQUFXLE9BQU8sV0FBVyxDQUFDO0FBQUEsSUFDdEYsS0FBSyxRQUFRO0FBQ1QsYUFBTyxVQUFVLFNBQVMsTUFBTSxJQUFJLElBQUksS0FBSztBQUFBLElBQ2pELEtBQUssUUFBUTtBQUNULGFBQU8sVUFBVSxPQUFPLE1BQU0sSUFBSSxJQUFJLE9BQWMsS0FBSyxPQUFPO0FBQUEsSUFFcEUsS0FBSyxRQUFRO0FBQUEsSUFDYixLQUFLLFFBQVE7QUFBQSxJQUNiLEtBQUssUUFBUTtBQUFBLElBQ2IsS0FBSyxRQUFRO0FBQUEsSUFDYixLQUFLLFFBQVE7QUFBQSxJQUNiLEtBQUssUUFBUSxlQUFlLE9BQU87QUFDL0IsWUFBTSxNQUFNLHNDQUFzQyxJQUFJLEdBQUc7QUFBQSxJQUM3RCxLQUFLLFFBQVE7QUFBQSxJQUNiO0FBQ0ksYUFBTyxVQUFVLE9BQU8sTUFBTSxJQUFJLElBQUksT0FBYyxJQUFJO0FBQUEsRUFDaEU7QUFDSjtBQUVBLFNBQVMsTUFBTSxNQUFjLE9BQW1CLGFBQStDO0FBQzNGLE1BQUksdUJBQXVCLFVBQVcsUUFBTztBQUU3QyxNQUFJLGdCQUFnQixVQUFVLGdCQUFnQixZQUFZLGdCQUFnQixPQUFPO0FBQzdFLFdBQU8sVUFBVSxTQUFTLE1BQU0sSUFBSSxJQUFJLEtBQUs7QUFBQSxFQUNqRDtBQUVBLE1BQUksZ0JBQWdCLFFBQVE7QUFDeEIsV0FBTyxVQUFVLE9BQU8sTUFBTSxJQUFJLElBQUksT0FBTyxFQUFFO0FBQUEsRUFDbkQ7QUFFQSxNQUFJLGdCQUFnQixRQUFRO0FBQ3hCLFdBQU8sVUFBVSxPQUFPLE1BQU0sSUFBSSxJQUFJLE9BQU8sQ0FBQyxPQUFPLFdBQVcsT0FBTyxXQUFXLENBQUM7QUFBQSxFQUN2RjtBQUVBLE1BQUksZ0JBQWdCLFNBQVM7QUFDekIsV0FBTyxVQUFVLFFBQVEsTUFBTSxJQUFJLElBQUksT0FBTyxLQUFLO0FBQUEsRUFDdkQ7QUFFQSxNQUFJLFlBQVksYUFBYTtBQUN6QixXQUFPLGVBQWUsWUFBWSxRQUFRLE1BQU0sS0FBSztBQUFBLEVBQ3pEO0FBRUEsTUFBSSxPQUFPLGdCQUFnQixZQUFZO0FBQ25DLFdBQU8sWUFBWSxNQUFNLEtBQUs7QUFBQSxFQUNsQztBQUVBLFFBQU0sTUFBTSxpQ0FBaUM7QUFDakQ7QUFrQk8sU0FBUyxTQUFtRCxVQUFvQixDQUFDLEdBQUc7QUFDdkYsU0FBTyxTQUFVLEtBQVUsS0FBaUM7QUFDeEQsVUFBTSxJQUFJLFFBQVE7QUFFbEIsUUFBSSxPQUFPLE1BQU0sWUFBWSxDQUFDLEVBQUUsV0FBVyxhQUFhLEtBQUssQ0FBQyxFQUFFLFdBQVcsU0FBUyxHQUFHO0FBQ25GLGNBQVEsV0FBVyxJQUFJLFlBQVksRUFBRSxPQUFPLENBQUM7QUFBQSxJQUNqRDtBQUVBLFVBQU0sT0FBTyxJQUFJO0FBRWpCLFVBQU0sUUFBNEM7QUFBQSxNQUM5QyxRQUFRLEtBQUssY0FBYyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxXQUFXLEVBQUUsT0FBTyxLQUFLLENBQUMsTUFBTTtBQUNqRSxjQUFNLE1BQU0sU0FBUyxTQUFTO0FBQzlCLGNBQU0sT0FBTyxNQUFNLEtBQUssT0FBTyxJQUFJO0FBQ25DLGVBQU8sQ0FBQyxLQUFLLElBQUk7QUFBQSxNQUNyQixDQUFDO0FBQUEsSUFDTDtBQUVBLFVBQU0sVUFBVTtBQUFBLE1BQ1osUUFBUSxLQUFLLFdBQVcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsWUFBWSxFQUFFLFNBQVMsS0FBSyxRQUFRLEdBQUdDLFFBQU8sQ0FBQyxNQUFNO0FBQ25GLFlBQUksS0FBSztBQUNMLHlCQUFlLElBQUksV0FBVyxNQUFNLFdBQVcsV0FBVyxLQUFLLEdBQUcsQ0FBQyxJQUFJO0FBQUEsWUFDbkUsWUFBWTtBQUFBLFlBQ1osY0FBYztBQUFBLFlBQ2QsT0FBTztBQUFBLFVBQ1gsQ0FBQztBQUFBLFFBQ0w7QUFDQSxlQUFPLENBQUMsWUFBWUEsT0FBTTtBQUFBLE1BQzlCLENBQUM7QUFBQSxJQUNMO0FBRUEsV0FBTyxLQUFLO0FBQ1osV0FBTyxLQUFLO0FBRVosa0JBQWMsRUFBRSxHQUFHLFNBQVMsWUFBWSxPQUFPLFNBQVMsUUFBUSxHQUFHLEdBQUc7QUFBQSxFQUMxRTtBQUNKO0FBZ0NBLFNBQVMsU0FBUyxPQUFPO0FBQ3pCLE1BQU0sU0FBUyxPQUFPOzs7QUVqZXRCLE9BQU8sYUFBYTtBQURwQjtBQUtBLDJCQUFDLFNBQVMsRUFBRSxXQUFXLGNBQWMsQ0FBQztBQUN0QyxJQUFNLGVBQU4sTUFBTSxzQkFBb0IsYUFBUSxRQUFPO0FBQUEsRUFVckMsY0FBYztBQUNWLFVBQU07QUFQVixTQUFRLGNBQWdDLGFBQVksaUJBQWtCLG9CQUFvQjtBQUMxRixTQUFRLGdCQUFrQyxhQUFZLGlCQUFrQix1QkFBdUI7QUFFL0YsU0FBUSxnQkFBd0I7QUFDaEMsU0FBUSxrQkFBMEI7QUFLOUIsUUFBRyxDQUFDLGFBQVk7QUFDWixZQUFNLElBQUksTUFBTSw0RUFBNEU7QUFBQSxRQUN4RixPQUFPO0FBQUEsTUFDWCxDQUFDO0FBQUEsRUFDVDtBQUFBLEVBaEJBO0FBQUEsU0FBZSxtQkFBc0MsUUFBUSxZQUFZO0FBQUE7QUFBQSxFQUN6RTtBQUFBLFNBQWUsT0FBZjtBQUFBO0FBQUEsRUFpQkEsT0FBYyxhQUEwQjtBQUNwQyxRQUFHLENBQUMsYUFBWTtBQUNaLG1CQUFZLE9BQU8sSUFBSSxhQUFZO0FBRXZDLFdBQU8sYUFBWTtBQUFBLEVBQ3ZCO0FBQUEsRUFFQSxPQUFjLGlCQUE2QjtBQUN2QyxXQUFPLGFBQVk7QUFBQSxFQUN2QjtBQUFBLEVBRU8sbUJBQTJCO0FBQzlCLFdBQU8sS0FBSztBQUFBLEVBQ2hCO0FBQUEsRUFFTyxxQkFBNkI7QUFDaEMsV0FBTyxLQUFLO0FBQUEsRUFDaEI7QUFBQSxFQUVPLGlCQUFtQztBQUN0QyxXQUFPLEtBQUs7QUFBQSxFQUNoQjtBQUFBLEVBRU8sbUJBQXFDO0FBQ3hDLFdBQU8sS0FBSztBQUFBLEVBQ2hCO0FBQUEsRUFFTyxnQkFBd0I7QUFDM0IsV0FBTyxLQUFLLE1BQU0sS0FBSyxlQUFlLEVBQUUsV0FBVyxJQUFJLEdBQUc7QUFBQSxFQUM5RDtBQUFBLEVBRU8sa0JBQTBCO0FBQzdCLFdBQU8sS0FBSyxNQUFNLEtBQUssaUJBQWlCLEVBQUUsV0FBVyxJQUFJLEdBQUc7QUFBQSxFQUNoRTtBQUFBLEVBRU8sY0FBYyxlQUE2QjtBQUM5QyxTQUFLLFlBQVk7QUFBQSxPQUNaLGdCQUFnQixLQUFLLGdCQUFnQixLQUFLLGdCQUFnQixpQkFBaUI7QUFBQSxJQUNoRjtBQUFBLEVBQ0o7QUFBQSxFQUVPLGdCQUFnQixpQkFBK0I7QUFDbEQsU0FBSyxjQUFjO0FBQUEsTUFDZixrQkFBa0IsS0FBSyxrQkFBa0IsS0FBSyxrQkFBa0Isa0JBQWtCO0FBQUEsSUFDdEY7QUFBQSxFQUNKO0FBQUEsRUFFTyx1QkFBdUIsVUFBNEIsZ0JBQThCO0FBQ3BGLHFCQUFpQixLQUFLLElBQUksY0FBYyxJQUFJO0FBRTVDLFFBQUksU0FBUyxXQUFXLElBQUksaUJBQW1CLEtBQUssZ0JBQWdCLEtBQU07QUFDdEUsZUFBUyxXQUFXLENBQUc7QUFDdkI7QUFBQSxJQUNKO0FBRUEsYUFBUyxXQUFXLFNBQVMsV0FBVyxJQUFJLGNBQWM7QUFBQSxFQUM5RDtBQUFBLEVBRU8sbUJBQW1CLGdCQUE4QjtBQUNwRCxTQUFLLHVCQUF1QixLQUFLLGVBQWUsR0FBRyxjQUFjO0FBQUEsRUFDckU7QUFBQSxFQUVPLHFCQUFxQixnQkFBOEI7QUFDdEQsU0FBSyx1QkFBdUIsS0FBSyxpQkFBaUIsR0FBRyxjQUFjO0FBQUEsRUFDdkU7QUFBQSxFQUVPLHVCQUF1QixVQUE0QixnQkFBOEI7QUFDcEYscUJBQWlCLEtBQUssSUFBSSxjQUFjLElBQUk7QUFFNUMsUUFBSSxTQUFTLFdBQVcsSUFBSSxpQkFBa0IsR0FBRztBQUM3QyxlQUFTLFdBQVcsQ0FBQztBQUNyQjtBQUFBLElBQ0o7QUFFQSxhQUFTLFdBQVcsU0FBUyxXQUFXLElBQUksY0FBYztBQUFBLEVBQzlEO0FBQUEsRUFFTyxtQkFBbUIsZ0JBQThCO0FBQ3BELFNBQUssdUJBQXVCLEtBQUssZUFBZSxHQUFHLGNBQWM7QUFBQSxFQUNyRTtBQUFBLEVBRU8scUJBQXFCLGdCQUE4QjtBQUN0RCxTQUFLLHVCQUF1QixLQUFLLGlCQUFpQixHQUFHLGNBQWM7QUFBQSxFQUN2RTtBQUFBLEVBRU8sV0FBaUI7QUFDcEIsU0FBSyxlQUFlLEVBQUUsU0FBUyxJQUFJO0FBQUEsRUFDdkM7QUFBQSxFQUVPLGFBQW1CO0FBQ3RCLFNBQUssaUJBQWlCLEVBQUUsU0FBUyxJQUFJO0FBQUEsRUFDekM7QUFBQSxFQUVPLGFBQW1CO0FBQ3RCLFNBQUssZUFBZSxFQUFFLFNBQVMsS0FBSztBQUFBLEVBQ3hDO0FBQUEsRUFFTyxlQUFxQjtBQUN4QixTQUFLLGlCQUFpQixFQUFFLFNBQVMsS0FBSztBQUFBLEVBQzFDO0FBQUEsRUFFTyxjQUF1QjtBQUMxQixXQUFPLEtBQUssZUFBZSxFQUFFLFNBQVM7QUFBQSxFQUMxQztBQUFBLEVBRU8sZ0JBQXlCO0FBQzVCLFdBQU8sS0FBSyxpQkFBaUIsRUFBRSxTQUFTO0FBQUEsRUFDNUM7QUFBQSxFQUVPLGlCQUF1QjtBQUMxQixRQUFHLEtBQUssWUFBWTtBQUNoQixhQUFPLEtBQUssV0FBVztBQUUzQixXQUFPLEtBQUssU0FBUztBQUFBLEVBQ3pCO0FBQUEsRUFFTyxtQkFBeUI7QUFDNUIsUUFBRyxLQUFLLGNBQWM7QUFDbEIsYUFBTyxLQUFLLGFBQWE7QUFFN0IsV0FBTyxLQUFLLFdBQVc7QUFBQSxFQUMzQjtBQUNKO0FBN0lBO0FBQU0sZUFBTiwyQ0FEQSx5QkFDTTtBQUFOLDRCQUFNO0FBQU4sSUFBTSxjQUFOOzs7QUNOQSxPQUFPLFdBQVc7QUFDbEIsT0FBTyxTQUFTO0FBQ2hCLE9BQU8sU0FBUzs7O0FDRmhCLE9BQU9DLGNBQWE7OztBQ0FwQixPQUFPQyxjQUFhO0FBQ3BCLE9BQU8sU0FBUztBQUNoQixPQUFPQyxXQUFVO0FBVVYsSUFBTSxXQUFOLE1BQU0sa0JBQThCLFNBQVM7QUFBQSxFQUNoRDtBQUFBLFNBQU8sU0FBU0MsU0FBUTtBQUFBO0FBQUEsRUFLeEI7QUFBQSxFQUNBO0FBQUEsRUFFQSxZQUFZLEtBQWMsV0FBK0I7QUFDckQsVUFBTSxrRUFBa0U7QUFDeEUsU0FBSyxhQUFhLGNBQWMsTUFBTSxNQUFNO0FBQzVDLFNBQUssT0FBTztBQUFBLEVBQ2hCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBT0EsVUFBVSxVQUE4QztBQUVwRCxXQUFPLEtBQUssV0FBVyxRQUFRO0FBQUEsRUFDbkM7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUtBLE1BQVM7QUFDTCxjQUFTLFlBQVksSUFBSSxJQUFJO0FBQzdCLFdBQU8sS0FBSyxLQUFLO0FBQUEsRUFDckI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUEsR0FBVSxXQUF5QztBQUMvQyxXQUFPLElBQUksVUFBUyxNQUFNLFVBQVUsS0FBSyxLQUFLLENBQUMsR0FBRyxLQUFLLFVBQVU7QUFBQSxFQUNyRTtBQUFBLEVBRVUsTUFBYSxXQUF5QztBQUM1RCxXQUFPLEtBQUssR0FBRyxTQUFTO0FBQUEsRUFDNUI7QUFBQSxFQUVBLFdBQW1CO0FBQ2YsV0FBTyxZQUFZLEtBQUssSUFBSSxDQUFDO0FBQUEsRUFDakM7QUFBQSxFQUVBLENBQUMsT0FBTyxXQUFXLElBQUk7QUFDbkIsWUFBUSxLQUFLLHFEQUFxRDtBQUNsRSxXQUFPLEtBQUssU0FBUztBQUFBLEVBQ3pCO0FBQ0o7QUF1Qk8sU0FBUyxZQUFlLE1BQW1CO0FBQzlDLE1BQUksZUFBZTtBQUNuQixRQUFNLGNBQWMsb0JBQUksSUFBdUI7QUFFL0MsUUFBTSxZQUErQixDQUFDLGFBQWE7QUFDL0MsZ0JBQVksSUFBSSxRQUFRO0FBQ3hCLFdBQU8sTUFBTSxZQUFZLE9BQU8sUUFBUTtBQUFBLEVBQzVDO0FBRUEsUUFBTUMsT0FBTSxDQUFDLGFBQXNCO0FBQy9CLFVBQU0sUUFBVyxPQUFPLGFBQWEsYUFBYSxTQUFTLFlBQVksSUFBSTtBQUMzRSxRQUFJLGlCQUFpQixPQUFPO0FBQ3hCLHFCQUFlO0FBQ2Ysa0JBQVksUUFBUSxDQUFDLE9BQU8sR0FBRyxDQUFDO0FBQUEsSUFDcEM7QUFBQSxFQUNKO0FBRUEsU0FBTyxDQUFDLElBQUksU0FBUyxNQUFNLGNBQWMsU0FBUyxHQUFHQSxJQUFnQjtBQUN6RTtBQWdCTyxTQUFTLGVBSWQsTUFBWSxXQUErQztBQUN6RCxNQUFJO0FBQ0osUUFBTSxjQUFjLG9CQUFJLElBQXVCO0FBQy9DLFFBQU0sUUFBUSxJQUFJLE1BQWUsS0FBSyxNQUFNO0FBRTVDLFFBQU0sWUFBK0IsQ0FBQyxhQUFhO0FBQy9DLFFBQUksWUFBWSxTQUFTLEdBQUc7QUFDeEIsZ0JBQVUsS0FBSztBQUFBLFFBQUksQ0FBQyxLQUFLLE1BQ3JCLElBQUksVUFBVSxNQUFNO0FBQ2hCLGdCQUFNLFFBQVEsSUFBSSxJQUFJO0FBQ3RCLGNBQUksTUFBTSxDQUFDLE1BQU0sT0FBTztBQUNwQixrQkFBTSxDQUFDLElBQUksSUFBSSxJQUFJO0FBQ25CLHdCQUFZLFFBQVEsQ0FBQyxPQUFPLEdBQUcsQ0FBQztBQUFBLFVBQ3BDO0FBQUEsUUFDSixDQUFDO0FBQUEsTUFDTDtBQUFBLElBQ0o7QUFFQSxnQkFBWSxJQUFJLFFBQVE7QUFFeEIsV0FBTyxNQUFNO0FBQ1Qsa0JBQVksT0FBTyxRQUFRO0FBQzNCLFVBQUksWUFBWSxTQUFTLEdBQUc7QUFDeEIsZ0JBQVEsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDO0FBQ3hCLGdCQUFRLFNBQVM7QUFDakIsY0FBTSxTQUFTO0FBQUEsTUFDbkI7QUFBQSxJQUNKO0FBQUEsRUFDSjtBQUVBLFFBQU0sTUFBTSxNQUFTO0FBQ2pCLFVBQU0sT0FBTyxLQUFLLElBQUksQ0FBQyxLQUFLLE1BQU07QUFDOUIsVUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHO0FBQ1gsY0FBTSxDQUFDLElBQUksSUFBSSxJQUFJO0FBQUEsTUFDdkI7QUFFQSxhQUFPLE1BQU0sQ0FBQztBQUFBLElBQ2xCLENBQUM7QUFFRCxXQUFPLFlBQVksVUFBVSxHQUFJLElBQWEsSUFBSztBQUFBLEVBQ3ZEO0FBRUEsU0FBTyxJQUFJLFNBQVMsS0FBSyxTQUFTO0FBQ3RDO0FBaUNPLFNBQVMsY0FBaUIsUUFBdUMsS0FBMEI7QUFDOUYsUUFBTSxPQUFPLFNBQVMsR0FBRztBQUV6QixRQUFNLFlBQStCLENBQUMsYUFBYTtBQUMvQyxVQUFNLE1BQU0sa0JBQWtCLElBQUksV0FBVyxZQUFZO0FBQ3pELFVBQU0sS0FBSyxPQUFPLFFBQVEsR0FBRyxHQUFHLEtBQUssSUFBSSxJQUFJLE1BQU0sU0FBUyxDQUFDO0FBQzdELFdBQU8sTUFBTSxPQUFPLFdBQVcsRUFBRTtBQUFBLEVBQ3JDO0FBRUEsUUFBTSxNQUFNLE1BQVM7QUFDakIsUUFBSSxrQkFBa0IsSUFBSSxVQUFVO0FBQ2hDLGFBQU8sT0FBTyxVQUFVLEdBQUcsRUFBRSxnQkFBZ0I7QUFBQSxJQUNqRCxPQUFPO0FBQ0gsWUFBTUMsVUFBUyxPQUFPLEtBQUssV0FBVyxLQUFLLEdBQUcsQ0FBQztBQUUvQyxVQUFJQSxXQUFVLFVBQVUsT0FBTyxPQUFPQSxPQUFNLE1BQU0sWUFBWTtBQUMxRCxlQUFRLE9BQU9BLE9BQU0sRUFBb0I7QUFBQSxNQUM3QztBQUVBLFVBQUksUUFBUSxPQUFRLFFBQU8sT0FBTyxJQUFJO0FBQ3RDLFVBQUksT0FBTyxPQUFRLFFBQU8sT0FBTyxHQUEwQjtBQUUzRCxZQUFNLE1BQU0sdUJBQXVCLEdBQUcsRUFBRTtBQUFBLElBQzVDO0FBQUEsRUFDSjtBQUVBLFNBQU8sSUFBSSxTQUFTLEtBQUssU0FBUztBQUN0Qzs7O0FDM05PLFNBQVMsU0FBUyxNQUF1QjtBQUM1QyxTQUFPLE9BQU8sT0FBTyxLQUFLLElBQUk7QUFDbEM7QUFXQSxTQUFTLGNBQWM7QUFDbkIsUUFBTSxNQUFNLGNBQWM7QUFDOUI7QUFFTyxJQUFNLE1BQWM7QUFBQSxFQUN2QixtQkFBbUIsQ0FBQztBQUFBLEVBQ3BCLFVBQVU7QUFBQSxFQUNWLFFBQVE7QUFBQSxFQUNSLFVBQVU7QUFBQSxFQUNWLFdBQVcsTUFBTTtBQUFBLEVBQ2pCLGdCQUFnQixNQUFNO0FBQzFCOzs7QUNsQ08sSUFBTSxRQUFOLE1BQU0sT0FBTTtBQUFBLEVBVWYsWUFBWSxRQUF1QjtBQU5uQyxvQkFBVyxvQkFBSSxJQUFzQjtBQUVyQyxTQUFRLFdBQVcsb0JBQUksSUFBZ0I7QUFDdkMsU0FBUSxTQUFTLG9CQUFJLElBQWdCO0FBQ3JDLFNBQVEsVUFBVTtBQUdkLFNBQUssU0FBUztBQUFBLEVBQ2xCO0FBQUEsRUFFQSxVQUFVLFVBQXNCO0FBQzVCLFNBQUssVUFBVSxJQUFJLFFBQVE7QUFBQSxFQUMvQjtBQUFBLEVBRUEsUUFBUSxVQUFzQjtBQUMxQixRQUFJLEtBQUssVUFBVSxDQUFDLEtBQUssT0FBTyxTQUFTO0FBQ3JDLFdBQUssT0FBTyxRQUFRLFFBQVE7QUFBQSxJQUNoQyxPQUFPO0FBQ0gsV0FBSyxPQUFPLElBQUksUUFBUTtBQUFBLElBQzVCO0FBQUEsRUFDSjtBQUFBLEVBRUEsSUFBTyxJQUFhO0FBQ2hCLFVBQU0sT0FBTyxPQUFNO0FBQ25CLFdBQU0sVUFBVTtBQUVoQixRQUFJO0FBQ0EsYUFBTyxHQUFHO0FBQUEsSUFDZCxVQUFFO0FBQ0UsV0FBSyxPQUFPLFFBQVEsQ0FBQyxPQUFPLEdBQUcsQ0FBQztBQUNoQyxXQUFLLE9BQU8sTUFBTTtBQUNsQixXQUFLLFVBQVU7QUFDZixhQUFNLFVBQVU7QUFBQSxJQUNwQjtBQUFBLEVBQ0o7QUFBQSxFQUVBLFVBQVU7QUFDTixTQUFLLFNBQVMsUUFBUSxDQUFDLE9BQU8sR0FBRyxDQUFDO0FBQ2xDLFNBQUssU0FBUyxNQUFNO0FBQ3BCLFNBQUssU0FBUyxNQUFNO0FBQ3BCLFdBQU8sS0FBSztBQUFBLEVBQ2hCO0FBQ0o7QUE2RU8sU0FBUyxXQUFrQjtBQUM5QixRQUFNLFFBQVEsTUFBTTtBQUNwQixNQUFJLENBQUMsT0FBTztBQUNSLFVBQU0sTUFBTSwyQ0FBMkM7QUFBQSxFQUMzRDtBQUVBLFNBQU87QUFDWDtBQUtPLFNBQVMsVUFBVSxTQUFxQjtBQUMzQyxNQUFJLENBQUMsTUFBTSxTQUFTO0FBQ2hCLFlBQVEsTUFBTSxNQUFNLHNEQUFzRCxDQUFDO0FBQUEsRUFDL0U7QUFFQSxRQUFNLFNBQVMsVUFBVSxPQUFPO0FBQ3BDO0FBd0NPLFNBQVMsV0FBYyxJQUFnQztBQUMxRCxRQUFNLFFBQVEsSUFBSSxNQUFNLElBQUk7QUFDNUIsU0FBTyxNQUFNLElBQUksTUFBTSxHQUFHLE1BQU0sTUFBTSxRQUFRLENBQUMsQ0FBQztBQUNwRDs7O0FIcktPLElBQU0sVUFBVSxPQUFPLGtCQUFrQjtBQUt6QyxTQUFTLFFBQVEsUUFBd0I7QUFDNUMsU0FBTyxXQUFXLFNBQVUsT0FBTyxPQUFPLElBQWU7QUFDN0Q7QUF1RUEsU0FBUyxjQUFjLE1BQXVCO0FBQzFDLFNBQU8sS0FBSyxxQkFBcUJDLFNBQVE7QUFDN0M7QUFFQSxTQUFTLGVBQWUsTUFBdUI7QUFDM0MsU0FBTyxPQUFPLFNBQVMsY0FBYyxDQUFDLGNBQWMsSUFBSTtBQUM1RDtBQUdPLFNBQVMsUUFBUSxRQUFnQixNQUFjO0FBQ2xELE1BQUksV0FBVyxVQUFVLE9BQU8sT0FBTyxNQUFNLElBQUk7QUFDN0MsWUFBUSxLQUFLLHVCQUF1QixPQUFPLE9BQU8sQ0FBQyxPQUFPLElBQUksT0FBTyxNQUFNLEVBQUU7QUFBQSxFQUNqRjtBQUVBLFNBQU8sT0FBTyxRQUFRLEVBQUUsQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO0FBQzdDO0FBWU8sU0FBUyxJQUNaLE1BQ0EsU0FFQSxLQUNDO0FBQ0QsUUFBTSxFQUFFLEdBQUcsT0FBTyxjQUFjLFdBQVcsQ0FBQyxHQUFHLEdBQUcsS0FBSyxJQUFJO0FBQzNELFFBQU0sUUFBUTtBQUVkLE1BQUksSUFBSyxRQUFPLE9BQU8sT0FBTyxFQUFFLElBQUksQ0FBQztBQUNyQyxNQUFJLFVBQVUsS0FBSztBQUVuQixhQUFXLENBQUNDLE1BQUssS0FBSyxLQUFLLE9BQU8sUUFBUSxLQUFLLEdBQUc7QUFDOUMsUUFBSSxVQUFVLE9BQVcsUUFBTyxNQUFNQSxJQUFHO0FBQUEsRUFDN0M7QUFFQSxNQUFJLE9BQU8sU0FBUyxVQUFVO0FBQzFCLFFBQUksUUFBUSxJQUFJLG1CQUFtQjtBQUMvQixhQUFPLElBQUksa0JBQWtCLElBQUk7QUFBQSxJQUNyQyxPQUFPO0FBQ0gsWUFBTSxNQUFNLDhCQUE4QixJQUFJLEdBQUc7QUFBQSxJQUNyRDtBQUFBLEVBQ0o7QUFFQSxNQUFJLGVBQWUsSUFBSSxHQUFHO0FBQ3RCLFVBQU1DLFVBQVMsS0FBSyxFQUFFLFVBQVUsR0FBRyxNQUFNLENBQUM7QUFDMUMsUUFBSSxNQUFPLFNBQVFBLFNBQVEsS0FBSztBQUNoQyxRQUFJQSxPQUFNO0FBQ1YsV0FBT0E7QUFBQSxFQUNYO0FBR0EsUUFBTSxFQUFFLEtBQUssT0FBTyxVQUFVLElBQUk7QUFDbEMsU0FBTyxNQUFNO0FBQ2IsU0FBTyxNQUFNO0FBRWIsUUFBTSxVQUE2RCxDQUFDO0FBQ3BFLFFBQU0sV0FBK0MsQ0FBQztBQUd0RCxhQUFXLENBQUNELE1BQUssS0FBSyxLQUFLLE9BQU8sUUFBUSxLQUFLLEdBQUc7QUFDOUMsUUFBSUEsS0FBSSxXQUFXLElBQUksR0FBRztBQUN0QixjQUFRLEtBQUssQ0FBQ0EsS0FBSSxNQUFNLENBQUMsR0FBRyxLQUFzQixDQUFDO0FBQ25ELGFBQU8sTUFBTUEsSUFBRztBQUFBLElBQ3BCO0FBQ0EsUUFBSSxpQkFBaUIsVUFBVTtBQUMzQixlQUFTLEtBQUssQ0FBQ0EsTUFBSyxLQUFLLENBQUM7QUFDMUIsWUFBTUEsSUFBRyxJQUFJLE1BQU0sSUFBSTtBQUFBLElBQzNCO0FBQUEsRUFDSjtBQUdBLFFBQU0sU0FBUyxlQUFlLGFBQWEsS0FBSyxJQUFJLElBQUssS0FBZSxLQUFLO0FBQzdFLE1BQUksYUFBYyxRQUFPLE9BQU8sUUFBUSxLQUFLO0FBQzdDLE1BQUksTUFBTyxTQUFRLFFBQVEsS0FBSztBQUVoQyxNQUFJLElBQUssS0FBSSxPQUFPLFFBQVEsR0FBRztBQUMvQixNQUFJLFVBQVcsS0FBSSxTQUFTLFFBQVEsU0FBUztBQUc3QyxhQUFXLFNBQVMsTUFBTSxRQUFRLFFBQVEsSUFBSSxXQUFXLENBQUMsUUFBUSxHQUFHO0FBQ2pFLFFBQUksVUFBVSxNQUFNO0FBQ2hCLGNBQVEsS0FBSyxtREFBbUQ7QUFDaEU7QUFBQSxJQUNKO0FBRUEsUUFBSSxNQUFNLFFBQVEsS0FBSyxHQUFHO0FBQ3RCLGlCQUFXLE1BQU0sT0FBTztBQUNwQixZQUFJLFNBQVMsUUFBUSxJQUFJLEVBQUU7QUFBQSxNQUMvQjtBQUFBLElBQ0osV0FBVyxPQUFPO0FBQ2QsVUFBSSxTQUFTLFFBQVEsT0FBTyxFQUFFO0FBQUEsSUFDbEM7QUFBQSxFQUNKO0FBR0EsUUFBTSxrQkFBa0IsUUFBUSxJQUFJLENBQUMsQ0FBQyxLQUFLLE9BQU8sTUFBTTtBQUNwRCxVQUFNLE9BQU8sU0FBUyxHQUFHO0FBQ3pCLFVBQU0sS0FBSyxLQUFLLFdBQVcsU0FBUyxJQUM5QixPQUFPLFFBQVEsV0FBVyxLQUFLLE1BQU0sQ0FBQyxDQUFDLElBQUksT0FBTyxJQUNsRCxPQUFPLFFBQVEsU0FBUyxHQUFHLEdBQUcsT0FBTztBQUUzQyxXQUFPLE1BQU0sT0FBTyxXQUFXLEVBQUU7QUFBQSxFQUNyQyxDQUFDO0FBR0QsUUFBTSxrQkFBa0IsU0FBUyxJQUFJLENBQUMsQ0FBQyxNQUFNLE9BQU8sTUFBTTtBQUN0RCxVQUFNLFVBQVUsUUFBUSxVQUFVLE1BQU07QUFDcEMsVUFBSSxRQUFRLE1BQU0sUUFBUSxJQUFJLENBQUM7QUFBQSxJQUNuQyxDQUFDO0FBQ0QsUUFBSSxRQUFRLE1BQU0sUUFBUSxJQUFJLENBQUM7QUFDL0IsV0FBTztBQUFBLEVBQ1gsQ0FBQztBQUdELE1BQUksZ0JBQWdCLFNBQVMsS0FBSyxnQkFBZ0IsU0FBUyxHQUFHO0FBQzFELGNBQVUsTUFBTTtBQUNaLHNCQUFnQixRQUFRLENBQUMsT0FBTyxHQUFHLENBQUM7QUFDcEMsc0JBQWdCLFFBQVEsQ0FBQyxPQUFPLEdBQUcsQ0FBQztBQUFBLElBQ3hDLENBQUM7QUFBQSxFQUNMO0FBRUEsTUFBSSxNQUFNO0FBQ1YsU0FBTztBQUNYO0FBRU8sSUFBTSxPQUFPOzs7QUl0T3BCLE9BQU9FLGNBQWE7OztBQ0twQixJQUFNLE1BQU0sT0FBTyxtREFBbUQ7QUFFL0QsSUFBTSwwQkFBZ0QsTUFBTSxJQUM5RCxLQUFLLENBQUNDLFNBQVFBLEtBQUksdUJBQXVCLEVBQ3pDLE1BQU0sTUFBTSxNQUFNLE1BQU07OztBRFQ3QixJQUFBQyxLQUFBO0FBS08sSUFBTSxXQUFOLE1BQU0sbUJBQTBCLEtBQUFDLFNBQVEsUUFDbkMsS0FBQUEsU0FBUSxTQVdSRCxNQUFBQyxTQUFRLFlBWm1CLElBQWU7QUFBQSxFQWdFbEQsWUFBWSxFQUFFLFdBQVcsQ0FBQyxFQUFFLElBQXlDLENBQUMsR0FBRztBQUNyRSxVQUFNO0FBeENWLFNBQVEsZ0JBQWdCLG9CQUFJLElBQVk7QUF5Q3BDLFNBQUssWUFBWSxNQUFNLFFBQVEsUUFBUSxJQUFJLFdBQVcsQ0FBQyxRQUFRO0FBQUEsRUFDbkU7QUFBQSxFQWxFQTtBQUFBLFNBQVEsTUFBbUI7QUFBQSxNQUN2QixXQUFXLENBQUM7QUFBQSxNQUVaLGVBQWU7QUFBQSxRQUNYLGFBQWEsQ0FBQ0EsU0FBUSxhQUFhQSxTQUFRLFNBQVM7QUFBQSxNQUN4RDtBQUFBLE1BQ0EsaUJBQWlCO0FBQUEsUUFDYixhQUFhLENBQUNBLFNBQVEsYUFBYUEsU0FBUSxTQUFTO0FBQUEsTUFDeEQ7QUFBQSxJQUNKO0FBQUE7QUFBQSxFQUVBO0FBQUEsU0FBUUQsT0FBc0I7QUFBQSxNQUMxQixVQUFVQyxTQUFRLFVBQVUsU0FBUyxZQUFZLElBQUksSUFBSUEsU0FBUSxXQUFXLFFBQVE7QUFBQSxJQUN4RjtBQUFBO0FBQUEsRUFFQSxPQUFPO0FBQ0gsSUFBQUEsU0FBUSxjQUFjLElBQUk7QUFDMUIsNEJBQXdCLElBQUk7QUFBQSxFQUNoQztBQUFBLEVBRUEsT0FBTyxJQUFPLFdBQXFCLENBQUMsR0FBRztBQUNuQyxXQUFPLElBQUksVUFBUyxFQUFFLFNBQVMsQ0FBQztBQUFBLEVBQ3BDO0FBQUEsRUFLQSxJQUFJLFdBQVc7QUFDWCxXQUFPLENBQUMsR0FBRyxLQUFLLFNBQVM7QUFBQSxFQUM3QjtBQUFBLEVBRUEsU0FBUyxPQUFVLFFBQWdCLElBQVU7QUFDekMsUUFBSSxpQkFBaUIsV0FBVTtBQUMzQixZQUFNLE1BQU0seUNBQXlDO0FBQUEsSUFDekQ7QUFFQSxRQUFJLFFBQVEsR0FBRztBQUNYLFdBQUssWUFBWTtBQUFBLFFBQ2IsR0FBRyxLQUFLLFVBQVUsTUFBTSxHQUFHLEtBQUs7QUFBQSxRQUNoQztBQUFBLFFBQ0EsR0FBRyxLQUFLLFVBQVUsTUFBTSxLQUFLO0FBQUEsTUFDakM7QUFBQSxJQUNKLE9BQU87QUFDSCxXQUFLLFVBQVUsS0FBSyxLQUFLO0FBQ3pCLGNBQVEsS0FBSyxVQUFVLFNBQVM7QUFBQSxJQUNwQztBQUVBLFNBQUssS0FBSyxlQUFlLE9BQU8sS0FBSztBQUNyQyxTQUFLLE9BQU8sVUFBVTtBQUFBLEVBQzFCO0FBQUEsRUFFQSxTQUFTLE9BQW1CO0FBQ3hCLFdBQU8sS0FBSyxVQUFVLFVBQVUsQ0FBQyxPQUFPLE9BQU8sS0FBSyxJQUFJO0FBQUEsRUFDNUQ7QUFBQSxFQUVBLFlBQVksT0FBZ0I7QUFDeEIsVUFBTSxRQUFRLEtBQUssVUFBVSxVQUFVLENBQUMsTUFBTSxNQUFNLEtBQUs7QUFDekQsU0FBSyxVQUFVLE9BQU8sT0FBTyxDQUFDO0FBRTlCLFNBQUssS0FBSyxpQkFBaUIsT0FBTyxLQUFLO0FBQ3ZDLFNBQUssT0FBTyxVQUFVO0FBQUEsRUFDMUI7QUFBQSxFQU9BLFFBQVFDLFNBQWdCLFVBQXFEO0FBQ3pFLFVBQU0sS0FBSyxNQUFNLFFBQVFBLFNBQVEsUUFBUTtBQUN6QyxTQUFLLGNBQWMsSUFBSSxFQUFFO0FBQ3pCLFdBQU87QUFBQSxFQUNYO0FBQUEsRUFFQSxXQUFXLElBQWtCO0FBQ3pCLFVBQU0sV0FBVyxFQUFFO0FBQ25CLFNBQUssY0FBYyxPQUFPLEVBQUU7QUFBQSxFQUNoQztBQUFBLEVBRUEsVUFBVTtBQUNOLFNBQUssS0FBSyxTQUFTO0FBQ25CLGVBQVcsTUFBTSxLQUFLLGNBQWMsT0FBTyxHQUFHO0FBQzFDLFlBQU0sV0FBVyxFQUFFO0FBQUEsSUFDdkI7QUFBQSxFQUNKO0FBQ0o7OztBRXZETyxTQUFTLElBQXVDO0FBQUEsRUFDbkQ7QUFBQSxFQUNBLFVBQVU7QUFBQSxFQUNWO0FBQUEsRUFDQSxLQUFLLENBQUMsU0FBZTtBQUN6QixHQUEwQztBQUd0QyxRQUFNLGVBQWUsU0FBUztBQUM5QixRQUFNLE1BQU0sb0JBQUksSUFBeUI7QUFDekMsUUFBTSxXQUFXLElBQUksU0FBYTtBQUVsQyxXQUFTQyxRQUFPLEVBQUUsTUFBTSxPQUFPLE9BQU8sQ0FBQyxLQUFLLEdBQUcsTUFBTSxHQUFZO0FBQzdELFFBQUksT0FBTyxZQUFZLFlBQVk7QUFDL0IsY0FBUSxPQUFPLE1BQU0sTUFBTSxJQUFJLENBQUM7QUFBQSxJQUNwQyxXQUFXLFlBQVksTUFBTTtBQUN6QixVQUFJLGVBQWUsS0FBSztBQUFBLElBQzVCO0FBQ0EsVUFBTSxRQUFRO0FBQUEsRUFDbEI7QUFFQSxXQUFTLFNBQVMsV0FBMkI7QUFDekMsVUFBTSxRQUFRLENBQUMsR0FBRyxTQUFTO0FBQzNCLFVBQU0sTUFBTSxNQUFNLElBQUksRUFBRTtBQUN4QixVQUFNLFFBQVEsSUFBSSxJQUFJLEdBQUc7QUFHekIsZUFBVyxDQUFDLEtBQUssS0FBSyxLQUFLLElBQUksUUFBUSxHQUFHO0FBR3RDLGVBQVMsWUFBWSxNQUFNLEtBQUs7QUFFaEMsVUFBSSxDQUFDLE1BQU0sSUFBSSxHQUFHLEdBQUc7QUFDakIsUUFBQUEsUUFBTyxLQUFLO0FBQ1osWUFBSSxPQUFPLEdBQUc7QUFBQSxNQUNsQjtBQUFBLElBQ0o7QUFHQSxVQUFNLElBQUksQ0FBQyxNQUFNLE1BQU07QUFDbkIsWUFBTSxNQUFNLElBQUksQ0FBQztBQUNqQixVQUFJLElBQUksSUFBSSxHQUFHLEdBQUc7QUFDZCxjQUFNO0FBQUEsVUFDRixPQUFPLENBQUMsRUFBRSxRQUFRO0FBQUEsVUFDbEI7QUFBQSxRQUNKLElBQUksSUFBSSxJQUFJLEdBQUc7QUFDZixpQkFBUyxDQUFDO0FBQ1YsWUFBSSxTQUFTLFNBQVMsS0FBSyxHQUFHO0FBQzFCLGtCQUFRLEtBQUsseUJBQXlCLEdBQUcsRUFBRTtBQUFBLFFBQy9DLE9BQU87QUFDSCxtQkFBUyxTQUFTLEtBQUs7QUFBQSxRQUMzQjtBQUFBLE1BQ0osT0FBTztBQUNILGNBQU0sQ0FBQyxPQUFPLFFBQVEsSUFBSSxZQUFZLENBQUM7QUFDdkMsY0FBTSxRQUFRLElBQUksTUFBTSxZQUFZO0FBQ3BDLGNBQU0sUUFBUSxNQUFNLElBQUksTUFBTSxRQUFRLE1BQU0sS0FBSyxDQUFDO0FBQ2xELFlBQUksSUFBSSxLQUFLLEVBQUUsTUFBTSxPQUFPLE9BQU8sQ0FBQyxPQUFPLFFBQVEsR0FBRyxNQUFNLENBQUM7QUFDN0QsaUJBQVMsU0FBUyxLQUFLO0FBQUEsTUFDM0I7QUFBQSxJQUNKLENBQUM7QUFBQSxFQUNMO0FBRUEsUUFBTSxVQUFVLEtBQUssVUFBVSxNQUFNO0FBQ2pDLGFBQVMsS0FBSyxJQUFJLENBQUM7QUFBQSxFQUN2QixDQUFDO0FBQ0QsV0FBUyxLQUFLLElBQUksQ0FBQztBQUVuQixZQUFVLE1BQU07QUFDWixZQUFRO0FBRVIsZUFBVyxTQUFTLElBQUksT0FBTyxHQUFHO0FBQzlCLE1BQUFBLFFBQU8sS0FBSztBQUFBLElBQ2hCO0FBRUEsUUFBSSxNQUFNO0FBQUEsRUFDZCxDQUFDO0FBRUQsU0FBTztBQUNYOzs7QUN6Rk8sU0FBUyxLQUErQjtBQUFBLEVBQzNDO0FBQUEsRUFDQSxVQUFVO0FBQUEsRUFDVjtBQUNKLEdBQWlDO0FBQzdCLFFBQU0sZUFBZSxTQUFTO0FBQzlCLFFBQU0sV0FBVyxJQUFJLFNBQVk7QUFFakMsTUFBSTtBQUVKLFdBQVMsU0FBUyxHQUFNO0FBQ3BCLGVBQVcsU0FBUyxTQUFTLFVBQVU7QUFDbkMsZUFBUyxZQUFZLEtBQUs7QUFFMUIsVUFBSSxPQUFPLFlBQVksWUFBWTtBQUMvQixnQkFBUSxLQUFLO0FBQUEsTUFDakIsV0FBVyxZQUFZLE1BQU07QUFDekIsWUFBSSxlQUFlLEtBQUs7QUFBQSxNQUM1QjtBQUVBLFVBQUksTUFBTyxPQUFNLFFBQVE7QUFBQSxJQUM3QjtBQUVBLFlBQVEsSUFBSSxNQUFNLFlBQVk7QUFDOUIsVUFBTSxLQUFLLE1BQU0sSUFBSSxNQUFNLFFBQVEsQ0FBQyxDQUFDO0FBQ3JDLFFBQUksT0FBTyxNQUFNLE9BQU8sU0FBUyxPQUFPLFFBQVEsT0FBTyxRQUFXO0FBQzlELGVBQVMsU0FBUyxFQUFFO0FBQUEsSUFDeEI7QUFBQSxFQUNKO0FBRUEsUUFBTSxVQUFVLE1BQU0sVUFBVSxNQUFNO0FBQ2xDLGFBQVMsTUFBTSxJQUFJLENBQUM7QUFBQSxFQUN4QixDQUFDO0FBQ0QsV0FBUyxNQUFNLElBQUksQ0FBQztBQUVwQixZQUFVLE1BQU07QUFDWixVQUFNLFFBQVE7QUFDZCxZQUFRO0FBQUEsRUFDWixDQUFDO0FBRUQsU0FBTztBQUNYOzs7QUMvREEsT0FBTyxlQUFlOzs7QUNIdEIsT0FBT0MsY0FBYTs7O0FDQXBCLE9BQU8sYUFBYTtBQVViLElBQU0sVUFBVSxRQUFRO0FBZ0N4QixTQUFTLEtBQUssS0FBd0I7QUFDekMsU0FBTyxNQUFNLFFBQVEsR0FBRyxJQUFJLFFBQVEsUUFBUSxNQUFNLEdBQUcsSUFBSSxRQUFRLFFBQVEsS0FBSyxHQUFHO0FBQ3JGO0FBRU8sU0FBUyxVQUFVLEtBQXlDO0FBQy9ELFNBQU8sSUFBSSxRQUFRLENBQUMsU0FBUyxXQUFXO0FBQ3BDLFFBQUksTUFBTSxRQUFRLEdBQUcsR0FBRztBQUNwQixjQUFRLFFBQVEsWUFBWSxLQUFLLENBQUMsR0FBRyxRQUFRO0FBQ3pDLFlBQUk7QUFDQSxrQkFBUSxRQUFRLFFBQVEsbUJBQW1CLEdBQUcsQ0FBQztBQUFBLFFBQ25ELFNBQVMsT0FBTztBQUNaLGlCQUFPLEtBQUs7QUFBQSxRQUNoQjtBQUFBLE1BQ0osQ0FBQztBQUFBLElBQ0wsT0FBTztBQUNILGNBQVEsUUFBUSxXQUFXLEtBQUssQ0FBQyxHQUFHLFFBQVE7QUFDeEMsWUFBSTtBQUNBLGtCQUFRLFFBQVEsUUFBUSxZQUFZLEdBQUcsQ0FBQztBQUFBLFFBQzVDLFNBQVMsT0FBTztBQUNaLGlCQUFPLEtBQUs7QUFBQSxRQUNoQjtBQUFBLE1BQ0osQ0FBQztBQUFBLElBQ0w7QUFBQSxFQUNKLENBQUM7QUFDTDs7O0FEN0RPLElBQU0sT0FBT0MsU0FBUTtBQUVyQixTQUFTLFNBQVNDLFdBQWtCLFVBQXVCO0FBQzlELFNBQU9ELFNBQVEsS0FBSyxTQUFTQyxXQUFVLE1BQU0sS0FBSyxXQUFXLENBQUM7QUFDbEU7QUFFTyxTQUFTLFFBQVFDLFVBQWlCLFVBQXVCO0FBQzVELFNBQU9GLFNBQVEsS0FBSyxRQUFRRSxVQUFTLE1BQU0sS0FBSyxXQUFXLENBQUM7QUFDaEU7QUF5Qk8sU0FBUyxXQUNaLE1BQ0EsTUFDQSxVQUNBLFdBQ1c7QUFDWCxNQUFJLGVBQWU7QUFDbkIsTUFBSSxRQUE2QjtBQUNqQyxRQUFNLGNBQWMsb0JBQUksSUFBZ0I7QUFFeEMsV0FBUyxVQUFVLFVBQWtDO0FBQ2pELGFBQVNDLEtBQUksT0FBVTtBQUNuQixVQUFJLFVBQVUsY0FBYztBQUN4Qix1QkFBZTtBQUNmLG9CQUFZLFFBQVEsQ0FBQyxPQUFPLEdBQUcsQ0FBQztBQUFBLE1BQ3BDO0FBQUEsSUFDSjtBQUVBLFFBQUksWUFBWSxTQUFTLEdBQUc7QUFDeEIsY0FBUSxTQUFTLE1BQU0sTUFBTTtBQUN6QixZQUFJLE9BQU8sYUFBYSxZQUFZO0FBQ2hDLGdCQUFNLFFBQVEsU0FBUyxZQUFZO0FBQ25DLGNBQUksaUJBQWlCLFNBQVM7QUFDMUIsa0JBQU0sS0FBS0EsSUFBRztBQUFBLFVBQ2xCLE9BQU87QUFDSCxZQUFBQSxLQUFJLEtBQUs7QUFBQSxVQUNiO0FBQUEsUUFDSixPQUFPO0FBQ0gsb0JBQVUsUUFBUSxFQUFFLEtBQUssQ0FBQyxXQUFXO0FBQ2pDLFlBQUFBLEtBQUksWUFBWSxVQUFVLFFBQVEsWUFBWSxJQUFLLE1BQVk7QUFBQSxVQUNuRSxDQUFDO0FBQUEsUUFDTDtBQUFBLE1BQ0osQ0FBQztBQUFBLElBQ0w7QUFFQSxnQkFBWSxJQUFJLFFBQVE7QUFFeEIsV0FBTyxNQUFNO0FBQ1Qsa0JBQVksT0FBTyxRQUFRO0FBQzNCLFVBQUksWUFBWSxTQUFTLEdBQUc7QUFDeEIsZUFBTyxPQUFPO0FBQ2QsZ0JBQVE7QUFBQSxNQUNaO0FBQUEsSUFDSjtBQUFBLEVBQ0o7QUFFQSxTQUFPLElBQUksU0FBUyxNQUFNLGNBQWMsU0FBUztBQUNyRDs7O0FFaEZBLE9BQU9DLFdBQVU7QUFDakIsT0FBT0MsVUFBUztBQU1ULElBQU0sVUFBVSxJQUFJLFlBQVksT0FBTztBQUF2QyxJQUNILFVBQVUsSUFBSSxZQUFZO0FBRXZCLElBQU0sT0FBTyxXQUFXRCxNQUFLLFNBQVMsY0FBYyxHQUFHLEtBQUssTUFDL0RBLE1BQUssU0FBUyxjQUFjLENBQUM7QUFVMUIsU0FBUyxlQUE4QixLQUFXLE1BQTBDO0FBQy9GLFFBQU0sY0FBYyxFQUFFLEdBQUcsSUFBSTtBQUU3QixhQUFVLFVBQVUsT0FBTyxLQUFLLFdBQXFCLEdBQUc7QUFDcEQsUUFBRyxDQUFDLE1BQU0sUUFBUSxJQUFJLEdBQUc7QUFDckIsVUFBRyxXQUFXLE1BQU07QUFDaEIsZUFBTyxZQUFZLElBQWdDO0FBQ25EO0FBQUEsTUFDSjtBQUNBO0FBQUEsSUFDSjtBQUVBLGVBQVUsV0FBVyxNQUFNO0FBQ3ZCLFVBQUcsV0FBVyxTQUFTO0FBQ25CLGVBQU8sWUFBWSxNQUFrQztBQUNyRDtBQUFBLE1BQ0o7QUFBQSxJQUNKO0FBQUEsRUFDSjtBQUVBLFNBQU87QUFDWDtBQUVPLFNBQVMsa0JBQWtCLFVBQThFO0FBQzVHLFNBQVEsb0JBQW9CLFdBQ3hCLFNBQVMsR0FBRyxPQUFLLE1BQU0sUUFBUSxDQUFDLElBQzNCLEVBQWlCLFNBQVMsSUFDN0IsUUFBUSxDQUFDLENBQUMsSUFDZCxNQUFNLFFBQVEsUUFBUSxJQUNwQixTQUFTLFNBQVMsSUFDcEIsUUFBUSxRQUFRO0FBQ3RCO0FBK0JPLFNBQVMsY0FBYyxLQUFtQjtBQUM3QyxZQUFVLENBQUUsU0FBUyxNQUFNLEdBQUksQ0FBQztBQUNwQztBQU1PLFNBQVMsaUJBQXVCO0FBQ25DLFlBQVUsMkJBQTJCLEVBQUUsTUFBTSxDQUFDLE1BQWE7QUFDdkQsWUFBUSxNQUFNLHNDQUFzQyxFQUFFLE9BQU87QUFBQSxFQUFLLEVBQUUsS0FBSyxFQUFFO0FBQUEsRUFDL0UsQ0FBQztBQUNMOzs7QUNuR0EsT0FBT0UsVUFBUztBQUNoQixPQUFPQyxZQUFXOzs7QUNGbEIsT0FBT0MsVUFBUztBQUNoQixPQUFPQyxVQUFTO0FBQ2hCLE9BQU9DLGNBQWE7QUFJcEIsSUFBTSxlQUFlLElBQUlDLEtBQUksUUFBUTtBQUVyQyxTQUFTLElBQUksUUFBdUIsT0FBdUIsR0FBVztBQUNsRSxNQUFJLENBQUMsV0FBVyxRQUFRLE9BQU8sQ0FBQyxHQUFHO0FBQy9CLFdBQU8sZ0JBQWdCLGNBQWMsT0FBTyxRQUFRLEtBQUssQ0FBQztBQUFBLEVBQzlEO0FBQ0o7QUFFQSxTQUFTLGNBQWMsU0FBeUIsUUFBd0I7QUFFcEUsU0FBTztBQUNYO0FBRUEsU0FBUyxXQUFXLFFBQXdCLE9BQXVCLEdBQVc7QUFFMUUsTUFDSSxpQkFBaUJBLEtBQUksY0FDckIsb0JBQW9CLFVBQ3BCLE9BQU8sT0FBTyxtQkFBbUIsWUFDbkM7QUFDRSxXQUFPLGVBQWUsS0FBSztBQUMzQixXQUFPO0FBQUEsRUFDWDtBQUVBLE1BQ0ksaUJBQWlCQSxLQUFJLFVBQ3JCLGtCQUFrQkEsS0FBSSxTQUN0QixNQUFNLFNBQVMsTUFDZixNQUFNLFNBQVMsUUFDZixRQUFRLEtBQUssTUFBTSxTQUNyQjtBQUNFLFdBQU8sVUFBVSxPQUFPLE1BQU0sSUFBSTtBQUNsQyxXQUFPO0FBQUEsRUFDWDtBQUVBLE1BQUksaUJBQWlCQSxLQUFJLFdBQVcsa0JBQWtCQSxLQUFJLFlBQVk7QUFDbEUsV0FBTyxZQUFZLEtBQUs7QUFDeEIsV0FBTztBQUFBLEVBQ1g7QUFFQSxNQUNJLGlCQUFpQkMsS0FBSSxjQUNwQixrQkFBa0JELEtBQUksY0FBYyxrQkFBa0JBLEtBQUksY0FDN0Q7QUFDRSxXQUFPLGVBQWUsS0FBSztBQUMzQixXQUFPO0FBQUEsRUFDWDtBQUVBLE1BQUksaUJBQWlCQyxLQUFJLFlBQVksa0JBQWtCQSxLQUFJLE1BQU07QUFBQSxFQUVqRTtBQUVBLE1BQUksaUJBQWlCRCxLQUFJLFVBQVUsa0JBQWtCQSxLQUFJLGFBQWE7QUFDbEUsV0FBTyxXQUFXLEtBQUs7QUFDdkIsV0FBTztBQUFBLEVBQ1g7QUFFQSxNQUFJLGlCQUFpQkEsS0FBSSxjQUFjLGtCQUFrQkEsS0FBSSxVQUFVO0FBQ25FLFdBQU8sV0FBVyxLQUFLO0FBQ3ZCLFdBQU87QUFBQSxFQUNYO0FBRUEsU0FBTztBQUNYO0FBRUEsU0FBUyxPQUFPLFFBQXdCLE9BQXVCO0FBQzNELE1BQUksY0FBYyxRQUFRLEtBQUssRUFBRztBQUVsQyxNQUFJLGVBQWUsVUFBVSxPQUFPLE9BQU8sYUFBYSxZQUFZO0FBQ2hFLFdBQU8sT0FBTyxVQUFVLElBQUk7QUFBQSxFQUNoQztBQUVBLE1BQUksWUFBWSxVQUFVLE9BQU8sT0FBTyxVQUFVLFlBQVk7QUFDMUQsV0FBTyxPQUFPLE9BQU8sS0FBSztBQUFBLEVBQzlCO0FBRUEsUUFBTSxNQUFNLGlCQUFpQixLQUFLLFNBQVMsTUFBTSxFQUFFO0FBQ3ZEO0FBRUEsSUFBTSxFQUFFLFVBQVUsa0JBQWtCLElBQUksU0FBUztBQUFBLEVBQzdDLE9BQU8sUUFBUSxLQUFLO0FBQ2hCLFFBQUksRUFBRSxrQkFBa0JBLEtBQUksU0FBUztBQUNqQyxhQUFPLFFBQVEsS0FBSyxNQUFNLHFCQUFxQixNQUFNLEVBQUUsQ0FBQztBQUFBLElBQzVEO0FBRUEsVUFBTSxNQUFNLE9BQU8sa0JBQWtCO0FBQ3JDLFFBQUk7QUFFSixVQUFNLFNBQVMsQ0FBQ0UsU0FBZ0I7QUFDNUIsVUFBSSxDQUFDQSxLQUFJLFNBQVMsR0FBRyxLQUFLLENBQUNBLEtBQUksU0FBUyxHQUFHLEdBQUc7QUFDMUMsUUFBQUEsT0FBTSxPQUFPQSxJQUFHO0FBQUEsTUFDcEI7QUFFQSxVQUFJLFNBQVUsS0FBSSxnQkFBZ0IsUUFBUTtBQUUxQyxpQkFBVyxJQUFJRixLQUFJLFlBQVk7QUFDL0IsZUFBUyxpQkFBaUJFLElBQUc7QUFDN0IsVUFBSSxhQUFhLFVBQVVGLEtBQUksNEJBQTRCO0FBQUEsSUFDL0Q7QUFFQSxRQUFJLGVBQWUsVUFBVTtBQUN6QixhQUFPLElBQUksSUFBSSxDQUFDO0FBQ2hCLFlBQU0sVUFBVSxJQUFJLFVBQVUsTUFBTSxPQUFPLElBQUksSUFBSSxDQUFDLENBQUM7QUFDckQsZ0JBQVUsT0FBTztBQUFBLElBQ3JCLE9BQU87QUFDSCxhQUFPLEdBQUc7QUFBQSxJQUNkO0FBQUEsRUFDSjtBQUFBLEVBQ0EsU0FBUyxRQUFRLFdBQVc7QUFDeEIsUUFBSSxFQUFFLGtCQUFrQkEsS0FBSSxTQUFTO0FBQ2pDLGFBQU8sUUFBUSxLQUFLLE1BQU0sMkJBQTJCLE1BQU0sRUFBRSxDQUFDO0FBQUEsSUFDbEU7QUFFQSxRQUFJLHFCQUFxQixVQUFVO0FBQy9CLGFBQU8sYUFBYSxVQUFVLElBQUksRUFBRSxNQUFNLEtBQUs7QUFDL0MsWUFBTSxVQUFVLFVBQVU7QUFBQSxRQUN0QixNQUFPLE9BQU8sYUFBYSxVQUFVLElBQUksRUFBRSxNQUFNLEtBQUs7QUFBQSxNQUMxRDtBQUNBLGdCQUFVLE9BQU87QUFBQSxJQUNyQixPQUFPO0FBQ0gsYUFBTyxnQkFBZ0IsVUFBVSxNQUFNLEtBQUssQ0FBQztBQUFBLElBQ2pEO0FBQUEsRUFDSjtBQUFBLEVBQ0EsU0FBUyxRQUFRLE9BQU8sUUFBUSxJQUFJO0FBQ2hDLFFBQUksRUFBRSxpQkFBaUJHLFNBQVEsU0FBUztBQUNwQyxjQUFRSCxLQUFJLE1BQU0sSUFBSSxPQUFPLEtBQUssQ0FBQztBQUFBLElBQ3ZDO0FBRUEsUUFBSSxXQUFXLFFBQVEsT0FBTyxLQUFLLEVBQUc7QUFFdEMsUUFBSSxrQkFBa0IsVUFBVTtBQUM1QixhQUFPLFNBQVMsS0FBSztBQUNyQjtBQUFBLElBQ0o7QUFFQSxRQUFJLGtCQUFrQkEsS0FBSSxXQUFXO0FBQ2pDLFVBQUksaUJBQWlCLFVBQVU7QUFDM0IsbUJBQVcsTUFBTSxNQUFNLFVBQVU7QUFDN0IsY0FBSSxRQUFRLElBQUksS0FBSztBQUFBLFFBQ3pCO0FBRUEsY0FBTSxRQUFRLGVBQWUsQ0FBQyxHQUFHLElBQWFJLFdBQWtCO0FBQzVELGNBQUksRUFBRSxjQUFjRCxTQUFRLFNBQVM7QUFDakMsb0JBQVEsTUFBTSxVQUFVLGNBQWMsRUFBRSxPQUFPLE1BQU0sRUFBRSxDQUFDO0FBQ3hEO0FBQUEsVUFDSjtBQUNBLG1CQUFTLFFBQVEsSUFBSUMsTUFBSztBQUFBLFFBQzlCLENBQUM7QUFFRCxjQUFNLFFBQVEsaUJBQWlCLENBQUMsR0FBRyxPQUFnQjtBQUMvQyxjQUFJLEVBQUUsY0FBY0QsU0FBUSxTQUFTO0FBQ2pDLG9CQUFRLE1BQU0sVUFBVSxpQkFBaUIsRUFBRSxTQUFTLE1BQU0sRUFBRSxDQUFDO0FBQzdEO0FBQUEsVUFDSjtBQUNBLGlCQUFPLFFBQVEsRUFBRTtBQUFBLFFBQ3JCLENBQUM7QUFFRCxrQkFBVSxNQUFNLE1BQU0sUUFBUSxDQUFDO0FBQy9CO0FBQUEsTUFDSjtBQUVBLFVBQUksUUFBUSxPQUFPLEtBQUs7QUFDeEI7QUFBQSxJQUNKO0FBRUEsVUFBTSxNQUFNLGNBQWMsS0FBSyxPQUFPLE1BQU0sRUFBRTtBQUFBLEVBQ2xEO0FBQ0osQ0FBQzs7O0FEcktELE9BQU8sT0FBTyxtQkFBbUI7QUFBQSxFQUM3QixLQUFLRSxLQUFJO0FBQUEsRUFDVCxRQUFRQSxLQUFJO0FBQUEsRUFDWixXQUFXQSxLQUFJO0FBQUE7QUFBQSxFQUVmLGFBQWFBLEtBQUk7QUFBQSxFQUNqQixPQUFPQSxLQUFJO0FBQUEsRUFDWCxPQUFPQSxLQUFJO0FBQUEsRUFDWCxPQUFPQSxLQUFJO0FBQUEsRUFDWCxVQUFVQSxLQUFJO0FBQUEsRUFDZCxZQUFZQSxLQUFJO0FBQUEsRUFDaEIsU0FBU0EsS0FBSTtBQUFBLEVBQ2IsU0FBU0EsS0FBSTtBQUFBLEVBQ2IsVUFBVUEsS0FBSTtBQUFBLEVBQ2QsZ0JBQWdCQSxLQUFJO0FBQUEsRUFDcEIsUUFBUUMsT0FBTTtBQUFBLEVBQ2QsT0FBT0QsS0FBSTtBQUFBLEVBQ1gsUUFBUUEsS0FBSTtBQUFBLEVBQ1osY0FBY0EsS0FBSTtBQUFBLEVBQ2xCLFFBQVFDLE9BQU07QUFDbEIsQ0FBQzs7O0FKbkJELElBQU0sWUFBWSxVQUFVLFlBQVk7QUFFeEMsU0FBUyxpQkFBaUIsT0FBc0IsYUFBc0Q7QUFDbEcsUUFBTSxPQUFPLElBQUksWUFBWSxlQUFlLEtBQUs7QUFDakQsT0FBSyxvQkFBb0IsWUFBWSxXQUFXO0FBRWhELFNBQU87QUFDWDtBQUVPLElBQU0sT0FBTyxNQUFNO0FBQ3RCLFFBQU0sUUFBUSxjQUFjLFdBQVcsT0FBTyxFQUFFLEdBQUcsQ0FBQUMsV0FBU0EsT0FBTSxPQUFPLFVBQVEsTUFBTSxLQUFLLENBQUM7QUFFN0YsU0FBTyxvQkFBQyxJQUFJLEtBQUosRUFBUSxPQUFPLFFBQVEsU0FBUyxrQkFBa0IsS0FBSyxHQUFHLFNBQVMsSUFDdkUsOEJBQUMsT0FBSSxNQUFNLE9BQ04sV0FBQyxTQUE2QixvQkFBQyxJQUFJLEtBQUosRUFBUSxPQUFPLFFBRTNDLDhCQUFDLFFBQUssT0FBTyxlQUFlO0FBQUEsSUFDdEIsY0FBYyxNQUFNLGFBQWE7QUFBQSxJQUNqQyxjQUFjLE1BQU0sV0FBVztBQUFBLEVBQ25DLENBQUMsR0FDRSxXQUFDLENBQUMsYUFBYSxTQUFTLE1BQXdDO0FBQy9ELFVBQU0sVUFBVSxpQkFBaUIsV0FBVyxXQUFXO0FBRXZELFdBQU87QUFBQSxNQUFDLElBQUk7QUFBQSxNQUFKO0FBQUEsUUFBZSxPQUFPO0FBQUEsUUFBZSxlQUMzQyxjQUFjLE1BQU0sZUFBZTtBQUFBLFFBQUcsYUFDdEMsY0FBYyxNQUFNLGFBQWE7QUFBQSxRQUFHO0FBQUEsUUFDcEMsR0FBRyxDQUFDLFNBQVM7QUFDVCxnQkFBTSxRQUFxQyxvQkFBSSxJQUFJO0FBQ25ELGdCQUFNLGVBQWUsSUFBSSxhQUFhLElBQUk7QUFFMUMsZUFBSyxlQUFlLFlBQVk7QUFFaEMsZ0JBQU0sSUFBSSxjQUFjLGFBQWEsUUFBUSxZQUFZLENBQUMsU0FBUyxHQUFHLEdBQUcsTUFBTTtBQUMzRSxnQkFBRyxRQUFRLG1CQUFtQixNQUFNLElBQUksZ0JBQWdCO0FBQ3BELG1CQUFLLFNBQVMsR0FBRyxDQUFDO0FBQ2xCO0FBQUEsWUFDSixXQUFVLFFBQVEsbUJBQW1CLE1BQU0sSUFBSSxrQkFBa0I7QUFDN0QsbUJBQUssY0FBYztBQUNuQixtQkFBSyxNQUFNO0FBQUEsWUFDZjtBQUFBLFVBQ0osQ0FBQyxDQUFDO0FBQUEsUUFDTjtBQUFBLFFBRUUsOEJBQUMsSUFBSSxPQUFKLEVBQVUsT0FBTyxjQUFjLE1BQU0sT0FBTyxHQUFHLFdBQVcsSUFBSTtBQUFBO0FBQUEsSUFDbkU7QUFBQSxFQUNGLEdBQ0osR0FDSixHQUNKLEdBQ0o7QUFDSjs7O0FNMURBLE9BQU9DLG9CQUFtQjs7O0FDRTFCLE9BQU8sZUFBZTtBQUN0QixPQUFPLG1CQUFtQjtBQUduQixJQUFNLGVBQXdCLE1BQU07QUFBQSxFQUN2QztBQUNKLEVBQUUsS0FBSyxNQUFNLElBQUksRUFBRSxNQUFNLE1BQU0sS0FBSztBQUNwQyxJQUFNLFlBQTRCLElBQUksVUFBVSxLQUFLO0FBRXJELElBQUksV0FBeUMsVUFBVSxTQUFTO0FBRXpELFNBQVMsVUFBd0M7QUFDcEQsU0FBTztBQUNYO0FBRU8sU0FBUyxhQUFtQjtBQUMvQixZQUFVLE9BQU87QUFDakIsYUFBVyxVQUFVLFNBQVM7QUFDbEM7QUFFTyxTQUFTLGVBQStCO0FBQzNDLFNBQU87QUFDWDtBQUdPLFNBQVMsUUFBUSxLQUFtQyxrQkFBMkI7QUFDbEYsUUFBTSxhQUFjLE9BQU8sUUFBUSxXQUFZLE1BQ3pDLElBQUksV0FBVyxRQUFRLDJCQUEyQixFQUFFO0FBRTFELGdCQUFjLFlBQVksRUFBRTtBQUFBLElBQVM7QUFBQSxJQUNqQyxHQUFHLG1CQUFtQixHQUFHLGdCQUFnQixNQUFNLEVBQUUsR0FBRyxlQUFlLGlCQUFpQixFQUFFLEdBQUcsVUFBVTtBQUFBLEVBQ3ZHO0FBQ0o7QUFFTyxTQUFTLFdBQVcsTUFBdUI7QUFDOUMsU0FBTyxJQUFJLFVBQVUsZ0JBQWdCLElBQUksUUFBUSxZQUFZLENBQUUsR0FBRyxTQUFTLElBQUk7QUFDbkY7QUFFTyxTQUFTLGNBQWMsU0FBMkQ7QUFDckYsTUFBSSxRQUFzQyxDQUFDO0FBRTNDLFVBQVEsRUFBRSxJQUFJLENBQUMsUUFBK0I7QUFDMUMsUUFBRyxJQUFJLFNBQVMsRUFBRSxLQUFLLEVBQUUsWUFBWSxNQUFNLFFBQVEsS0FBSyxFQUFFLFlBQVksS0FDaEUsS0FBSyxXQUFXLElBQUksUUFBUSxLQUFLLEVBQUUsWUFBWSxNQUFNLFFBQVEsS0FBSyxFQUFFLFlBQVk7QUFDbEYsWUFBTSxLQUFLLEdBQUc7QUFBQSxFQUN0QixDQUFDO0FBRUQsU0FBUSxNQUFNLFNBQVMsSUFBSSxRQUFRO0FBQ3ZDO0FBRU8sU0FBUyxpQkFBaUIsU0FBcUM7QUFDbEUsTUFBRyxDQUFDLFFBQVMsUUFBTztBQUVwQixNQUFHLFdBQVcsT0FBTztBQUNsQixXQUFPO0FBRVYsTUFBRyxXQUFXLFFBQVEsWUFBWSxDQUFDO0FBQ2hDLFdBQU8sUUFBUSxZQUFZO0FBRTlCLFFBQU0saUJBQWlCLFFBQVEsTUFBTSxHQUFHO0FBQ3hDLE1BQUcsV0FBVyxlQUFlLGVBQWUsU0FBUyxDQUFDLENBQUM7QUFDcEQsV0FBTyxlQUFlLGVBQWUsU0FBUyxDQUFDO0FBRWxELFFBQU0sUUFBMkMsY0FBYyxPQUFPLElBQUksQ0FBQztBQUMzRSxNQUFHLFFBQVEsS0FBSztBQUNaLFdBQU8sT0FBTztBQUVsQixTQUFPO0FBQ1g7QUFFTyxTQUFTLFdBQVcsS0FBeUQ7QUFDaEYsTUFBRyxDQUFDLElBQUssUUFBTztBQUVoQixNQUFHLE9BQU8sUUFBUTtBQUNkLFdBQU8saUJBQWlCLEdBQUc7QUFFL0IsTUFBRyxJQUFJLFlBQVksV0FBVyxJQUFJLFFBQVE7QUFDdEMsV0FBTyxJQUFJO0FBRWYsTUFBRyxJQUFJO0FBQ0gsV0FBTyxpQkFBaUIsSUFBSSxPQUFPO0FBRXZDLFNBQU8saUJBQWlCLElBQUksSUFBSTtBQUNwQztBQUVPLFNBQVMsZ0JBQWdCLEtBQXlEO0FBQ3JGLFFBQU0sT0FBTyxXQUFXLEdBQUc7QUFFM0IsU0FBUSxRQUFRLFdBQVcsR0FBRyxJQUFJLFdBQVcsSUFDekMsR0FBRyxJQUFJLGNBQ1Q7QUFDTjs7O0FDOUZBLE9BQU9DLFlBQVc7QUFHWCxTQUFTLFNBQVMsTUFBc0I7QUFDM0MsU0FBT0EsT0FBTSxVQUFVLElBQUksS0FBSztBQUNwQztBQUVPLFNBQVMsY0FBYyxNQUErQjtBQUN6RCxTQUFPLElBQUksUUFBUSxDQUFDLFNBQVMsV0FBVztBQUNwQyxJQUFBQSxPQUFNLGdCQUFnQixNQUFNLENBQUMsR0FBRyxRQUFRO0FBQ3BDLFVBQUk7QUFDQSxnQkFBUUEsT0FBTSxpQkFBaUIsR0FBRyxLQUFLLEVBQUU7QUFBQSxNQUM3QyxTQUFTLE9BQU87QUFDWixlQUFPLEtBQUs7QUFBQSxNQUNoQjtBQUFBLElBQ0osQ0FBQztBQUFBLEVBQ0wsQ0FBQztBQUNMO0FBa0JPLFNBQVMsWUFDWixNQUNBLFVBQ2U7QUFDZixTQUFPQyxPQUFNLGFBQWEsTUFBTSxDQUFDLE1BQWMsVUFBZ0M7QUFDM0UsYUFBUyxNQUFNLEtBQUs7QUFBQSxFQUN4QixDQUFDO0FBQ0w7OztBQ3JDQSxPQUFPLGlCQUFpQjtBQUx4Qiw4S0FBQUMsS0FBQSx5RkFBQUM7QUFxQkEsNkJBQUMsU0FBUyxFQUFFLFdBQVcsZ0JBQWdCLENBQUM7QUFDeEMsSUFBTSxpQkFBTixNQUFNLHdCQUFzQkQsTUFBQSxRQUFRLFFBUWhDLHNCQUFDLE9BQU8sS0FBK0IsSUFHdkMsZ0JBQUMsT0FBTyxLQUEwQixJQUdsQyxxQkFBQyxTQUFTLE1BQU0sSUFJaEIsMEJBQUMsT0FBTyxZQUFZLFlBQVksSUFDaEMsNEJBQUMsT0FBTyxNQUFNLElBQ2QscUJBQUMsT0FBTyxNQUFNLElBQ2QsdUJBQUMsT0FBTyxNQUFNLElBQ2QsNkJBQUMsT0FBTyxNQUFNLElBdEJVQSxLQUFlO0FBQUEsRUF3QnZDLGNBQWM7QUFDVixVQUFNO0FBekJkLHNCQUFBQyxRQUFBO0FBR0ksdUNBQWtELENBQUM7QUFDbkQsaUNBQXVDLENBQUM7QUFDeEMsNkNBQW9DLG9CQUFJLElBQVk7QUFDcEQscUNBQThCLENBQUM7QUFTL0IsU0FBTyxlQUF1QixrQkFBOUJBLFFBQUEsU0FBOEIsS0FBOUIsa0JBQUFBLFFBQUE7QUFZSSx1QkFBSyxjQUFhO0FBQUEsTUFDZCxZQUFZLFlBQVksRUFBRSxRQUFRLFlBQVksQ0FBQyxRQUFRLE9BQU87QUFDMUQsY0FBTSxlQUFlLE9BQU8saUJBQWlCLEVBQUU7QUFDL0MsY0FBTSxlQUFlLE9BQU8sV0FBVyxFQUFFO0FBQUEsVUFDckMseUJBQXlCLEtBQUssaUJBQWlCLGFBQWEsT0FBTyxFQUFFLFlBQVksQ0FBQztBQUFBLFVBQ2xGO0FBQUEsUUFBUTtBQUVaLFlBQUcsS0FBSyxVQUFVLEVBQUUsYUFBYTtBQUM3QixlQUFLLFdBQVcsY0FBYyxNQUFNLGFBQWEsUUFBUSxDQUFDO0FBQzFEO0FBQUEsUUFDSjtBQUVBLGFBQUssZ0JBQWdCLGNBQWMsTUFBTTtBQUNyQyxjQUFHLGFBQWEsWUFBWSxZQUFZLFFBQVEsWUFDN0MsYUFBYSxZQUFZLFlBQVksUUFBUSxZQUM1QyxlQUFlLEdBQUk7QUFFbkIsZ0JBQUksYUFBdUM7QUFDM0MsZ0JBQUk7QUFFSixrQkFBTSxZQUFZLE1BQU07QUFDcEIsMkJBQWE7QUFDYixrQkFBRyxtQkFBSyxzQkFBcUIsSUFBSSxhQUFhLEVBQUUsRUFBRztBQUVuRCxtQkFBSyxXQUFXLGNBQWMsTUFBTTtBQUNoQyx3Q0FBd0IsS0FBSyxXQUFXLG9CQUFvQjtBQUM1RCxxQkFBSyxtQkFBbUIsRUFBRTtBQUFBLGNBQzlCLENBQUM7QUFBQSxZQUNMO0FBRUEseUJBQWEsUUFBUSxjQUFjLFNBQVM7QUFFNUMsbUNBQXVCLEtBQUssUUFBUSx5QkFBeUIsQ0FBQyxHQUFHQyxRQUFlO0FBQzVFLGtCQUFHLGFBQWEsT0FBT0EsSUFBSTtBQUUzQiwwQkFBWSxPQUFPO0FBQ25CLDJCQUFhLFFBQVEsY0FBYyxTQUFTO0FBQUEsWUFDaEQsQ0FBQztBQUFBLFVBQ0w7QUFBQSxRQUNKLENBQUM7QUFBQSxNQUNMLENBQUM7QUFBQSxNQUVELFlBQVksWUFBWSxFQUFFLFFBQVEsWUFBWSxDQUFDLFFBQVEsSUFBSSxZQUFZO0FBQ25FLGFBQUssbUJBQW1CLEVBQUU7QUFDMUIsYUFBSyxXQUFXLE9BQU8saUJBQWlCLEVBQUUsQ0FBQztBQUFBLE1BQy9DLENBQUM7QUFBQSxJQUNMO0FBRUEsU0FBSyxjQUFjLE1BQU07QUFDckIsWUFBTSxZQUFZO0FBQ2xCLHlCQUFLLGNBQWEsSUFBSSxDQUFDLE9BQ25CLFlBQVksWUFBWSxFQUFFLFdBQVcsRUFBRSxDQUFDO0FBQUEsSUFDaEQ7QUFBQSxFQUNKO0FBQUEsRUF2RUEsSUFBVyxnQkFBZ0I7QUFBRSxXQUFPLG1CQUFLO0FBQUEsRUFBZTtBQUFBLEVBR3hELElBQVcsVUFBVTtBQUFFLFdBQU8sbUJBQUs7QUFBQSxFQUFTO0FBQUEsRUFNVixrQkFBa0IsZUFBeUM7QUFBQSxFQUFDO0FBQUEsRUFDOUUsb0JBQW9CLEtBQWE7QUFBQSxFQUFDO0FBQUEsRUFDbEMsYUFBYSxlQUF1QjtBQUFBLEVBQUM7QUFBQSxFQUNyQyxlQUFlLEtBQWE7QUFBQSxFQUFDO0FBQUEsRUFDN0IscUJBQXFCLEtBQWE7QUFBQSxFQUFDO0FBQUEsRUE0RG5ELE9BQWMsYUFBNEI7QUFDdEMsUUFBRyxDQUFDLEtBQUs7QUFDTCxXQUFLLFdBQVcsSUFBSSxlQUFjO0FBRXRDLFdBQU8sS0FBSztBQUFBLEVBQ2hCO0FBQUEsRUFFQSxNQUFhLGlCQUFpQixPQWdCTDtBQUVyQixXQUFPLE1BQU0sVUFBVTtBQUFBLE1BQ25CO0FBQUEsTUFDUyxHQUFJLE1BQU0sVUFBVTtBQUFBLFFBQ3pCO0FBQUEsUUFBTSxLQUFLLGlCQUFpQixNQUFNLE9BQU87QUFBQSxNQUM3QyxJQUFJLENBQUM7QUFBQSxNQUFJLEdBQUksTUFBTSxVQUFVO0FBQUEsUUFDekI7QUFBQSxRQUFNLE1BQU07QUFBQSxNQUNoQixJQUFJLENBQUM7QUFBQSxNQUFJLEdBQUksTUFBTSxRQUFRO0FBQUEsUUFDdkI7QUFBQSxRQUFNLE1BQU07QUFBQSxNQUNoQixJQUFJLENBQUM7QUFBQSxNQUFJLEdBQUksTUFBTSxVQUFVLE1BQU0sUUFBUTtBQUFBLFFBQUksQ0FBQyxXQUM1QyxDQUFFLE1BQU0sT0FBTyxJQUFLO0FBQUEsTUFDeEIsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDO0FBQUEsTUFBSSxHQUFJLE1BQU0sWUFBWTtBQUFBLFFBQ25DO0FBQUEsUUFBTSxNQUFNLFVBQVUsU0FBUztBQUFBLE1BQ25DLElBQUksQ0FBQztBQUFBLE1BQUksTUFBTTtBQUFBLE1BQVMsTUFBTSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQ3RELENBQUMsRUFBRSxLQUFLLENBQUMsV0FBVztBQUNoQixlQUFTLE9BQU8sS0FBSztBQUNyQixVQUFHLENBQUMsUUFBUTtBQUNSLFlBQUcsTUFBTSxXQUFXLE1BQU0sUUFBUSxTQUFTO0FBQ3ZDLGlCQUFPO0FBRVg7QUFBQSxNQUNKO0FBRUEsVUFBRyxNQUFNLFdBQVcsTUFBTSxRQUFRLFNBQVMsR0FBRztBQUMxQyxjQUFNLFNBQVMsTUFBTSxRQUFRLE9BQU8sU0FBUyxNQUFNLENBQUM7QUFDcEQsZ0JBQVEsV0FBVztBQUVuQixlQUFPLFVBQVU7QUFBQSxNQUNyQjtBQUFBLElBQ0osQ0FBQyxFQUFFLE1BQU0sQ0FBQyxRQUF5QjtBQUMvQixjQUFRLE1BQU07QUFBQSxFQUNWLElBQUksVUFBVSxHQUFHLElBQUksT0FBTztBQUFBLElBQU8sRUFBRSxVQUFVLElBQUksS0FBSyxFQUFFO0FBQUEsSUFDbEUsQ0FBQztBQUFBLEVBQ0w7QUFBQSxFQUVPLGlCQUFpQixTQUF1RDtBQUMzRSxZQUFRLG1CQUFtQixZQUFZLGVBQ2hDLFFBQVEsVUFBVSxTQUFTO0FBQUEsTUFFOUIsS0FBSyxZQUFZLFFBQVE7QUFDckIsZUFBTztBQUFBLE1BQ1gsS0FBSyxZQUFZLFFBQVE7QUFDckIsZUFBTztBQUFBLElBQ2Y7QUFFQSxXQUFPO0FBQUEsRUFDWDtBQUFBLEVBRVEsV0FBVyxPQUFpQyxTQUEyRDtBQUMzRyxRQUFHLENBQUMsTUFBTztBQUVYLHVCQUFLLFVBQVMsV0FBVyxLQUFLLGdCQUMxQixLQUFLLGNBQWMsbUJBQUssVUFBUyxtQkFBSyxVQUFTLFNBQVMsQ0FBQyxDQUFDO0FBRTlELHVCQUFLLFVBQVMsSUFBSSxDQUFDLFFBQVEsTUFDdkIsT0FBTyxPQUFPLE1BQU0sTUFBTSxtQkFBSyxVQUFTLE9BQU8sR0FBRyxDQUFDLENBQUM7QUFFeEQsdUJBQUssVUFBUyxRQUFRO0FBQUEsTUFDbEIsSUFBSSxNQUFNO0FBQUEsTUFDVixTQUFTLE1BQU07QUFBQSxNQUNmLE1BQU0sTUFBTTtBQUFBLE1BQ1osU0FBUyxNQUFNO0FBQUEsTUFDZixTQUFTLE1BQU07QUFBQSxNQUNmLFNBQVMsTUFBTTtBQUFBLE1BQ2YsTUFBTSxNQUFNO0FBQUEsTUFDWixPQUFPLE1BQU0sUUFBUSxNQUFNLFFBQVE7QUFBQSxJQUN2QyxDQUF3QjtBQUV4QixTQUFLLE9BQU8sU0FBUztBQUNyQixTQUFLLEtBQUssaUJBQWlCLG1CQUFLLFVBQVMsQ0FBQyxDQUFDO0FBQzNDLGVBQVcsUUFBUSxLQUFLO0FBQUEsRUFDNUI7QUFBQSxFQUVBLE1BQWEsZUFBOEI7QUFDdkMsdUJBQUssVUFBUyxRQUFRLEVBQUUsSUFBSSxDQUFDLFVBQVU7QUFDbkMseUJBQUssVUFBVyxLQUFLLFFBQVEsT0FBTyxDQUFDLE1BQU0sRUFBRSxPQUFPLE1BQU0sRUFBRTtBQUM1RCxXQUFLLEtBQUssbUJBQW1CLE1BQU0sRUFBRTtBQUFBLElBQ3pDLENBQUM7QUFFRCxTQUFLLE9BQU8sU0FBUztBQUFBLEVBQ3pCO0FBQUEsRUFFTyxjQUFjLE9BQTJDO0FBQzVELFVBQU0sVUFBVyxPQUFPLFVBQVUsV0FBWSxRQUFRLE1BQU07QUFDNUQsdUJBQUssVUFBVyxtQkFBSyxVQUFTLE9BQU8sQ0FBQyxTQUNsQyxLQUFLLE9BQU8sT0FBTztBQUV2QixTQUFLLE9BQU8sU0FBUztBQUNyQixTQUFLLEtBQUssbUJBQW1CLE9BQU87QUFBQSxFQUN4QztBQUFBLEVBRVEsZ0JBQWdCLE9BQWlDLFNBQTJEO0FBQ2hILGFBQVEsSUFBSSxHQUFHLElBQUksbUJBQUssZ0JBQWUsUUFBUSxLQUFLO0FBQ2hELFlBQU0sT0FBTyxtQkFBSyxnQkFBZSxDQUFDO0FBRWxDLFVBQUcsS0FBSyxPQUFPLE1BQU0sR0FBSTtBQUV6Qix5QkFBSyxnQkFBZSxPQUFPLEdBQUcsQ0FBQztBQUMvQixXQUFLLEtBQUsseUJBQXlCLEtBQUssRUFBRTtBQUMxQztBQUFBLElBQ0o7QUFFQSx1QkFBSyxnQkFBZSxRQUFRLEtBQUs7QUFDakMsU0FBSyxPQUFPLGVBQWU7QUFDM0IsU0FBSyxLQUFLLHNCQUFzQixLQUFLO0FBQ3JDLGNBQVUsS0FBSztBQUFBLEVBQ25CO0FBQUEsRUFFTyxtQkFBbUIsT0FBZ0Q7QUFDdEUsVUFBTSxpQkFBa0IsaUJBQWlCLFlBQVksZUFBZ0IsTUFBTSxLQUFLO0FBQ2hGLHVCQUFLLHNCQUFxQixJQUFJLGNBQWMsS0FDeEMsbUJBQUssc0JBQXFCLE9BQU8sY0FBYztBQUVuRCx1QkFBSyxnQkFBaUIsbUJBQUssZ0JBQWUsT0FBTyxDQUFDLFNBQzlDLEtBQUssT0FBTyxjQUFjO0FBRTlCLGdCQUFZLFlBQVksRUFBRSxpQkFBaUIsY0FBYyxHQUFHLFFBQVE7QUFDcEUsU0FBSyxPQUFPLGVBQWU7QUFDM0IsU0FBSyxLQUFLLHdCQUF3QixjQUFjO0FBQUEsRUFDcEQ7QUFBQSxFQUVRLG9CQUFvQixJQUFnRDtBQUN4RSxXQUFPLG1CQUFLLGdCQUFlLE9BQU8sV0FBUyxNQUFNLE9BQU8sRUFBRSxJQUFJLENBQUM7QUFBQSxFQUNuRTtBQUFBLEVBRU8saUJBQWlCLE9BQWdEO0FBQ3BFLFlBQVMsT0FBTyxVQUFVLFdBQ3RCLEtBQUssb0JBQW9CLEtBQUssSUFDaEM7QUFFRixRQUFHLENBQUMsTUFBTztBQUVYLHVCQUFLLHNCQUFxQixJQUFJLE1BQU0sRUFBRTtBQUFBLEVBQzFDO0FBQUEsRUFFTyxtQkFBbUIsT0FBMEI7QUFDaEQsWUFBUSxTQUFTLENBQUMsWUFBWSxZQUFZLEVBQUU7QUFDNUMsZ0JBQVksWUFBWSxFQUFFLGNBQWM7QUFFeEMsV0FBTztBQUFBLEVBQ1g7QUFBQSxFQUVPLFlBQWdDO0FBQUUsV0FBTyxZQUFZLFlBQVk7QUFBQSxFQUFHO0FBQy9FO0FBelBBRCxTQUFBLGlCQUFBRDtBQUdJO0FBQ0E7QUFDQTtBQUNBO0FBR0Esa0JBQUFDLFFBQUEsR0FBVyxpQkFEWCxvQkFSRTtBQVlGLGtCQUFBQSxRQUFBLEdBQVcsV0FEWCxjQVhFO0FBa0JnQyxrQkFBQUEsUUFBQSx3QkFBbEMsd0JBbEJFO0FBbUJjLGtCQUFBQSxRQUFBLDBCQUFoQiwwQkFuQkU7QUFvQmMsa0JBQUFBLFFBQUEsbUJBQWhCLG1CQXBCRTtBQXFCYyxrQkFBQUEsUUFBQSxxQkFBaEIscUJBckJFO0FBc0JjLGtCQUFBQSxRQUFBLDJCQUFoQiwyQkF0QkU7QUFlRixrQkFBQUEsUUFBQSxHQUFPLGdCQURQLG1CQWRFO0FBQUEsaUJBQU4sa0JBQUFBLFFBQUEsb0JBREEsMkJBQ007QUFBQSxlQUNhLFdBQWlDO0FBRHBELGtCQUFBQSxRQUFBLEdBQU07QUFBTixJQUFNLGdCQUFOOzs7QUNoQkEsT0FBT0UsV0FBVTtBQUNqQixPQUFPQyxVQUFTO0FBRWhCLE9BQU9DLGtCQUFpQjtBQVR4QixrQkFBQUMsS0FBQSxvQkFBQUMsUUFBQTtBQXdEQSxzQkFBQyxTQUFTLEVBQUUsV0FBVyxTQUFTLENBQUM7QUFDakMsSUFBTSxVQUFOLE1BQU0saUJBQWVELE1BQUEsUUFBUSxRQW1DekIsZ0JBQUMsT0FBTyxNQUFNLElBbkNHQSxLQUFlO0FBQUEsRUE0Q2hDLFlBQVksVUFBOEI7QUFDdEMsVUFBTTtBQTdDZCxzQkFBQUMsUUFBQTtBQUtJLFNBQWlCLGNBQWNDLEtBQUksS0FBSztBQUFBLE1BQ3BDLEdBQUdDLE1BQUssb0JBQW9CLENBQUM7QUFBQSxJQUF5QjtBQUkxRDtBQUFBO0FBQUEsU0FBZ0IsV0FBMEI7QUFBQSxNQUN0QyxlQUFlO0FBQUEsUUFDWCxhQUFhO0FBQUEsUUFDYixnQkFBZ0I7QUFBQSxRQUNoQixrQkFBa0I7QUFBQSxNQUN0QjtBQUFBLE1BRUEsYUFBYTtBQUFBLFFBQ1Qsa0JBQWtCO0FBQUEsTUFDdEI7QUFBQSxNQUVBLFlBQVk7QUFBQSxRQUNSLGdCQUFnQjtBQUFBLFFBQ2hCLGVBQWU7QUFBQSxNQUNuQjtBQUFBLE1BRUEsT0FBTztBQUFBLFFBQ0gsYUFBYTtBQUFBLE1BQ2pCO0FBQUEsTUFFQSxNQUFNO0FBQUEsUUFDRiw0QkFBNEI7QUFBQSxNQUNoQztBQUFBLElBQ0o7QUFLQTtBQUNBLGlDQUEwQixLQUFLO0FBRS9CLFNBQVEsVUFBUjtBQU1JLHVCQUFLLE9BQVMsT0FBTyxhQUFhLFdBQzlCRCxLQUFJLEtBQUssYUFBYSxRQUFRLElBQy9CLFlBQVksS0FBSztBQUVwQixRQUFHLENBQUMsbUJBQUssT0FBTSxhQUFhLElBQUksR0FBRztBQUMvQix5QkFBSyxPQUFNLDRCQUE0QixJQUFJO0FBQzNDLHlCQUFLLE9BQU0sT0FBTyxJQUFJO0FBRXRCLHlCQUFLLE9BQU07QUFBQSxRQUNQQSxLQUFJLGdCQUFnQjtBQUFBLFFBQU1DLE1BQUs7QUFBQSxRQUMvQjtBQUFBLFFBQU0sQ0FBQyxHQUFHLGFBQWE7QUFDbkIsZ0JBQU0sV0FBVyxtQkFBSyxPQUFNLHdCQUF3QixRQUFRO0FBRTVELG1CQUFTLGFBQWE7QUFBQSxZQUNsQkEsTUFBSyxNQUFNLElBQUksUUFBUSxPQUFPLEtBQUssVUFBVSxLQUFLLFNBQVMsUUFBVyxDQUFDLENBQUMsQ0FBQztBQUFBLFlBQ3pFQSxNQUFLO0FBQUEsWUFBa0I7QUFBQSxZQUN2QixDQUFDQyxJQUFHQyxjQUFhO0FBQ2Isb0JBQU0sZUFBZSxTQUFTLGFBQWEsbUJBQW1CQSxTQUFRO0FBRXRFLGtCQUFHLENBQUM7QUFDQSw4QkFBYyxXQUFXLEVBQUUsaUJBQWlCO0FBQUEsa0JBQ3hDLFNBQVM7QUFBQSxrQkFDVCxTQUFTO0FBQUEsa0JBQ1QsTUFBTSxpREFBaUQsbUJBQUssT0FBTSxTQUFTLENBQUU7QUFBQSxnQkFDakYsQ0FBQztBQUFBLFlBQ1Q7QUFBQSxVQUNKO0FBQUEsUUFDSjtBQUFBLE1BQUM7QUFBQSxJQUNUO0FBRUE7QUFBQSxNQUFZLG1CQUFLLE9BQU0sU0FBUztBQUFBLE1BQzVCLE1BQU07QUFDRixZQUFHLEtBQUssUUFBUztBQUNqQixhQUFLLFVBQVUsUUFBUSxLQUFLLE1BQU0sS0FBSyxVQUFVLE1BQVM7QUFFMUQsWUFBRyxtQkFBSyxPQUFNLGFBQWEsSUFBSSxHQUFHO0FBQzlCLGVBQUssU0FBUyxPQUFPO0FBQ3JCLGVBQUssVUFBVTtBQUVmLGVBQUssU0FBUyxFQUFFLFFBQVEsTUFDcEIsS0FBSyxVQUFVLE1BQVM7QUFFNUI7QUFBQSxRQUNKO0FBRUEsc0JBQWMsV0FBVyxFQUFFLGlCQUFpQjtBQUFBLFVBQ3hDLFNBQVM7QUFBQSxVQUNULFNBQVM7QUFBQSxVQUNULE1BQU0sa0VBQWtFLG1CQUFLLE9BQU0sU0FBUyxDQUFFO0FBQUEsUUFDbEcsQ0FBQztBQUFBLE1BQ0w7QUFBQSxJQUNKO0FBQUEsRUFDSjtBQUFBLEVBL0RBLElBQVcsVUFBVTtBQUFFLFdBQU8sbUJBQUs7QUFBQSxFQUFVO0FBQUEsRUFNN0MsSUFBVyxPQUFPO0FBQUUsV0FBTyxtQkFBSztBQUFBLEVBQU87QUFBQSxFQTJEdkMsT0FBYyxhQUFxQjtBQUMvQixRQUFHLENBQUMsS0FBSztBQUNMLFdBQUssV0FBVyxJQUFJLFFBQU87QUFFL0IsV0FBTyxLQUFLO0FBQUEsRUFDaEI7QUFBQSxFQUVBLE1BQWMsV0FBMEI7QUFDcEMsVUFBTSxjQUFjLG1CQUFLLE9BQU0sU0FBUyxDQUFFLEVBQUUsS0FBSyxDQUFDLFlBQVk7QUFDMUQsVUFBSTtBQUVKLFVBQUk7QUFDQSxpQkFBUyxLQUFLLE1BQU0sT0FBTztBQUFBLE1BQy9CLFNBQVEsR0FBRztBQUNQLHNCQUFjLFdBQVcsRUFBRSxpQkFBaUI7QUFBQSxVQUN4QyxTQUFTQyxhQUFZLFFBQVE7QUFBQSxVQUM3QixTQUFTO0FBQUEsVUFDVCxTQUFTO0FBQUEsVUFDVCxNQUFNO0FBQUEsUUFDRixtQkFBSyxPQUFNLFNBQVMsQ0FBRTtBQUFBLEVBQ3JCLEVBQWtCLE9BQU87QUFBQSxFQUFNLEVBQWtCLEtBQUs7QUFBQSxRQUMvRCxDQUFDO0FBQUEsTUFDTDtBQUVBLFVBQUcsQ0FBQyxPQUFRO0FBSVosaUJBQVUsS0FBSyxPQUFPLEtBQUssS0FBSyxPQUFPLEdBQUc7QUFDdEMsWUFBRyxPQUFPLENBQXdCLE1BQU07QUFDcEM7QUFHSixhQUFLLFFBQVEsQ0FBOEIsSUFBSSxPQUFPLENBQXdCO0FBQUEsTUFDbEY7QUFFQSxXQUFLLE9BQU8sU0FBUztBQUFBLElBQ3pCLENBQUMsRUFBRSxNQUFNLENBQUMsTUFBdUI7QUFDN0Isb0JBQWMsV0FBVyxFQUFFLGlCQUFpQjtBQUFBLFFBQ3BDLFNBQVNBLGFBQVksUUFBUTtBQUFBLFFBQzdCLFNBQVM7QUFBQSxRQUNULFNBQVM7QUFBQSxRQUNULE1BQU07QUFBQSxRQUFxRSxHQUN2RSxtQkFBSyxPQUFNLFNBQVMsQ0FBRTtBQUFBLEVBQUssRUFBRSxVQUFVLEdBQUcsRUFBRSxPQUFPO0FBQUEsSUFBTyxFQUFFLEdBQUcsRUFBRSxLQUFLLEdBQUcsUUFBUSxTQUFTLEtBQUssQ0FBQztBQUFBLE1BQ3hHLENBQUM7QUFBQSxJQUNULENBQUM7QUFBQSxFQUNMO0FBQUEsRUFFTyxhQUFhLGNBQTRDLFlBQWtEO0FBQzlHLFdBQU8sSUFBSSxTQUF3QixNQUFNLEtBQUssWUFBWSxjQUFjLFVBQVUsR0FBRyxDQUFDLGFBQXlCO0FBQzNHLFlBQU0sS0FBSyxLQUFLLFFBQVEsbUJBQW1CLE1BQU0sU0FBUyxDQUFDO0FBQzNELGFBQU8sTUFBTSxLQUFLLFdBQVcsRUFBRTtBQUFBLElBQ25DLENBQUM7QUFBQSxFQUNMO0FBQUEsRUFFTyxZQUFZLE1BQWMsWUFBMEM7QUFDdkUsV0FBTyxLQUFLLGFBQWEsTUFBTSxLQUFLLFNBQVMsVUFBVTtBQUFBLEVBQzNEO0FBQUEsRUFFTyxtQkFBbUIsTUFBYyxZQUEwQztBQUM5RSxXQUFPLEtBQUssYUFBYSxNQUFNLEtBQUssVUFBVSxVQUFVO0FBQUEsRUFDNUQ7QUFBQSxFQUVRLGFBQWEsTUFBY0MsVUFBd0IsWUFBMEM7QUFDakcsUUFBSUMsWUFBZ0JEO0FBQ3BCLFVBQU0sWUFBWSxLQUFLLE1BQU0sR0FBRyxFQUFFLE9BQU8sU0FBTyxHQUFHO0FBRW5ELGFBQVEsSUFBSSxHQUFHLElBQUksVUFBVSxRQUFRLEtBQUs7QUFDdEMsWUFBTSxjQUFjLFVBQVUsQ0FBQztBQUUvQixNQUFBQyxZQUFXQSxVQUFTLFdBQW9DO0FBQUEsSUFDNUQ7QUFFQSxRQUFHLGVBQWUsU0FBUyxPQUFPQSxjQUFhLFlBQVk7QUFDdkQsY0FBUSxNQUFNLGdDQUFnQyxJQUMxQyxrRUFBa0UsVUFDbEUsNkJBQTZCO0FBRWpDLE1BQUFBLFlBQVcsS0FBSztBQUVoQixlQUFRLElBQUksR0FBRyxJQUFJLFVBQVUsUUFBUSxLQUFLO0FBQ3RDLGNBQU0sY0FBYyxVQUFVLENBQUM7QUFFL0IsUUFBQUEsWUFBV0EsVUFBUyxXQUFvQztBQUFBLE1BQzVEO0FBQUEsSUFDSjtBQUVBLFFBQUcsZUFBZSxTQUFTLE9BQU9BLGNBQWEsWUFBWTtBQUN2RCxjQUFRLE1BQU0sZ0NBQWdDLElBQUksZ0VBQWdFO0FBQ2xILE1BQUFBLFlBQVc7QUFBQSxJQUNmO0FBRUEsV0FBT0E7QUFBQSxFQUNYO0FBQ0o7QUFuTUFQLFNBQUEsaUJBQUFEO0FBc0NJO0FBQ0E7QUFIQSxrQkFBQUMsUUFBQSxHQUFXLFdBRFgsY0FuQ0U7QUFBQSxVQUFOLGtCQUFBQSxRQUFBLGFBREEsb0JBQ007QUFBQSxRQUNhLFdBQWY7QUFESixrQkFBQUEsUUFBQSxHQUFNO0FBQU4sSUFBTSxTQUFOOzs7QUMxQ08sU0FBUyxVQUFVLFFBQXdCO0FBQUEsRUFDOUMsYUFBYSxJQUFJLFlBQVk7QUFDakMsR0FBRztBQUNDLFFBQU0sUUFBUSxNQUFNLFFBQ2YsTUFBTSxRQUFRLElBQ1gsTUFBTSxRQUFRLE1BQ2hCLE1BQU0sUUFDVjtBQUVGLFFBQU0sY0FBYyxNQUFNLGVBQWUsSUFBSSxZQUFZO0FBRXpELFNBQU87QUFBQSxJQUFDLElBQUk7QUFBQSxJQUFKO0FBQUEsTUFBUSxNQUFNO0FBQUEsTUFBYSxTQUFTLE1BQU0sZ0JBQWdCLElBQUksWUFBWTtBQUFBLE1BQ2hGLFNBQVMsTUFBTSxnQkFBZ0IsSUFBSSxZQUFZO0FBQUEsTUFDL0MsT0FBTyxhQUFjLE1BQU0sZ0JBQWdCLElBQUksWUFBWSxXQUN6RCxhQUFhLFlBQWE7QUFBQSxNQUFJLFNBQVMsTUFBTTtBQUFBLE1BQy9DLEtBQUssd0JBQXdCLE1BQU0sV0FBVyxDQUFDLE1BQU0sTUFBTSxVQUFVLENBQUM7QUFBQSxpQ0FDM0MsTUFBTSxVQUFVLENBQUMsTUFBTSxNQUFNLFdBQVcsQ0FBQztBQUFBLE1BRWxFO0FBQUEsUUFBQyxJQUFJO0FBQUEsUUFBSjtBQUFBLFVBQVEsT0FBTyxHQUFHLE1BQU0sZ0JBQWdCLElBQUksWUFBWSxXQUNyRCxhQUNBLFlBQVksSUFBSSxNQUFNLFNBQVMsRUFBRTtBQUFBLFVBQ25DLFNBQVMsTUFBTSxnQkFBZ0IsSUFBSSxZQUFZO0FBQUEsVUFDL0MsU0FBUyxNQUFNLGdCQUFnQixJQUFJLFlBQVk7QUFBQSxVQUU3QyxLQUFLO0FBQUEsNEJBQ1ksTUFBTSxZQUFZLFdBQVk7QUFBQSx5QkFDbEMsTUFBTSxLQUFLO0FBQUE7QUFBQSx1Q0FFSSxNQUFNLFFBQVEsQ0FBRTtBQUFBLHNDQUNqQixNQUFNLFFBQVEsQ0FBRTtBQUFBO0FBQUEsTUFDL0M7QUFBQTtBQUFBLEVBQ0o7QUFDSjs7O0FMdENBLElBQU0sQ0FBQyxhQUFhLGNBQWMsSUFBSSxZQUFZLEtBQUs7QUFDaEQsSUFBTSxzQkFBc0IsQ0FBQyxTQUNoQyxlQUFlLElBQUk7QUFHaEIsSUFBTSxhQUFhLE1BQU07QUFDNUIsUUFBTSxhQUFhLGNBQWNRLGVBQWMsWUFBWSxHQUFHLFlBQVksR0FDdEUsb0JBQW9CLFdBQVcsR0FBRyxTQUM5QixJQUFJLE9BQU8sUUFBTSxHQUFHLEtBQUssQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUFHLE1BQU0sRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLEdBQzNELG9CQUFvQixXQUFXLEdBQUcsU0FDOUIsSUFBSSxPQUFPLFFBQU0sR0FBRyxLQUFLLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxNQUFNLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQztBQUcvRCxTQUFPLHFCQUFDLElBQUksS0FBSixFQUFRLE9BQU8sa0JBQ25CO0FBQUEsd0JBQUMsSUFBSSxLQUFKLEVBQVEsT0FBTyxzQkFBc0IsU0FBUyxHQUMzQyw4QkFBQyxPQUFJLE1BQU0sbUJBQ04sV0FBQyxPQUNFO0FBQUEsTUFBQyxJQUFJO0FBQUEsTUFBSjtBQUFBLFFBQVcsT0FBTztBQUFBLFFBQ2pCLGFBQWEsY0FBYyxJQUFJLE1BQU0sRUFBRSxHQUFHLFVBQVE7QUFDOUMsaUJBQU8sS0FBSyxRQUFRLGNBQWMsRUFBRTtBQUNwQyxpQkFBTyxLQUFLLE9BQU8sQ0FBQyxFQUFFLFlBQVksRUFBRSxPQUFPLEtBQUssVUFBVSxHQUFHLEtBQUssTUFBTSxDQUFDO0FBQUEsUUFDN0UsQ0FBQztBQUFBLFFBQUcsV0FBVyxNQUFNQSxlQUFjLFlBQVksRUFBRTtBQUFBLFVBQzdDO0FBQUEsVUFBMEIsR0FBRyxLQUFLLFFBQVEsZUFBZSxFQUFFO0FBQUEsUUFDL0Q7QUFBQSxRQUVFLDhCQUFDLFFBQUssT0FBTyxjQUFjLElBQUksWUFBWSxHQUN0QyxXQUFDLGVBQTBDLGNBQ3hDO0FBQUEsVUFBQyxJQUFJO0FBQUEsVUFBSjtBQUFBLFlBQVUsT0FBTTtBQUFBLFlBQWMsVUFDM0IsY0FBYyxZQUFZLGNBQWMsRUFBRSxHQUFHLGtCQUN6QyxnQkFBZ0IsWUFBWSxLQUFLLFdBQVcsWUFBWSxLQUNwRCxtQ0FBbUM7QUFBQTtBQUFBLFFBQy9DLEdBRVI7QUFBQTtBQUFBLElBQ0osR0FFUixHQUNKO0FBQUEsSUFDQTtBQUFBLE1BQUM7QUFBQTtBQUFBLFFBQVUsT0FBTztBQUFBLFFBQUksYUFBYSxJQUFJLFlBQVk7QUFBQSxRQUNqRCxRQUFRO0FBQUEsUUFBSSxTQUFTO0FBQUEsUUFBRyxTQUFTLGtCQUFrQixpQkFBaUI7QUFBQTtBQUFBLElBQ3RFO0FBQUEsSUFDQSxvQkFBQyxJQUFJLEtBQUosRUFBUSxPQUFPLHNCQUFzQixTQUFTLEdBQUcsR0FBRyxDQUFDLFNBQVM7QUFDekQsWUFBTSxRQUFtRCxvQkFBSSxJQUFJO0FBQ2pFLFlBQU0sbUJBQW1CLElBQUksc0JBQXNCO0FBQUEsUUFDL0MsSUFBSSwyQkFBMkI7QUFBQSxNQUNuQyxHQUFHLG1CQUFtQixJQUFJLHNCQUFzQixJQUFJO0FBRXBELFdBQUssZUFBZSxnQkFBZ0I7QUFDcEMsV0FBSyxlQUFlLGdCQUFnQjtBQUVwQyxZQUFNLElBQUksa0JBQWtCLGlCQUFpQixRQUFRLFVBQVUsQ0FBQyxHQUFHLEtBQUssT0FBTztBQUMzRSxhQUFLLElBQ0RBLGVBQWMsWUFBWSxFQUFFLFNBQVMsYUFBYSxLQUFLLElBQ3pEQSxlQUFjLFlBQVksRUFBRSxTQUFTLGFBQWEsS0FBSztBQUV6RCxlQUFPO0FBQUEsTUFDWCxDQUFDLENBQUM7QUFFRixZQUFNLElBQUksa0JBQWtCO0FBQUEsUUFDeEIsaUJBQWlCLFFBQVEsU0FBUyxNQUFNLGVBQWUsSUFBSSxDQUFDO0FBQUEsUUFDNUQsaUJBQWlCLFFBQVEsU0FBUyxNQUFNLGVBQWUsS0FBSyxDQUFDO0FBQUEsTUFDakUsQ0FBQztBQUVELFlBQU0sSUFBSSxNQUFNLEtBQUssUUFBUSxXQUFXLE1BQU0sTUFBTTtBQUFBLFFBQVEsQ0FBQyxLQUFLLFFBQzlELE1BQU0sUUFBUSxHQUFHLElBQ2IsSUFBSSxRQUFRLFFBQU0sSUFBSSxXQUFXLEVBQUUsQ0FBQyxJQUN0QyxJQUFJLFdBQVcsR0FBRztBQUFBLE1BQ3hCLENBQUMsQ0FBQztBQUFBLElBQ04sR0FDRSw4QkFBQyxPQUFJLE1BQU0sbUJBQ04sV0FBQyxJQUE2QixNQUFNO0FBQ2pDLFlBQU0sU0FBUyxlQUFlO0FBQUEsUUFDMUIsT0FBTyxXQUFXLEVBQUUsYUFBYSw2QkFBNkIsU0FBUyxFQUFFLEdBQUcsT0FBTztBQUFBLFFBQ25GLE9BQU8sV0FBVyxFQUFFLGFBQWEsNEJBQTRCLFNBQVMsRUFBRSxHQUFHLE9BQU87QUFBQSxRQUNsRjtBQUFBLFFBQ0E7QUFBQSxNQUNKLEdBQUcsQ0FBQyxlQUFlLGNBQWMsU0FBU0MsT0FBTTtBQUM1QyxZQUFHLGdCQUFnQixDQUFDLGVBQWU7QUFDL0IsZ0JBQU0sb0JBQW9CLGtCQUFrQixJQUFJLEVBQUVBLEtBQUUsQ0FBQztBQUNyRCxnQkFBTSxnQkFBZ0Isa0JBQWtCLElBQUksRUFBRUEsS0FBRSxDQUFDO0FBRWpELGNBQUksa0JBQWtCLElBQUksRUFBRSxPQUFPLENBQUMsR0FBRyxPQUFPLEtBQUtBLEVBQUMsRUFBRSxTQUFTLEtBQzNELG1CQUFtQixLQUFNLEdBQUcsS0FBRyxLQUMvQixrQkFBa0IsSUFBSSxFQUFFLE9BQU8sQ0FBQyxHQUFHLE9BQU8sS0FBS0EsRUFBQyxFQUFFLFNBQVMsS0FDM0QsZUFBZSxLQUFNLEdBQUcsS0FBRyxHQUFLO0FBRWhDLG1CQUFPO0FBQUEsVUFDWDtBQUFBLFFBQ0o7QUFFQSxlQUFPLGlCQUFpQjtBQUFBLE1BQzVCLENBQUM7QUFFRCxhQUFPLG9CQUFDLElBQUksUUFBSixFQUFXLE9BQU87QUFBQSxRQUFlO0FBQUEsVUFDbkMsY0FBY0QsZUFBYyxZQUFZLEdBQUcsa0JBQWtCO0FBQUEsVUFDN0Q7QUFBQSxRQUNKO0FBQUEsUUFBRyxDQUFDLFdBQVcsa0JBQ1gsYUFBYSxVQUFVLE9BQU8sR0FBRyxLQUFLLFVBQVUsRUFBRSxJQUM5QyxnQkFBZ0IsU0FBUyxFQUFFO0FBQUEsTUFDbkMsR0FBRyxhQUFhO0FBQUEsUUFBZTtBQUFBLFVBQzNCLGNBQWMsSUFBSSxZQUFZO0FBQUEsVUFDOUIsY0FBY0EsZUFBYyxZQUFZLEdBQUcsa0JBQWtCO0FBQUEsUUFDakU7QUFBQSxRQUFHLENBQUMsWUFBWSxZQUFZLFFBQVEsT0FBTyxHQUFHLEtBQUssS0FDL0MsYUFBYSxHQUFHLEVBQUUsR0FBSSxhQUFhLE1BQy9CLENBQUMsV0FBVyxNQUFNLFlBQVksRUFBRSxTQUFTLFdBQVcsS0FBSyxJQUNyRCxHQUFHLFdBQVcsVUFBVSxDQUFDLE9BQzNCLEVBQ04sSUFBSSxXQUFXLEtBQUssS0FBSyxFQUFHO0FBQUEsTUFDaEMsR0FBRyxXQUFXLE1BQU0sR0FBRyxNQUFNLEdBRzNCLDhCQUFDLFFBQUssT0FBTyxjQUFjLElBQUksWUFBWSxHQUN0QyxXQUFDLGVBQ0UscUJBQUMsSUFBSSxLQUFKLEVBQVEsT0FBTyxlQUFlLFNBQU8sTUFDbEM7QUFBQTtBQUFBLFVBQUMsSUFBSTtBQUFBLFVBQUo7QUFBQSxZQUFhLG9CQUFvQjtBQUFBLFlBQUssYUFBYTtBQUFBLFlBQ2xELGdCQUFnQixJQUFJLHVCQUF1QjtBQUFBLFlBQzNDLFNBQU87QUFBQSxZQUVMO0FBQUEsY0FBQyxJQUFJO0FBQUEsY0FBSjtBQUFBLGdCQUFVLE9BQU8sY0FBYyxJQUFJLElBQUksRUFBRSxHQUFHLE1BQU07QUFBQSxnQkFDakQsT0FBTztBQUFBLGdCQUFNLFNBQU87QUFBQTtBQUFBLFlBQUM7QUFBQTtBQUFBLFFBQzNCO0FBQUEsUUFDQyxjQUFjO0FBQUEsVUFBQyxJQUFJO0FBQUEsVUFBSjtBQUFBLFlBQVUsT0FBTztBQUFBLFlBQW9CLFVBQ25ELGNBQWMsWUFBWSxjQUFjLEVBQUUsR0FBRyxrQkFDekMsZ0JBQWdCLFlBQVksS0FBSyxXQUFXLFlBQVksS0FDcEQsbUNBQW1DO0FBQUEsWUFDM0MsU0FBUztBQUFBLFlBQU0sU0FBUztBQUFBO0FBQUEsUUFDMUI7QUFBQSxTQUNKLEdBRVIsR0FDSjtBQUFBLElBQ0osR0FDSixHQUNKO0FBQUEsS0FDSjtBQUNKOzs7QU0vSUEsT0FBT0Usb0JBQW1CO0FBSTFCLE9BQU8sV0FBVztBQUVsQixJQUFNLFdBQVdDLGVBQWMsWUFBWTtBQUczQyxTQUFTLFFBQVEsZ0JBQWdCLE1BQU0sU0FBUyxPQUFPLGdCQUFnQixDQUFDO0FBRWpFLElBQU0sZ0JBQWdCLE1BQU07QUFDL0IsUUFBTSxnQkFBZ0IsY0FBYyxVQUFVLGVBQWU7QUFFN0QsU0FBTztBQUFBLElBQUMsSUFBSTtBQUFBLElBQUo7QUFBQSxNQUFRLE9BQU87QUFBQSxNQUNyQixTQUFTLGtCQUFrQixjQUFjLFVBQVUsZUFBZSxDQUFDO0FBQUEsTUFDakUsOEJBQUMsUUFBSyxPQUFPLGVBQ1IsV0FBQ0MsbUJBQWtCQSxrQkFBaUIscUJBQUMsSUFBSSxLQUFKLEVBQ2xDO0FBQUEsNEJBQUMsSUFBSSxPQUFKLEVBQVUsVUFDUCxjQUFjQSxnQkFBZSxPQUFPLEVBQUUsR0FBRyxDQUFDLFNBQ3RDLGdCQUFnQixJQUFJLEtBQUssV0FBVyxJQUFJLEtBQ3RDLFdBQVdBLGVBQWMsWUFBWSxLQUNqQyxtQ0FBbUMsR0FDN0MsU0FBUyxNQUFNO0FBQUEsUUFFbkI7QUFBQSxVQUFDLElBQUk7QUFBQSxVQUFKO0FBQUEsWUFBUSxRQUFRLElBQUksTUFBTTtBQUFBLFlBQVEsT0FBTztBQUFBLFlBQ3hDLGFBQWEsSUFBSSxZQUFZO0FBQUEsWUFFM0I7QUFBQTtBQUFBLGdCQUFDLElBQUk7QUFBQSxnQkFBSjtBQUFBLGtCQUFVLE9BQU87QUFBQSxrQkFBUyxRQUFRO0FBQUEsa0JBQUcsZUFBZTtBQUFBLGtCQUNuRCxXQUFXLE1BQU0sY0FBYztBQUFBLGtCQUMvQixPQUFPLGNBQWNBLGdCQUFlLE9BQU87QUFBQSxrQkFDM0MsYUFBYSxjQUFjQSxnQkFBZSxPQUFPO0FBQUE7QUFBQSxjQUFFO0FBQUEsY0FDckQ7QUFBQSxnQkFBQyxJQUFJO0FBQUEsZ0JBQUo7QUFBQSxrQkFBVSxPQUFPO0FBQUEsa0JBQVMsUUFBUTtBQUFBLGtCQUFHLGVBQWU7QUFBQSxrQkFDbkQsV0FBVyxNQUFNLGNBQWM7QUFBQSxrQkFDL0IsT0FBTyxjQUFjQSxnQkFBZSxPQUFPO0FBQUEsa0JBQzNDLGFBQWEsY0FBY0EsZ0JBQWUsT0FBTztBQUFBO0FBQUEsY0FBRTtBQUFBO0FBQUE7QUFBQSxRQUN6RDtBQUFBLFNBQ0osR0FDSjtBQUFBO0FBQUEsRUFDSjtBQUNKOzs7QUN4Q0EsT0FBT0MsV0FBVTtBQUNqQixPQUFPQyxVQUFTO0FBRmhCLElBQUFDLGVBQUEseUJBQUFDLEtBQUEseURBQUFDLFdBQUEsaUNBQUFDO0FBb0NBLHlCQUFDLFNBQVMsRUFBRSxXQUFXLFlBQVksQ0FBQztBQUNwQyxJQUFNLGFBQU4sTUFBTSxvQkFBa0JGLE1BQUEsUUFBUSxRQVk1QixlQUFDLE9BQU8sUUFBUSxhQUFhLElBQzdCLGNBQUMsT0FBTyxJQUdSRCxnQkFBQSxDQUFDLE9BQU8sS0FBSyxJQWhCT0MsS0FBZTtBQUFBLEVBb0JuQyxjQUFjO0FBQ1YsVUFBTTtBQXJCZCxzQkFBQUUsUUFBQTtBQUtJO0FBQ0E7QUFDQSxvQ0FBdUI7QUFDdkIsdUJBQUFELFdBQVcsSUFBSTtBQUNmO0FBQ0EsdUNBQTBCO0FBYXRCLHVCQUFLLFNBQVUsS0FBSyxvQkFBb0I7QUFFeEMsdUJBQUssWUFBYSxZQUFZLG1CQUFLLFNBQVEsU0FBUyxHQUFJLE1BQU07QUFDMUQsVUFBRyxtQkFBSyxtQkFBa0IsbUJBQUs7QUFDM0I7QUFFSix5QkFBSyxpQkFBa0IsUUFBUSxLQUFLLE1BQU0sbUJBQUssaUJBQWtCLE9BQVM7QUFFMUUsVUFBRyxtQkFBSyxjQUFhO0FBQ2pCLGFBQUssZUFBZTtBQUNwQjtBQUFBLE1BQ0o7QUFFQSxXQUFLLEtBQUs7QUFBQSxJQUNkLENBQUM7QUFFRCxRQUFHLG1CQUFLLFNBQVEsYUFBYSxJQUFJLEdBQUc7QUFDaEMsV0FBSyxLQUFLO0FBQ1Y7QUFBQSxJQUNKO0FBRUEsWUFBUSxJQUFJLHNFQUFzRTtBQUFBLEVBQ3RGO0FBQUEsRUFqQytCLE9BQU8sT0FBZTtBQUFBLEVBQUM7QUFBQSxFQUM1QyxRQUFRO0FBQUEsRUFBQztBQUFBLEVBSW5CLElBQVcsVUFBVTtBQUFFLFdBQU8sbUJBQUtBO0FBQUEsRUFBVTtBQUFBLEVBOEI3QyxnQkFBc0I7QUFDbEIsdUJBQUssWUFBVyxPQUFPO0FBQ3ZCLHVCQUFLLFlBQVcsTUFBTTtBQUFBLEVBQzFCO0FBQUEsRUFFUSxPQUFPO0FBQ1gsWUFBUSxJQUFJLGlEQUFpRDtBQUU3RCxTQUFLLGVBQWUsRUFBRSxLQUFLLE1BQU07QUFDN0IsY0FBUSxJQUFJLDJDQUEyQztBQUFBLElBQzNELENBQUMsRUFBRTtBQUFBLE1BQU0sQ0FBQyxRQUNOLFFBQVEsTUFBTSx3RUFBd0UsR0FBRyxFQUFFO0FBQUEsSUFDL0Y7QUFBQSxFQUNKO0FBQUEsRUFFQSxNQUFhLFVBQVUsU0FBZ0M7QUFDbkQsVUFBTSxVQUFVLFlBQVksT0FBTyxHQUFHLEVBQUUsTUFBTSxDQUFDLFFBQXlCO0FBQ3BFLGNBQVEsTUFBTTtBQUFBLEdBQTJELElBQUksT0FDekU7QUFBQSxJQUFrQixJQUFJLEtBQUssRUFBRTtBQUFBLElBQ3JDLENBQUM7QUFBQSxFQUNMO0FBQUEsRUFFQSxNQUFhLFdBQVcsY0FBc0Q7QUFDMUUsVUFBTSxPQUFPLE1BQU0sS0FBSyxlQUFlLFlBQVk7QUFDbkQsUUFBSSxNQUFlO0FBRW5CLFFBQUc7QUFDQyxZQUFNLEtBQUssVUFBVSxJQUFJLEVBQUUsTUFBTSxNQUFNLE1BQU0sS0FBSztBQUV0RCxXQUFPO0FBQUEsRUFDWDtBQUFBO0FBQUE7QUFBQSxFQUlBLE1BQWEsZUFBZSxNQUF1RDtBQUMvRSxVQUFNLEtBQU0sT0FBTyxTQUFTLFdBQ3hCLE9BQU8sS0FBSztBQUVoQixVQUFNLE1BQU1FLEtBQUksV0FBVztBQUFBLE1BQUksQ0FBRSxZQUFZLFVBQVUsR0FBRyxTQUFTLENBQUU7QUFBQSxNQUNqRUEsS0FBSSxnQkFBZ0IsY0FBY0EsS0FBSSxnQkFBZ0I7QUFBQSxJQUFXO0FBRXJFLFVBQU0sQ0FBRSxFQUFFLFFBQVEsTUFBTyxJQUFJLElBQUksaUJBQWlCLE1BQU0sSUFBSTtBQUU1RCxRQUFHLFFBQVE7QUFDUCxjQUFRLE1BQU07QUFBQSxFQUFxRSxNQUFNLEVBQUU7QUFDM0Y7QUFBQSxJQUNKO0FBRUEsV0FBTztBQUFBLEVBQ1g7QUFBQTtBQUFBO0FBQUEsRUFJUSxzQkFBZ0M7QUFFcEMsVUFBTSxPQUFPQyxNQUFLLE9BQU8sa0JBQWtCO0FBQzNDLFFBQUcsUUFBUTtBQUNQLGFBQU9ELEtBQUksS0FBSyxhQUFhLElBQUk7QUFHckMsVUFBTSxXQUFXQSxLQUFJLEtBQUssYUFBYSxHQUFHQyxNQUFLLG9CQUFvQixDQUFDLGtCQUFrQjtBQUN0RixRQUFHLFNBQVMsYUFBYSxJQUFJLEdBQUc7QUFDNUIsWUFBTSxlQUFlLFNBQVMsU0FBUyxTQUFTLENBQUU7QUFDbEQsaUJBQVUsUUFBUSxhQUFhLE1BQU0sSUFBSSxFQUFFLElBQUksT0FBSyxFQUFFLEtBQUssQ0FBQyxHQUFHO0FBQzNELFlBQUcsS0FBSyxXQUFXLEdBQUc7QUFDbEI7QUFFSixjQUFNLENBQUUsS0FBSyxLQUFNLElBQUksS0FBSyxNQUFNLEtBQU0sQ0FBQztBQUN6QyxZQUFHLFFBQVEsV0FBVztBQUNsQixpQkFBT0QsS0FBSSxLQUFLLGFBQWEsTUFBTSxVQUFVLENBQUM7QUFBQSxRQUNsRDtBQUFBLE1BQ0o7QUFBQSxJQUNKO0FBR0EsV0FBT0EsS0FBSSxLQUFLLGFBQWEsR0FBR0MsTUFBSyxtQkFBbUIsQ0FBQyxjQUFjO0FBQUEsRUFDM0U7QUFBQSxFQUVRLGVBQWUsU0FBb0M7QUFDdkQsV0FBTyxnQ0FBZ0MsS0FBSyxPQUFPLElBQy9DLGdCQUNGO0FBQUEsRUFDTjtBQUFBLEVBRUEsTUFBYSxZQUFZLFFBQWlDO0FBQ3RELFFBQUcsUUFBUTtBQUNQLHlCQUFLSCxXQUFXLENBQUM7QUFDakIsV0FBSyxLQUFLLE9BQU87QUFDakI7QUFBQSxJQUNKO0FBRUEsdUJBQUssZ0JBQWlCO0FBQ3RCLFVBQU0sVUFBVSxlQUFlLEVBQUUsS0FBSyxNQUFNO0FBQ3hDLHlCQUFLQSxXQUFXLENBQUM7QUFDakIsV0FBSyxLQUFLLE9BQU87QUFBQSxJQUNyQixDQUFDLEVBQUU7QUFBQSxNQUFNLENBQUMsUUFDTixRQUFRLE1BQU0sbUVBQ1YsSUFBSSxVQUFVLEdBQUcsSUFBSSxPQUFPO0FBQUEsSUFBTyxFQUFFLEdBQUcsSUFBSSxLQUFLLEVBQUU7QUFBQSxJQUMzRCxFQUFFLFFBQVEsTUFBTSxtQkFBSyxnQkFBaUIsTUFBSztBQUFBLEVBQy9DO0FBQUEsRUFFQSxNQUFhLGlCQUFnQztBQUN6QyxVQUFNLE9BQU9FLEtBQUksV0FBVztBQUFBLE1BQUksQ0FBRSxZQUFZLE1BQU87QUFBQSxNQUNqREEsS0FBSSxnQkFBZ0IsY0FBY0EsS0FBSSxnQkFBZ0I7QUFBQSxJQUFXO0FBRXJFLFNBQUssdUJBQXVCLE1BQU0sTUFBTSxDQUFDLEdBQUcsYUFBYTtBQUNyRCxZQUFNLENBQUUsU0FBUyxRQUFRLE1BQU8sSUFBSSxLQUFLLHdCQUF3QixRQUFRO0FBRXpFLFVBQUcsQ0FBQyxXQUFXLFFBQVE7QUFDbkIsZ0JBQVEsTUFBTSxpRUFBaUU7QUFDL0U7QUFBQSxNQUNKO0FBRUEsVUFBRyxDQUFDLE9BQU8sS0FBSyxHQUFHO0FBQ2YsYUFBSyxZQUFZLElBQUk7QUFDckIsYUFBSyxPQUFPLFNBQVM7QUFDckI7QUFBQSxNQUNKO0FBRUEsWUFBTSxRQUFRLE9BQU8sTUFBTSxJQUFJO0FBRS9CLFVBQUcsbUJBQUssY0FBYTtBQUNqQixjQUFNLENBQUUsSUFBSSxPQUFRLElBQUksTUFBTSxDQUFDLEVBQUUsTUFBTSxHQUFJO0FBQzNDLGNBQU0sV0FBVztBQUFBLFVBQ2IsSUFBSSxPQUFPLFNBQVMsRUFBRTtBQUFBLFVBQ3RCO0FBQUEsVUFDQSxNQUFNLEtBQUssZUFBZSxPQUFPO0FBQUEsUUFDckM7QUFFQSwyQkFBS0YsV0FBUyxRQUFRLFFBQVE7QUFFOUIsYUFBSyxLQUFLLFVBQVUsUUFBUTtBQUM1QixhQUFLLE9BQU8sU0FBUztBQUNyQjtBQUFBLE1BQ0o7QUFFQSxpQkFBVSxRQUFRLE9BQU87QUFDckIsWUFBRyxDQUFDLEtBQU07QUFFVixjQUFNLENBQUUsSUFBSSxPQUFRLElBQUksS0FBSyxNQUFNLEdBQUk7QUFFdkMsY0FBTSxXQUFXO0FBQUEsVUFDYixJQUFJLE9BQU8sU0FBUyxFQUFFO0FBQUEsVUFDdEI7QUFBQSxVQUNBLE1BQU0sS0FBSyxlQUFlLE9BQU87QUFBQSxRQUNyQztBQUVBLDJCQUFLQSxXQUFTLEtBQUssUUFBUTtBQUUzQixhQUFLLEtBQUssVUFBVSxRQUFRO0FBQzVCLGFBQUssT0FBTyxTQUFTO0FBQUEsTUFDekI7QUFFQSx5QkFBSyxhQUFjO0FBQUEsSUFFdkIsQ0FBQztBQUFBLEVBQ0w7QUFBQSxFQUVBLE9BQWMsYUFBd0I7QUFDbEMsUUFBRyxDQUFDLEtBQUs7QUFDTCxXQUFLLFdBQVcsSUFBSSxXQUFVO0FBRWxDLFdBQU8sS0FBSztBQUFBLEVBQ2hCO0FBQ0o7QUFuTkFDLFNBQUEsaUJBQUFGO0FBS0k7QUFDQTtBQUNBO0FBQ0FDLFlBQUE7QUFDQTtBQUNBO0FBRStCLGtCQUFBQyxRQUFBLGFBQS9CLGFBWkU7QUFhUSxrQkFBQUEsUUFBQSxZQUFWLFlBYkU7QUFpQkYsa0JBQUFBLFFBQUEsR0FBVyxXQURYSCxlQWhCRTtBQUFBLGFBQU4sa0JBQUFHLFFBQUEsZ0JBREEsdUJBQ007QUFBQSxXQUNhLFdBQWY7QUFESixrQkFBQUEsUUFBQSxHQUFNO0FBQU4sSUFBTSxZQUFOOzs7QUM1QkEsT0FBTyxnQkFBZ0I7QUFDdkIsT0FBT0csWUFBVztBQUdYLElBQU0sY0FBYyxXQUFXLE9BQU8sSUFBSSxpQkFBaUI7QUFFM0QsSUFBSSxDQUFDLFFBQVEsU0FBUyxJQUFJLFlBQVksV0FBVztBQUVqRCxJQUFNLFFBQVEsTUFBTTtBQUN2QixRQUFNQyxlQUF5RCxvQkFBSSxJQUFJO0FBRXZFLE1BQUcsV0FBVyxZQUFZLEVBQUUsUUFBUSxDQUFDO0FBQ2pDLGNBQVUsV0FBVyxZQUFZLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFFakQsRUFBQUEsYUFBWSxJQUFJLFdBQVcsWUFBWSxHQUFHO0FBQUEsSUFDdEMsV0FBVyxZQUFZLEVBQUUsUUFBUSxnQkFBZ0IsQ0FBQyxHQUFHQyxZQUNqREEsUUFBTyxhQUFhLFVBQVVBLE9BQU0sQ0FBQztBQUFBLElBRXpDLFdBQVcsWUFBWSxFQUFFLFFBQVEsaUJBQWlCLENBQUMsR0FBRyxpQkFBaUI7QUFDbkUsWUFBTSxVQUFVLFdBQVcsWUFBWSxFQUFFLFFBQVEsT0FBTyxRQUFNLElBQUksU0FBUztBQUUzRSxVQUFHLFFBQVEsU0FBUyxHQUFHO0FBQ25CLGtCQUFVLFFBQVEsQ0FBQyxDQUFDO0FBQ3BCO0FBQUEsTUFDSixNQUFPLFdBQVUsV0FBVztBQUFBLElBQ2hDLENBQUM7QUFBQSxFQUNMLENBQUM7QUFFRCxTQUFPO0FBQUEsSUFBQyxJQUFJO0FBQUEsSUFBSjtBQUFBLE1BQVEsT0FBTztBQUFBLE1BQVMsU0FBUyxPQUFPLENBQUMsT0FBTyxHQUFHLFNBQVM7QUFBQSxNQUNsRSxHQUFHLENBQUMsU0FBUztBQUNULGNBQU0sZUFBZSxJQUFJLGFBQWEsSUFBSSxHQUN0QyxtQkFBbUIsSUFBSSxzQkFBc0IsSUFBSSxHQUNqRCxtQkFBbUIsSUFBSSxzQkFBc0I7QUFBQSxVQUN6QyxJQUFJLDJCQUEyQjtBQUFBLFFBQVE7QUFFL0MsYUFBSyxlQUFlLFlBQVk7QUFDaEMsYUFBSyxlQUFlLGdCQUFnQjtBQUNwQyxhQUFLLGVBQWUsZ0JBQWdCO0FBRXBDLFFBQUFELGFBQVksSUFBSSxjQUFjLGFBQWEsUUFBUSxZQUFZLE1BQzNELFFBQVEsV0FBVyxFQUFFLE9BQU8sZUFBZSxDQUFDLENBQUM7QUFFakQsUUFBQUEsYUFBWTtBQUFBLFVBQUk7QUFBQSxVQUNaLGlCQUFpQixRQUFRLFVBQVUsQ0FBQyxHQUFHLEtBQUssT0FBTztBQUMvQyxnQkFBRyxXQUFXLFlBQVksRUFBRSxRQUFRLFdBQVcsS0FDNUMsT0FBTyxJQUFJLEdBQUcsWUFBWSxXQUFXLFlBQVksRUFBRSxRQUFRLENBQUMsRUFBRTtBQUM3RCxxQkFBTztBQUVYLGtCQUFNLFVBQVUsV0FBVyxZQUFZLEVBQUU7QUFFekMscUJBQVEsSUFBSSxHQUFHLElBQUksUUFBUSxRQUFRLEtBQUs7QUFDcEMsb0JBQU0sS0FBSyxRQUFRLENBQUM7QUFFcEIsa0JBQUcsR0FBRyxZQUFZLE9BQU8sSUFBSSxFQUFFO0FBQzNCO0FBRUosa0JBQUcsS0FBSyxLQUFLLFFBQVEsSUFBRSxDQUFDLEdBQUc7QUFDdkIsMEJBQVUsUUFBUSxJQUFFLENBQUMsQ0FBQztBQUN0QjtBQUFBLGNBQ0o7QUFFQSxrQkFBRyxLQUFLLEtBQUssUUFBUSxJQUFFLENBQUMsR0FBRztBQUN2QiwwQkFBVSxRQUFRLElBQUUsQ0FBQyxDQUFDO0FBQ3RCO0FBQUEsY0FDSjtBQUFBLFlBQ0o7QUFFQSxtQkFBTztBQUFBLFVBQ1gsQ0FBQztBQUFBLFFBQ0w7QUFFQSxRQUFBQSxhQUFZLElBQUksa0JBQWtCO0FBQUEsVUFDOUIsaUJBQWlCLFFBQVEsU0FBUyxNQUFNO0FBQ3BDLGtCQUFNLFdBQVcsS0FBSyxlQUFlO0FBQ3JDLHFCQUFTLGlCQUFpQixJQUFJO0FBQUEsVUFDbEMsQ0FBQztBQUFBLFVBQ0QsaUJBQWlCLFFBQVEsU0FBUyxNQUFNO0FBQ3BDLGtCQUFNLFdBQVcsS0FBSyxlQUFlO0FBQ3JDLHFCQUFTLGlCQUFpQixLQUFLO0FBQUEsVUFDbkMsQ0FBQztBQUFBLFFBQ0wsQ0FBQztBQUVELFFBQUFBLGFBQVksSUFBSSxNQUFNLEtBQUs7QUFBQSxVQUFRO0FBQUEsVUFBVyxNQUMxQ0EsYUFBWSxRQUFRLENBQUMsS0FBSyxRQUFRLE1BQU0sUUFBUSxHQUFHLElBQy9DLElBQUksUUFBUSxRQUFNLElBQUksV0FBVyxFQUFFLENBQUMsSUFDdEMsSUFBSSxXQUFXLEdBQUcsQ0FBQztBQUFBLFFBQ3pCLENBQUM7QUFBQSxNQUNMO0FBQUEsTUFFRTtBQUFBLDRCQUFDLElBQUksS0FBSixFQUFRLFNBQVMsR0FBRyxTQUFTLE9BQU8sUUFBTSxHQUFHLFNBQVMsR0FDbkQsOEJBQUMsUUFBSyxPQUFPLE9BQU8sUUFBTSxHQUFHLFNBQVMsR0FDakMsV0FBQyxjQUF1QixhQUFhLHFCQUFDLElBQUksS0FBSixFQUNuQztBQUFBO0FBQUEsWUFBQyxJQUFJO0FBQUEsWUFBSjtBQUFBLGNBQVUsT0FBTztBQUFBLGNBQWUsVUFBVSxjQUFjLE9BQU8sSUFBSSxHQUFHLFNBQVMsRUFBRSxHQUFHLENBQUMsWUFBWTtBQUM1RixzQkFBTSxZQUFZLFFBQVEsTUFBTSxHQUFHLEVBQUUsT0FBTyxTQUFPLFFBQVEsTUFBTSxDQUFDLElBQUksWUFBWSxFQUFFLFNBQVMsVUFBVSxDQUFDO0FBQ3hHLHVCQUFPLGdCQUFnQixVQUFVLFVBQVUsU0FBUyxDQUFDLENBQUMsSUFDbEQsZ0JBQWdCLFVBQVUsVUFBVSxTQUFTLENBQUMsQ0FBQyxJQUNqRDtBQUFBLGNBQ04sQ0FBQztBQUFBO0FBQUEsVUFDSDtBQUFBLFVBQ0E7QUFBQSxZQUFDLElBQUk7QUFBQSxZQUFKO0FBQUEsY0FBVSxPQUFPO0FBQUEsY0FBUyxPQUFPLGNBQWMsT0FBTyxJQUFJLEdBQUcsT0FBTyxFQUFFLEdBQUcsV0FDdEUsU0FBUyxVQUFVO0FBQUEsY0FBRyxlQUFlO0FBQUEsY0FBSSxXQUFXRSxPQUFNLGNBQWM7QUFBQTtBQUFBLFVBQzVFO0FBQUEsVUFDQTtBQUFBLFlBQUM7QUFBQTtBQUFBLGNBQVUsYUFBYSxJQUFJLFlBQVk7QUFBQSxjQUFZLE1BQU07QUFBQSxjQUFHLFFBQVE7QUFBQSxjQUNuRSxPQUFPO0FBQUEsY0FBSSxTQUFTO0FBQUE7QUFBQSxVQUFHO0FBQUEsVUFDekI7QUFBQSxZQUFDLElBQUk7QUFBQSxZQUFKO0FBQUEsY0FBVSxPQUFPO0FBQUEsY0FBVSxPQUFPLGNBQWMsT0FBTyxJQUFJLEdBQUcsUUFBUSxFQUFFLEdBQUcsWUFDeEUsVUFBVSxXQUFXO0FBQUEsY0FBRyxlQUFlO0FBQUEsY0FBSSxXQUFXQSxPQUFNLGNBQWM7QUFBQTtBQUFBLFVBQzlFO0FBQUEsV0FDSixHQUNKLEdBQ0o7QUFBQSxRQUNBO0FBQUEsVUFBQyxJQUFJO0FBQUEsVUFBSjtBQUFBLFlBQWEsZ0JBQWdCLElBQUksdUJBQXVCO0FBQUEsWUFBYSxvQkFBb0I7QUFBQSxZQUN4RixhQUFhO0FBQUEsWUFFWCw4QkFBQyxRQUFLLE9BQU8sT0FBTyxRQUFNLEdBQUcsU0FBUyxHQUNqQyxXQUFDLGNBQXVCLGFBQWEscUJBQUMsSUFBSSxLQUFKLEVBQVEsT0FBTyw2QkFDbEQ7QUFBQTtBQUFBLGdCQUFDLElBQUk7QUFBQSxnQkFBSjtBQUFBLGtCQUFXLE9BQU87QUFBQSxrQkFBUSxVQUFVO0FBQUEsa0JBQ25DLGFBQWE7QUFBQSxrQkFBMEIsV0FBVyxNQUFNO0FBQ3BELDhCQUFVLHNCQUNOLE9BQU8sSUFBSSxFQUFFLFFBQVEsUUFBUSxnQ0FBZ0MsRUFBRSxDQUNuRSxxQkFBcUIsRUFBRSxLQUFLLFVBQVE7QUFDaEMsZ0NBQVUsV0FBVyxFQUFFLFVBQVUsSUFBSTtBQUFBLG9CQUN6QyxDQUFDLEVBQUUsTUFBTSxDQUFDLE1BQWE7QUFDbkIsOEJBQVEsTUFBTTtBQUFBLEVBQThDLEVBQUUsT0FBTztBQUFBLEVBQUssRUFBRSxLQUFLLEVBQUU7QUFBQSxvQkFDdkYsQ0FBQztBQUFBLGtCQUNMO0FBQUE7QUFBQSxjQUNGO0FBQUEsY0FDQTtBQUFBLGdCQUFDLElBQUk7QUFBQSxnQkFBSjtBQUFBLGtCQUFXLE9BQU87QUFBQSxrQkFBWSxVQUFVO0FBQUEsa0JBQ3ZDLGFBQWE7QUFBQSxrQkFBWSxXQUFXLE1BQ2hDLE9BQU8sSUFBSSxFQUFFLGlCQUFpQixPQUFPLElBQUksRUFBRSxTQUFTO0FBQUE7QUFBQSxjQUMxRDtBQUFBLGNBQ0E7QUFBQSxnQkFBQyxJQUFJO0FBQUEsZ0JBQUo7QUFBQSxrQkFBVyxPQUFPO0FBQUEsa0JBQWMsVUFBVSxjQUFjLE9BQU8sSUFBSSxHQUFHLGdCQUFnQixFQUFFLEdBQUcsWUFDeEYsV0FBVyxXQUFXLGVBQWUsU0FDakMsa0NBQ0YsK0JBQStCO0FBQUEsa0JBQ25DLGFBQ0ksY0FBYyxPQUFPLElBQUksR0FBRyxnQkFBZ0IsRUFBRSxHQUFHLFlBQzdDLFdBQVcsV0FBVyxlQUFlLFNBQVMsU0FBUyxPQUFPO0FBQUEsa0JBQ3BFLFdBQVcsTUFBTSxPQUFPLElBQUksRUFBRSxXQUFXO0FBQUE7QUFBQSxjQUM3QztBQUFBLGNBQ0E7QUFBQSxnQkFBQyxJQUFJO0FBQUEsZ0JBQUo7QUFBQSxrQkFBVyxPQUFPO0FBQUEsa0JBQVEsVUFBVTtBQUFBLGtCQUNuQyxhQUFhO0FBQUEsa0JBQVEsV0FBVyxNQUFNLE9BQU8sSUFBSSxFQUFFLGFBQy9DLE9BQU8sSUFBSSxFQUFFLEtBQUs7QUFBQTtBQUFBLGNBQ3hCO0FBQUEsZUFDSixHQUNKO0FBQUE7QUFBQSxRQUNKO0FBQUE7QUFBQTtBQUFBLEVBQ0o7QUFDSjs7O0FDNUpBLE9BQU9DLFdBQVU7QUFHakIsSUFBTSxXQUFXO0FBQUEsRUFDYixVQUFVLE1BQU0sNkRBQXdCO0FBQUEsRUFDeEMsVUFBVSxNQUFNLDZEQUF3QjtBQUFBLEVBQ3hDLFVBQVUsTUFBTSw2REFBd0I7QUFDNUM7QUFFQSxJQUFNLFlBQTJCLE9BQU8sS0FBSyxRQUFRO0FBQ3JELElBQUksV0FBbUIsa0JBQWtCO0FBRWxDLFNBQVMsb0JBQTRCO0FBQ3hDLFFBQU0sY0FBdUNBLE1BQUssT0FBTyxNQUFNLEtBQUtBLE1BQUssT0FBTyxVQUFVO0FBRTFGLE1BQUcsQ0FBQyxhQUFhO0FBQ2IsWUFBUSxJQUFJLCtEQUErRCxVQUFVLENBQUMsQ0FBQyxFQUFFO0FBQ3pGLFlBQVEsSUFBSSw0REFBNEQ7QUFFeEUsV0FBTyxVQUFVLENBQUM7QUFBQSxFQUN0QjtBQUVBLFNBQU8sWUFBWSxNQUFNLEdBQUcsRUFBRSxDQUFDO0FBQ25DO0FBZU8sU0FBUyxHQUFHLEtBQXFCO0FBQ3BDLE1BQUksU0FBUyxTQUFTLFFBQWlDLEdBQ25ELFlBQVksU0FBUyxVQUFVLENBQUMsQ0FBMEI7QUFFOUQsYUFBVSxhQUFhLElBQUksTUFBTSxHQUFHLEdBQUc7QUFDbkMsYUFBUyxPQUFPLFNBQWdDO0FBQ2hELGdCQUFZLFVBQVUsU0FBbUM7QUFBQSxFQUM3RDtBQUVBLFNBQVEsT0FBTyxVQUFVLFdBQ2pCLFNBQ0EsT0FBTyxhQUFhLFdBQ3JCLFlBQ0Q7QUFDVjs7O0FDL0NPLElBQU0sT0FBTyxNQUNoQjtBQUFBLEVBQUMsSUFBSTtBQUFBLEVBQUo7QUFBQSxJQUFXLE9BQU8sY0FBYyxRQUFRLFdBQVcsR0FBRyxhQUFhLEVBQUU7QUFBQSxNQUFHLENBQUMsZ0JBQ2xFLFFBQVEsT0FBTyxPQUFPLGFBQWEsYUFBYSxJQUFJLFNBQVMsRUFBRTtBQUFBLElBQ25FO0FBQUEsSUFBRyxHQUFHLENBQUMsU0FBUztBQUNaLFlBQU0sUUFBdUI7QUFBQSxRQUN6QixLQUFLLFFBQVEsV0FBVyxDQUFDLE1BQU0sUUFBUSxXQUFXLEVBQUUsS0FBSyxhQUFhLENBQUM7QUFBQSxRQUN2RSxLQUFLLFFBQVEsV0FBVyxDQUFDLE1BQU0sTUFBTSxRQUFRLFFBQU0sS0FBSyxXQUFXLEVBQUUsQ0FBQyxDQUFDO0FBQUEsTUFDM0U7QUFBQSxJQUNKO0FBQUEsSUFBRyxVQUFVO0FBQUEsSUFBK0IsUUFBUSxJQUFJLE1BQU07QUFBQSxJQUM5RCxTQUFTO0FBQUEsSUFBTSxhQUFhLEdBQUcsTUFBTTtBQUFBO0FBQ3pDOzs7QUNURyxJQUFNLFFBQVEsTUFDakI7QUFBQSxFQUFDLElBQUk7QUFBQSxFQUFKO0FBQUEsSUFBVyxPQUFPLGNBQWMsUUFBUSxXQUFXLEdBQUcsYUFBYSxFQUFFLEdBQUcsQ0FBQyxTQUN0RSxTQUFTLE9BQU8sT0FBTyxNQUFNLGVBQWUsSUFBSSxTQUFTLEVBQUUsRUFBRTtBQUFBLElBQzdELEdBQUcsQ0FBQyxTQUFTO0FBQ1QsWUFBTSxRQUF1QjtBQUFBLFFBQ3pCLEtBQUssUUFBUSxXQUFXLENBQUMsTUFBTSxRQUFRLFdBQVcsRUFBRSxPQUFPLGVBQWUsQ0FBQztBQUFBLFFBQzNFLEtBQUssUUFBUSxXQUFXLENBQUMsTUFBTSxNQUFNLFFBQVEsUUFBTSxLQUFLLFdBQVcsRUFBRSxDQUFDLENBQUM7QUFBQSxNQUMzRTtBQUFBLElBQ0o7QUFBQSxJQUNBLE9BQU87QUFBQSxNQUFLLENBQUMsT0FBTyxHQUFHO0FBQUEsUUFDbkIsT0FBTyxXQUFXLEVBQUUsWUFBWSxxQkFBcUIsUUFBUTtBQUFBLE1BQUMsS0FDdkQ7QUFBQSxJQUNYO0FBQUE7QUFDSjs7O0FDWEosT0FBT0MsV0FBVTtBQUNqQixPQUFPQyxVQUFTO0FBVGhCLDJGQUFBQyxLQUFBLHVCQUFBQyxRQUFBO0FBY0EseUJBQUMsU0FBUyxFQUFFLFdBQVcsWUFBWSxDQUFDO0FBQ3BDLElBQU0sYUFBTixNQUFNLG9CQUFrQkQsTUFBQSxRQUFRLFFBRzVCLGdCQUFDLE9BQU8sSUFDUixnQkFBQyxPQUFPLElBZVIsa0JBQUMsT0FBTyxNQUFNLElBR2Qsa0JBQUMsT0FBTyxPQUFPLElBV2YsYUFBQyxPQUFPLE1BQU0sSUFTZCxrQkFBQyxPQUFPLE1BQU0sSUExQ01BLEtBQWU7QUFBQSxFQStEbkMsY0FBYztBQUNWLFVBQU07QUFoRWQsc0JBQUFDLFFBQUE7QUFNSSxtQ0FBc0I7QUFDdEIsOEJBQWdCO0FBR2hCO0FBQUEsbUNBQXFCO0FBQ3JCLHFDQUF3QjtBQUN4Qiw4QkFBOEI7QUFDOUIsbUNBQXFCO0FBQ3JCLGlDQUFrQztBQUNsQyxnQ0FBeUI7QUFrRHJCLFVBQU0sWUFBWUMsTUFBSyxxQkFBcUJBLE1BQUssY0FBYyxnQkFBZ0I7QUFDL0UsUUFBRyxVQUFXLG9CQUFLLE9BQVEsR0FBRyxTQUFTO0FBQUEsRUFDM0M7QUFBQSxFQWhFVSxVQUFVO0FBQUEsRUFBQztBQUFBLEVBQ1gsVUFBVTtBQUFBLEVBQUM7QUFBQSxFQWdCckIsSUFBVyxZQUFZO0FBQUUsV0FBTyxtQkFBSztBQUFBLEVBQVk7QUFBQSxFQUdqRCxJQUFXLFlBQVk7QUFBRSxXQUFPLG1CQUFLO0FBQUEsRUFBWTtBQUFBLEVBQ2pELElBQVksVUFBVSxVQUFtQjtBQUNyQyxJQUFDLENBQUMsWUFBWSxtQkFBSyxjQUNmLEtBQUssY0FBYyxJQUNyQixLQUFLLGVBQWUsbUJBQUssVUFBUyxNQUFTO0FBRTdDLHVCQUFLLFlBQWE7QUFDbEIsU0FBSyxPQUFPLFdBQVc7QUFBQSxFQUMzQjtBQUFBLEVBR0EsSUFBVyxPQUFPO0FBQUUsV0FBTyxtQkFBSztBQUFBLEVBQU87QUFBQSxFQUN2QyxJQUFXLEtBQUssU0FBaUI7QUFDN0IsUUFBRyxLQUFLLFVBQVc7QUFFbkIsdUJBQUssT0FBUTtBQUNiLFNBQUssT0FBTyxNQUFNO0FBQUEsRUFDdEI7QUFBQSxFQUdBLElBQVcsWUFBWTtBQUFFLFdBQU8sbUJBQUs7QUFBQSxFQUFZO0FBQUEsRUFDakQsSUFBVyxVQUFVLFFBQWdCO0FBQ2pDLFFBQUcsS0FBSyxVQUFXO0FBRW5CLHVCQUFLLFlBQWE7QUFDbEIsU0FBSyxPQUFPLFdBQVc7QUFBQSxFQUMzQjtBQUFBO0FBQUEsRUFHQSxJQUFXLFNBQVM7QUFBRSxXQUFPLG1CQUFLO0FBQUEsRUFBUztBQUFBO0FBQUEsRUFHM0MsSUFBVyxjQUFjO0FBQUUsV0FBTyxtQkFBSztBQUFBLEVBQWM7QUFBQSxFQUNyRCxJQUFXLFlBQVksVUFBbUI7QUFDdEMsUUFBRyxLQUFLLFVBQVc7QUFFbkIsdUJBQUssY0FBZTtBQUNwQixTQUFLLE9BQU8sY0FBYztBQUFBLEVBQzlCO0FBQUEsRUFRQSxPQUFjLGFBQWE7QUFDdkIsUUFBRyxDQUFDLEtBQUs7QUFDTCxXQUFLLFdBQVcsSUFBSSxXQUFVO0FBRWxDLFdBQU8sS0FBSztBQUFBLEVBQ2hCO0FBQUEsRUFFTyxlQUFlLE1BQXNCO0FBQ3hDLFFBQUcsS0FBSztBQUNKLFlBQU0sSUFBSSxNQUFNLHNDQUFzQztBQUUxRCx1QkFBSyxTQUFVLEdBQUcsS0FBSyxJQUFJLEVBQUUsT0FBTyxpQkFBaUIsQ0FBQyxRQUFRLEtBQUssYUFBYSxLQUFLO0FBQ3JGLHVCQUFLLFlBQWE7QUFDbEIsU0FBSyxPQUFPLFdBQVc7QUFDdkIsU0FBSyxLQUFLLFNBQVM7QUFDbkIsa0JBQWMsS0FBSyxJQUFJO0FBRXZCLFVBQU0sY0FBY0MsS0FBSSxZQUFZLElBQUk7QUFDeEMsZ0JBQVksU0FBUyxNQUFNO0FBQUEsSUFBQztBQUU1QixVQUFNLGFBQWEsR0FBRyxNQUFNLEtBQUssQ0FBQyxJQUFJLE1BQU0sS0FBSyxDQUFDLElBQUksTUFBTSxTQUFTLENBQUMsSUFBSSxNQUFNLFVBQVUsQ0FBQztBQUUzRix1QkFBSyxVQUFXQSxLQUFJLFdBQVcsSUFBSTtBQUFBLE1BQy9CO0FBQUEsTUFDQSxHQUFJLE9BQU8sQ0FBRSxNQUFNLFVBQVcsSUFBSSxDQUFDO0FBQUEsTUFDbkM7QUFBQSxNQUNBLEdBQUcsS0FBSyxJQUFJLElBQUksS0FBSyxNQUFPO0FBQUEsSUFDaEMsR0FBR0EsS0FBSSxnQkFBZ0IsY0FBY0EsS0FBSSxnQkFBZ0IsV0FBVztBQUVwRSx1QkFBSyxVQUFTLFdBQVcsYUFBYSxNQUFNO0FBQ3hDLFdBQUssY0FBYztBQUFBLElBQ3ZCLENBQUM7QUFFRCx1QkFBSyxZQUFhLEtBQUssSUFBSSxFQUFFLFFBQVE7QUFBQSxFQUN6QztBQUFBLEVBRU8sZ0JBQWdCO0FBQ25CLFFBQUcsQ0FBQyxtQkFBSyxVQUFVO0FBRW5CLEtBQUMsbUJBQUssVUFBUyxjQUFjLEtBQUssVUFBVTtBQUFBLE1BQ3hDO0FBQUEsTUFBUTtBQUFBLE1BQU07QUFBQSxNQUFXLG1CQUFLLFVBQVMsZUFBZTtBQUFBLElBQzFELENBQUM7QUFFRCxVQUFNLE9BQU8sbUJBQUs7QUFDbEIsVUFBTSxTQUFTLG1CQUFLO0FBRXBCLHVCQUFLLFVBQVc7QUFDaEIsdUJBQUssWUFBYTtBQUNsQix1QkFBSyxZQUFhO0FBQ2xCLHVCQUFLLFNBQVU7QUFDZixTQUFLLE9BQU8sV0FBVztBQUN2QixTQUFLLEtBQUssU0FBUztBQUVuQixrQkFBYyxXQUFXLEVBQUUsaUJBQWlCO0FBQUEsTUFDeEMsU0FBUztBQUFBLFFBQ0w7QUFBQSxVQUNJLE1BQU07QUFBQSxVQUNOLFVBQVUsTUFBTTtBQUNaLHNCQUFVLENBQUMsWUFBWSxNQUFNLFFBQVMsSUFBSSxDQUFDO0FBQUEsVUFDL0M7QUFBQSxRQUNKO0FBQUEsUUFDQTtBQUFBLFVBQ0ksTUFBTTtBQUFBLFVBQ04sVUFBVSxNQUFNO0FBQ1osc0JBQVUsQ0FBQyxZQUFZLEdBQUcsSUFBSSxJQUFJLE1BQU0sRUFBRSxDQUFDO0FBQUEsVUFDL0M7QUFBQSxRQUNKO0FBQUEsTUFDSjtBQUFBLE1BQ0EsU0FBUztBQUFBLE1BQ1QsU0FBUztBQUFBLE1BQ1QsTUFBTSxZQUFZLElBQUksSUFBSSxNQUFNO0FBQUEsSUFDcEMsQ0FBQztBQUFBLEVBQ0w7QUFDSjtBQTlJQUYsU0FBQSxpQkFBQUQ7QUFNSTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBWlUsa0JBQUFDLFFBQUEsY0FBVixjQUhFO0FBSVEsa0JBQUFBLFFBQUEsY0FBVixjQUpFO0FBb0JGLGtCQUFBQSxRQUFBLEdBQVcsYUFEWCxnQkFuQkU7QUF1QkYsa0JBQUFBLFFBQUEsR0FBVyxhQURYLGdCQXRCRTtBQWtDRixrQkFBQUEsUUFBQSxHQUFXLFFBRFgsV0FqQ0U7QUEyQ0Ysa0JBQUFBLFFBQUEsR0FBVyxhQURYLGdCQTFDRTtBQUFBLGFBQU4sa0JBQUFBLFFBQUEsZ0JBREEsdUJBQ007QUFBQSxXQUNhLFdBQWY7QUFESixrQkFBQUEsUUFBQSxHQUFNO0FBQU4sSUFBTSxZQUFOOzs7QUNQQSxPQUFPLG9CQUFvQjtBQUMzQixPQUFPLGtCQUFrQjtBQUtsQixJQUFNLFNBQVMsTUFDbEI7QUFBQSxFQUFDLElBQUk7QUFBQSxFQUFKO0FBQUEsSUFBVyxPQUFPLGNBQWMsUUFBUSxXQUFXLEdBQUcsYUFBYSxFQUFFLEdBQUcsQ0FBQyxhQUN0RSxPQUFPLE9BQU8sVUFBVSxnQkFBZ0IsSUFBSSxnQkFBZ0IsUUFBUTtBQUFBLElBQ3RFLFdBQVcsTUFBTSxRQUFRLFdBQVcsRUFBRSxPQUFPLGdCQUFnQjtBQUFBLElBRTNELCtCQUFDLElBQUksS0FBSixFQUNHO0FBQUEsMkJBQUMsSUFBSSxLQUFKLEVBQVEsT0FBTyxxQkFBcUIsU0FBUyxHQUMxQztBQUFBO0FBQUEsVUFBQztBQUFBO0FBQUEsWUFBYSxPQUFNO0FBQUEsWUFBTyxVQUFVLFlBQVksV0FBVyxFQUFFLGVBQWU7QUFBQSxZQUMzRSxNQUFNLGNBQWMsWUFBWSxXQUFXLEVBQUUsZUFBZSxHQUFHLFlBQVksRUFBRSxHQUFHLFVBQzVFLENBQUMsWUFBWSxXQUFXLEVBQUUsWUFBWSxLQUNsQyxZQUFZLFdBQVcsRUFBRSxjQUFjLElBQUksSUFDdkMsT0FDRiw2QkFBNkI7QUFBQTtBQUFBLFFBQ3JDO0FBQUEsUUFFSjtBQUFBLFVBQUM7QUFBQTtBQUFBLFlBQWEsT0FBTTtBQUFBLFlBQVMsVUFBVSxZQUFZLFdBQVcsRUFBRSxpQkFBaUI7QUFBQSxZQUMvRSxNQUFNLGNBQWMsWUFBWSxXQUFXLEVBQUUsaUJBQWlCLEdBQUcsWUFBWSxFQUFFLEdBQUcsVUFDOUUsQ0FBQyxZQUFZLFdBQVcsRUFBRSxjQUFjLEtBQ3BDLFlBQVksV0FBVyxFQUFFLGdCQUFnQixJQUFJLElBQ3pDLE9BQ0YsNkJBQTZCO0FBQUE7QUFBQSxRQUNyQztBQUFBLFNBQ1I7QUFBQSxNQUNBO0FBQUEsUUFBQyxJQUFJO0FBQUEsUUFBSjtBQUFBLFVBQWEsYUFBYSxjQUFjLFVBQVUsV0FBVyxHQUFHLFdBQVc7QUFBQSxVQUMxRSxvQkFBb0I7QUFBQSxVQUFLLGdCQUFnQixJQUFJLHVCQUF1QjtBQUFBLFVBRWxFLCtCQUFDLElBQUksS0FBSixFQUNHO0FBQUE7QUFBQSxjQUFDLElBQUk7QUFBQSxjQUFKO0FBQUEsZ0JBQVUsT0FBTztBQUFBLGdCQUFtQixVQUFVO0FBQUEsZ0JBQzdDLEtBQUs7QUFBQTtBQUFBLFlBQXNCO0FBQUEsWUFFN0I7QUFBQSxjQUFDLElBQUk7QUFBQSxjQUFKO0FBQUEsZ0JBQVUsT0FBTztBQUFBLGdCQUFZLE9BQU8sZUFBZTtBQUFBLGtCQUM5QyxjQUFjLFVBQVUsV0FBVyxHQUFHLFdBQVc7QUFBQSxrQkFDakQ7QUFBQSxnQkFDSixHQUFHLENBQUMsV0FBVyxhQUFhO0FBQ3hCLHNCQUFHLENBQUMsYUFBYSxDQUFDLFVBQVUsV0FBVyxFQUFFO0FBQ3JDLDJCQUFPO0FBRVgsd0JBQU0sbUJBQW1CLFNBQVMsUUFBUSxJQUFJLFVBQVUsV0FBVyxFQUFFO0FBQ3JFLHNCQUFHLG9CQUFvQixFQUFHLFFBQU87QUFFakMsd0JBQU0sVUFBVSxLQUFLLE1BQU0sbUJBQW1CLEVBQUU7QUFDaEQsd0JBQU0sVUFBVSxLQUFLLE1BQU0sbUJBQW1CLEVBQUU7QUFFaEQseUJBQU8sR0FBSSxVQUFVLEtBQUssSUFBSSxPQUFPLEtBQUssT0FBUSxJQUFLLFVBQVUsS0FBSyxJQUFJLE9BQU8sS0FBSyxPQUFRO0FBQUEsZ0JBQ2xHLENBQUM7QUFBQTtBQUFBLFlBQ0g7QUFBQSxhQUNKO0FBQUE7QUFBQSxNQUNKO0FBQUEsTUFDQSxvQkFBQyxlQUFZO0FBQUEsT0FDakI7QUFBQTtBQUNKO0FBRUosU0FBUyxhQUFhLE9BQXlGO0FBQzNHLFNBQU8scUJBQUMsSUFBSSxLQUFKLEVBQVEsU0FBUyxHQUFHLE9BQU8sTUFBTSxPQUFPLEdBQUcsQ0FBQyxTQUFTO0FBQ3ZELFVBQU0sUUFBcUMsb0JBQUksSUFBSTtBQUNuRCxVQUFNLG1CQUFtQixJQUFJLHNCQUFzQjtBQUFBLE1BQy9DLElBQUksMkJBQTJCO0FBQUEsSUFBUTtBQUUzQyxVQUFNLElBQUksa0JBQWtCLGlCQUFpQixRQUFRLFVBQVUsQ0FBQyxHQUFHLEtBQUssT0FBTztBQUMzRSxNQUFDLEtBQUssSUFDRixZQUFZLFdBQVcsRUFBRSx1QkFBdUIsTUFBTSxVQUFVLENBQUMsSUFDbkUsWUFBWSxXQUFXLEVBQUUsdUJBQXVCLE1BQU0sVUFBVSxDQUFDO0FBQUEsSUFDdkUsQ0FBQyxDQUFDO0FBRUYsVUFBTSxJQUFJLE1BQU0sS0FBSyxRQUFRLFdBQVcsTUFBTSxNQUFNLFFBQVEsQ0FBQyxJQUFJLFFBQzdELElBQUksV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQUEsRUFDNUIsR0FFRztBQUFBLFVBQU0sUUFBUSxvQkFBQyxJQUFJLE9BQUosRUFBVSxVQUFVLE1BQU0sTUFBTTtBQUFBLElBQ2hELG9CQUFDLElBQUksT0FBSixFQUFVLE9BQU8sVUFBVSxPQUFPLGNBQWMsTUFBTSxVQUFVLFFBQVEsRUFBRSxHQUFHLFNBQzFFLEdBQUcsS0FBSyxNQUFNLE1BQU0sR0FBRyxDQUFDLEdBQUcsR0FBRztBQUFBLEtBQ3RDO0FBQ0o7QUFFQSxTQUFTLGNBQWM7QUFDbkIsU0FBTyxxQkFBQyxJQUFJLEtBQUosRUFBUSxPQUFPLGdCQUFnQixTQUFTLEdBQzVDO0FBQUE7QUFBQSxNQUFDLElBQUk7QUFBQSxNQUFKO0FBQUEsUUFBVSxVQUFVLGVBQWU7QUFBQSxVQUM5QixjQUFjLGVBQWUsWUFBWSxHQUFHLFdBQVc7QUFBQSxVQUN2RCxjQUFjLGVBQWUsWUFBWSxHQUFHLGFBQWE7QUFBQSxRQUM3RCxHQUFHLENBQUMsU0FBUyxjQUFjO0FBQ3ZCLGlCQUFPLFVBQ0gsWUFDSSw4QkFDRix1QkFDRjtBQUFBLFFBQ1IsQ0FBQztBQUFBLFFBQUcsT0FBTztBQUFBLFFBQW1CLFNBQzFCLGNBQWMsZUFBZSxZQUFZLEdBQUcsU0FBUyxFQUFFLEdBQUcsT0FBTztBQUFBO0FBQUEsSUFFdkU7QUFBQSxJQUVBO0FBQUEsTUFBQyxJQUFJO0FBQUEsTUFBSjtBQUFBLFFBQVUsVUFBVSxjQUFjLGFBQWEsWUFBWSxHQUFHLFNBQVMsRUFBRSxHQUFHLGFBQVc7QUFDbEYsa0JBQU8sU0FBUztBQUFBLFlBQ1osS0FBSyxhQUFhLFFBQVE7QUFBTyxxQkFBTyxhQUFhLFlBQVksRUFBRSxNQUFNLGNBQWM7QUFBQSxZQUV2RixLQUFLLGFBQWEsUUFBUTtBQUFNLHFCQUFPLGFBQWEsWUFBWSxFQUFFLEtBQUssY0FBYztBQUFBLFVBQ3pGO0FBRUEsaUJBQU87QUFBQSxRQUNYLENBQUM7QUFBQSxRQUFHLE9BQU87QUFBQSxRQUNYLFNBQVMsY0FBYyxhQUFhLFlBQVksR0FBRyxTQUFTLEVBQUUsR0FBRyxhQUM3RCxZQUFZLGFBQWEsUUFBUSxPQUFPO0FBQUE7QUFBQSxJQUM5QztBQUFBLElBRUEscUJBQUMsSUFBSSxLQUFKLEVBQ0c7QUFBQTtBQUFBLFFBQUMsSUFBSTtBQUFBLFFBQUo7QUFBQSxVQUFVLE9BQU87QUFBQSxVQUFjLFVBQVU7QUFBQSxZQUN0QyxjQUFjLFdBQVcsRUFBRSxVQUFVO0FBQUEsWUFBRztBQUFBLFVBQWEsRUFBRSxHQUFHLFNBQU8sTUFDN0QsaUNBQ0YsMkNBQTJDO0FBQUE7QUFBQSxNQUVqRDtBQUFBLE1BQ0E7QUFBQSxRQUFDLElBQUk7QUFBQSxRQUFKO0FBQUEsVUFBVSxVQUFVO0FBQUEsVUFBMEIsT0FBTztBQUFBLFVBQ3BELFNBQVMsa0JBQWtCLGNBQWMsY0FBYyxXQUFXLEdBQUcsU0FBUyxDQUFDO0FBQUE7QUFBQSxNQUNqRjtBQUFBLE9BQ0o7QUFBQSxLQUNKO0FBQ0o7OztBQ3ZITyxJQUFNLE1BQU0sQ0FBQyxRQUFnQjtBQUNoQyxRQUFNLGdCQUFnQjtBQUN0QixTQUFPO0FBQUEsSUFBQyxNQUFNO0FBQUEsSUFBTjtBQUFBLE1BQWEsV0FBVztBQUFBLE1BQVcsT0FBTyxNQUFNLE1BQU07QUFBQSxNQUM1RCxRQUFRLE1BQU0sYUFBYSxNQUFNLE1BQU0sYUFBYSxPQUFPLE1BQU0sYUFBYTtBQUFBLE1BQzlFLGFBQWEsTUFBTSxZQUFZO0FBQUEsTUFBVyxlQUFlO0FBQUEsTUFBSSxTQUFTO0FBQUEsTUFDdEUsU0FBUztBQUFBLE1BQU0sVUFBVTtBQUFBLE1BQ3ZCLDhCQUFDLElBQUksS0FBSixFQUFRLE9BQU8saUJBQ1osK0JBQUMsSUFBSSxXQUFKLEVBQWMsT0FBTyxpQkFBaUIsU0FBTyxNQUMxQztBQUFBO0FBQUEsVUFBQyxJQUFJO0FBQUEsVUFBSjtBQUFBLFlBQVEsT0FBTztBQUFBLFlBQWdCLGFBQWE7QUFBQSxZQUMzQyxRQUFRLElBQUksTUFBTTtBQUFBLFlBQU8sU0FBUztBQUFBLFlBQ2xDLE9BQU07QUFBQSxZQUVKO0FBQUEsa0NBQUMsUUFBSztBQUFBLGNBQ04sb0JBQUMsY0FBVztBQUFBLGNBQ1osb0JBQUMsaUJBQWM7QUFBQTtBQUFBO0FBQUEsUUFDbkI7QUFBQSxRQUNBO0FBQUEsVUFBQyxJQUFJO0FBQUEsVUFBSjtBQUFBLFlBQVEsT0FBTztBQUFBLFlBQWtCLGFBQWE7QUFBQSxZQUM3QyxTQUFTO0FBQUEsWUFBZSxRQUFRLElBQUksTUFBTTtBQUFBLFlBQzFDLE9BQU07QUFBQSxZQUVKO0FBQUEsa0NBQUMsU0FBTTtBQUFBLGNBQ1Asb0JBQUMsU0FBTTtBQUFBO0FBQUE7QUFBQSxRQUNYO0FBQUEsUUFDQTtBQUFBLFVBQUMsSUFBSTtBQUFBLFVBQUo7QUFBQSxZQUFRLE9BQU87QUFBQSxZQUFpQixhQUFhO0FBQUEsWUFDNUMsU0FBUztBQUFBLFlBQWUsUUFBUSxJQUFJLE1BQU07QUFBQSxZQUMxQyxPQUFNO0FBQUEsWUFDSjtBQUFBLGtDQUFDLFFBQUs7QUFBQSxjQUNOLG9CQUFDLFVBQU87QUFBQTtBQUFBO0FBQUEsUUFDWjtBQUFBLFNBQ0osR0FDSjtBQUFBO0FBQUEsRUFDSjtBQUNKOzs7QUMxQ0EsT0FBT0csV0FBVTtBQUNqQixPQUFPQyxVQUFTO0FBQ2hCLE9BQU9DLFlBQVc7OztBQ0lsQixTQUFTQyxVQUFTLEtBQWE7QUFDM0IsU0FBTyxJQUNGLFFBQVEsbUJBQW1CLE9BQU8sRUFDbEMsV0FBVyxLQUFLLEdBQUcsRUFDbkIsWUFBWTtBQUNyQjtBQUVBLGVBQWUsU0FBWUMsTUFBOEJDLFFBQXVCO0FBQzVFLFNBQU9ELEtBQUksS0FBSyxDQUFDLE1BQU1DLE9BQU0sRUFBRSxPQUFPLENBQUMsRUFBRSxNQUFNLE1BQU0sTUFBTTtBQUMvRDtBQUVBLFNBQVMsTUFBd0IsT0FBVSxNQUFnQztBQUN2RSxTQUFPLGVBQWUsT0FBTyxNQUFNO0FBQUEsSUFDL0IsTUFBTTtBQUNGLGFBQU8sS0FBSyxPQUFPRixVQUFTLElBQUksQ0FBQyxFQUFFLEVBQUU7QUFBQSxJQUN6QztBQUFBLEVBQ0osQ0FBQztBQUNMO0FBRUEsTUFBTSxTQUFTLE9BQU8sZ0JBQWdCLEdBQUcsQ0FBQyxFQUFFLE1BQUFHLE9BQU0sWUFBWSxNQUFNO0FBQ2hFLFFBQU1BLE1BQUssV0FBVyxNQUFNO0FBQzVCLFFBQU0sWUFBWSxXQUFXLFVBQVU7QUFDdkMsUUFBTSxZQUFZLFdBQVcsWUFBWTtBQUM3QyxDQUFDO0FBRUQsTUFBTSxTQUFTLE9BQU8sbUJBQW1CLEdBQUcsQ0FBQyxFQUFFLE9BQU8sTUFBTTtBQUN4RCxRQUFNLE9BQU8sV0FBVyxTQUFTO0FBQ3JDLENBQUM7QUFFRCxNQUFNLFNBQVMsT0FBTyxxQkFBcUIsR0FBRyxDQUFDLEVBQUUsU0FBUyxXQUFXLE9BQU8sTUFBTTtBQUM5RSxRQUFNLFFBQVEsV0FBVyxPQUFPO0FBQ2hDLFFBQU0sVUFBVSxXQUFXLFVBQVU7QUFDckMsUUFBTSxVQUFVLFdBQVcsU0FBUztBQUNwQyxRQUFNLE9BQU8sV0FBVyxPQUFPO0FBQ25DLENBQUM7QUFFRCxNQUFNLFNBQVMsT0FBTyxvQkFBb0IsR0FBRyxDQUFDLEVBQUUsVUFBVSxTQUFTLFVBQVUsTUFBTTtBQUMvRSxRQUFNLFNBQVMsV0FBVyxPQUFPO0FBQ2pDLFFBQU0sU0FBUyxXQUFXLFVBQVU7QUFDcEMsUUFBTSxTQUFTLFdBQVcsWUFBWTtBQUN0QyxRQUFNLFNBQVMsV0FBVyxTQUFTO0FBQ25DLFFBQU0sUUFBUSxXQUFXLGdCQUFnQjtBQUN6QyxRQUFNLFFBQVEsV0FBVyxpQkFBaUI7QUFDMUMsUUFBTSxVQUFVLFdBQVcsU0FBUztBQUN4QyxDQUFDO0FBRUQsTUFBTSxTQUFTLE9BQU8saUJBQWlCLEdBQUcsQ0FBQyxFQUFFLE9BQU8sT0FBTyxNQUFNO0FBQzdELFFBQU0sTUFBTSxXQUFXLFNBQVM7QUFDaEMsUUFBTSxPQUFPLFdBQVcsdUJBQXVCO0FBQy9DLFFBQU0sT0FBTyxXQUFXLHFCQUFxQjtBQUM3QyxRQUFNLE9BQU8sV0FBVyxzQkFBc0I7QUFDOUMsUUFBTSxPQUFPLFdBQVcsb0JBQW9CO0FBQzVDLFFBQU0sT0FBTyxXQUFXLFVBQVU7QUFDdEMsQ0FBQztBQUVELE1BQU0sU0FBUyxPQUFPLG1CQUFtQixHQUFHLENBQUMsRUFBRSxLQUFLLE1BQU07QUFDdEQsUUFBTSxLQUFLLFdBQVcsZUFBZTtBQUNyQyxRQUFNLEtBQUssV0FBVyxjQUFjO0FBQ3hDLENBQUM7QUFFRCxNQUFNLFNBQVMsT0FBTyxrQkFBa0IsR0FBRyxDQUFDLEVBQUUsUUFBUSxhQUFhLE1BQU07QUFDckUsUUFBTSxPQUFPLFdBQVcsZUFBZTtBQUN2QyxRQUFNLGFBQWEsV0FBVyxTQUFTO0FBQzNDLENBQUM7QUFFRCxNQUFNLFNBQVMsT0FBTyx5QkFBeUIsR0FBRyxDQUFDLEVBQUUsY0FBYyxNQUFNO0FBQ3JFLFFBQU0sY0FBYyxXQUFXLFNBQVM7QUFDNUMsQ0FBQztBQUVELE1BQU0sU0FBUyxPQUFPLGNBQWMsR0FBRyxDQUFDLEVBQUUsSUFBSSxPQUFPLE1BQU0sTUFBTTtBQUM3RCxRQUFNLEdBQUcsV0FBVyxXQUFXO0FBQy9CLFFBQU0sR0FBRyxXQUFXLFNBQVM7QUFDN0IsUUFBTSxNQUFNLFdBQVcsU0FBUztBQUNoQyxRQUFNLE1BQU0sV0FBVyxXQUFXO0FBQ2xDLFFBQU0sTUFBTSxXQUFXLGFBQWE7QUFDcEMsUUFBTSxNQUFNLFdBQVcsVUFBVTtBQUNqQyxRQUFNLE1BQU0sV0FBVyxTQUFTO0FBQ2hDLFFBQU0sTUFBTSxXQUFXLFNBQVM7QUFDaEMsUUFBTSxNQUFNLFdBQVcsV0FBVztBQUNsQyxRQUFNLE1BQU0sV0FBVyxPQUFPO0FBQzlCLFFBQU0sTUFBTSxXQUFXLFNBQVM7QUFDaEMsUUFBTSxNQUFNLFdBQVcsU0FBUztBQUNwQyxDQUFDO0FBRUQsTUFBTSxTQUFTLE9BQU8sZ0JBQWdCLEdBQUcsQ0FBQyxFQUFFLE1BQUFDLE1BQUssTUFBTTtBQUNuRCxRQUFNQSxNQUFLLFdBQVcsT0FBTztBQUNqQyxDQUFDOzs7QUMzRkQsU0FBUywyQkFBMkI7QUFDcEMsU0FBUyxNQUFNLG1CQUFtQjtBQUVsQyxPQUFPLFFBQVE7QUFDZixPQUFPQyxjQUFhO0FBd0NiLFNBQVMsTUFBTSxLQUFrQjtBQUNwQyxTQUFPLElBQUssTUFBTSxnQkFBZ0IsSUFBSTtBQUFBLElBR2xDLE9BQU87QUFDSCxNQUFBQSxTQUFRLGNBQWMsRUFBRSxXQUFXLFVBQVUsR0FBRyxJQUFXO0FBQUEsSUFDL0Q7QUFBQSxJQUVBLEtBQUssTUFBNEI7QUFDN0IsYUFBTyxJQUFJLFFBQVEsQ0FBQyxLQUFLLFFBQVE7QUFDN0IsWUFBSTtBQUNBLGdCQUFNLEtBQUssU0FBUztBQUFBLDBCQUNkLEtBQUssU0FBUyxHQUFHLElBQUksT0FBTyxVQUFVLElBQUksR0FBRztBQUFBLHVCQUNoRDtBQUNILGFBQUcsRUFBRSxFQUFFLEtBQUssR0FBRyxFQUFFLE1BQU0sR0FBRztBQUFBLFFBQzlCLFNBQVMsT0FBTztBQUNaLGNBQUksS0FBSztBQUFBLFFBQ2I7QUFBQSxNQUNKLENBQUM7QUFBQSxJQUNMO0FBQUEsSUFJQSxpQkFBdUI7QUFDbkIsWUFBTSxlQUFlO0FBQ3JCLFdBQUssY0FBYztBQUFBLElBQ3ZCO0FBQUEsSUFFQSxjQUFjLEtBQWEsTUFBa0M7QUFDekQsVUFBSSxPQUFPLEtBQUssbUJBQW1CLFlBQVk7QUFDM0MsYUFBSyxlQUFlLEtBQUssQ0FBQyxhQUFhO0FBQ25DLGFBQUcsV0FBVyxNQUFNLE9BQU8sUUFBUSxHQUFHLENBQUMsR0FBRyxRQUFRLEdBQUcsa0JBQWtCLEdBQUcsQ0FBQztBQUFBLFFBQy9FLENBQUM7QUFBQSxNQUNMLE9BQU87QUFDSCxjQUFNLGNBQWMsS0FBSyxJQUFJO0FBQUEsTUFDakM7QUFBQSxJQUNKO0FBQUEsSUFFQSxVQUFVLE9BQWUsUUFBUSxPQUFPO0FBQ3BDLFlBQU0sVUFBVSxPQUFPLEtBQUs7QUFBQSxJQUNoQztBQUFBLElBRUEsS0FBSyxNQUFxQjtBQUN0QixZQUFNLEtBQUs7QUFDWCxXQUFLLFFBQVEsQ0FBQztBQUFBLElBQ2xCO0FBQUEsSUFFQSxNQUFNLEVBQUUsZ0JBQWdCLEtBQUssTUFBTSxNQUFNLFFBQVEsT0FBTyxHQUFHLElBQUksSUFBWSxDQUFDLEdBQUc7QUFDM0UsWUFBTSxNQUFNO0FBRVosaUJBQVcsTUFBTTtBQUNiLGNBQU0sbUJBQW1CLElBQUksWUFBWSxtQkFBbUI7QUFDNUQsYUFBSyxDQUFDO0FBQUEsTUFDVjtBQUVBLGFBQU8sT0FBTyxNQUFNLEdBQUc7QUFDdkIsMEJBQW9CLElBQUksWUFBWTtBQUVwQyxXQUFLLGlCQUFpQjtBQUN0QixVQUFJLFFBQVEsWUFBWSxNQUFNO0FBQzFCLG1CQUFXLENBQUMsWUFBWTtBQUNwQixlQUFLLGNBQWM7QUFDbkIsaUJBQU8sR0FBRyxXQUFXO0FBQUEsUUFDekIsQ0FBQztBQUFBLE1BQ0wsQ0FBQztBQUVELFVBQUk7QUFDQSxZQUFJLGVBQWU7QUFBQSxNQUN2QixRQUFRO0FBQ0osZUFBTyxPQUFPLENBQUMsUUFBUSxHQUFHLGFBQWEsSUFBSSxjQUFjLEdBQUcsR0FBSSxHQUFHLFdBQVc7QUFBQSxNQUNsRjtBQUVBLFVBQUksSUFBSyxNQUFLLFVBQVUsS0FBSyxLQUFLO0FBRWxDLFVBQUksTUFBTyxLQUFJLFVBQVUsS0FBSztBQUU5QixlQUFTO0FBQ1QsVUFBSSxLQUFNLEtBQUksS0FBSztBQUVuQixVQUFJLFNBQVMsQ0FBQyxDQUFDO0FBQUEsSUFDbkI7QUFBQSxFQUNKLEVBQUc7QUFDUDs7O0FGMUhBQyxLQUFJLEtBQUs7QUFJVEMsTUFBSyxTQUFTLFlBQVk7QUFJMUIsTUFBTSxPQUFPLG9CQUFvQixFQUFFLEtBQUssQ0FBQyxFQUFFLFNBQVMsSUFBSSxNQUFNLElBQUksS0FBSyxDQUFDLEVBQUUsTUFBTSxNQUFNLE1BQU07QUFFNUYsSUFBTyxjQUFRLE1BQU1DLE9BQU0sV0FBVzs7O0FHVnRDLE9BQU9DLG9CQUFtQjs7O0FDRjFCLE9BQU9DLFlBQVc7QUFTbEIsSUFBTSxDQUFDLFNBQVMsVUFBVSxJQUFJLFlBQVksWUFBYTtBQUVoRCxJQUFNLE1BQU0sQ0FBQyxRQUFnQjtBQUNoQyxNQUFHLFFBQVEsSUFBSSxNQUFNO0FBQ2pCLGVBQVcsWUFBYTtBQUU1QixTQUFPO0FBQUEsSUFBQyxNQUFNO0FBQUEsSUFBTjtBQUFBLE1BQWEsV0FBVztBQUFBLE1BQU8sT0FBTztBQUFBLE1BQWMsT0FBTyxNQUFNLE1BQU07QUFBQSxNQUM3RSxRQUFRLE1BQU0sYUFBYTtBQUFBLE1BQVEsV0FBVztBQUFBLE1BQU8sY0FBYztBQUFBLE1BQUksU0FBUztBQUFBLE1BRTlFLCtCQUFDLElBQUksS0FBSixFQUFRLE9BQU8sT0FDWjtBQUFBO0FBQUEsVUFBQyxJQUFJO0FBQUEsVUFBSjtBQUFBLFlBQVUsT0FBTztBQUFBLFlBQVEsVUFBVTtBQUFBLGNBQWMsWUFBWSxXQUFXLEVBQUUsZUFBZTtBQUFBLGNBQ3BGO0FBQUEsWUFBWSxFQUFFLEdBQUcsVUFBUSxDQUFDLFlBQVksV0FBVyxFQUFFLFlBQVksS0FDM0QsWUFBWSxXQUFXLEVBQUUsY0FBYyxJQUFJLElBQUksT0FBTyw2QkFBNkI7QUFBQTtBQUFBLFFBQzdGO0FBQUEsUUFDQSxxQkFBQyxJQUFJLEtBQUosRUFBUSxhQUFhLElBQUksWUFBWSxVQUFVLE9BQU8sVUFBVSxTQUFTLE1BQU0sU0FBUyxNQUNyRjtBQUFBO0FBQUEsWUFBQyxJQUFJO0FBQUEsWUFBSjtBQUFBLGNBQVUsT0FBTztBQUFBLGNBQVUsT0FBTztBQUFBLGdCQUFjLFlBQVksV0FBVyxFQUFFLGVBQWU7QUFBQSxnQkFDbkY7QUFBQSxjQUFhLEVBQUUsR0FBRyxpQkFBZSxlQUFlLFNBQVM7QUFBQSxjQUM3RCxXQUFXQyxPQUFNLGNBQWM7QUFBQTtBQUFBLFVBQ2pDO0FBQUEsVUFDQTtBQUFBLFlBQUMsSUFBSTtBQUFBLFlBQUo7QUFBQSxjQUFhLE9BQU87QUFBQSxjQUFZLE9BQU87QUFBQSxnQkFDbEMsWUFBWSxXQUFXLEVBQUUsZUFBZTtBQUFBLGdCQUFHO0FBQUEsY0FBUSxFQUFFLEdBQUcsQ0FBQyxXQUNyRCxLQUFLLE1BQU0sU0FBUyxHQUFHLENBQUM7QUFBQSxjQUNoQyxVQUFVLFlBQVksV0FBVyxFQUFFLGlCQUFpQjtBQUFBO0FBQUEsVUFDdEQ7QUFBQSxXQUNKO0FBQUEsU0FDSjtBQUFBO0FBQUEsRUFDSjtBQUNKOzs7QUNsQ0EsSUFBTSxFQUFFLEtBQUssTUFBTSxPQUFPLE9BQU8sSUFBSSxNQUFNO0FBOEJwQyxTQUFTLGlCQUFpQixPQUE0QztBQUN6RSxRQUFNLFFBQXFDLG9CQUFJLElBQUk7QUFFbkQsU0FBTztBQUFBLElBQUMsTUFBTTtBQUFBLElBQU47QUFBQSxNQUFhLFdBQVc7QUFBQSxNQUM1QixLQUFLLE1BQU0sT0FBTztBQUFBLE1BQ2xCLFNBQVMsTUFBTTtBQUFBLE1BQ2YsT0FBTyxNQUFNLFNBQVMsTUFBTSxNQUFNO0FBQUEsTUFDbEMsUUFBUSxNQUFNLE9BQU8sU0FBUztBQUFBLE1BQzlCLFNBQVMsTUFBTTtBQUFBLE1BQ2YsYUFBYSxNQUFNLGVBQWUsTUFBTSxZQUFZO0FBQUEsTUFDcEQsV0FBVyxDQUFDLE1BQU0sTUFBTSxRQUFRLENBQUMsSUFBSSxRQUFRLElBQUksV0FBVyxFQUFFLENBQUM7QUFBQSxNQUMvRCxHQUFHLENBQUMsU0FBUztBQUNULGNBQU0sZUFBZSxJQUFJLGFBQWEsSUFBSSxHQUN0QyxxQkFBcUIsSUFBSSxtQkFBbUIsSUFBSTtBQUVwRCxhQUFLLGVBQWUsWUFBWTtBQUNoQyxhQUFLLGVBQWUsa0JBQWtCO0FBRXRDLGNBQU0sSUFBSSxvQkFBb0IsbUJBQW1CO0FBQUEsVUFBUTtBQUFBLFVBQ3JELENBQUMsR0FBRyxRQUFRLFlBQVk7QUFDcEIsZ0JBQUcsV0FBVyxJQUFJLFlBQVk7QUFDMUIsb0JBQU0sY0FBYyxJQUFJO0FBQ3hCO0FBQUEsWUFDSjtBQUVBLGtCQUFNLG1CQUFtQixNQUFNLFFBQVEsT0FBTztBQUFBLFVBQ2xEO0FBQUEsUUFDSixDQUFDO0FBRUQsY0FBTSxJQUFJLGNBQWMsYUFBYSxRQUFRLFlBQVksQ0FBQyxZQUFZO0FBQ2xFLGNBQUcsUUFBUSxtQkFBbUIsTUFBTSxJQUFJLGdCQUFnQjtBQUNwRCxrQkFBTSxxQkFBcUIsSUFBSTtBQUMvQjtBQUFBLFVBQ0o7QUFFQSxjQUFHLFFBQVEsbUJBQW1CLE1BQU0sSUFBSSxrQkFBa0I7QUFDdEQsa0JBQU0sdUJBQXVCLElBQUk7QUFDakM7QUFBQSxVQUNKO0FBRUEsZ0JBQU0sY0FBYyxJQUFJO0FBQUEsUUFDNUIsQ0FBQyxDQUFDO0FBQUEsTUFDTjtBQUFBO0FBQUEsRUFDSjtBQUNKOzs7QUN4Q0EsSUFBTSxFQUFFLEtBQUFDLE1BQUssTUFBQUMsT0FBTSxPQUFBQyxRQUFPLFFBQUFDLFFBQU8sSUFBSSxNQUFNO0FBRXBDLFNBQVMsWUFBWSxPQUF5QztBQUNqRSxRQUFNLFVBQVUsTUFBTSxNQUFNO0FBRTVCLFFBQU0sV0FBVyxNQUFNLHNCQUF1QjtBQUFBLElBQUM7QUFBQTtBQUFBLE1BQzNDLFNBQVMsTUFBTSxXQUFXO0FBQUEsTUFDMUIsT0FBTyxNQUFNO0FBQUEsTUFDYixLQUFLLE1BQU07QUFBQTtBQUFBLEVBQXFCLElBQ2xDO0FBRUYsUUFBTSxlQUFlLGVBQWUsT0FBTztBQUFBLElBQ3ZDO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLEVBQ0osQ0FBQztBQUVELFNBQU87QUFBQSxJQUFDLE1BQU07QUFBQSxJQUFOO0FBQUEsTUFBYyxHQUFHO0FBQUEsTUFBYyxTQUFPO0FBQUEsTUFDNUMsV0FBVyxNQUFNLGFBQWE7QUFBQSxNQUFnQixPQUN6QyxNQUFNLGlCQUFpQixXQUNsQixNQUFNLHFCQUFxQixXQUN4QixlQUFlLENBQUMsTUFBTSxPQUFPLE1BQU0sU0FBUyxHQUFHLENBQUMsTUFBTSxjQUNuRCxnQkFBZ0IsSUFBSSxJQUFJLFNBQVMsRUFBRSxJQUN4QyxNQUFNLE1BQU0sR0FBRyxVQUFRLGdCQUFnQixJQUFJLElBQUksTUFBTSxhQUFhLEVBQUUsRUFBRSxJQUMzRSxnQkFBZ0IsTUFBTSxTQUFTLEVBQUUsSUFBSSxNQUFNLGFBQWEsRUFBRTtBQUFBLE1BQzlELFNBQVMsTUFBTSxRQUFRO0FBQUEsTUFBVyxRQUFRSCxPQUFNQyxRQUFPQyxTQUFRQztBQUFBLE1BQ2pFLGFBQWEsTUFBTSxlQUFlLE1BQU0sWUFBWTtBQUFBLE1BQ3BELFdBQVcsQ0FBQyxTQUFTO0FBQ2pCLGtCQUFVLE1BQU07QUFDaEIsY0FBTSxZQUFZLElBQUk7QUFBQSxNQUMxQjtBQUFBLE1BQ0EsR0FBRyxDQUFDLFNBQVM7QUFDVCxjQUFNLHlCQUF5QixDQUFDLE1BQW9CLEtBQUssTUFBTTtBQUUvRCxjQUFNLFFBQXFDLG9CQUFJLElBQUk7QUFDbkQsY0FBTSxlQUFlLElBQUksYUFBYSxJQUFJO0FBQzFDLGNBQU0sZ0JBQWdCLElBQUksbUJBQW1CLElBQUk7QUFDakQsY0FBTSxhQUFjLEtBQUssVUFBVSxFQUFlLGdCQUFnQixFQUFHLGVBQWU7QUFFcEYsYUFBSyxlQUFlLFlBQVk7QUFDaEMsYUFBSyxlQUFlLGFBQWE7QUFFakMsY0FBTSxJQUFJLGNBQWMsYUFBYSxRQUFRLFlBQVksQ0FBQyxHQUFHLElBQUksR0FBRyxNQUFNO0FBQ3RFLGNBQUksSUFBSSxXQUFXLEtBQUssSUFBSyxXQUFXLElBQUksV0FBVyxVQUNuRCxJQUFJLFdBQVcsS0FBSyxJQUFLLFdBQVcsSUFBSSxXQUFXLFNBQVU7QUFHN0Qsa0JBQU0sUUFBUSxDQUFDLElBQUksUUFBUTtBQUN2QixrQkFBSSxXQUFXLEVBQUU7QUFBQSxZQUNyQixDQUFDO0FBRUQsa0JBQU0scUJBQXNCLElBQUk7QUFBQSxVQUNwQztBQUFBLFFBQ0osQ0FBQyxDQUFDO0FBRUYsY0FBTSxJQUFJLGVBQWUsY0FBYyxRQUFRLGVBQWUsQ0FBQyxHQUFHLFFBQVEsWUFBWTtBQUNsRixjQUFHLFdBQVcsSUFBSSxZQUFZO0FBQzFCLGtCQUFNLFFBQVEsQ0FBQyxJQUFJLFFBQVE7QUFDdkIsa0JBQUksV0FBVyxFQUFFO0FBQUEsWUFDckIsQ0FBQztBQUVELGtCQUFNLHFCQUFzQixJQUFJO0FBQ2hDO0FBQUEsVUFDSjtBQUVBLGdCQUFNLG1CQUFtQixNQUFNLFFBQVEsT0FBTztBQUFBLFFBQ2xELENBQUMsQ0FBQztBQUVGLGNBQU0sSUFBSSxNQUFNLEtBQUssUUFBUSxXQUFXLE1BQU0sTUFBTSxRQUFRLENBQUMsSUFBSSxRQUM3RCxJQUFJLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUV4QixjQUFNLElBQUksSUFBSTtBQUFBLE1BQ2xCO0FBQUEsTUFDSSw4QkFBQyxJQUFJLEtBQUosRUFBUSxRQUFRLE1BQU0sUUFBUSxRQUFRLE1BQU0sUUFBUSxTQUFPLE1BQUMsU0FBTyxNQUFDLEtBQUs7QUFBQSwrQkFDckQsTUFBTSxjQUFjLENBQUM7QUFBQSxnQ0FDcEIsTUFBTSxlQUFlLENBQUM7QUFBQSw4QkFDeEIsTUFBTSxhQUFhLENBQUM7QUFBQSxpQ0FDakIsTUFBTSxnQkFBZ0IsQ0FBQztBQUFBLGdCQUkxQztBQUFBLFFBQUMsSUFBSTtBQUFBLFFBQUo7QUFBQSxVQUFRLGNBQWMsTUFBTTtBQUFBLFVBQWMsZUFBZSxNQUFNO0FBQUEsVUFDOUQsR0FBRyxDQUFDLFNBQVM7QUFDVCxrQkFBTSxlQUFlLElBQUksYUFBYSxJQUFJO0FBQzFDLGlCQUFLLGVBQWUsWUFBWTtBQUVoQyxrQkFBTSxZQUFZLGFBQWEsUUFBUSxZQUFZLE1BQU0sSUFBSTtBQUM3RCxrQkFBTSxjQUFjLEtBQUssUUFBUSxXQUFXLE1BQU07QUFDOUMsMkJBQWEsV0FBVyxTQUFTO0FBQ2pDLG1CQUFLLFdBQVcsV0FBVztBQUFBLFlBQy9CLENBQUM7QUFBQSxVQUNMO0FBQUEsVUFDRyxnQkFBTTtBQUFBO0FBQUEsTUFDWCxHQUNKO0FBQUE7QUFBQSxFQUNOO0FBQ0o7OztBQ3ZJQSxPQUFPQyxrQkFBaUI7QUFDeEIsT0FBT0MsWUFBVztBQUNsQixPQUFPQyxXQUFVO0FBR2pCLFNBQVMscUJBQXFCLE9BQXlFO0FBQ25HLFFBQU0sTUFBTSxNQUFNLFNBQVMsTUFBTTtBQUVqQyxNQUFHLENBQUMsT0FBTyxDQUFDLElBQUksU0FBUyxHQUFHO0FBQ3hCLFdBQU87QUFFWCxVQUFPLE1BQU07QUFBQSxJQUNULEtBQUssT0FBTyxLQUFLLEdBQUc7QUFDaEIsYUFBTyxVQUFVLEdBQUc7QUFBQSxJQUV4QixLQUFLLE9BQU8sS0FBSyxHQUFHO0FBQUEsSUFDcEIsS0FBSyxpQkFBaUIsS0FBSyxHQUFHO0FBQzFCLGFBQU8sVUFBVUMsTUFBSyxhQUFhLENBQUMsSUFBSSxJQUFJLFFBQVEsbUNBQW1DLEVBQUUsQ0FBQztBQUFBLEVBQ2xHO0FBRUEsU0FBTztBQUNYO0FBRU8sU0FBUyxtQkFBbUIsRUFBRSxjQUFjLGVBQWUsYUFBYSxVQUFVLFlBQVksR0FNbEY7QUFFZixpQkFBZ0IsT0FBTyxpQkFBaUIsV0FDcENDLGFBQVksWUFBWSxFQUFFLGlCQUFpQixZQUFZLElBQ3pEO0FBRUYsUUFBTSxRQUE0QyxvQkFBSSxJQUFJO0FBRTFELFNBQU87QUFBQSxJQUFDLElBQUk7QUFBQSxJQUFKO0FBQUEsTUFBUSxTQUFPO0FBQUEsTUFBQyxPQUFPLGdCQUN6QixjQUFjLFdBQVcsRUFBRSxpQkFBaUIsYUFBYSxPQUFPLENBQ3BFO0FBQUEsTUFBSSxhQUFhLElBQUksWUFBWTtBQUFBLE1BQVUsU0FBUztBQUFBLE1BQ3BELEdBQUcsQ0FBQyxTQUFTO0FBQ1QsY0FBTSx3QkFBd0IsSUFBSSxzQkFBc0IsSUFBSSxHQUN4RCxlQUFlLElBQUksYUFBYSxJQUFJO0FBRXhDLGFBQUssZUFBZSxxQkFBcUI7QUFDekMsYUFBSyxlQUFlLFlBQVk7QUFFaEMsY0FBTSxJQUFJLHVCQUF1QjtBQUFBLFVBQzdCLHNCQUFzQixRQUFRLFNBQVMsTUFDbkMsZUFBZSxjQUFjLFdBQVcsRUFBRSxpQkFBaUIsYUFBYSxFQUFFLENBQUM7QUFBQSxVQUMvRSxzQkFBc0IsUUFBUSxTQUFTLE1BQ25DLGVBQWUsY0FBYyxXQUFXLEVBQUUsbUJBQW1CLGFBQWEsRUFBRSxDQUFDO0FBQUEsUUFDckYsQ0FBQztBQUVELGNBQU0sSUFBSSxjQUFjO0FBQUEsVUFDcEIsYUFBYSxRQUFRLFlBQVksQ0FBQyxZQUFZO0FBQzFDLG9CQUFRLG1CQUFtQixNQUFNLElBQUksa0JBQ2pDLGdCQUFnQixZQUFZO0FBQUEsVUFDcEMsQ0FBQztBQUFBLFFBQ0wsQ0FBQztBQUFBLE1BQ0w7QUFBQSxNQUFHLFdBQVcsQ0FBQyxNQUFNO0FBQ2pCLGNBQU0sUUFBUSxDQUFDLEtBQUssUUFBUSxJQUFJLFFBQVEsUUFBTSxJQUFJLFdBQVcsRUFBRSxDQUFDLENBQUM7QUFBQSxNQUNyRTtBQUFBLE1BRUU7QUFBQSw2QkFBQyxJQUFJLEtBQUosRUFBUSxPQUFPLE9BQU8sU0FBTyxNQUMxQjtBQUFBLDhCQUFDLElBQUksT0FBSixFQUFVLEtBQUssb0JBQW9CLEdBQUcsQ0FBQyxTQUFTO0FBQzNDLGtCQUFNLE9BQU8sZ0JBQWdCLGFBQWEsV0FBVyxhQUFhLE9BQU8sS0FDckUsZ0JBQWdCLGFBQWEsT0FBTyxLQUFLLFdBQVcsYUFBYSxPQUFPO0FBRTVFLGdCQUFHLE1BQU07QUFDTCxtQkFBSyxtQkFBbUIsSUFBSTtBQUM1QjtBQUFBLFlBQ0o7QUFFQSxpQkFBSyxZQUFZLEtBQUs7QUFBQSxVQUM1QixHQUFHO0FBQUEsVUFDSDtBQUFBLFlBQUMsSUFBSTtBQUFBLFlBQUo7QUFBQSxjQUFVLE9BQU87QUFBQSxjQUFZLFFBQVEsSUFBSSxNQUFNO0FBQUEsY0FBTyxTQUFTO0FBQUEsY0FDOUQsT0FBTyxhQUFhLFdBQVc7QUFBQTtBQUFBLFVBQWU7QUFBQSxVQUVoRDtBQUFBLFlBQUMsSUFBSTtBQUFBLFlBQUo7QUFBQSxjQUFVLE9BQU87QUFBQSxjQUFRLFNBQVM7QUFBQSxjQUFVLFFBQVE7QUFBQSxjQUNuRCxPQUFPRCxNQUFLLFNBQVMsb0JBQW9CLGFBQWEsSUFBSSxFQUFFLE9BQU8sT0FBTyxLQUFLO0FBQUE7QUFBQSxVQUFJO0FBQUEsVUFFckY7QUFBQSxZQUFDLElBQUk7QUFBQSxZQUFKO0FBQUEsY0FBVyxRQUFRLElBQUksTUFBTTtBQUFBLGNBQUssVUFBVTtBQUFBLGNBQzNDLE9BQU87QUFBQTtBQUFBLFVBQWE7QUFBQSxXQUMxQjtBQUFBLFFBQ0Esb0JBQUMsYUFBVSxPQUFPLEtBQUksYUFBYSxJQUFJLFlBQVksVUFBVTtBQUFBLFFBQzdELG9CQUFDLElBQUksS0FBSixFQUFRLE9BQU8sV0FBVyxHQUFHLENBQUMsU0FBUztBQUNwQyxnQkFBTSxRQUFRLHFCQUFxQixZQUFZO0FBRS9DLG1CQUNJLEtBQUssUUFBUSxJQUFJLFFBQVEsaUJBQWlCLEtBQUssQ0FBQztBQUFBLFFBQ3RELEdBRUU7QUFBQSxVQUFDLElBQUk7QUFBQSxVQUFKO0FBQUEsWUFBUSxPQUFPO0FBQUEsWUFBUSxhQUFhLElBQUksWUFBWTtBQUFBLFlBQ25ELFNBQVM7QUFBQSxZQUVQO0FBQUE7QUFBQSxnQkFBQyxJQUFJO0FBQUEsZ0JBQUo7QUFBQSxrQkFBVSxPQUFPO0FBQUEsa0JBQVcsV0FBVztBQUFBLGtCQUFNLFNBQVM7QUFBQSxrQkFBTyxRQUFRO0FBQUEsa0JBQ3BFLFNBQU87QUFBQSxrQkFBQyxXQUFXRSxPQUFNLGNBQWM7QUFBQSxrQkFBSyxPQUN4QyxhQUFhLFFBQVEsUUFBUSxRQUFRLE9BQU87QUFBQTtBQUFBLGNBQ2xEO0FBQUEsY0FFQTtBQUFBLGdCQUFDLElBQUk7QUFBQSxnQkFBSjtBQUFBLGtCQUFVLE9BQU87QUFBQSxrQkFBUSxXQUFXO0FBQUEsa0JBQU0sUUFBUTtBQUFBLGtCQUFHLE1BQU07QUFBQSxrQkFBTSxTQUFTO0FBQUEsa0JBQ3pFLFNBQU87QUFBQSxrQkFBQyxVQUFVQSxPQUFNLFNBQVM7QUFBQSxrQkFBVyxPQUN4QyxhQUFhLEtBQUssUUFBUSxRQUFRLE9BQU87QUFBQTtBQUFBLGNBQy9DO0FBQUE7QUFBQTtBQUFBLFFBQ0osR0FDSjtBQUFBLFFBRUEsb0JBQUMsSUFBSSxLQUFKLEVBQVEsT0FBTyxxQkFBcUIsU0FBUyxNQUFNLFNBQy9DLHdCQUF3QkQsYUFBWSxnQkFDaEMsYUFBYSxRQUFRLE9BQU8sWUFBVSxPQUFPLE1BQU0sWUFBWSxNQUFNLE1BQU0sRUFBRSxTQUFTLEdBR3hGLGtDQUF3QkEsYUFBWSxnQkFDbkMsYUFBYSxRQUFRLE9BQU8sT0FBSyxFQUFFLE1BQU0sWUFBWSxNQUFNLE1BQU0sRUFBRSxJQUFJLFlBQ25FO0FBQUEsVUFBQyxJQUFJO0FBQUEsVUFBSjtBQUFBLFlBQVcsT0FBTztBQUFBLFlBQVUsT0FBTyxPQUFPO0FBQUEsWUFDekMsU0FBUztBQUFBLFlBQU0sV0FBVyxDQUFDLE1BQU07QUFDN0IsMkJBQWEsT0FBTyxPQUFPLEVBQUU7QUFDN0IsNEJBQWMsWUFBWTtBQUFBLFlBQzlCO0FBQUE7QUFBQSxRQUNGLENBQUUsR0FFZDtBQUFBO0FBQUE7QUFBQSxFQUNKO0FBQ0o7OztBQ3pITyxJQUFNLGVBQWUsTUFDeEI7QUFBQSxFQUFDLElBQUk7QUFBQSxFQUFKO0FBQUEsSUFBUSxhQUFhLElBQUksWUFBWTtBQUFBLElBQ3BDLE9BQU8sY0FBYyxjQUFjLFdBQVcsR0FBRyxTQUFTLEVBQUUsR0FBRyxhQUMzRCxXQUFXLFFBQVEsU0FBUyxJQUFJLFNBQVMsRUFBRSxFQUFFO0FBQUEsSUFFL0M7QUFBQTtBQUFBLFFBQUMsSUFBSTtBQUFBLFFBQUo7QUFBQSxVQUFtQixPQUFPO0FBQUEsVUFBc0Isa0JBQWtCLElBQUksV0FBVztBQUFBLFVBQ2hGLGtCQUFrQixJQUFJLFdBQVc7QUFBQSxVQUFXLHdCQUF3QjtBQUFBLFVBQ3BFLFFBQVEsQ0FBQyxTQUFTO0FBQ2QsZ0JBQUcsQ0FBRSxLQUFLLFVBQVUsRUFBb0IsVUFBVSxFQUFHO0FBRXJELGlCQUFLLG1CQUNDLEtBQUssVUFBVSxFQUFvQixVQUFVLEVBQ3pDLGdCQUFnQixFQUFHLGVBQWUsRUFBRSxVQUN2QztBQUFBLFVBQ1g7QUFBQSxVQUVFO0FBQUEsWUFBQyxJQUFJO0FBQUEsWUFBSjtBQUFBLGNBQVEsT0FBTztBQUFBLGNBQWlCLFNBQVM7QUFBQSxjQUFNLGFBQWEsSUFBSSxZQUFZO0FBQUEsY0FDM0UsU0FBUztBQUFBLGNBQUcsUUFBUSxJQUFJLE1BQU07QUFBQSxjQUU1Qiw4QkFBQyxPQUFJLE1BQU0sY0FBYyxjQUFjLFdBQVcsR0FBRyxTQUFTLEdBQ3pELFdBQUMsVUFDRTtBQUFBLGdCQUFDO0FBQUE7QUFBQSxrQkFBbUIsY0FBYztBQUFBLGtCQUFPLFVBQVU7QUFBQSxrQkFDakQsYUFBYSxDQUFDLE1BQU0sY0FBYyxXQUFXLEVBQUUsY0FBYyxFQUFFLEVBQUU7QUFBQSxrQkFDakUsZUFBZSxDQUFDLE1BQU0sY0FBYyxXQUFXLEVBQUUsY0FBYyxFQUFFLEVBQUU7QUFBQTtBQUFBLGNBQ3pFLEdBQ0o7QUFBQTtBQUFBLFVBQ0o7QUFBQTtBQUFBLE1BQ0o7QUFBQSxNQUVBLG9CQUFDLElBQUksS0FBSixFQUFRLFNBQVMsTUFBTSxPQUFPLGNBQWMsUUFBUSxJQUFJLE1BQU0sS0FDM0Q7QUFBQSxRQUFDLElBQUk7QUFBQSxRQUFKO0FBQUEsVUFBVyxPQUFPO0FBQUEsVUFBYSxVQUFVO0FBQUEsVUFDeEMsT0FBTyxHQUFHLE9BQU87QUFBQSxVQUFHLFdBQVcsY0FBYyxXQUFXLEVBQUU7QUFBQTtBQUFBLE1BQWMsR0FDOUU7QUFBQTtBQUFBO0FBQ0o7OztBQ25DSixPQUFPRSxVQUFTO0FBQ2hCLE9BQU9DLFlBQVU7QUFQakIsaUNBQUFDLEtBQUEscUdBQUFDO0FBWUEseUJBQUMsU0FBUyxFQUFFLFdBQVcsWUFBWSxDQUFDO0FBQ3BDLElBQU0sYUFBTixNQUFNLG9CQUFrQkQsTUFBQSxRQUFRLFFBUzVCLGVBQUMsT0FBTyxPQUFPLElBU2Ysa0JBQUMsT0FBTyxNQUFNLElBbEJNQSxLQUFlO0FBQUEsRUF3Qm5DLGNBQWM7QUFDVixVQUFNO0FBekJkLHNCQUFBQyxRQUFBO0FBRUk7QUFDQSxnQ0FBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0EscUNBQXdCO0FBb0JwQix1QkFBSyxpQkFBa0JDLE9BQUssT0FBTyxZQUFZLEtBQzNDLEdBQUdBLE9BQUssYUFBYSxDQUFDO0FBRTFCLHVCQUFLLGdCQUFpQkMsS0FBSSxLQUFLLGFBQWEsR0FDeENELE9BQUssb0JBQW9CLENBQUMsc0JBQXNCO0FBRXBELFNBQUssYUFBYSxFQUFFLEtBQUssQ0FBQyxTQUFTO0FBQy9CLFVBQUcsTUFBTSxLQUFLLEVBQUcsb0JBQUssWUFBYSxLQUFLLEtBQUs7QUFBQSxJQUNqRCxDQUFDO0FBRUQsUUFBSSxTQUFtQztBQUV2Qyx1QkFBSyxVQUFXLFlBQVksbUJBQUssZ0JBQWUsU0FBUyxHQUFJLENBQUMsR0FBRyxVQUFVO0FBQ3ZFLFVBQUcsVUFBVUMsS0FBSSxpQkFBaUIsV0FBVyxVQUFVQSxLQUFJLGlCQUFpQixXQUMxRSxVQUFVQSxLQUFJLGlCQUFpQjtBQUM3QjtBQUVKLFVBQUcsT0FBUTtBQUFBLFVBQ04sVUFBUyxRQUFRLE1BQU0sTUFBTSxTQUFTLE1BQVM7QUFFcEQsVUFBRyxtQkFBSyxlQUFjO0FBQ2xCLDJCQUFLLGNBQWU7QUFDcEI7QUFBQSxNQUNKO0FBRUEsWUFBTSxDQUFFLFFBQVEsSUFBSyxJQUFJLG1CQUFLLGdCQUFlLGNBQWMsSUFBSTtBQUMvRCxVQUFHLENBQUM7QUFDQSxnQkFBUSxNQUFNLDZEQUE2RDtBQUUvRSxZQUFNLFVBQVUsSUFBSSxZQUFZLEVBQUUsT0FBTyxJQUFJO0FBRTdDLFVBQUcsU0FBUztBQUNSLFlBQUksVUFBbUI7QUFFdkIsbUJBQVUsUUFBUSxRQUFRLE1BQU0sSUFBSSxHQUFHO0FBQ25DLGNBQUcsS0FBSyxLQUFLLEVBQUUsV0FBVyxHQUFHO0FBQ3pCO0FBRUosZ0JBQU0sWUFBWSxLQUFLLE1BQU0sR0FBRztBQUNoQyxnQkFBTSxNQUFNLFVBQVUsQ0FBQyxFQUFFLEtBQUssR0FDMUIsUUFBUSxVQUFVLE9BQU8sQ0FBQ0MsSUFBRyxNQUFNLE1BQU0sQ0FBQyxFQUFFLEtBQUssR0FBRyxFQUFFLEtBQUs7QUFFL0Qsa0JBQU8sS0FBSztBQUFBLFlBQ1IsS0FBSztBQUNELG1CQUFLLFNBQVUsbUNBQW1DLEtBQUssS0FBSyxJQUFLLE9BQU87QUFDeEU7QUFBQSxZQUVKLEtBQUs7QUFDRCxrQkFBRyxtQkFBSyxnQkFBZSxTQUFTLFNBQVM7QUFDckMscUJBQUssYUFBYSxPQUFPLEtBQUs7QUFDOUIsMEJBQVU7QUFBQSxjQUNkO0FBRUE7QUFBQSxVQUNSO0FBQUEsUUFDSjtBQUFBLE1BQ0o7QUFBQSxJQUNKLENBQUM7QUFBQSxFQUNMO0FBQUEsRUEzRUEsSUFBVyxTQUFTO0FBQUUsV0FBTyxtQkFBSztBQUFBLEVBQVM7QUFBQSxFQUMzQyxJQUFXLE9BQU8sWUFBcUI7QUFDbkMsdUJBQUssU0FBVTtBQUNmLFNBQUssT0FBTyxRQUFRO0FBQUEsRUFDeEI7QUFBQSxFQUtBLElBQVcsWUFBWTtBQUFFLFdBQU8sbUJBQUssZUFBYztBQUFBLEVBQUk7QUFBQSxFQUN2RCxJQUFXLFVBQVUsVUFBa0I7QUFBRSxTQUFLLGFBQWEsUUFBUTtBQUFBLEVBQUc7QUFBQSxFQUV0RSxJQUFXLGlCQUFpQjtBQUFFLFdBQU8sbUJBQUs7QUFBQSxFQUFpQjtBQUFBLEVBaUUzRCxnQkFBc0I7QUFDbEIsdUJBQUssVUFBUyxPQUFPO0FBQUEsRUFDekI7QUFBQSxFQUVBLE9BQWMsYUFBd0I7QUFDbEMsUUFBRyxDQUFDLEtBQUs7QUFDTCxXQUFLLFdBQVcsSUFBSSxXQUFVO0FBRWxDLFdBQU8sS0FBSztBQUFBLEVBQ2hCO0FBQUEsRUFFUSxlQUFxQjtBQUN6Qix1QkFBSyxjQUFlO0FBQ3BCLHVCQUFLLGdCQUFlO0FBQUEsTUFBYztBQUFBLE1BQU07QUFBQSxNQUNwQ0QsS0FBSSxnQkFBZ0I7QUFBQSxNQUNwQkQsT0FBSztBQUFBLE1BQWtCO0FBQUEsTUFBTSxDQUFDLEdBQUcsV0FBVztBQUN4QyxjQUFNLE1BQU0sbUJBQUssZ0JBQWUsZUFBZSxNQUFNO0FBQ3JELFlBQUcsS0FBSztBQUVKLDZCQUFLLGNBQWU7QUFDcEIsY0FBSTtBQUFBLFlBQWtCLElBQUksWUFBWSxFQUFFLE9BQU87QUFBQTtBQUFBLG9DQUUvQixtQkFBSyxXQUFVO0FBQUEsbUNBQ2hCLG1CQUFLLFFBQU87QUFBQSx3Q0FDUCxtQkFBSyxXQUFVLEdBQUcsTUFBTSxJQUFJLEVBQUUsSUFBSSxTQUFPLElBQUksVUFBVSxDQUFDLEVBQUUsS0FBSyxJQUFJLENBQUM7QUFBQSxZQUNwRkEsT0FBSztBQUFBLFlBQWtCO0FBQUEsWUFBTSxDQUFDRSxJQUFHLGFBQWE7QUFDMUMsa0JBQUdBLEdBQUcsYUFBYSxRQUFRLEVBQUcsS0FBSSxNQUFNLElBQUk7QUFDNUMsa0JBQUksTUFBTSxJQUFJO0FBQUEsWUFDbEI7QUFBQSxVQUNKO0FBRUE7QUFBQSxRQUNKO0FBRUEsZ0JBQVEsTUFBTSx3RUFBd0U7QUFBQSxNQUMxRjtBQUFBLElBQ0o7QUFBQSxFQUNKO0FBQUEsRUFFQSxNQUFhLGVBQTBDO0FBQ25ELFdBQU8sTUFBTSxVQUFVLGtEQUFvRCxFQUFFLEtBQUssWUFBVTtBQUN4RixZQUFNLFNBQTZCLE9BQU8sTUFBTSxHQUFHLEVBQUUsQ0FBQyxHQUFHLEtBQUs7QUFFOUQsVUFBRyxDQUFDO0FBQ0EsZ0JBQVEsS0FBSyx5RUFBeUU7QUFFMUYsYUFBTztBQUFBLElBQ1gsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxRQUF5QjtBQUMvQixjQUFRLE1BQU07QUFBQSxFQUFnRCxJQUFJLFVBQVUsR0FBRyxJQUFJLE9BQU8sT0FBTyxFQUFFO0FBQUEsR0FBYyxJQUFJLEtBQUssRUFBRTtBQUM1SCxhQUFPO0FBQUEsSUFDWCxDQUFDO0FBQUEsRUFDTDtBQUFBLEVBRU8sZUFBcUI7QUFDeEIsY0FBVSw4QkFBOEIsbUJBQUssV0FBVSxHQUFHLEVBQUUsS0FBSyxNQUFNO0FBQ25FLGNBQVEsSUFBSSxrQ0FBa0M7QUFBQSxJQUNsRCxDQUFDLEVBQUUsTUFBTSxPQUFLO0FBQ1YsY0FBUSxNQUFNLG9EQUFvRCxDQUFDLEVBQUU7QUFBQSxJQUN6RSxDQUFDO0FBQUEsRUFDTDtBQUFBLEVBRU8sYUFBYSxNQUF1QixRQUFpQixNQUFZO0FBQ3BFLGNBQVUsOEJBQThCLEVBQUU7QUFBQSxNQUFLLE1BQzNDLFVBQVUsNkJBQTZCLElBQUksRUFBRSxFQUFFO0FBQUEsUUFBSyxNQUNoRCxVQUFVLCtCQUErQixJQUFJLEVBQUUsRUFBRSxLQUFLLE1BQU07QUFDeEQsNkJBQUssWUFBYyxPQUFPLFNBQVMsV0FBWSxPQUFPLEtBQUssU0FBUztBQUNwRSxlQUFLLGFBQWE7QUFDbEIsbUJBQVMsS0FBSyxhQUFhO0FBQUEsUUFDL0IsQ0FBQyxFQUFFLE1BQU0sT0FBSztBQUNWLGtCQUFRLE1BQU0sOENBQThDLENBQUMsRUFBRTtBQUFBLFFBQ25FLENBQUM7QUFBQSxNQUNMLEVBQUUsTUFBTSxPQUFLO0FBQ1QsZ0JBQVEsTUFBTSw4Q0FBOEMsQ0FBQyxFQUFFO0FBQUEsTUFDbkUsQ0FBQztBQUFBLElBQ0wsRUFBRSxNQUFNLE9BQUs7QUFDVCxjQUFRLE1BQU0sMERBQTBELENBQUMsRUFBRTtBQUFBLElBQy9FLENBQUM7QUFBQSxFQUNMO0FBQUEsRUFFQSxNQUFhLGdCQUEyQztBQUNwRCxXQUFRLE1BQU0sVUFBVSx5QkFBeUIsRUFBRSxLQUFLLFVBQVE7QUFDNUQsVUFBRyxDQUFDLEtBQUssS0FBSyxFQUFHLFFBQU87QUFFeEIsV0FBSyxhQUFhLElBQUk7QUFDdEIsYUFBTztBQUFBLElBQ1gsQ0FBQyxFQUFFLE1BQU0sT0FBSztBQUNWLGNBQVEsTUFBTSx3RUFBd0UsQ0FBQyxFQUFFO0FBQ3pGLGFBQU87QUFBQSxJQUNYLENBQUM7QUFBQSxFQUNMO0FBQ0o7QUFqTEFILFNBQUEsaUJBQUFEO0FBRUk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0Esa0JBQUFDLFFBQUEsR0FBVyxVQURYLGFBVEU7QUFtQkYsa0JBQUFBLFFBQUEsR0FBVyxhQURYLGdCQWxCRTtBQUFBLGFBQU4sa0JBQUFBLFFBQUEsZ0JBREEsdUJBQ007QUFBQSxXQUNhLFdBQWY7QUFESixrQkFBQUEsUUFBQSxHQUFNO0FBQU4sSUFBTSxZQUFOOzs7QUNUQSxPQUFPSSxZQUFVO0FBTWpCLElBQU0sU0FBMkIsV0FBVyxrQkFBa0IsS0FBTSxXQUFXO0FBRS9FLFNBQVMsYUFBeUI7QUFDOUIsU0FBTztBQUFBLElBQUMsSUFBSTtBQUFBLElBQUo7QUFBQSxNQUFXLFVBQVU7QUFBQSxNQUMzQixXQUFXLE1BQU07QUFDYixnQkFBUSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0I7QUFDM0MsZ0JBQVEsVUFBVTtBQUFBLE1BQ3RCO0FBQUE7QUFBQSxFQUNGO0FBQ0o7QUFFQSxTQUFTLG9CQUFnQztBQUNyQyxTQUFPO0FBQUEsSUFBQyxJQUFJO0FBQUEsSUFBSjtBQUFBLE1BQVcsVUFBVTtBQUFBLE1BQzNCLFdBQVcsTUFBTTtBQUNiLGdCQUFRLFdBQVcsRUFBRSxNQUFNLGdCQUFnQjtBQUMzQyxnQkFBUSwrQ0FBK0M7QUFBQSxNQUMzRDtBQUFBO0FBQUEsRUFDRjtBQUNKO0FBRUEsU0FBUyxtQkFBK0I7QUFDcEMsU0FBTztBQUFBLElBQUMsSUFBSTtBQUFBLElBQUo7QUFBQSxNQUFXLFVBQVU7QUFBQSxNQUMzQixXQUFXLE1BQU07QUFDYixnQkFBUSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0I7QUFDM0MsZ0JBQVEsTUFBTUMsT0FBSyxvQkFBb0IsQ0FBQyw2QkFBNkI7QUFBQSxNQUN6RTtBQUFBO0FBQUEsRUFDRjtBQUNKO0FBRUEsU0FBUyx3QkFBb0M7QUFDekMsU0FBTztBQUFBLElBQUMsSUFBSTtBQUFBLElBQUo7QUFBQSxNQUFXLFVBQVU7QUFBQSxNQUMzQixXQUFXLE1BQU07QUFDYixnQkFBUSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0I7QUFDM0Msa0JBQVUsV0FBVyxFQUFFLGNBQWM7QUFBQSxNQUN6QztBQUFBO0FBQUEsRUFDRjtBQUNKO0FBRUEsU0FBUyxlQUEyQjtBQUNoQyxTQUFPO0FBQUEsSUFBQyxJQUFJO0FBQUEsSUFBSjtBQUFBLE1BQVcsVUFBVTtBQUFBLE1BQzNCLFdBQVcsTUFBTTtBQUNiLGdCQUFRLFdBQVcsRUFBRSxNQUFNLGdCQUFnQjtBQUMzQyxnQkFBUSxXQUFXLEVBQUUsS0FBSyxhQUFhO0FBQUEsTUFDM0M7QUFBQTtBQUFBLEVBQ0Y7QUFDSjtBQUVPLElBQU0sZUFBZSxNQUN4QixxQkFBQyxJQUFJLEtBQUosRUFBUSxPQUFPLGdCQUNaO0FBQUE7QUFBQSxJQUFDLElBQUk7QUFBQSxJQUFKO0FBQUEsTUFBUSxhQUFhLElBQUksWUFBWTtBQUFBLE1BQVUsUUFBUSxJQUFJLE1BQU07QUFBQSxNQUNoRSxTQUFTO0FBQUEsTUFBTSxPQUFPO0FBQUEsTUFFcEI7QUFBQTtBQUFBLFVBQUMsSUFBSTtBQUFBLFVBQUo7QUFBQSxZQUFVLE9BQU87QUFBQSxZQUFZLFFBQVE7QUFBQSxZQUFHLGFBQWE7QUFBQSxZQUNwRCxPQUFPQSxPQUFLLGNBQWM7QUFBQTtBQUFBLFFBQUc7QUFBQSxRQUUvQixxQkFBQyxJQUFJLEtBQUosRUFDRztBQUFBLDhCQUFDLElBQUksT0FBSixFQUFVLFVBQVUsc0JBQXNCO0FBQUEsVUFDM0M7QUFBQSxZQUFDLElBQUk7QUFBQSxZQUFKO0FBQUEsY0FBVSxPQUFPO0FBQUEsY0FBVSxRQUFRO0FBQUEsY0FBRyxhQUFhO0FBQUEsY0FDbEQsT0FBTyxPQUFPLEdBQUcsU0FBTyxJQUFJLFFBQVEsUUFBUSxFQUFFLENBQUM7QUFBQTtBQUFBLFVBQUc7QUFBQSxXQUN4RDtBQUFBO0FBQUE7QUFBQSxFQUNKO0FBQUEsRUFFQTtBQUFBLElBQUMsSUFBSTtBQUFBLElBQUo7QUFBQSxNQUFRLE9BQU87QUFBQSxNQUFvQixRQUFRLElBQUksTUFBTTtBQUFBLE1BQ3BELFNBQVM7QUFBQSxNQUVQO0FBQUEsNEJBQUMsY0FBVztBQUFBLFFBQ1osb0JBQUMscUJBQWtCO0FBQUEsUUFDbkIsb0JBQUMsb0JBQWlCO0FBQUEsUUFDbEIsb0JBQUMseUJBQXNCO0FBQUEsUUFDdkIsb0JBQUMsZ0JBQWE7QUFBQTtBQUFBO0FBQUEsRUFDbEI7QUFBQSxHQUNKOzs7QUMzRUcsSUFBTSxnQkFBZ0IsQ0FBQyxRQUMxQjtBQUFBLEVBQUM7QUFBQTtBQUFBLElBQVksV0FBVztBQUFBLElBQWtCLE9BQU87QUFBQSxJQUMvQyxRQUFRLElBQUksTUFBTTtBQUFBLElBQUssUUFBUSxJQUFJLE1BQU07QUFBQSxJQUFPLE9BQU8sTUFBTSxNQUFNO0FBQUEsSUFDbkUsV0FBVztBQUFBLElBQUksYUFBYTtBQUFBLElBQUksY0FBYztBQUFBLElBQUksU0FBUztBQUFBLElBQzNELGNBQWM7QUFBQSxJQUVkO0FBQUEsTUFBQyxJQUFJO0FBQUEsTUFBSjtBQUFBLFFBQVEsYUFBYSxJQUFJLFlBQVk7QUFBQSxRQUNsQyxTQUFTO0FBQUEsUUFFUDtBQUFBO0FBQUEsWUFBQyxJQUFJO0FBQUEsWUFBSjtBQUFBLGNBQVEsT0FBTztBQUFBLGNBQ2QsYUFBYSxJQUFJLFlBQVk7QUFBQSxjQUFVLFNBQVM7QUFBQSxjQUU5Qyw4QkFBQyxnQkFBYTtBQUFBO0FBQUEsVUFDbEI7QUFBQSxVQUNBLG9CQUFDLGdCQUFhO0FBQUE7QUFBQTtBQUFBLElBQ2xCO0FBQUE7QUFDSjs7O0FDZEcsSUFBTSx3QkFBd0IsQ0FBQyxRQUNsQztBQUFBLEVBQUMsTUFBTTtBQUFBLEVBQU47QUFBQSxJQUFhLFdBQVc7QUFBQSxJQUEwQixTQUFTO0FBQUEsSUFBSyxPQUFPLE1BQU0sTUFBTTtBQUFBLElBQ2xGLFFBQVEsTUFBTSxhQUFhLE1BQU0sTUFBTSxhQUFhO0FBQUEsSUFBTyxjQUFjO0FBQUEsSUFDekUsYUFBYSxNQUFNLFlBQVk7QUFBQSxJQUU3QjtBQUFBLE1BQUMsSUFBSTtBQUFBLE1BQUo7QUFBQSxRQUFRLE9BQU87QUFBQSxRQUNkLGFBQWEsSUFBSSxZQUFZO0FBQUEsUUFBVSxTQUFTO0FBQUEsUUFDaEQsU0FBUyxrQkFBa0IsY0FBYyxjQUFjLFdBQVcsR0FBRyxlQUFlLENBQUM7QUFBQSxRQUVuRiw4QkFBQyxPQUFJLE1BQU0sY0FBYyxjQUFjLFdBQVcsR0FBRyxlQUFlLEdBQy9ELFdBQUMsVUFDRSxvQkFBQyxJQUFJLEtBQUosRUFBUSxPQUFPLHNCQUNaO0FBQUEsVUFBQztBQUFBO0FBQUEsWUFBbUIsY0FBYztBQUFBLFlBQU8sVUFBVTtBQUFBLFlBQ2pELGFBQWEsTUFBTSxjQUFjLFdBQVcsRUFBRSxtQkFBbUIsS0FBSztBQUFBLFlBQ3RFLGFBQWE7QUFBQSxZQUFNLGVBQWUsTUFBTTtBQUNwQyxvQkFBTSxhQUFhLE1BQU0sUUFBUSxPQUFPLFlBQ3BDLE9BQU8sTUFBTSxZQUFZLE1BQU0sTUFBTSxJQUFJLENBQUM7QUFFOUMsNEJBQWMsTUFBTSxPQUFPLFdBQVcsRUFBRTtBQUFBLFlBQzVDO0FBQUE7QUFBQSxRQUNGLEdBQ0osR0FFUjtBQUFBO0FBQUEsSUFDSjtBQUFBO0FBQ0o7OztBQzFCSixPQUFPQyxpQkFBZ0I7QUFFdkIsT0FBT0MsVUFBUztBQUNoQixPQUFPQyxZQUFXO0FBR1gsSUFBTSxXQUFXLE1BQU07QUFDMUIsTUFBSTtBQUVKLFNBQU87QUFBQSxJQUFDLElBQUk7QUFBQSxJQUFKO0FBQUEsTUFBUSxPQUFPO0FBQUEsTUFBYSxhQUFhLElBQUksWUFBWTtBQUFBLE1BQVUsY0FBYztBQUFBLE1BQ3ZGLFNBQVMsT0FBTyxRQUFNLEdBQUcsU0FBUztBQUFBLE1BRWhDLDhCQUFDLFFBQUssT0FBTyxRQUNSLFdBQUNDLFlBQThCQSxRQUFPLGFBQ25DLHFCQUFDLElBQUksS0FBSixFQUFRLFFBQVEsSUFBSSxNQUFNLFFBQVEsR0FBRyxDQUFDLFNBQVM7QUFDMUMsY0FBTSxTQUFTLGNBQWNBLFNBQVEsUUFBUSxFQUFFLFVBQVUsTUFBTTtBQUMzRCxnQkFBTSxhQUFhLEtBQUssZ0JBQWdCO0FBQ3hDLGdCQUFNLFdBQVcsWUFBWUEsT0FBTTtBQUVuQyxjQUFHLENBQUMsVUFBVTtBQUNWLGdCQUFHLHNCQUFzQixJQUFJO0FBQ3pCLG1CQUFLLE9BQU8sVUFBVTtBQUUxQjtBQUFBLFVBQ0o7QUFFQSxjQUFHLHNCQUFzQixJQUFJLFNBQVM7QUFDbEMsdUJBQVcsYUFBYSxRQUFRO0FBQ2hDO0FBQUEsVUFDSjtBQUVBLGVBQUs7QUFBQSxZQUNEO0FBQUEsY0FBQyxJQUFJO0FBQUEsY0FBSjtBQUFBLGdCQUFZLE1BQU1DLEtBQUksS0FBSyxhQUFhLFFBQVE7QUFBQSxnQkFDL0MsU0FBUztBQUFBLGdCQUFPLFNBQVM7QUFBQSxnQkFBTyxXQUFXO0FBQUEsZ0JBQzNDLGNBQWM7QUFBQSxnQkFBSyxlQUFlO0FBQUE7QUFBQSxZQUNwQztBQUFBLFVBQ0o7QUFBQSxRQUNKLENBQUM7QUFFRCxjQUFNLFlBQVksS0FBSyxRQUFRLFdBQVcsTUFBTTtBQUM1QyxlQUFLLFdBQVcsU0FBUztBQUN6QixpQkFBTztBQUFBLFFBQ1gsQ0FBQztBQUFBLE1BQ0wsR0FFRTtBQUFBO0FBQUEsVUFBQyxJQUFJO0FBQUEsVUFBSjtBQUFBLFlBQVEsT0FBTztBQUFBLFlBQVEsYUFBYSxJQUFJLFlBQVk7QUFBQSxZQUNuRCxRQUFRLElBQUksTUFBTTtBQUFBLFlBQVEsU0FBUztBQUFBLFlBRWpDO0FBQUE7QUFBQSxnQkFBQyxJQUFJO0FBQUEsZ0JBQUo7QUFBQSxrQkFBVSxPQUFPO0FBQUEsa0JBQVMsYUFDckIsY0FBY0QsU0FBUSxPQUFPLEVBQUUsR0FBRyxXQUFTLFNBQVMsVUFBVTtBQUFBLGtCQUNoRSxXQUFXRSxPQUFNLGNBQWM7QUFBQSxrQkFBSyxlQUFlO0FBQUE7QUFBQSxjQUN2RDtBQUFBLGNBQ0E7QUFBQSxnQkFBQyxJQUFJO0FBQUEsZ0JBQUo7QUFBQSxrQkFBVSxPQUFPO0FBQUEsa0JBQVUsYUFDdEIsY0FBY0YsU0FBUSxRQUFRLEVBQUUsR0FBRyxZQUFVLFVBQVUsV0FBVztBQUFBLGtCQUNwRSxXQUFXRSxPQUFNLGNBQWM7QUFBQSxrQkFBSyxlQUFlO0FBQUE7QUFBQSxjQUN2RDtBQUFBO0FBQUE7QUFBQSxRQUNKO0FBQUEsUUFFQSxvQkFBQyxJQUFJLEtBQUosRUFBUSxPQUFPLFlBQVksU0FBUyxNQUFNLFNBQVMsY0FBY0YsU0FBUSxTQUFTLEdBQy9FO0FBQUEsVUFBQyxNQUFNO0FBQUEsVUFBTjtBQUFBLFlBQWEsU0FBUztBQUFBLFlBQU0sS0FBSyxjQUFjQSxTQUFRLFFBQVEsRUFBRSxHQUFHLEtBQUssS0FBSztBQUFBLFlBQzdFLE9BQU8sY0FBY0EsU0FBUSxVQUFVLEVBQUUsR0FBRyxLQUFLLEtBQUs7QUFBQSxZQUN0RCxlQUFlLENBQUMsR0FBRyxNQUFNLFVBQVU7QUFDL0Isa0JBQUcsU0FBUyxVQUFhLFNBQVM7QUFDOUI7QUFFSixrQkFBRyxDQUFDLFdBQVc7QUFDWCw0QkFBWSxRQUFRLEtBQUssTUFDckJBLFFBQU8sV0FBVyxLQUFLLE1BQU0sS0FBSyxDQUFDO0FBRXZDO0FBQUEsY0FDSjtBQUVBLHdCQUFVLE9BQU87QUFDakIsMEJBQVksUUFBUSxLQUFLLE1BQ3JCQSxRQUFPLFdBQVcsS0FBSyxNQUFNLEtBQUssQ0FBQztBQUFBLFlBQzNDO0FBQUE7QUFBQSxRQUNGLEdBQ0o7QUFBQSxRQUVBLHFCQUFDLElBQUksV0FBSixFQUFjLE9BQU8sVUFBVSxTQUFTLE1BQU0sY0FBYyxHQUN6RDtBQUFBO0FBQUEsWUFBQyxJQUFJO0FBQUEsWUFBSjtBQUFBLGNBQVUsT0FBTztBQUFBLGNBQVcsUUFBUSxJQUFJLE1BQU07QUFBQSxjQUFPLFFBQVEsSUFBSSxNQUFNO0FBQUEsY0FDdEUsT0FBTyxjQUFjQSxTQUFRLFVBQVUsRUFBRSxHQUFHLFNBQU87QUFDL0Msc0JBQU0sTUFBTSxLQUFLLE1BQU0sTUFBTSxFQUFFO0FBQy9CLHVCQUFPLE1BQU0sS0FBS0EsUUFBTyxTQUFTLElBQzlCLEdBQUcsS0FBSyxNQUFNLE1BQU0sRUFBRSxDQUFDLElBQUksTUFBTSxLQUFLLE1BQU0sRUFBRSxHQUFHLEdBQUcsS0FDdEQ7QUFBQSxjQUNOLENBQUM7QUFBQSxjQUFHLE9BQU07QUFBQTtBQUFBLFVBQ1o7QUFBQSxVQUVBLHFCQUFDLElBQUksS0FBSixFQUFRLE9BQU8sdUJBQXVCLE9BQU0sVUFDekM7QUFBQTtBQUFBLGNBQUMsSUFBSTtBQUFBLGNBQUo7QUFBQSxnQkFBVyxPQUFPO0FBQUEsZ0JBQVEsVUFBVTtBQUFBLGdCQUNuQyxhQUFhO0FBQUEsZ0JBQ2IsV0FBVyxNQUFNO0FBQ2IsNEJBQVUsc0JBQ05BLFFBQU8sUUFBUSxRQUFRLGdDQUFnQyxFQUFFLENBQzdELHFCQUFxQixFQUFFLEtBQUssVUFBUTtBQUNoQyw4QkFBVSxXQUFXLEVBQUUsVUFBVSxJQUFJO0FBQUEsa0JBQ3pDLENBQUMsRUFBRSxNQUFNLENBQUMsTUFBYTtBQUNuQiw0QkFBUSxNQUFNO0FBQUEsRUFBOEMsRUFBRSxPQUFPO0FBQUEsRUFBSyxFQUFFLEtBQUssRUFBRTtBQUFBLGtCQUN2RixDQUFDO0FBQUEsZ0JBQ0w7QUFBQTtBQUFBLFlBQ0Y7QUFBQSxZQUNBO0FBQUEsY0FBQyxJQUFJO0FBQUEsY0FBSjtBQUFBLGdCQUFXLE9BQU87QUFBQSxnQkFBVyxTQUFTLGNBQWNBLFNBQVEsZUFBZSxFQUFFLEdBQUcsWUFDM0UsV0FBV0csWUFBVyxRQUFRLFdBQVc7QUFBQSxnQkFBRyxVQUNoRCxjQUFjSCxTQUFRLGVBQWUsRUFBRSxHQUFHLFlBQVUsV0FBV0csWUFBVyxRQUFRLEtBQzVFLG9DQUNGLHFDQUFxQztBQUFBLGdCQUFHLGFBQzVDLGNBQWNILFNBQVEsZUFBZSxFQUFFLEdBQUcsWUFBVSxXQUFXRyxZQUFXLFFBQVEsS0FDNUUsWUFDRixZQUFZO0FBQUEsZ0JBQUcsV0FBV0gsUUFBTztBQUFBO0FBQUEsWUFDdkM7QUFBQSxZQUNBO0FBQUEsY0FBQyxJQUFJO0FBQUEsY0FBSjtBQUFBLGdCQUFXLE9BQU87QUFBQSxnQkFBWSxVQUFVO0FBQUEsZ0JBQ3ZDLGFBQWE7QUFBQSxnQkFBWSxXQUFXLE1BQU1BLFFBQU8saUJBQWlCQSxRQUFPLFNBQVM7QUFBQTtBQUFBLFlBQ3BGO0FBQUEsWUFDQTtBQUFBLGNBQUMsSUFBSTtBQUFBLGNBQUo7QUFBQSxnQkFBVyxPQUFPO0FBQUEsZ0JBQWMsYUFDL0IsY0FBY0EsU0FBUSxnQkFBZ0IsRUFBRSxHQUFHLFlBQ3ZDLFdBQVdHLFlBQVcsZUFBZSxVQUFVLFVBQVUsTUFBTTtBQUFBLGdCQUNuRSxVQUFVLGNBQWNILFNBQVEsZ0JBQWdCLEVBQUUsR0FBRyxZQUNqRCxXQUFXRyxZQUFXLGVBQWUsVUFDakMsa0NBQ0YsK0JBQStCO0FBQUEsZ0JBQUcsV0FBV0gsUUFBTztBQUFBO0FBQUEsWUFDNUQ7QUFBQSxZQUNBO0FBQUEsY0FBQyxJQUFJO0FBQUEsY0FBSjtBQUFBLGdCQUFXLE9BQU87QUFBQSxnQkFBUSxVQUFVO0FBQUEsZ0JBQ25DLGFBQWE7QUFBQSxnQkFBUSxXQUFXLE1BQU1BLFFBQU8sYUFBYUEsUUFBTyxLQUFLO0FBQUE7QUFBQSxZQUN4RTtBQUFBLFlBQ0E7QUFBQSxjQUFDLElBQUk7QUFBQSxjQUFKO0FBQUEsZ0JBQVcsT0FBTztBQUFBLGdCQUFVLFVBQVUsY0FBY0EsU0FBUSxZQUFZLEVBQUUsR0FBRyxZQUFVO0FBQ2xGLHNCQUFHLFdBQVdHLFlBQVcsS0FBSztBQUMxQiwyQkFBTztBQUVYLHNCQUFHLFdBQVdBLFlBQVcsS0FBSztBQUMxQiwyQkFBTztBQUVYLHlCQUFPO0FBQUEsZ0JBQ1gsQ0FBQztBQUFBLGdCQUFHLFNBQVMsY0FBY0gsU0FBUSxZQUFZLEVBQUUsR0FBRyxZQUNoRCxXQUFXRyxZQUFXLEtBQUssV0FBVztBQUFBLGdCQUMxQyxhQUFhLGNBQWNILFNBQVEsWUFBWSxFQUFFLEdBQUcsWUFBVTtBQUMxRCxzQkFBRyxXQUFXRyxZQUFXLEtBQUs7QUFDMUIsMkJBQU87QUFFWCxzQkFBRyxXQUFXQSxZQUFXLEtBQUs7QUFDMUIsMkJBQU87QUFFWCx5QkFBTztBQUFBLGdCQUNYLENBQUM7QUFBQSxnQkFBRyxXQUFXSCxRQUFPO0FBQUE7QUFBQSxZQUN4QjtBQUFBLGFBQ0o7QUFBQSxVQUNBO0FBQUEsWUFBQyxJQUFJO0FBQUEsWUFBSjtBQUFBLGNBQVUsT0FBTztBQUFBLGNBQVUsUUFBUSxJQUFJLE1BQU07QUFBQSxjQUFPLFFBQVEsSUFBSSxNQUFNO0FBQUEsY0FDckUsT0FBTyxjQUFjQSxTQUFRLFFBQVEsRUFBRSxHQUFHLFNBQU87QUFDN0Msc0JBQU0sTUFBTSxLQUFLLE1BQU0sTUFBTSxFQUFFO0FBQy9CLHVCQUFRLE1BQU0sS0FBSyxPQUFPLFNBQVMsR0FBRyxJQUNsQyxHQUFHLEtBQUssTUFBTSxNQUFNLEVBQUUsQ0FBQyxJQUFJLE1BQU0sS0FBSyxNQUFNLEVBQUUsR0FBRyxHQUFHLEtBQ3REO0FBQUEsY0FDTixDQUFDO0FBQUEsY0FBRyxPQUFNO0FBQUE7QUFBQSxVQUNaO0FBQUEsV0FDSjtBQUFBLFNBQ0osR0FFUjtBQUFBO0FBQUEsRUFDSjtBQUNKO0FBU0EsU0FBUyxZQUFZQSxTQUE2QztBQUM5RCxRQUFNLFNBQVNBLFFBQU87QUFFdEIsTUFBRyxDQUFDO0FBQ0EsV0FBTztBQUVYLE1BQUcsT0FBTyxXQUFXLEdBQUc7QUFDcEIsV0FBTyxZQUFZO0FBRXZCLFNBQU87QUFDWDs7O0FDakxPLElBQU0sZUFBZSxDQUFDLFFBQ3pCO0FBQUEsRUFBQztBQUFBO0FBQUEsSUFBWSxXQUFXO0FBQUEsSUFBaUIsV0FBVztBQUFBLElBQUksUUFBUSxJQUFJLE1BQU07QUFBQSxJQUN4RSxRQUFRLElBQUksTUFBTTtBQUFBLElBQU8sU0FBUztBQUFBLElBRWhDLCtCQUFDLElBQUksS0FBSixFQUFRLE9BQU8sMkJBQTJCLFNBQVMsR0FDaEQ7QUFBQSwyQkFBQyxJQUFJLEtBQUosRUFBUSxPQUFPLFFBQVEsYUFBYSxJQUFJLFlBQVksVUFDakQ7QUFBQTtBQUFBLFVBQUMsSUFBSTtBQUFBLFVBQUo7QUFBQSxZQUFRLE9BQU87QUFBQSxZQUFZLGFBQWEsSUFBSSxZQUFZO0FBQUEsWUFDdkQsUUFBUSxJQUFJLE1BQU07QUFBQSxZQUFRLFFBQVEsSUFBSSxNQUFNO0FBQUEsWUFDNUMsU0FBUztBQUFBLFlBRVA7QUFBQSxrQ0FBQyxJQUFJLE9BQUosRUFBVSxPQUFPLFFBQVEsT0FBTyxLQUFLLE9BQUssRUFBRSxPQUFPLE9BQU8sQ0FBRSxHQUFHO0FBQUEsY0FDaEUsb0JBQUMsSUFBSSxPQUFKLEVBQVUsT0FBTyxRQUFRLE9BQU8sS0FBSyxPQUFLLEVBQUUsT0FBTyxXQUFXLENBQUUsR0FBRztBQUFBO0FBQUE7QUFBQSxRQUN4RTtBQUFBLFFBQ0Esb0JBQUMsSUFBSSxLQUFKLEVBQVEsT0FBTyxnQkFBZ0IsU0FBUyxNQUFNLFFBQVEsSUFBSSxNQUFNLE9BQzdEO0FBQUEsVUFBQyxJQUFJO0FBQUEsVUFBSjtBQUFBLFlBQWEsYUFBYTtBQUFBLFlBQU0sY0FBYztBQUFBLFlBQzdDLGlCQUFpQjtBQUFBO0FBQUEsUUFDbkIsR0FDSjtBQUFBLFNBQ0o7QUFBQSxNQUVBO0FBQUEsUUFBQztBQUFBO0FBQUEsVUFBVSxhQUFhLElBQUksWUFBWTtBQUFBLFVBQVksVUFBUztBQUFBLFVBQzNELFFBQVE7QUFBQSxVQUFHLFNBQVM7QUFBQSxVQUFHLE9BQU87QUFBQSxVQUFJLFNBQVMsT0FBTyxRQUFNLEdBQUcsU0FBUztBQUFBO0FBQUEsTUFDdEU7QUFBQSxNQUNBLG9CQUFDLFlBQVM7QUFBQSxPQUNkO0FBQUE7QUFDSjs7O0FDSEosU0FBUyxtQkFBbUIsT0FBc0Q7QUFDOUUsV0FBUyxZQUFZO0FBQ2pCLFVBQU0sVUFBVTtBQUNoQixVQUFNLGdCQUFnQixNQUFNLE9BQU8sTUFBTTtBQUFBLEVBQzdDO0FBRUEsU0FBTztBQUFBLElBQUMsSUFBSTtBQUFBLElBQUo7QUFBQSxNQUFXLE9BQU07QUFBQSxNQUFTLFNBQVM7QUFBQSxNQUFNLE9BQU8sTUFBTTtBQUFBLE1BQzVEO0FBQUEsTUFBc0IsWUFBWTtBQUFBO0FBQUEsRUFBVTtBQUNsRDtBQUVPLFNBQVMsYUFBYSxFQUFFLFVBQVUsQ0FBQyxFQUFFLE1BQU0sR0FBRyxRQUFRLEVBQUUsQ0FBQyxHQUFHLEdBQUcsTUFBSyxHQUFzQjtBQUM3RixNQUFJO0FBQ0osU0FBTyxRQUFRLFdBQVcsRUFBRSw4QkFBOEIsQ0FBQyxRQUMzRDtBQUFBLElBQUM7QUFBQTtBQUFBLE1BQVksV0FBVyxNQUFNLGFBQWE7QUFBQSxNQUFpQixTQUFTO0FBQUEsTUFDL0QscUJBQXFCLE1BQU0saUJBQWlCO0FBQUEsTUFDNUMsYUFBYSxNQUFNLFlBQVk7QUFBQSxNQUFRLE9BQU8sTUFBTSxNQUFNO0FBQUEsTUFDMUQsUUFBUSxJQUFJLE1BQU07QUFBQSxNQUFRLFFBQVEsSUFBSSxNQUFNO0FBQUEsTUFDNUMsY0FBYyxNQUFNLGdCQUFnQjtBQUFBLE1BQUssZUFBZSxNQUFNLGlCQUFpQjtBQUFBLE1BQy9FLFdBQVcsTUFBTTtBQUFBLE1BQVUsR0FBRyxDQUFDLFNBQVMsU0FBUztBQUFBLE1BRWpEO0FBQUEsUUFBQyxJQUFJO0FBQUEsUUFBSjtBQUFBLFVBQVEsT0FBTyxNQUFNLGFBQWE7QUFBQSxVQUNqQyxhQUFhLElBQUksWUFBWTtBQUFBLFVBQzNCO0FBQUEsZ0NBQUMsSUFBSSxPQUFKLEVBQVUsT0FBTyxTQUFTLFNBQVMsa0JBQWtCLE1BQU0sS0FBSyxHQUFHLE9BQU8sTUFBTSxPQUFPO0FBQUEsWUFDeEYsb0JBQUMsSUFBSSxPQUFKLEVBQVUsT0FBTyxRQUFRLFNBQVMsa0JBQWtCLE1BQU0sSUFBSSxHQUFHLE9BQU8sTUFBTSxNQUFNO0FBQUEsWUFDckY7QUFBQSxjQUFDLElBQUk7QUFBQSxjQUFKO0FBQUEsZ0JBQVEsT0FBTztBQUFBLGdCQUFnQyxTQUFTLGtCQUFrQixNQUFNLFFBQVE7QUFBQSxnQkFDdkYsYUFBYSxNQUFNLG9CQUFvQixJQUFJLFlBQVk7QUFBQSxnQkFHdEQsZ0JBQU0sb0JBQW9CLFdBQ3hCLE1BQU0sUUFBUSxNQUFNLFFBQVEsSUFDM0Isb0JBQUMsT0FBSSxNQUFNLE1BQU0sVUFDWixXQUFDLFdBQVcsVUFBVSxRQUMzQixJQUNBLG9CQUFDLFFBQUssT0FBTyxNQUFNLFVBQ2QsV0FBQyxXQUFXLFVBQVUsUUFDM0IsSUFDRCxNQUFNLFFBQVEsTUFBTSxRQUFRLElBQzNCLE1BQU0sU0FBUyxJQUFJLFlBQVUsVUFBVSxNQUFNLEVBQUUsT0FBTyxPQUFLLENBQUMsSUFDNUQsTUFBTTtBQUFBO0FBQUEsWUFFWjtBQUFBLFlBQ0E7QUFBQSxjQUFDO0FBQUE7QUFBQSxnQkFBVSxPQUFPO0FBQUEsZ0JBQUksU0FBUyxXQUFXLFFBQVEsU0FBUztBQUFBLGdCQUN6RCxTQUFTO0FBQUEsZ0JBQUcsYUFBYSxJQUFJLFlBQVk7QUFBQTtBQUFBLFlBQVU7QUFBQSxZQUVuRDtBQUFBLGNBQUMsSUFBSTtBQUFBLGNBQUo7QUFBQSxnQkFBUSxPQUFPO0FBQUEsZ0JBQVcsYUFBYSxNQUFNLHNCQUFzQixJQUFJLFlBQVk7QUFBQSxnQkFDcEYsU0FBUztBQUFBLGdCQUFNLGVBQWU7QUFBQSxnQkFBSSxhQUFhO0FBQUEsZ0JBRTVDLDZCQUFtQixXQUNsQixvQkFBQyxPQUFJLE1BQU0sU0FDTixXQUFDLFdBQVcsb0JBQUMsc0JBQW9CLEdBQUcsUUFBUSxRQUFnQixHQUNqRSxJQUNBLFFBQVEsSUFBSSxZQUNWLG9CQUFDLHNCQUFvQixHQUFHLFFBQVEsUUFBZ0IsQ0FBRTtBQUFBO0FBQUEsWUFFNUQ7QUFBQTtBQUFBO0FBQUEsTUFDSjtBQUFBO0FBQUEsRUFDSixDQUFjLEVBQUU7QUFDcEI7OztBQ2pFTyxTQUFTLFNBQVMsT0FBb0M7QUFDekQsTUFBSSxXQUFvQjtBQUV4QixTQUFPO0FBQUEsSUFBQztBQUFBO0FBQUEsTUFDTixXQUFXO0FBQUEsTUFDWCxjQUFjO0FBQUEsTUFDZCxlQUFlO0FBQUEsTUFDZixPQUFPLE1BQU0sU0FBUyxHQUFHLGlCQUFpQjtBQUFBLE1BQzFDLE1BQU0sTUFBTTtBQUFBLE1BQ1osVUFBVSxNQUFNLENBQUMsWUFBWSxNQUFNLFdBQVc7QUFBQSxNQUM5QyxTQUFTO0FBQUEsUUFDUCxFQUFFLE1BQU0sTUFBTSxjQUFjLEdBQUcsUUFBUSxFQUFFO0FBQUEsUUFDekM7QUFBQSxVQUNJLE1BQU0sTUFBTSxjQUFjLEdBQUcsUUFBUTtBQUFBLFVBQ3JDLFNBQVMsTUFBTTtBQUNYLHVCQUFXO0FBQ1gsa0JBQU0sV0FBVztBQUFBLFVBQ3JCO0FBQUEsUUFDSjtBQUFBLE1BQ0o7QUFBQTtBQUFBLEVBQUc7QUFDUDs7O0FDekNBLE9BQU9JLFlBQVU7QUFEakIsaURBQUFDLEtBQUEsdUdBQUFDO0FBU0EsMEJBQUMsU0FBUyxFQUFFLFdBQVcsYUFBYSxDQUFDO0FBQ3JDLElBQU0sY0FBTixNQUFNLHFCQUFtQkQsTUFBQSxRQUFRLFFBVzdCLG9CQUFDLE9BQU8sTUFBTSxJQUlkLGNBQUMsT0FBTyxNQUFNLElBU2QsaUJBQUMsT0FBTyxPQUFPLElBeEJNQSxLQUFlO0FBQUEsRUE4QnBDLGNBQWM7QUFDVixVQUFNO0FBL0JkLHNCQUFBQyxRQUFBO0FBR0ksdUNBQXNDO0FBQ3RDLHFDQUF1QjtBQUN2QiwrQkFBaUI7QUFDakIsa0NBQXFCO0FBRXJCLHlDQUFrQztBQUNsQyxtQ0FBNEI7QUFVNUIsU0FBZ0IsaUJBQWlCO0FBQ2pDLFNBQWdCLGlCQUFpQjtBQUNqQyxTQUFnQixzQkFBc0I7QUFDdEMsU0FBZ0IsV0FBVztBQVd2Qix1QkFBSyxnQkFBaUIsU0FBUyxLQUFNLE1BQU07QUFDdkMsZ0JBQVUsZ0NBQWdDLEVBQUUsS0FBSyxPQUFLO0FBQ2xELFlBQUcsRUFBRSxLQUFLLE1BQU0sTUFBTSxFQUFFLEtBQUssRUFBRSxVQUFVLEdBQUc7QUFDeEMsZ0JBQU0sTUFBTSxPQUFPLFNBQVMsRUFBRSxLQUFLLENBQUM7QUFFcEMsY0FBRyxtQkFBSyxrQkFBaUIsS0FBSztBQUMxQiwrQkFBSyxjQUFlO0FBQ3BCLGlCQUFLLE9BQU8sYUFBYTtBQUFBLFVBQzdCO0FBQUEsUUFDSjtBQUFBLE1BQ0osQ0FBQyxFQUFFLE1BQU0sQ0FBQyxNQUFNLFFBQVEsTUFBTSxDQUFDLENBQUM7QUFFaEMsZ0JBQVUsMEJBQTBCLEVBQUUsS0FBSyxPQUFLO0FBQzVDLFlBQUcsRUFBRSxLQUFLLE1BQU0sTUFBTSxFQUFFLEtBQUssRUFBRSxVQUFVLEdBQUc7QUFDeEMsZ0JBQU0sTUFBTSxPQUFPLFNBQVMsRUFBRSxLQUFLLENBQUM7QUFFcEMsY0FBRyxtQkFBSyxZQUFXLEtBQUs7QUFDcEIsK0JBQUssUUFBUztBQUNkLGlCQUFLLE9BQU8sT0FBTztBQUFBLFVBQ3ZCO0FBQUEsUUFDSjtBQUFBLE1BQ0osQ0FBQyxFQUFFLE1BQU0sQ0FBQyxNQUFNLFFBQVEsTUFBTSxDQUFDLENBQUM7QUFBQSxJQUNwQyxDQUFDO0FBRUQsU0FBSyxnQkFBZ0IsTUFBTSxtQkFBSyxtQkFDNUIsbUJBQUssZ0JBQWUsT0FBTztBQUFBLEVBQ25DO0FBQUEsRUEvQ0EsSUFBVyxjQUFjO0FBQUUsV0FBTyxtQkFBSztBQUFBLEVBQWM7QUFBQSxFQUNyRCxJQUFXLFlBQVksVUFBa0I7QUFBRSxTQUFLLGVBQWUsUUFBUTtBQUFBLEVBQUc7QUFBQSxFQUcxRSxJQUFXLFFBQVE7QUFBRSxXQUFPLG1CQUFLO0FBQUEsRUFBUTtBQUFBLEVBQ3pDLElBQVcsTUFBTSxVQUFrQjtBQUFFLFNBQUssU0FBUyxRQUFRO0FBQUEsRUFBRztBQUFBLEVBUTlELElBQVcsV0FBVztBQUFFLFdBQU8sbUJBQUs7QUFBQSxFQUFXO0FBQUEsRUFDL0MsSUFBVyxTQUFTLFVBQW1CO0FBQ25DLGVBQVcsS0FBSyxjQUFjLElBQUksS0FBSyxPQUFPO0FBQUEsRUFDbEQ7QUFBQSxFQWlDQSxPQUFjLGFBQXlCO0FBQ25DLFFBQUcsQ0FBQyxLQUFLO0FBQ0wsV0FBSyxXQUFXLElBQUksWUFBVztBQUVuQyxXQUFPLEtBQUs7QUFBQSxFQUNoQjtBQUFBLEVBRVEsZUFBZSxPQUFxQjtBQUN4QyxRQUFHLFVBQVUsS0FBSyxZQUFhO0FBRS9CLFFBQUcsUUFBUSxLQUFLLGtCQUFrQixRQUFRLEtBQU07QUFDNUMsY0FBUSxNQUFNLGdEQUFnRCxLQUMxRCxzQ0FBc0MsS0FBSyxjQUFjLEdBQUc7QUFDaEU7QUFBQSxJQUNKO0FBRUEsY0FBVSxrQ0FBa0MsS0FBSyxFQUFFLEVBQUUsS0FBSyxNQUFNO0FBQzVELHlCQUFLLGNBQWU7QUFDcEIsV0FBSyxPQUFPLGFBQWE7QUFFekIseUJBQUssV0FBWTtBQUNqQix5QkFBSyxrQkFBbUI7QUFDeEIseUJBQUssWUFBYTtBQUFBLElBQ3RCLENBQUMsRUFBRSxNQUFNLENBQUMsTUFBTSxRQUFRO0FBQUEsTUFDcEIsOERBQThELENBQUM7QUFBQSxJQUNuRSxDQUFDO0FBQUEsRUFDTDtBQUFBLEVBRVEsU0FBUyxPQUFxQjtBQUNsQyxRQUFHLFVBQVUsS0FBSyxNQUFPO0FBRXpCLFFBQUcsUUFBUSxLQUFLLFlBQVksUUFBUSxHQUFHO0FBQ25DLGNBQVEsTUFBTSwyQ0FBMkMsS0FDckQsbUNBQW1DLEtBQUssY0FBYyxHQUFHO0FBQzdEO0FBQUEsSUFDSjtBQUVBLGNBQVUsNEJBQTRCLEtBQUssRUFBRSxFQUFFLEtBQUssTUFBTTtBQUN0RCx5QkFBSyxRQUFTO0FBQ2QsV0FBSyxPQUFPLE9BQU87QUFFbkIseUJBQUssV0FBWTtBQUNqQix5QkFBSyxrQkFBbUI7QUFDeEIseUJBQUssWUFBYTtBQUFBLElBQ3RCLENBQUMsRUFBRSxNQUFNLENBQUMsTUFBTSxRQUFRO0FBQUEsTUFDcEIsd0RBQXdELENBQUM7QUFBQSxJQUM3RCxDQUFDO0FBQUEsRUFDTDtBQUFBLEVBRU8sZ0JBQXNCO0FBQ3pCLFFBQUcsbUJBQUssV0FBVztBQUVuQix1QkFBSyxZQUFhLG1CQUFLO0FBQ3ZCLHVCQUFLLGtCQUFtQixtQkFBSztBQUU3Qix1QkFBSyxXQUFZO0FBQ2pCLFNBQUssY0FBYyxLQUFLO0FBQ3hCLFNBQUssUUFBUSxLQUFLO0FBQUEsRUFDdEI7QUFBQSxFQUVPLFNBQWU7QUFDbEIsUUFBRyxDQUFDLG1CQUFLLFdBQVc7QUFFcEIsdUJBQUssV0FBWTtBQUNqQixTQUFLLGVBQWUsbUJBQUsscUJBQW9CLEtBQUssbUJBQW1CO0FBQ3JFLFNBQUssU0FBUyxtQkFBSyxlQUFjLEtBQUssUUFBUTtBQUU5Qyx1QkFBSyxrQkFBbUI7QUFDeEIsdUJBQUssWUFBYTtBQUFBLEVBQ3RCO0FBQUEsRUFFTyxXQUFpQjtBQUNwQixTQUFLLE1BQU1DLE9BQUssb0JBQW9CLENBQUMsa0NBQWtDO0FBQUEsRUFDM0U7QUFBQSxFQUVPLFdBQWlCO0FBQ3BCLFNBQUssTUFBTUEsT0FBSyxvQkFBb0IsQ0FBQyxrQ0FBa0M7QUFBQSxFQUMzRTtBQUNKO0FBM0lBRCxTQUFBLGlCQUFBRDtBQUdJO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUdBLGtCQUFBQyxRQUFBLEdBQVcsZUFEWCxrQkFYRTtBQWdCRixrQkFBQUEsUUFBQSxHQUFXLFNBRFgsWUFmRTtBQXlCRixrQkFBQUEsUUFBQSxHQUFXLFlBRFgsZUF4QkU7QUFBQSxjQUFOLGtCQUFBQSxRQUFBLGlCQURBLHdCQUNNO0FBQUEsWUFDYSxXQUFmO0FBREosa0JBQUFBLFFBQUEsR0FBTTtBQUFOLElBQU0sYUFBTjs7O0FDRkEsT0FBT0Usa0JBQWlCO0FBTXhCLElBQU0sRUFBRSxLQUFBQyxNQUFLLE1BQUFDLE9BQU0sT0FBQUMsUUFBTyxRQUFBQyxRQUFPLElBQUksTUFBTTtBQUVwQyxJQUFNLGFBQWEsQ0FBQyxRQUN2QjtBQUFBLEVBQUMsTUFBTTtBQUFBLEVBQU47QUFBQSxJQUFhLFdBQVc7QUFBQSxJQUFlLFFBQVFILE9BQU1DLFFBQU9DLFNBQVFDO0FBQUEsSUFDbkUsT0FBTyxNQUFNLE1BQU07QUFBQSxJQUFTLGFBQWEsTUFBTSxZQUFZO0FBQUEsSUFDM0QsU0FBUyxNQUFNLFFBQVE7QUFBQSxJQUFXLFNBQVM7QUFBQSxJQUFLLEdBQUcsQ0FBQyxTQUFTO0FBQ3pELFlBQU0sUUFBcUMsb0JBQUksSUFBSTtBQUNuRCxZQUFNLGdCQUFnQixJQUFJLG1CQUFtQixJQUFJO0FBRWpELFdBQUssZUFBZSxhQUFhO0FBQ2pDLFlBQU0sSUFBSSxlQUFlLGNBQWMsUUFBUSxnQkFBZ0IsQ0FBQyxHQUFHLFdBQVc7QUFDMUUsWUFBRyxXQUFXLElBQUk7QUFDZCxlQUFLLE1BQU07QUFBQSxNQUNuQixDQUFDLENBQUM7QUFDRixZQUFNLElBQUksTUFBTSxLQUFLLFFBQVEsV0FBVyxNQUFNLE1BQU0sUUFBUSxDQUFDLElBQUksUUFDN0QsSUFBSSxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFBQSxJQUM1QjtBQUFBLElBRUU7QUFBQSxNQUFDLElBQUk7QUFBQSxNQUFKO0FBQUEsUUFBUSxPQUFPO0FBQUEsUUFBZSxhQUFhLElBQUksWUFBWTtBQUFBLFFBQzFELEdBQUcsQ0FBQyxTQUFTO0FBQ1QsZ0JBQU0sUUFBcUMsb0JBQUksSUFBSTtBQUNuRCxnQkFBTSxlQUFlLElBQUksYUFBYSxJQUFJO0FBRTFDLGVBQUssZUFBZSxZQUFZO0FBRWhDLGdCQUFNLElBQUksY0FBYyxhQUFhLFFBQVEsWUFBWSxDQUFDLFlBQVk7QUFDbEUsZ0JBQUcsUUFBUSxtQkFBbUIsTUFBTSxJQUFJLGdCQUFnQjtBQUNwRCxzQkFBUSxXQUFXLEVBQUUsTUFBTSxhQUFhO0FBQ3hDLHFCQUFPO0FBQUEsWUFDWDtBQUFBLFVBQ0osQ0FBQyxDQUFDO0FBQUEsUUFDTjtBQUFBLFFBRUU7QUFBQTtBQUFBLFlBQUMsSUFBSTtBQUFBLFlBQUo7QUFBQSxjQUFRLE9BQU87QUFBQSxjQUFPLFNBQVM7QUFBQSxjQUFNLFNBQVM7QUFBQSxjQUM3QyxhQUFhLElBQUksWUFBWTtBQUFBLGNBRTNCO0FBQUEsb0NBQUMsSUFBSSxPQUFKLEVBQVUsT0FBTyxRQUFRLE9BQU8sS0FBSyxPQUFLLEVBQUUsT0FBTyxPQUFPLENBQUUsR0FBRztBQUFBLGdCQUNoRSxvQkFBQyxJQUFJLE9BQUosRUFBVSxPQUFPLFFBQVEsT0FBTyxLQUFLLE9BQUssRUFBRSxPQUFPLGNBQWMsQ0FBRSxHQUFHO0FBQUE7QUFBQTtBQUFBLFVBQzNFO0FBQUEsVUFFQSxxQkFBQyxJQUFJLEtBQUosRUFBUSxPQUFPLGNBQWMsYUFBYSxNQUFNLGVBQWUsS0FDNUQ7QUFBQTtBQUFBLGNBQUMsSUFBSTtBQUFBLGNBQUo7QUFBQSxnQkFBVyxPQUFPO0FBQUEsZ0JBQVksVUFBVTtBQUFBLGdCQUN2QyxXQUFXLE1BQU0sU0FBUyxXQUFXO0FBQUEsZ0JBQUcsWUFBWSxNQUNoRCxTQUFTLFdBQVc7QUFBQTtBQUFBLFlBQzFCO0FBQUEsWUFDQTtBQUFBLGNBQUMsSUFBSTtBQUFBLGNBQUo7QUFBQSxnQkFBVyxPQUFPO0FBQUEsZ0JBQVUsVUFBVTtBQUFBLGdCQUNyQyxXQUFXLE1BQU0sU0FBUyxTQUFTO0FBQUEsZ0JBQUcsWUFBWSxNQUFNLFNBQVMsU0FBUztBQUFBO0FBQUEsWUFDNUU7QUFBQSxZQUNBO0FBQUEsY0FBQyxJQUFJO0FBQUEsY0FBSjtBQUFBLGdCQUFXLE9BQU87QUFBQSxnQkFBVyxVQUFVO0FBQUEsZ0JBQ3RDLFdBQVcsTUFBTSxTQUFTLFVBQVU7QUFBQSxnQkFBRyxZQUFZLE1BQU0sU0FBUyxVQUFVO0FBQUE7QUFBQSxZQUM5RTtBQUFBLFlBQ0E7QUFBQSxjQUFDLElBQUk7QUFBQSxjQUFKO0FBQUEsZ0JBQVcsT0FBTztBQUFBLGdCQUFVLFVBQVU7QUFBQSxnQkFDckMsV0FBVyxNQUFNLFNBQVMsU0FBUztBQUFBLGdCQUFHLFlBQVksTUFBTSxTQUFTLFNBQVM7QUFBQTtBQUFBLFlBQzVFO0FBQUEsYUFDSjtBQUFBO0FBQUE7QUFBQSxJQUNKO0FBQUE7QUFDSjtBQUVKLElBQU0sWUFBMkI7QUFBQSxFQUM3QixPQUFPO0FBQUEsRUFDUCxNQUFNO0FBQUEsRUFDTixVQUFVLE1BQU07QUFDWixXQUFPLFdBQVcsRUFBRSxZQUFZLGdDQUFnQyxTQUFTLEtBQ3JFLFdBQVcsV0FBVyxFQUFFLFNBQVM7QUFFckMsY0FBVSx1QkFBdUIsRUFBRTtBQUFBLE1BQU0sQ0FBQyxRQUN0QyxjQUFjLFdBQVcsRUFBRSxpQkFBaUI7QUFBQSxRQUN4QyxTQUFTO0FBQUEsUUFDVCxTQUFTO0FBQUEsUUFDVCxNQUFNO0FBQUEsRUFDRixJQUFJLFVBQVUsR0FBRyxJQUFJLE9BQU87QUFBQSxJQUFPLEVBQUUsR0FBRyxJQUFJLEtBQUs7QUFBQSxRQUNyRCxTQUFTQyxhQUFZLFFBQVE7QUFBQSxRQUM3QixTQUFTLENBQUM7QUFBQSxVQUNOLE1BQU07QUFBQSxVQUNOLFVBQVUsTUFBTTtBQUFBLFlBQ1o7QUFBQSxVQUNKLEVBQUU7QUFBQSxZQUFNLENBQUNDLFNBQ0wsY0FBYyxXQUFXLEVBQUUsaUJBQWlCO0FBQUEsY0FDeEMsU0FBUztBQUFBLGNBQ1QsU0FBUztBQUFBLGNBQ1QsTUFBTTtBQUFBLEVBQ0ZBLEtBQUksVUFBVSxHQUFHQSxLQUFJLE9BQU87QUFBQSxJQUFPLEVBQUUsR0FBR0EsS0FBSSxLQUFLO0FBQUEsWUFDekQsQ0FBQztBQUFBLFVBQ0w7QUFBQSxRQUNKLENBQUM7QUFBQSxNQUNMLENBQUM7QUFBQSxJQUNMO0FBQUEsRUFDSjtBQUNKO0FBRUEsSUFBTSxhQUE0QjtBQUFBLEVBQzlCLE9BQU87QUFBQSxFQUNQLE1BQU07QUFBQSxFQUNOLFVBQVUsTUFBTSxVQUFVLG1CQUFtQjtBQUNqRDtBQUVBLElBQU0sWUFBMkI7QUFBQSxFQUM3QixPQUFPO0FBQUEsRUFDUCxNQUFNO0FBQUEsRUFDTixVQUFVLE1BQU07QUFDWixXQUFPLFdBQVcsRUFBRSxZQUFZLGdDQUFnQyxTQUFTLEtBQ3JFLFdBQVcsV0FBVyxFQUFFLFNBQVM7QUFFckMsY0FBVSxrQkFBa0I7QUFBQSxFQUNoQztBQUNKO0FBRUEsSUFBTSxjQUE2QjtBQUFBLEVBQy9CLE9BQU87QUFBQSxFQUNQLE1BQU07QUFBQSxFQUNOLFVBQVUsTUFBTTtBQUNaLFdBQU8sV0FBVyxFQUFFLFlBQVksZ0NBQWdDLFNBQVMsS0FDckUsV0FBVyxXQUFXLEVBQUUsU0FBUztBQUVyQyxjQUFVLG9CQUFvQjtBQUFBLEVBQ2xDO0FBQ0o7OztBQzdIQSxPQUFPQyxZQUFXO0FBR2xCLElBQU0sY0FBYztBQUFBLEVBQ2hCLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFBQSxFQUNKLElBQUk7QUFDUjtBQUVPLElBQU0sYUFBYSxDQUFDLFFBQWdCO0FBQ3ZDLFFBQU0sQ0FBQyxTQUFTLFVBQVUsSUFBSSxZQUFZLFFBQVEsQ0FBaUM7QUFFbkYsUUFBTSxRQUF5QixvQkFBQyxJQUFJLGFBQUosRUFBZ0IsaUJBQWlCLENBQUMsU0FBUztBQUN2RSxlQUFXLGFBQWEsRUFBRSxZQUFZLEtBQUssS0FBSyxLQUFLLENBQUMsQ0FBQztBQUFBLEVBQzNELEdBQUU7QUFFRixTQUFPO0FBQUEsSUFBQztBQUFBO0FBQUEsTUFBWSxXQUFVO0FBQUEsTUFBYyxPQUFPLE1BQU0sTUFBTTtBQUFBLE1BQzdELGFBQWEsTUFBTSxZQUFZO0FBQUEsTUFBUSxTQUFTO0FBQUEsTUFBSyxXQUFXO0FBQUEsTUFDaEUscUJBQW9CO0FBQUEsTUFDcEIsa0JBQWtCLENBQUMsR0FBRyxRQUFRO0FBQzFCLG1CQUFVLGNBQWM7QUFDcEIsY0FBRyxRQUFRLFdBQVk7QUFFM0IsU0FBQyxNQUFNLFlBQVksTUFBTSxXQUFXO0FBQUEsTUFDeEM7QUFBQSxNQUVFLDhCQUFDLElBQUksS0FBSixFQUFRLE9BQU8seUJBQXlCLGFBQWEsSUFBSSxZQUFZLFVBQzlELDhCQUFDLElBQUksS0FBSixFQUFRLE9BQU0sYUFDWDtBQUFBLFFBQUMsSUFBSTtBQUFBLFFBQUo7QUFBQSxVQUFtQixrQkFBa0IsSUFBSSxXQUFXO0FBQUEsVUFDbkQsa0JBQWtCLElBQUksV0FBVztBQUFBLFVBQU8sa0JBQWtCO0FBQUEsVUFDMUQsd0JBQXdCO0FBQUEsVUFFdEI7QUFBQSxZQUFDLElBQUk7QUFBQSxZQUFKO0FBQUEsY0FBWSxZQUFZO0FBQUEsY0FBSSxlQUFlO0FBQUEsY0FDMUMsYUFBYTtBQUFBLGNBQU0sU0FBUztBQUFBLGNBQU0sb0JBQW9CO0FBQUEsY0FDdEQsdUJBQXVCO0FBQUEsY0FFckIsOEJBQUMsT0FBSSxNQUFNLFNBQ04sV0FBQyxRQUNFO0FBQUEsZ0JBQUMsSUFBSTtBQUFBLGdCQUFKO0FBQUEsa0JBQVcsU0FBUztBQUFBLGtCQUFNLGVBQWU7QUFBQSxrQkFBSyxlQUM3QyxHQUFHLElBQUksSUFBSSxHQUFHLElBQUksY0FBYztBQUFBLDZCQUM1QixJQUFJLFdBQVcsWUFBWSxFQUFFLEdBQUcsUUFBUSxPQUFPLE9BQU87QUFBQSxrQkFFMUQsWUFBWSxNQUFNO0FBQ2QsNEJBQVEsR0FBRztBQUNYLDJCQUFPLE1BQU07QUFBQSxrQkFDakI7QUFBQSxrQkFBRyxXQUFXLE1BQU07QUFDaEIsNEJBQVEsR0FBRztBQUNYLDJCQUFPLE1BQU07QUFBQSxrQkFDakI7QUFBQSxrQkFFRSwrQkFBQyxJQUFJLEtBQUosRUFBUSxhQUFhLElBQUksWUFBWSxVQUNsQztBQUFBLHdDQUFDLElBQUksT0FBSixFQUFVLFVBQVUsV0FBVyxHQUFHLEtBQUssNEJBQTRCO0FBQUEsb0JBQ3BFO0FBQUEsc0JBQUMsSUFBSTtBQUFBLHNCQUFKO0FBQUEsd0JBQVUsV0FBV0MsT0FBTSxjQUFjO0FBQUEsd0JBQUssUUFBUSxJQUFJLE1BQU07QUFBQSx3QkFDL0QsT0FBTyxJQUFJLFFBQVE7QUFBQTtBQUFBLG9CQUFlO0FBQUEscUJBQ3hDO0FBQUE7QUFBQSxjQUNKLEdBRVI7QUFBQTtBQUFBLFVBQ0o7QUFBQTtBQUFBLE1BQ0osR0FDSixHQUNSO0FBQUE7QUFBQSxFQUNKO0FBQ0o7OztBaEJ2RUEsZ0RBQUFDLEtBQUEsa0ZBQUFDO0FBdUJBLHVCQUFDLFNBQVM7QUFDVixJQUFNLFdBQU4sTUFBTSxrQkFBZ0JELE1BQUEsUUFBUSxRQWdCMUIsZUFBQyxPQUFPLE1BQU0sSUFDZCxlQUFDLE9BQU8sTUFBTSxJQUlkLG9CQUFDLE9BQU8sTUFBTSxJQXJCSUEsS0FBZTtBQUFBLEVBd0JqQyxjQUFjO0FBQ1YsVUFBTTtBQXpCZCxzQkFBQUMsUUFBQTtBQUdJLHFDQUFtRSxDQUFDO0FBQ3BFLDJDQUE2RSxDQUFDO0FBQzlFLHdDQUFpQyxDQUFDO0FBQ2xDLGlDQUF5RTtBQUFBLE1BQ3JFLE9BQU8sS0FBSyx3QkFBd0IsR0FBRztBQUFBLE1BQ3ZDLE9BQU8sS0FBSyw4QkFBOEIsR0FBRztBQUFBLE1BQzdDLGtCQUFrQixLQUFLLDhCQUE4QixhQUFhO0FBQUEsTUFDbEUsaUJBQWlCLEtBQUssOEJBQThCLFlBQVk7QUFBQSxNQUNoRSxlQUFlLEtBQUssOEJBQThCLFVBQVU7QUFBQSxNQUM1RCwwQkFBMEIsS0FBSyw4QkFBOEIscUJBQXFCO0FBQUEsTUFDbEYsZUFBZSxLQUFLLDhCQUE4QixVQUFVO0FBQUEsSUFDaEU7QUFjSSx1QkFBSyxpQkFBZ0I7QUFBQSxNQUNqQkMsZUFBYyxZQUFZLEVBQUUsUUFBUSxpQkFBaUIsQ0FBQyxHQUFHQyxjQUFhO0FBQ2xFLFFBQUFELGVBQWMsWUFBWSxFQUFFLGFBQWEsRUFBRSxTQUFTLEtBQ2hELEtBQUssT0FBTztBQUFBLE1BQ3BCLENBQUM7QUFBQSxNQUNEQSxlQUFjLFlBQVksRUFBRSxRQUFRLG1CQUFtQixDQUFDLEdBQUcsWUFBWTtBQUNuRSxlQUFPLE9BQU8sS0FBSyxXQUFXLEVBQUUsSUFBSSxDQUFDRSxTQUE4QyxNQUFjO0FBQzdGLGNBQUcsTUFBTSxRQUFRQSxPQUFNLEdBQUc7QUFDdEIsWUFBQUEsVUFBU0E7QUFDVCxZQUFBQSxRQUFPLElBQUksU0FBTztBQUNkLGtCQUFHLElBQUksWUFBWSxNQUFNLFNBQVM7QUFDOUIscUJBQUssTUFBTTtBQUNYLG1DQUFLLGNBQWEsQ0FBQyxJQUFLLG1CQUFLLGNBQWEsQ0FBQyxFQUEwQixPQUFPLFVBQ3hFLFNBQVMsR0FBRztBQUFBLGNBQ3BCO0FBQUEsWUFDSixDQUFDO0FBRUQsZ0JBQUksbUJBQUssY0FBYSxDQUFDLEVBQTBCLFNBQVM7QUFDdEQscUJBQU8sbUJBQUssY0FBYSxDQUFDO0FBQUEsVUFDbEM7QUFFQSxVQUFBQSxVQUFTQTtBQUNULGNBQUdBLFFBQU8sWUFBWSxNQUFNO0FBQ3hCLFlBQUFBLFFBQU8sTUFBTTtBQUFBLFFBQ3JCLENBQUM7QUFBQSxNQUNMLENBQUM7QUFBQSxJQUNMO0FBQUEsRUFDSjtBQUFBLEVBdkNnQixPQUFPLE9BQWU7QUFBQSxFQUFDO0FBQUEsRUFDdkIsT0FBTyxPQUFlO0FBQUEsRUFBQztBQUFBLEVBRXZDLElBQUksVUFBVTtBQUFFLFdBQU8sbUJBQUs7QUFBQSxFQUFVO0FBQUEsRUFHdEMsSUFBSSxjQUFzQjtBQUFFLFdBQU8sbUJBQUs7QUFBQSxFQUFjO0FBQUEsRUFtQ3RELGdCQUFnQjtBQUNaLFdBQU8sS0FBSyxtQkFBSyxtQkFBa0IsRUFBRSxJQUFJLFVBQ3JDLEtBQUssaUJBQWlCLElBQUksQ0FBQztBQUUvQix1QkFBSyxpQkFBZ0IsSUFBSSxRQUNyQixRQUFRLDRCQUE0QixhQUFLLEVBQUUsS0FDdkMsWUFBSSxXQUFXLEVBQUUsQ0FBQztBQUFBLEVBQzlCO0FBQUEsRUFFUSxpQkFBaUIsTUFBaUM7QUFDdEQsVUFBTUEsVUFBUyxtQkFBSyxjQUFhLElBQUk7QUFDckMsUUFBRyxDQUFDQSxTQUFRO0FBQ1IsY0FBUSxJQUFJLHlDQUF5QztBQUNyRDtBQUFBLElBQ0o7QUFFQSx1QkFBSyxvQkFBbUIsSUFBSSxFQUFFLElBQUksQ0FBQyxPQUErQjtBQUM5RCxVQUFHLE1BQU0sUUFBUUEsT0FBTSxHQUFHO0FBQ3RCLFFBQUFBLFFBQU8sSUFBSSxDQUFDLEtBQUssTUFBTTtBQUNuQixnQkFBTSxRQUFTLEdBQXFCLENBQUM7QUFFckMsa0JBQVEsNEJBQTRCLEtBQUssS0FBSyxLQUMxQyxJQUFJLFdBQVcsS0FBSztBQUFBLFFBQzVCLENBQUM7QUFDRDtBQUFBLE1BQ0o7QUFFQSxjQUFRLDRCQUE0QkEsU0FBUSxFQUFZLEtBQ3BEQSxRQUFPLFdBQVcsRUFBWTtBQUFBLElBQ3RDLENBQUM7QUFFRCxXQUFPLG1CQUFLLG9CQUFtQixJQUFJO0FBQUEsRUFDdkM7QUFBQSxFQUVRLGNBQWMsTUFBaUM7QUFDbkQsUUFBRyxPQUFPLE9BQU8sbUJBQUsscUJBQW9CLElBQUksRUFBRztBQUVqRCxRQUFHLENBQUMsbUJBQUssZ0JBQWUsSUFBSSxHQUFHO0FBQzNCLGNBQVEsSUFBSSxHQUFHLElBQUksZ0NBQWdDO0FBQ25EO0FBQUEsSUFDSjtBQUVBLFFBQUcsTUFBTSxRQUFRLG1CQUFLLGNBQWEsSUFBSSxDQUFDLEdBQUc7QUFDdkMseUJBQUssb0JBQW1CLElBQUksSUFBSSxtQkFBSyxjQUFhLElBQUksRUFBRSxJQUFJLFNBQU87QUFBQSxRQUMvRCxJQUFJLFFBQVEsT0FBTyxDQUFDQSxZQUFXO0FBQzNCLGNBQUcsS0FBSyxVQUFVLElBQUksRUFBRztBQUV6Qiw2QkFBSyxjQUFhLElBQUksSUFBSUE7QUFDMUIsZUFBSyxPQUFPLGNBQWM7QUFBQSxRQUM5QixDQUFDO0FBQUEsUUFDRCxJQUFJLFFBQVEsV0FBVyxNQUFNO0FBQ3pCLGVBQUssaUJBQWlCLElBQUk7QUFDMUIsZUFBSyxPQUFPLGNBQWM7QUFBQSxRQUM5QixDQUFDO0FBQUEsTUFDTCxDQUFDO0FBRUQ7QUFBQSxJQUNKO0FBRUEsdUJBQUssb0JBQW1CLElBQUksSUFBSTtBQUFBLE1BQzVCLG1CQUFLLGNBQWEsSUFBSSxFQUFFLFFBQVEsT0FBTyxDQUFDQSxZQUFXO0FBQy9DLFlBQUcsS0FBSyxVQUFVLElBQUksRUFBRztBQUV6QiwyQkFBSyxjQUFhLElBQUksSUFBSUE7QUFDMUIsYUFBSyxPQUFPLGNBQWM7QUFBQSxNQUM5QixDQUFDO0FBQUEsTUFDRCxtQkFBSyxjQUFhLElBQUksRUFBRSxRQUFRLFdBQVcsTUFBTTtBQUM3QyxhQUFLLGlCQUFpQixJQUFJO0FBQzFCLGVBQU8sbUJBQUssY0FBYSxJQUFJO0FBQzdCLGFBQUssT0FBTyxjQUFjO0FBQUEsTUFDOUIsQ0FBQztBQUFBLElBQ0w7QUFBQSxFQUNKO0FBQUEsRUFFQSxPQUFjLGFBQXNCO0FBQ2hDLFFBQUcsQ0FBQyxLQUFLO0FBQ0wsV0FBSyxXQUFXLElBQUksU0FBUTtBQUVoQyxXQUFPLEtBQUs7QUFBQSxFQUNoQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBUU8sd0JBQXdCLFdBQXNGO0FBQ2pILFVBQU0sV0FBV0YsZUFBYyxZQUFZLEVBQUUsYUFBYTtBQUMxRCxRQUFHLFNBQVMsU0FBUztBQUNqQixZQUFNLElBQUksTUFBTSx1Q0FBdUM7QUFBQSxRQUNuRCxPQUFPO0FBQUEsTUFDWCxDQUFDO0FBRUwsV0FBTyxNQUFNLFNBQVMsSUFBSSxTQUFPLFVBQVUsSUFBSSxFQUFFLENBQWlCO0FBQUEsRUFDdEU7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVFPLDhCQUE4QixXQUErRTtBQUNoSCxVQUFNLGlCQUFpQkEsZUFBYyxZQUFZLEVBQzVDLGFBQWEsRUFBRSxPQUFPLFNBQU8sSUFBSSxPQUFPLEVBQUUsQ0FBQztBQUVoRCxRQUFHLENBQUM7QUFDQSxZQUFNLElBQUksTUFBTSw4Q0FBOEM7QUFBQSxRQUMxRCxPQUFPLDZCQUE2QixPQUFPLGNBQWM7QUFBQSxNQUM3RCxDQUFDO0FBRUwsV0FBTyxNQUFPLFVBQVUsZUFBZSxFQUFFO0FBQUEsRUFDN0M7QUFBQSxFQUVPLFVBQVUsTUFBY0UsU0FBNEQ7QUFDdkYsdUJBQUssVUFBUyxJQUFJLElBQUlBO0FBQUEsRUFDMUI7QUFBQSxFQUVPLFVBQVUsTUFBMEM7QUFDdkQsV0FBTyxRQUFRLEtBQUssVUFBVSxJQUFpQyxDQUFDO0FBQUEsRUFDcEU7QUFBQSxFQUVPLFVBQVUsTUFBd0c7QUFDckgsV0FBTyxLQUFLLFVBQVUsSUFBaUM7QUFBQSxFQUMzRDtBQUFBLEVBRU8sY0FBYyxNQUF5RjtBQUMxRyxXQUFPLEtBQUssY0FBYyxJQUFxQztBQUFBLEVBQ25FO0FBQUEsRUFFTyxhQUFrRTtBQUNyRSxXQUFPLE9BQU8sT0FBTyxLQUFLLE9BQU87QUFBQSxFQUNyQztBQUFBLEVBRU8sc0JBQXFDO0FBQ3hDLFdBQU9GLGVBQWMsWUFBWSxFQUFFLGFBQWEsRUFBRSxPQUFPLFNBQU8sSUFBSSxPQUFPLElBQUksQ0FBQyxHQUFHLE1BQU07QUFBQSxFQUM3RjtBQUFBLEVBRU8sVUFBVSxNQUEwQztBQUN2RCxXQUFPLE9BQU8sT0FBTyxtQkFBSyxlQUFjLElBQUksS0FBSyxPQUFPLE9BQU8sbUJBQUsscUJBQW9CLElBQUk7QUFBQSxFQUNoRztBQUFBLEVBRU8sS0FBSyxNQUF1QztBQUMvQyxRQUFHLEtBQUssVUFBVSxJQUFJLEVBQUc7QUFFekIsUUFBSUUsVUFBdUQsS0FBSyxVQUFVLElBQUk7QUFDOUUsVUFBTSxjQUFvREEsUUFBTztBQUNqRSx1QkFBSyxjQUFhLElBQUksSUFBSTtBQUUxQixTQUFLLGNBQWMsSUFBSTtBQUV2QixTQUFLLEtBQUssVUFBVSxJQUFJO0FBQ3hCLFNBQUssT0FBTyxjQUFjO0FBRTFCLFFBQUcsTUFBTSxRQUFRLFdBQVcsR0FBRztBQUMzQixrQkFBWSxJQUFJLFNBQU8sSUFBSSxLQUFLLENBQUM7QUFDakM7QUFBQSxJQUNKO0FBRUEsZ0JBQVksS0FBSztBQUFBLEVBQ3JCO0FBQUEsRUFFTyxNQUFNLE1BQXVDO0FBQ2hELFFBQUcsQ0FBQyxLQUFLLFVBQVUsSUFBSSxFQUFHO0FBQzFCLFNBQUssaUJBQWlCLElBQUk7QUFFMUIsVUFBTUEsVUFBUyxtQkFBSyxjQUFhLElBQUk7QUFDckMsV0FBTyxtQkFBSyxjQUFhLElBQUk7QUFFN0IsUUFBRyxNQUFNLFFBQVFBLE9BQU0sR0FBRztBQUN0QixNQUFBQSxRQUFPLElBQUksU0FBTyxJQUFJLE1BQU0sQ0FBQztBQUM3QixXQUFLLEtBQUssVUFBVSxJQUFJO0FBQ3hCLFdBQUssT0FBTyxjQUFjO0FBQzFCO0FBQUEsSUFDSjtBQUVBLElBQUFBLFFBQU8sTUFBTTtBQUNiLFNBQUssS0FBSyxVQUFVLElBQUk7QUFDeEIsU0FBSyxPQUFPLGNBQWM7QUFBQSxFQUM5QjtBQUFBLEVBRU8sT0FBTyxNQUF1QztBQUNqRCxTQUFLLFVBQVUsSUFBSSxJQUFJLEtBQUssTUFBTSxJQUFJLElBQUksS0FBSyxLQUFLLElBQUk7QUFBQSxFQUM1RDtBQUFBLEVBRU8sV0FBaUI7QUFDcEIsV0FBTyxLQUFLLEtBQUssV0FBVyxFQUFFLElBQUksVUFBUSxLQUFLLE1BQU0sSUFBSSxDQUFDO0FBQUEsRUFDOUQ7QUFBQSxFQUVPLFNBQWU7QUFDbEIsVUFBTSxXQUFXLE9BQU8sS0FBSyxLQUFLLFdBQVc7QUFDN0MsU0FBSyxTQUFTO0FBQ2QsYUFBUyxJQUFJLFVBQVEsS0FBSyxLQUFLLElBQUksQ0FBQztBQUFBLEVBQ3hDO0FBQ0o7QUE1UEFILFNBQUEsaUJBQUFEO0FBR0k7QUFDQTtBQUNBO0FBQ0E7QUFVZ0Isa0JBQUFDLFFBQUEsYUFBaEIsYUFoQkU7QUFpQmMsa0JBQUFBLFFBQUEsYUFBaEIsYUFqQkU7QUFzQkYsa0JBQUFBLFFBQUEsR0FBSSxlQURKLGtCQXJCRTtBQUFBLFdBQU4sa0JBQUFBLFFBQUEsY0FEQSxxQkFDTTtBQUFBLFNBQ2EsV0FBZjtBQURKLGtCQUFBQSxRQUFBLEdBQU07QUFBTixJQUFNLFVBQU47OztBaUJuQkEsT0FBT0ksVUFBUztBQUtULFNBQVMsZ0JBQWdCLGNBQTZCO0FBQ3pELFlBQVUsWUFBYSxnQkFBZ0IsWUFBSSxnQkFBZ0IsT0FBUSxFQUFFO0FBQ3JFLEVBQUFDLEtBQUksV0FBVztBQUFBLElBQ1QsZUFDRSxDQUFFLFFBQVEsT0FBTyxNQUFNLE9BQU8sS0FBTSxJQUNyQyxDQUFFLE9BQU8sS0FBTTtBQUFBLElBQ2xCQSxLQUFJLGdCQUFnQixjQUFjQSxLQUFJLGdCQUFnQjtBQUFBLEVBQzFEO0FBQ0o7OztBQ2ZBLE9BQU9DLFlBQVc7QUFIbEIsOEJBQUFDLFFBQUFDO0FBaUJBLDRCQUFDLFNBQVMsRUFBRSxXQUFXLGVBQWUsQ0FBQztBQUN2QyxJQUFNLGVBQU4sZUFBMkJBLE9BQUEsSUFBSSxLQUFJO0FBQUEsRUFRL0IsWUFBWSxPQUEwQjtBQUNsQyxVQUFNO0FBQUEsTUFDRixZQUFZLENBQUMsUUFBUTtBQUFBLE1BQ3JCLFNBQVM7QUFBQSxJQUNiLENBQUM7QUFWTCxTQUFnQixVQUFoQjtBQUNBLFNBQWdCLFFBQWhCO0FBQ0EsU0FBTyxPQUFQO0FBQ0EsU0FBTyxlQUF3QjtBQVMzQixTQUFLLE9BQU8sTUFBTTtBQUNsQixTQUFLLFFBQVEsTUFBTTtBQUNuQixTQUFLLGVBQWUsTUFBTSxnQkFBZ0I7QUFDMUMsU0FBSyxVQUFVLE1BQU0sTUFBTSxVQUFVO0FBRXJDLFFBQUcsS0FBSyxTQUFTLFFBQVc7QUFDeEIsVUFBRyxLQUFLLGdCQUFnQixVQUFVO0FBQzlCLFlBQUcsT0FBTyxLQUFLLEtBQUssSUFBSSxNQUFNLFVBQVU7QUFDcEMsZUFBSyxRQUFRLG9CQUFDLElBQUksT0FBSixFQUFVLFVBQ3BCLEtBQUssTUFDUCxDQUFlO0FBQUEsUUFDckIsT0FBTztBQUNILGVBQUssUUFBUSxvQkFBQyxJQUFJLEtBQUosRUFDViw4QkFBQyxRQUFLLE9BQU8sS0FBSyxNQUNiLFdBQUMsV0FBVyxRQUNqQixHQUNKLENBQXFCO0FBQUEsUUFDekI7QUFBQSxNQUNKLE9BQU87QUFDSCxZQUFHLE9BQU8sS0FBSyxTQUFTO0FBQ3BCLGVBQUssUUFBUSxvQkFBQyxJQUFJLE9BQUosRUFBVSxVQUFVLEtBQUssTUFBZ0IsQ0FBZTtBQUFBO0FBRXRFLGVBQUssUUFBUSxLQUFLLElBQWtCO0FBQUEsTUFDNUM7QUFBQSxJQUNKO0FBRUEsU0FBSyxPQUFPLHFCQUFDLElBQUksS0FBSixFQUFRLGFBQWEsSUFBSSxZQUFZLFVBQVUsUUFBUSxJQUFJLE1BQU0sUUFDMUU7QUFBQTtBQUFBLFFBQUMsSUFBSTtBQUFBLFFBQUo7QUFBQSxVQUFVLE9BQU87QUFBQSxVQUFTLFFBQVE7QUFBQSxVQUFHLFdBQVdDLE9BQU0sY0FBYztBQUFBLFVBQ25FLE9BQU8sTUFBTTtBQUFBO0FBQUEsTUFBTztBQUFBLE1BRXRCO0FBQUEsUUFBQyxJQUFJO0FBQUEsUUFBSjtBQUFBLFVBQVUsT0FBTztBQUFBLFVBQWUsU0FBUyxrQkFBa0IsTUFBTSxXQUFXO0FBQUEsVUFDM0UsV0FBV0EsT0FBTSxjQUFjO0FBQUEsVUFBSyxRQUFRO0FBQUEsVUFBRyxPQUFPLE1BQU0sZUFBZTtBQUFBO0FBQUEsTUFBSTtBQUFBLE9BQ3JGLENBQXFCO0FBQUEsRUFDekI7QUFDSjtBQWhEQUYsU0FBQSxpQkFBQUM7QUFBTSxlQUFOLGtCQUFBRCxRQUFBLG1CQURBLDBCQUNNO0FBQU4sa0JBQUFBLFFBQUEsR0FBTTs7O0FDVk4sT0FBT0csb0JBQW1CO0FBSW5CLElBQVU7QUFBQSxDQUFWLENBQVVDLFlBQVY7QUEyQkEsRUFBSUEsUUFBQSxXQUFnQztBQUMzQyxNQUFJLFdBQW1DO0FBQ3ZDLFFBQU0sVUFBVSxvQkFBSSxJQUFtQjtBQUVoQyxXQUFTLFFBQVE7QUFBRSxJQUFBQSxRQUFBLFVBQVUsTUFBTTtBQUFBLEVBQUc7QUFBdEMsRUFBQUEsUUFBUztBQUVULFdBQVMsV0FBVyxRQUFnQixNQUFnQztBQUN2RSxhQUFTLE9BQU8sUUFBUSxzQkFBc0IsTUFBTTtBQUVwRCxRQUFHLE9BQU8sU0FBUztBQUNmLGFBQU8sSUFBSTtBQUFBLFFBQU8sR0FBRyxPQUFPLE1BQU0sRUFBRSxFQUFFLElBQUksT0FDdEMsR0FBRyxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQztBQUFBLFFBQ3BCO0FBQUEsTUFBRyxFQUFFLEtBQUssS0FBSyxTQUFTLENBQUM7QUFFN0IsV0FBTyxJQUFJO0FBQUEsTUFBTyxHQUFHLE9BQU8sTUFBTSxFQUFFLEVBQUUsSUFBSSxPQUN0QyxHQUFHLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDO0FBQUEsTUFDcEI7QUFBQSxJQUFJLEVBQUUsS0FBSyxJQUFJO0FBQUEsRUFDbkI7QUFYTyxFQUFBQSxRQUFTO0FBY1QsV0FBUyxVQUFVLFFBQXVCLE9BQWlCO0FBQzlELFFBQUcsQ0FBQyxTQUFTLE9BQU8sVUFBVSxRQUFRLElBQUksTUFBTTtBQUM1QyxZQUFNLElBQUksTUFBTSw2QkFBNkIsT0FBTyxNQUFNLGlCQUFpQjtBQUUvRSxZQUFRLE9BQU8sTUFBTTtBQUNyQixZQUFRLElBQUksTUFBTTtBQUFBLEVBQ3RCO0FBTk8sRUFBQUEsUUFBUztBQVFULFdBQVMsYUFBbUM7QUFDL0MsV0FBTyxDQUFDLEdBQUcsUUFBUSxPQUFPLENBQUM7QUFBQSxFQUMvQjtBQUZPLEVBQUFBLFFBQVM7QUFPVCxXQUFTLGFBQWEsUUFBeUI7QUFDbEQsV0FBTyxRQUFRLE9BQU8sTUFBTTtBQUFBLEVBQ2hDO0FBRk8sRUFBQUEsUUFBUztBQUlULFdBQVMsYUFBYSxNQUFvQjtBQUM3QyxjQUFVLFNBQVMsSUFBSTtBQUN2QixjQUFVLGFBQWEsU0FBUyxLQUFLLE1BQU07QUFFM0MsY0FBVSxXQUFXO0FBQUEsRUFDekI7QUFMTyxFQUFBQSxRQUFTO0FBT1QsV0FBUyxZQUFZLGFBQXNCO0FBQzlDLFdBQU9BLFFBQU87QUFBQSxNQUFXO0FBQUEsUUFDckIsa0JBQWtCO0FBQUEsUUFDbEI7QUFBQSxRQUNBLGNBQWM7QUFBQSxNQUNsQjtBQUFBLE1BQ0EsTUFBTTtBQUFBLFFBQ0YsSUFBSSxhQUFhO0FBQUEsVUFDYixNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUEsVUFDUCxhQUFhO0FBQUEsVUFDYixjQUFjO0FBQUEsVUFDZCxTQUFTLE1BQU0sVUFBVSxXQUFXO0FBQUEsUUFDeEMsQ0FBc0I7QUFBQSxRQUN0QixJQUFJLGFBQWE7QUFBQSxVQUNiLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQSxVQUNQLGFBQWE7QUFBQSxVQUNiLGNBQWM7QUFBQSxVQUNkLFNBQVMsTUFBTSxhQUFhLEdBQUc7QUFBQSxRQUNuQyxDQUFzQjtBQUFBLFFBQ3RCLElBQUksYUFBYTtBQUFBLFVBQ2IsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBLFVBQ1AsYUFBYTtBQUFBLFVBQ2IsY0FBYztBQUFBLFVBQ2QsU0FBUyxNQUFNLGFBQWEsR0FBRztBQUFBLFFBQ25DLENBQXNCO0FBQUEsUUFDdEIsSUFBSSxhQUFhO0FBQUEsVUFDYixNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUEsVUFDUCxhQUFhO0FBQUEsVUFDYixjQUFjO0FBQUEsVUFDZCxTQUFTLE1BQU0sYUFBYSxJQUFJO0FBQUEsUUFDcEMsQ0FBc0I7QUFBQSxRQUN0QixJQUFJLGFBQWE7QUFBQSxVQUNiLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQSxVQUNQLGFBQWE7QUFBQSxVQUNiLGNBQWM7QUFBQSxVQUNkLFNBQVMsTUFBTSxhQUFhLEdBQUc7QUFBQSxRQUNuQyxDQUFzQjtBQUFBLFFBQ3RCLElBQUksYUFBYTtBQUFBLFVBQ2IsTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBLFVBQ1AsYUFBYTtBQUFBLFVBQ2IsY0FBYztBQUFBLFVBQ2QsU0FBUyxNQUFNLGFBQWEsR0FBRztBQUFBLFFBQ25DLENBQXNCO0FBQUEsTUFDMUI7QUFBQSxJQUFDO0FBQUEsRUFDTDtBQWxETyxFQUFBQSxRQUFTO0FBb0RULFdBQVMsV0FBVyxPQUFvQixhQUF1RDtBQUNsRyxRQUFJO0FBQ0osVUFBTUMsZUFBMkMsb0JBQUksSUFBSTtBQUV6RCxVQUFNLFVBQVU7QUFDaEIsVUFBTSxXQUFXO0FBRWpCLGVBQVc7QUFBQSxNQUFDLElBQUk7QUFBQSxNQUFKO0FBQUEsUUFBZ0IsT0FBTztBQUFBLFFBQVUsaUJBQWlCLE1BQU0sb0JBQW9CO0FBQUEsUUFDdEYsaUJBQWlCLE9BQU8sU0FBUztBQUM3Qiw0QkFBa0IsS0FBSyxJQUFJO0FBQzNCLHNCQUFZLGlCQUFpQixDQUFDLEtBQzFCLFlBQVksV0FBVyxZQUFZLGlCQUFpQixDQUFDLENBQUM7QUFFMUQsY0FBRyxLQUFLLEtBQUssS0FBSyxFQUFFLFNBQVMsS0FBSyxDQUFDLFFBQVEsa0JBQWtCLEVBQUUsVUFBVSxhQUFhLEdBQUc7QUFDckYsb0JBQVEsa0JBQWtCLEVBQUUsVUFBVSxhQUFhO0FBQ25EO0FBQUEsVUFDSjtBQUVBLGtCQUFRLGtCQUFrQixFQUFFLFVBQVUsYUFBYSxLQUMvQyxRQUFRLGtCQUFrQixFQUFFLGFBQWEsYUFBYTtBQUFBLFFBQzlEO0FBQUEsUUFBRyxZQUFZLE1BQU07QUFDakIsZ0JBQU0sZUFBZSxZQUFZLGlCQUFpQixHQUFHLFVBQVU7QUFDL0QsY0FBRyx3QkFBd0IsY0FBYztBQUNyQyx5QkFBYSxRQUFRO0FBQ3JCLHlCQUFhLGdCQUFnQkQsUUFBTyxNQUFNO0FBQUEsVUFDOUM7QUFBQSxRQUNKO0FBQUE7QUFBQSxJQUNGO0FBRUEsVUFBTSxVQUFVO0FBQUEsTUFBQyxJQUFJO0FBQUEsTUFBSjtBQUFBLFFBQVEsT0FBTyxlQUFlLE1BQU0sa0NBQy9DLFVBQVUsRUFBRTtBQUFBLFFBQUksYUFBYSxJQUFJLFlBQVk7QUFBQSxRQUFVLFNBQVM7QUFBQSxRQUNwRSxRQUFRLElBQUksTUFBTTtBQUFBLFFBQ2Y7QUFBQTtBQUFBLFVBQ0Q7QUFBQSxZQUFDLElBQUk7QUFBQSxZQUFKO0FBQUEsY0FBbUIsT0FBTztBQUFBLGNBQXNCLGtCQUFrQixJQUFJLFdBQVc7QUFBQSxjQUNoRixrQkFBa0IsSUFBSSxXQUFXO0FBQUEsY0FBTyxTQUFTO0FBQUEsY0FBTSxTQUFTO0FBQUEsY0FDaEUsU0FBUyxNQUFNLG1DQUFtQztBQUFBLGNBQ2xELHdCQUF3QjtBQUFBLGNBQU0sa0JBQWtCLE1BQU07QUFBQSxjQUVwRCw4QkFBQyxJQUFJLFNBQUosRUFBWSxTQUFTLE1BQU0sU0FBUyxNQUFNO0FBQUE7QUFBQSxVQUMvQztBQUFBO0FBQUE7QUFBQSxJQUNKO0FBRUEsVUFBTSxhQUFhLFFBQVEsZUFBZTtBQUMxQyxVQUFNLGNBQWMsV0FBVyxnQkFBZ0I7QUFFL0MsUUFBRyxPQUFPLG1DQUFtQyxhQUFhO0FBQ3RELFlBQU0sa0JBQWtCLFlBQVk7QUFDcEMsc0JBQWdCLElBQUksWUFDaEIsWUFBWSxPQUFPLFFBQVEsRUFBRSxDQUFDO0FBQUEsSUFDdEM7QUFFQSxhQUFTLGlCQUFpQixPQUFvQztBQUMxRCxVQUFJLGdCQUErQixXQUFXLEVBQUU7QUFBQSxRQUFPLENBQUMsV0FDcEQsT0FBTyxTQUFVLE1BQU0sV0FBVyxPQUFPLE1BQU0sSUFBSSxPQUFPLFFBQVM7QUFBQSxNQUN2RSxFQUFFLEtBQUssQ0FBQyxXQUFXLE9BQU8sVUFBVSxPQUFPLElBQUksQ0FBQztBQUVoRCxpQkFBVSxVQUFVLGVBQWU7QUFDL0IsWUFBRyxPQUFPLFlBQVk7QUFDbEIsMEJBQWdCLENBQUUsTUFBTztBQUN6QjtBQUFBLFFBQ0o7QUFBQSxNQUNKO0FBRUEsWUFBTSxVQUFVLGNBQWM7QUFBQSxRQUFJLFlBQVUsT0FBTztBQUFBLFVBQy9DLE9BQU8sU0FBUyxNQUFNLFFBQVEsT0FBTyxRQUFRLEVBQUUsSUFBSTtBQUFBLFFBQUs7QUFBQSxNQUM1RCxFQUFFLE9BQU8sV0FBUyxVQUFVLFVBQWEsVUFBVSxJQUFJLEVBQUUsS0FBSyxDQUFDO0FBRS9ELGFBQU8sT0FBTyxnQkFBZ0IsUUFDMUIsTUFBTSxpQkFBaUIsV0FDbkIsUUFBUSxPQUFPLEdBQUcsTUFBTSxZQUFZLElBQ3RDO0FBQUEsSUFDVjtBQUVBLGFBQVMsa0JBQWtCLFdBQW1CO0FBQzFDLFlBQU0sVUFBK0IsQ0FBQztBQUd0QyxrQkFBWSxXQUFXO0FBRXZCLGNBQVEsS0FBSyxHQUFHLGlCQUFpQixTQUFTLENBQUM7QUFHM0MsVUFBRyxlQUFlLFFBQVEsV0FBVztBQUNqQyxnQkFBUSxLQUFLLEdBQUcsWUFBWSxDQUFDO0FBR2pDLGNBQVEsSUFBSSxDQUFDLGNBQTRCO0FBQ3JDLG9CQUFZLE9BQU8sV0FBVyxFQUFFO0FBRWhDLGNBQU0sUUFBdUIsQ0FBQztBQUU5QixjQUFNO0FBQUEsVUFDRixZQUFZLFFBQVEsaUJBQWlCLENBQUMsR0FBRyxRQUF3QjtBQUM3RCxrQkFBTSxPQUFPLElBQUksVUFBVTtBQUMzQixnQkFBRyxnQkFBZ0IsY0FBYztBQUM3QixrQkFBRyxlQUFnQjtBQUduQiwrQkFBaUIsUUFBUSxLQUFLLE1BQU0saUJBQWlCLE1BQVM7QUFDOUQsbUJBQUssUUFBUTtBQUNiLG1CQUFLLGdCQUFnQkEsUUFBTyxNQUFNO0FBQUEsWUFDdEM7QUFBQSxVQUNKLENBQUM7QUFBQSxVQUNELFlBQVk7QUFBQSxZQUFRO0FBQUEsWUFBVyxNQUMzQixNQUFNLFFBQVEsQ0FBQyxPQUFPLFlBQVksV0FBVyxFQUFFLENBQUM7QUFBQSxVQUNwRDtBQUFBLFFBQ0o7QUFBQSxNQUNKLENBQUM7QUFFRCxjQUFRLFNBQVMsSUFDWixDQUFDLFdBQVcsV0FBVyxXQUFXLEtBQUssSUFDMUMsV0FBVyxLQUFLO0FBQUEsSUFDdEI7QUFFQSxRQUFHLENBQUNBLFFBQUE7QUFDQSxNQUFBQSxRQUFBLFdBQVcsUUFBUSxXQUFXLEVBQUUsOEJBQThCLENBQUMsUUFBZ0I7QUFBQSxRQUFDO0FBQUE7QUFBQSxVQUM5RSxXQUFXO0FBQUEsVUFBVSxTQUFTO0FBQUEsVUFBSyxjQUFjLE1BQU07QUFBQSxVQUFPLGVBQWUsTUFBTTtBQUFBLFVBQ25GLFdBQVlFLGVBQWMsWUFBWSxFQUFFLFlBQVksR0FBRyxHQUFHLFNBQVMsSUFBTSxNQUFNLFNBQVU7QUFBQSxVQUN6RixhQUFhLE1BQU0sWUFBWTtBQUFBLFVBQVEsUUFBUSxJQUFJLE1BQU07QUFBQSxVQUFRLFFBQVEsSUFBSSxNQUFNO0FBQUEsVUFDbkYsR0FBRyxNQUFNO0FBQ0wsb0JBQVEsUUFBUSxZQUNaLE9BQU8sT0FBTyxDQUFDO0FBRW5CLGtCQUFNLGVBQ0ZGLFFBQU8sYUFBYSxNQUFNLFdBQVc7QUFBQSxVQUM3QztBQUFBLFVBQUcsa0JBQWtCLENBQUMsR0FBRyxXQUFXO0FBQ2hDLGdCQUFHLENBQUMsU0FBVSxhQUFhLFdBQVcsSUFBSSxVQUNsQyxXQUFXLElBQUksWUFBWSxXQUFXLElBQUksVUFDMUMsV0FBVyxJQUFJLFlBQVk7QUFDN0IsdUJBQVUsV0FBVztBQUNyQjtBQUFBLFlBQ0o7QUFFQSx1QkFBVyxJQUFJLFVBQ1gsV0FBVztBQUFBLFVBQ3JCO0FBQUEsVUFBRyxXQUFXLE1BQU07QUFDaEIsWUFBQUMsYUFBWSxRQUFRLENBQUMsSUFBSSxRQUFRLFFBQVEsNEJBQTRCLEtBQUssRUFBRSxLQUN4RSxJQUFJLFdBQVcsRUFBRSxDQUFDO0FBRXRCLHVCQUFXO0FBRVgsYUFBQyxHQUFHLFFBQVEsT0FBTyxDQUFDLEVBQUUsUUFBUSxZQUMxQixVQUFVLE9BQU8sV0FBVyxPQUFPLFFBQVEsQ0FBQztBQUVoRCxZQUFBRCxRQUFBLFdBQVc7QUFBQSxVQUNmO0FBQUEsVUFDRztBQUFBO0FBQUEsTUFDTCxDQUE4QixFQUFFO0FBRXBDLFdBQU9BLFFBQUE7QUFBQSxFQUNYO0FBdEpPLEVBQUFBLFFBQVM7QUFBQSxHQTdIQzs7O0FDQWpCLElBQUk7QUFFRyxTQUFTLGdCQUFnQixTQUFzQjtBQUNsRCxRQUFNLE9BQXNCLFFBQVEsTUFBTSxHQUFHO0FBQzdDLFVBQU8sS0FBSyxDQUFDLEdBQUc7QUFBQSxJQUNaLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFDRCxhQUFPLGlCQUFpQixJQUFJO0FBQUEsSUFFaEMsS0FBSztBQUFBLElBQ0wsS0FBSztBQUNELGFBQU8sUUFBUTtBQUFBLElBRW5CLEtBQUs7QUFDRCxhQUFPLGlCQUFpQixJQUFJO0FBQUEsSUFFaEMsS0FBSztBQUNELHNCQUFnQjtBQUNoQixhQUFPO0FBQUEsSUFFWCxLQUFLO0FBQ0QsYUFBTyxPQUFPLEtBQUssUUFBUSxXQUFXLEVBQUUsT0FBTyxFQUFFLElBQUksVUFDakQsR0FBRyxJQUFJLEtBQUssUUFBUSxXQUFXLEVBQUUsVUFBVSxJQUFJLElBQUksU0FBUyxRQUFTLEVBQUUsRUFBRSxLQUFLLElBQUk7QUFBQSxJQUUxRixLQUFLO0FBQ0QsT0FBQyxPQUFPLFdBQ0osT0FBTyxZQUFZLEtBQUssQ0FBQyxLQUFLLE1BQVMsSUFDekMsT0FBTyxNQUFNO0FBQ2YsYUFBTztBQUFBLElBRVgsS0FBSztBQUNELFVBQUcsVUFBVyxRQUFPO0FBRXJCLDBCQUFvQixJQUFJO0FBQ3hCLGtCQUFZLFFBQVEsTUFBTSxNQUFNO0FBQzVCLDRCQUFvQixLQUFLO0FBQ3pCLG9CQUFZO0FBQUEsTUFDaEIsQ0FBQztBQUNELGFBQU87QUFBQSxJQUVYO0FBQ0ksYUFBTztBQUFBLEVBQ2Y7QUFDSjtBQUdBLFNBQVMsaUJBQWlCLE1BQTZCO0FBQ25ELE1BQUcsQ0FBQyxLQUFLLENBQUM7QUFDTixXQUFPO0FBRVgsUUFBTSxrQkFBMEIsS0FBSyxDQUFDO0FBRXRDLE1BQUcsQ0FBQyxRQUFRLFdBQVcsRUFBRSxVQUFVLGVBQWU7QUFDOUMsV0FBTyxTQUFTLGVBQWU7QUFFbkMsVUFBTyxLQUFLLENBQUMsR0FBRztBQUFBLElBQ1osS0FBSztBQUNELFVBQUcsQ0FBQyxRQUFRLFdBQVcsRUFBRSxVQUFVLGVBQWUsR0FBRztBQUNqRCxnQkFBUSxXQUFXLEVBQUUsS0FBSyxlQUFlO0FBQ3pDLGVBQU8saUNBQWlDLEtBQUssQ0FBQyxDQUFDO0FBQUEsTUFDbkQ7QUFFQSxhQUFPO0FBQUEsSUFFWCxLQUFLO0FBQ0QsVUFBRyxRQUFRLFdBQVcsRUFBRSxVQUFVLGVBQWUsR0FBRztBQUNoRCxnQkFBUSxXQUFXLEVBQUUsTUFBTSxlQUFlO0FBQzFDLGVBQU8saUNBQWlDLEtBQUssQ0FBQyxDQUFDO0FBQUEsTUFDbkQ7QUFFQSxhQUFPO0FBQUEsSUFFWCxLQUFLO0FBQ0QsVUFBRyxDQUFDLFFBQVEsV0FBVyxFQUFFLFVBQVUsZUFBZSxHQUFHO0FBQ2pELGdCQUFRLFdBQVcsRUFBRSxLQUFLLGVBQWU7QUFDekMsZUFBTywwQkFBMEIsS0FBSyxDQUFDLENBQUM7QUFBQSxNQUM1QztBQUVBLGNBQVEsV0FBVyxFQUFFLE1BQU0sZUFBZTtBQUMxQyxhQUFPLDBCQUEwQixLQUFLLENBQUMsQ0FBQztBQUFBLEVBQ2hEO0FBRUEsU0FBTztBQUNYO0FBRUEsU0FBUyxpQkFBaUIsTUFBcUI7QUFDM0MsTUFBRyxDQUFDLEtBQUssQ0FBQztBQUNOLFdBQU87QUFBQTtBQUFBLEVBQTBDLFdBQVcsQ0FBQztBQUVqRSxNQUFHLCtDQUErQyxLQUFLLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7QUFDdEUsV0FBTztBQUVYLE1BQUcsT0FBTyxNQUFNLE9BQU8sV0FBVyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssT0FBTyxjQUFjLE9BQU8sV0FBVyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQzFGLFdBQU8sYUFBYSxLQUFLLENBQUMsQ0FBQztBQUUvQixRQUFNLFVBQXlCLEtBQUssQ0FBQyxFQUFFLE1BQU0sR0FBRztBQUVoRCxNQUFHLE9BQU8sS0FBSyxLQUFLLENBQUMsQ0FBQztBQUNsQixXQUFPLFdBQVc7QUFFdEIsVUFBTyxRQUFRLENBQUMsR0FBRztBQUFBLElBQ2YsS0FBSztBQUNELGNBQVEsQ0FBQyxNQUFNLFNBQ1gsWUFBWSxXQUFXLEVBQUUsY0FBYyxPQUFPLFNBQVMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUNqRSxZQUFZLFdBQVcsRUFBRSxnQkFBZ0IsT0FBTyxTQUFTLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDbkUsYUFBTyxhQUFhLFFBQVEsQ0FBQyxDQUFDLGNBQWMsS0FBSyxDQUFDLENBQUM7QUFBQSxJQUV2RCxLQUFLO0FBQ0QsY0FBUSxDQUFDLE1BQU0sU0FDWCxZQUFZLFdBQVcsRUFBRSxlQUFlLElBQzFDLFlBQVksV0FBVyxFQUFFLGlCQUFpQjtBQUU1QyxhQUFPO0FBQUEsSUFFWCxLQUFLO0FBQ0QsY0FBUSxDQUFDLE1BQU0sU0FDWCxZQUFZLFdBQVcsRUFBRSxtQkFBbUIsT0FBTyxTQUFTLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFDdEUsWUFBWSxXQUFXLEVBQUUscUJBQXFCLE9BQU8sU0FBUyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBRXhFLGFBQU8sV0FBVyxFQUFFLFlBQVksbUNBQW1DLFNBQVMsTUFBTSxRQUM5RSxlQUFlO0FBRW5CLGFBQU8sNkJBQTZCLEtBQUssQ0FBQyxDQUFDO0FBQUEsSUFFL0MsS0FBSztBQUNELGNBQVEsQ0FBQyxNQUFNLFNBQ1gsWUFBWSxXQUFXLEVBQUUsbUJBQW1CLE9BQU8sU0FBUyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQ3RFLFlBQVksV0FBVyxFQUFFLHFCQUFxQixPQUFPLFNBQVMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUV4RSxhQUFPLFdBQVcsRUFBRSxZQUFZLG1DQUFtQyxTQUFTLE1BQU0sUUFDOUUsZUFBZTtBQUVuQixhQUFPLDZCQUE2QixLQUFLLENBQUMsQ0FBQztBQUFBLEVBQ25EO0FBRUEsU0FBTyxnQ0FBZ0MsS0FBSyxLQUFLLEdBQUcsRUFBRSxRQUFRLElBQUksT0FBTyxJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7QUFFNUYsV0FBUyxhQUFxQjtBQUMxQixXQUFPO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFPYixLQUFLO0FBQUEsRUFDSDtBQUNKO0FBRUEsU0FBUyxVQUFrQjtBQUN2QixTQUFPO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1Ba0JMLE1BQU0sSUFBSSxFQUFFLElBQUksT0FBSyxFQUFFLFFBQVEsU0FBUyxFQUFFLENBQUMsRUFBRSxLQUFLLElBQUk7QUFDNUQ7OztBQ2pMTyxJQUFNLGFBQWE7QUFBQTtBQUFBLEVBRXRCLE1BQU07QUFBQTtBQUFBLEVBRU4sTUFBTSxZQUFZLFdBQVc7QUFBQSxFQUM3QixRQUFRLENBQUMsU0FBaUI7QUFDdEIsV0FBTyxhQUFhLEVBQUUsWUFBWSxJQUFJLEVBQUU7QUFBQSxNQUFJLENBQUMsUUFDekMsSUFBSSxhQUFhO0FBQUEsUUFDYixPQUFPLElBQUksU0FBUztBQUFBLFFBQ3BCLGFBQWEsSUFBSSxnQkFBZ0I7QUFBQSxRQUNqQyxNQUFNLFdBQVcsSUFBSSxRQUFRLElBQUksSUFBSSxXQUFXO0FBQUEsUUFDaEQsU0FBUyxNQUFNLFFBQVEsR0FBRztBQUFBLE1BQzlCLENBQXNCO0FBQUEsSUFDMUI7QUFBQSxFQUNKO0FBQ0o7OztBQ2hCQSxPQUFPRyxZQUFVO0FBQ2pCLE9BQU9DLFdBQVM7QUFHVCxJQUFNLGVBQWUsTUFBTTtBQUU5QixRQUFNLFFBQVFELE9BQUssT0FBTyxPQUFPLEtBQUs7QUFDdEMsUUFBTSxlQUFlQyxNQUFJLG1CQUFtQjtBQUFBLElBQ3hDQSxNQUFJLGdCQUFnQixjQUFjQSxNQUFJLGdCQUFnQjtBQUFBLEVBQVc7QUFFckUsZUFBYSxRQUFRRCxPQUFLLGFBQWEsQ0FBQztBQUV4QyxTQUFPO0FBQUEsSUFDSCxRQUFRO0FBQUEsSUFDUixZQUFZO0FBQUEsSUFDWixRQUFRLENBQUMsVUFBZ0M7QUFDckMsVUFBSSxrQkFBMkI7QUFDL0IsVUFBRyxNQUFNLFdBQVcsR0FBRyxHQUFHO0FBQ3RCLGdCQUFRLE1BQU0sUUFBUSxLQUFLLEVBQUU7QUFDN0IsMEJBQWtCO0FBQUEsTUFDdEI7QUFFQSxZQUFNLFVBQVUsUUFBUUEsT0FBSyxpQkFBaUIsS0FBSyxJQUFJO0FBRXZELGFBQU8sSUFBSSxhQUFhO0FBQUEsUUFDcEIsU0FBUyxNQUFNO0FBQ1gsY0FBRyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsRUFBRztBQUU1QixnQkFBTSxPQUFPLGFBQWEsT0FBTyxDQUFFLE9BQU8sTUFBTSxHQUFHLEtBQUssRUFBRyxDQUFDO0FBQzVELGVBQUssdUJBQXVCLE1BQU0sTUFBTSxDQUFDLEdBQUcsZ0JBQWdCO0FBQ3hELGtCQUFNLENBQUUsU0FBUyxRQUFRLE1BQU8sSUFBSSxLQUFLLHdCQUF3QixXQUFXO0FBRTVFLGdCQUFHLENBQUMsV0FBVyxRQUFRO0FBQ25CLDRCQUFjLFdBQVcsRUFBRSxpQkFBaUI7QUFBQSxnQkFDeEMsU0FBUztBQUFBLGdCQUNULFNBQVM7QUFBQSxnQkFDVCxNQUFNLDBCQUEwQixLQUFLLGVBQWUsTUFBTTtBQUFBLGNBQzlELENBQUM7QUFFRDtBQUFBLFlBQ0o7QUFFQSxnQkFBRyxDQUFDLGdCQUFpQjtBQUVyQiwwQkFBYyxXQUFXLEVBQUUsaUJBQWlCO0FBQUEsY0FDeEMsU0FBUztBQUFBLGNBQ1QsU0FBUztBQUFBLGNBQ1QsTUFBTTtBQUFBLFlBQ1YsQ0FBQztBQUFBLFVBQ0wsQ0FBQztBQUFBLFFBQ0w7QUFBQSxRQUNBLE9BQU8sT0FBTyxRQUFRLE1BQU0sS0FBSyxPQUFPLFFBQVEsTUFBTSxNQUFNLEdBQUcsRUFBRSxNQUFNLE1BQU0sR0FBRyxFQUFFLFNBQU8sQ0FBQyxDQUFDLEVBQUU7QUFBQSxRQUM3RixjQUFjLFNBQVMsb0JBQW9CLEdBQUcsUUFBUSxHQUFHLEtBQUssTUFBTyxFQUFFLEdBQUksa0JBQWtCLHFDQUFxQyxFQUFHO0FBQUEsUUFDckksTUFBTTtBQUFBLE1BQ1YsQ0FBc0I7QUFBQSxJQUMxQjtBQUFBLEVBQ0o7QUFDSixHQUFHOzs7QUM3REgsT0FBT0Usb0JBQW1CO0FBSTFCLElBQU0sZ0JBQWdCO0FBQUEsRUFDbEIsWUFBWTtBQUFBLEVBQ1osUUFBUTtBQUFBLEVBQ1IsT0FBTztBQUNYO0FBRUEsSUFBSSxTQUFpQixjQUFjO0FBRTVCLElBQU0sa0JBQWtCO0FBQUEsRUFDM0IsUUFBUTtBQUFBLEVBQ1IsTUFBTTtBQUFBLEVBQ04sWUFBWTtBQUFBLEVBRVosUUFBUSxDQUFDLFdBQWlDO0FBQ3RDLFdBQU8sSUFBSSxhQUFhO0FBQUEsTUFDcEIsTUFBTTtBQUFBLE1BQ04sT0FBTyxVQUFVO0FBQUEsTUFDakIsYUFBYTtBQUFBLE1BQ2IsU0FBUyxNQUFNQyxlQUFjLFlBQVksRUFBRTtBQUFBLFFBQ3ZDO0FBQUEsUUFDQSxhQUFjLFNBQVMsTUFBTTtBQUFBLE1BQ2pDO0FBQUEsSUFDSixDQUFzQjtBQUFBLEVBQzFCO0FBQ0o7OztBQ3pCQSxPQUFPQyxpQkFBZ0I7QUFHaEIsSUFBTSxjQUFjO0FBQUEsRUFDdkIsUUFBUTtBQUFBLEVBQ1IsU0FBUztBQUNMLFFBQUcsQ0FBQyxPQUFPLElBQUksRUFBRSxVQUFXLFFBQU8sSUFBSSxhQUFhO0FBQUEsTUFDaEQsTUFBTTtBQUFBLE1BQ04sT0FBTztBQUFBLE1BQ1AsY0FBYztBQUFBLE1BQ2QsYUFBYTtBQUFBLElBQ2pCLENBQXNCO0FBRXRCLFdBQU87QUFBQSxNQUNILElBQUksYUFBYTtBQUFBLFFBQ2IsTUFBTSxjQUFjLE9BQU8sSUFBSSxHQUFHLGdCQUFnQixFQUFFLEdBQUcsQ0FBQyxXQUFXLFdBQVdDLFlBQVcsZUFBZSxVQUNwRyxrQ0FDRiwrQkFBK0I7QUFBQSxRQUNqQyxjQUFjO0FBQUEsUUFDZCxPQUFPLGVBQWU7QUFBQSxVQUNsQixjQUFjLE9BQU8sSUFBSSxHQUFHLE9BQU87QUFBQSxVQUNuQyxjQUFjLE9BQU8sSUFBSSxHQUFHLFFBQVE7QUFBQSxVQUNwQyxjQUFjLE9BQU8sSUFBSSxHQUFHLGdCQUFnQjtBQUFBLFFBQ2hELEdBQUcsQ0FBQyxPQUFPLFFBQVEsV0FBVyxHQUFJLFdBQVdBLFlBQVcsZUFBZSxVQUNuRSxVQUFVLE1BQ2QsSUFBSSxLQUFLLE1BQU0sTUFBTSxFQUFFO0FBQUEsUUFDdkIsU0FBUyxNQUFNLE9BQU8sSUFBSSxFQUFFLFdBQVc7QUFBQSxNQUMzQyxDQUFzQjtBQUFBLE1BQ3RCLElBQUksYUFBYTtBQUFBLFFBQ2IsTUFBTTtBQUFBLFFBQ04sY0FBYztBQUFBLFFBQ2QsT0FBTztBQUFBLFVBQWU7QUFBQSxZQUNsQixjQUFjLE9BQU8sSUFBSSxHQUFHLE9BQU87QUFBQSxZQUNuQyxjQUFjLE9BQU8sSUFBSSxHQUFHLFFBQVE7QUFBQSxVQUN4QztBQUFBLFVBQUcsQ0FBQyxPQUFPLFdBQ1AsZUFBZ0IsUUFBUSxRQUFRLE9BQU8sSUFBSSxFQUFFLE9BQVEsR0FBSSxTQUFTLE1BQU0sTUFBTSxLQUFLLEVBQUc7QUFBQSxRQUMxRjtBQUFBLFFBQ0EsU0FBUyxNQUFNLE9BQU8sSUFBSSxFQUFFLGlCQUFpQixPQUFPLElBQUksRUFBRSxTQUFTO0FBQUEsTUFDdkUsQ0FBc0I7QUFBQSxNQUN0QixJQUFJLGFBQWE7QUFBQSxRQUNiLE1BQU07QUFBQSxRQUNOLGNBQWM7QUFBQSxRQUNkLE9BQU87QUFBQSxVQUFlO0FBQUEsWUFDbEIsY0FBYyxPQUFPLElBQUksR0FBRyxPQUFPO0FBQUEsWUFDbkMsY0FBYyxPQUFPLElBQUksR0FBRyxRQUFRO0FBQUEsVUFDeEM7QUFBQSxVQUFHLENBQUMsT0FBTyxXQUNQLFdBQVksUUFBUSxRQUFRLE9BQU8sSUFBSSxFQUFFLE9BQVEsR0FBSSxTQUFTLE1BQU0sTUFBTSxLQUFLLEVBQUc7QUFBQSxRQUN0RjtBQUFBLFFBQ0EsU0FBUyxNQUFNLE9BQU8sSUFBSSxFQUFFLGFBQWEsT0FBTyxJQUFJLEVBQUUsS0FBSztBQUFBLE1BQy9ELENBQXNCO0FBQUEsSUFDMUI7QUFBQSxFQUNKO0FBQ0o7OztBQ25EQSxPQUFPQyxXQUFTO0FBR2hCLElBQU0sb0JBQU4sTUFBaUQ7QUFBQSxFQUFqRDtBQUNJLGtCQUFTO0FBQ1Qsc0JBQWE7QUFBQTtBQUFBLEVBQ2I7QUFBQSxFQUVBLE9BQU87QUFDSCxTQUFLLFNBQVMsQ0FBQztBQUNmLFVBQU0sTUFBTUEsTUFBSSxLQUFLLGFBQWEsVUFBVSxXQUFXLEVBQUUsY0FBYztBQUN2RSxRQUFHLElBQUksZ0JBQWdCLE1BQU0sSUFBSSxNQUFNQSxNQUFJLFNBQVMsV0FBVztBQUMzRCxpQkFBVSxRQUFRLElBQUk7QUFBQSxRQUNsQjtBQUFBLFFBQ0FBLE1BQUksbUJBQW1CO0FBQUEsUUFDdkI7QUFBQSxNQUNKLEdBQUc7QUFDQyxhQUFLLE9BQU8sS0FBSyxHQUFHLElBQUksU0FBUyxDQUFDLElBQUksS0FBSyxTQUFTLENBQUMsRUFBRTtBQUFBLE1BQzNEO0FBQUEsSUFDSjtBQUFBLEVBQ0o7QUFBQSxFQUVBLE9BQU8sUUFBZ0I7QUFDbkIsUUFBRyxLQUFLLE9BQVEsU0FBUztBQUNyQixhQUFPLEtBQUssT0FBUTtBQUFBLFFBQU87QUFBQTtBQUFBLFVBQ3ZCLE9BQU8sV0FBVyxRQUFRLEtBQUssTUFBTSxHQUFHLEVBQUUsS0FBSyxNQUFNLEdBQUcsRUFBRSxTQUFPLENBQUMsQ0FBQztBQUFBO0FBQUEsTUFDdkUsRUFBRSxJQUFJLFVBQVEsSUFBSSxhQUFhO0FBQUEsUUFDM0IsT0FBTyxLQUFLLE1BQU0sR0FBRyxFQUFFLEtBQUssTUFBTSxHQUFHLEVBQUUsU0FBTyxDQUFDLEVBQUUsUUFBUSxTQUFTLEVBQUU7QUFBQSxRQUNwRSxTQUFTLE1BQU0sVUFBVSxXQUFXLEVBQUUsYUFBYSxJQUFJO0FBQUEsTUFDM0QsQ0FBc0IsQ0FBQztBQUUzQixXQUFPLElBQUksYUFBYTtBQUFBLE1BQ3BCLE9BQU87QUFBQSxNQUNQLGFBQWE7QUFBQSxNQUNiLE1BQU07QUFBQSxJQUNWLENBQXNCO0FBQUEsRUFDMUI7QUFDSjtBQUVPLElBQU0sbUJBQW1CLElBQUksa0JBQWtCOzs7QUNyQ3RELE9BQU9DLFdBQVM7QUFDaEIsT0FBT0MsWUFBVTtBQUlWLElBQU0sYUFBTixNQUFNLFlBQVc7QUFBQSxFQUVwQjtBQUFBLEVBQ0EsY0FBY0QsTUFBSSxLQUFLLGFBQWEsR0FBR0MsT0FBSyxtQkFBbUIsQ0FBQyxZQUFZO0FBQUEsRUFDNUUsVUFBVTtBQUFBLElBQ047QUFBQSxJQUNBO0FBQUEsRUFDSjtBQUFBLEVBRUEsTUFBYSxjQUE2QjtBQUN0QyxZQUFRLElBQUksNEJBQTRCO0FBRXhDLFNBQUssaUJBQWlCLEtBQUssUUFBUSxJQUFJLFdBQVMsTUFBTSxLQUFLLEVBQUUsRUFBRSxLQUFLLEdBQUksQ0FBQyxJQUNyRSxLQUFLLFlBQVksU0FBUyxDQUFFLGFBQWE7QUFBQSxFQUNqRDtBQUFBLEVBRUEsTUFBYSxRQUFRLGFBQW9DO0FBQ3JELFlBQVEsSUFBSSxpQ0FBaUM7QUFFN0MsVUFBTSxVQUFVLFNBQVMsV0FBVztBQUVwQyxRQUFHLFNBQVM7QUFDUixrQkFBSSxVQUFVO0FBQ2Qsa0JBQUksVUFBVSxPQUFPO0FBRXJCLGNBQVEsSUFBSSwrQ0FBK0M7QUFDM0Q7QUFBQSxJQUNKO0FBRUEsWUFBUSxNQUFNLG9FQUNWLFdBQVcsRUFBRTtBQUFBLEVBQ3JCO0FBQUEsRUFFQSxNQUFhLGVBQThCO0FBQ3ZDLFVBQU0sS0FBSyxZQUFZLEVBQUU7QUFBQSxNQUFNLENBQUMsUUFDNUIsUUFBUSxNQUFNO0FBQUEsRUFBeUUsSUFBSSxVQUN2RixJQUFLLElBQUksT0FBTztBQUFBLElBQU8sRUFBRSxHQUFHLElBQUksS0FBSztBQUFBLENBQUk7QUFBQSxJQUNqRCxFQUFFLEtBQUssTUFBTSxLQUFLLFFBQVEsS0FBSyxZQUFZLFNBQVMsSUFBSyxZQUFZLENBQUM7QUFBQSxFQUMxRTtBQUFBLEVBRUEsT0FBYyxhQUF5QjtBQUNuQyxRQUFHLENBQUMsS0FBSztBQUNMLFdBQUssV0FBVyxJQUFJLFlBQVc7QUFFbkMsV0FBTyxLQUFLO0FBQUEsRUFDaEI7QUFBQSxFQUVBLGNBQWM7QUFDVixLQUFDLFlBQVksQ0FBQyxLQUFLLFlBQVksYUFBYSxJQUFJLEtBQzVDLEtBQUssWUFBWSw0QkFBNEIsSUFBSSxHQUFHO0FBRXhELFNBQUssUUFBUTtBQUFBLE1BQUksQ0FBQyxTQUNkO0FBQUEsUUFDSSxHQUFHLElBQUk7QUFBQSxRQUNQLENBQUMsU0FBaUI7QUFDZCxjQUFHLEtBQUssZUFBZSxLQUFLLFNBQVMsR0FBRyxLQUFLLE9BQU8sTUFBTSxJQUFJO0FBQzFEO0FBRUosZUFBSyxjQUFjLFFBQVEsS0FBSyxNQUFNLEtBQUssY0FBYyxNQUFTO0FBQ2xFLGtCQUFRLElBQUksaUJBQWlCLEtBQUssV0FBV0EsT0FBSyxhQUFhLENBQUMsSUFDeEQsS0FBSyxRQUFRQSxPQUFLLGFBQWEsR0FBRyxHQUFHLElBQ3ZDLElBQUksWUFBWTtBQUV0QixlQUFLLGFBQWE7QUFBQSxRQUN0QjtBQUFBLE1BQ0o7QUFBQSxJQUNKO0FBRUE7QUFBQSxNQUNJLEdBQUdBLE9BQUssbUJBQW1CLENBQUM7QUFBQSxNQUM1QixDQUFDLFNBQWlCO0FBQ2Qsa0JBQVUsa0JBQWtCLElBQUkscUJBQXFCLEVBQUUsTUFBTSxPQUFLO0FBQzlELGtCQUFRLE1BQU0scUVBQXFFLENBQUMsRUFBRTtBQUFBLFFBQzFGLENBQUM7QUFBQSxNQUNMO0FBQUEsSUFDSjtBQUFBLEVBQ0o7QUFDSjs7O0FDbEZPLElBQU0sa0JBQWtCO0FBQUEsRUFDM0IsUUFBUTtBQUFBLEVBQ1IsWUFBWTtBQUFBLEVBQ1osUUFBUSxDQUFDLFdBQVc7QUFDaEIsUUFBRyxVQUFVLFdBQVcsRUFBRSxRQUFRLFNBQVM7QUFDdkMsYUFBTztBQUFBLFFBQUM7QUFBQTtBQUFBLFVBQWEsTUFBTTtBQUFBLFVBQXVCLE9BQU87QUFBQSxVQUNyRCxhQUFhO0FBQUE7QUFBQSxNQUNqQjtBQUVKLFdBQU8sVUFBVSxXQUFXLEVBQUUsUUFBUSxPQUFPO0FBQUE7QUFBQSxNQUNyQyxPQUFPLFdBQVcsUUFBUSxLQUFLLEVBQUUsS0FBSyxPQUFPLFdBQVcsUUFBUSxLQUFLLE9BQU87QUFBQSxLQUFDLEVBQUUsSUFBSSxDQUFDLFNBQ3hGO0FBQUEsTUFBQztBQUFBO0FBQUEsUUFBYSxNQUFNO0FBQUEsVUFBQyxJQUFJO0FBQUEsVUFBSjtBQUFBLFlBQVUsT0FBTyxHQUFHLEtBQUssRUFBRTtBQUFBLFlBQzlDLEtBQUs7QUFBQTtBQUFBLFFBQXlEO0FBQUEsUUFDOUQsT0FBTyxLQUFLO0FBQUEsUUFBUyxTQUFTLE1BQU0sVUFBVSxXQUFXLEVBQUUsV0FBVyxJQUFJLEVBQUUsTUFBTSxDQUFDLFFBQWU7QUFDeEYsa0JBQVE7QUFBQSxZQUFNO0FBQUEsRUFDVixJQUFJLFVBQVUsR0FBRyxJQUFJLE9BQU87QUFBQSxJQUFPLEVBQUUsVUFBVSxJQUFJLEtBQUs7QUFBQSxVQUM1RDtBQUFBLFFBQ0osQ0FBQztBQUFBO0FBQUEsSUFFVCxDQUFFO0FBQUEsRUFDVjtBQUNKOzs7QUNMQSxJQUFJO0FBQUosSUFBZ0MsYUFBYTtBQUM3QyxJQUFJLGNBQWMsb0JBQUksSUFBOEM7QUFFcEUsSUFBTSxpQkFBZ0UsQ0FBRSxLQUFNO0FBQzlFLElBQU0sZ0JBQXNDO0FBQUEsRUFDeEM7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUNKO0FBRUEsWUFBSSxNQUFNO0FBQUEsRUFDTixjQUFjO0FBQUEsRUFDZCxPQUFPO0FBQUEsRUFDUCxnQkFBZ0IsQ0FBQyxTQUFpQixhQUEwQztBQUN4RSxhQUFTLGdCQUFnQixPQUFPLENBQUM7QUFBQSxFQUNyQztBQUFBLEVBQ0EsTUFBTSxJQUFJLFVBQXlCO0FBQy9CLFlBQVEsSUFBSSxrQ0FBbUMsWUFBSSxnQkFBZ0IsT0FBUSxFQUFFO0FBRTdFLFlBQVEsSUFBSSx5Q0FBeUM7QUFDckQsV0FBTyxXQUFXO0FBRWxCLGVBQVcsV0FBVyxFQUFFLGFBQWE7QUFFckMsZ0JBQUksZ0JBQWdCLE1BQU07QUFDdEIsY0FBUSxJQUFJLHFCQUFxQjtBQUNqQyxrQkFBWSxRQUFRLENBQUMsR0FBRyxNQUFNLE1BQU0sUUFBUSxDQUFDLElBQ3pDLEVBQUUsSUFBSSxRQUFNLEVBQUUsV0FBVyxFQUFFLENBQUMsSUFDOUIsRUFBRSxXQUFXLENBQUMsQ0FBQztBQUFBLElBQ3JCO0FBR0EsY0FBVSxXQUFXO0FBRXJCLGdCQUFZLElBQUksWUFBWSxXQUFXLEdBQUc7QUFBQSxNQUN0QyxZQUFZLFdBQVcsRUFBRSxlQUFlLEVBQUUsUUFBUSxrQkFBa0IsTUFDaEUsV0FBVyxDQUFDO0FBQUEsSUFDcEIsQ0FBQztBQUVELGdCQUFZLElBQUksY0FBYyxXQUFXLEdBQUc7QUFBQSxNQUN4QyxjQUFjLFdBQVcsRUFBRSxRQUFRLHNCQUFzQixDQUFDLEdBQUcsV0FBcUM7QUFDOUYsZ0JBQVEsV0FBVyxFQUFFLEtBQUssd0JBQXdCO0FBQUEsTUFDdEQsQ0FBQztBQUFBLE1BQ0QsY0FBYyxXQUFXLEVBQUUsUUFBUSx3QkFBd0IsQ0FBQyxHQUFrQixRQUFnQjtBQUMxRixVQUFFLGNBQWMsV0FBVyxLQUFLLFFBQVEsV0FBVyxFQUFFLE1BQU0sd0JBQXdCO0FBQUEsTUFDdkYsQ0FBQztBQUFBLElBQ0wsQ0FBQztBQUVELFlBQVEsSUFBSSxnQ0FBZ0M7QUFDNUMsY0FBVSxXQUFXO0FBRXJCLFlBQVEsSUFBSSx1QkFBdUI7QUFDbkMsa0JBQWMsSUFBSSxZQUFVLE9BQU8sVUFBVSxNQUFNLENBQUM7QUFFcEQsWUFBUSxJQUFJLHlCQUF5QjtBQUVyQyxtQkFBZSxJQUFJLFVBQVE7QUFDdkIsVUFBRyxRQUFRLFdBQVcsRUFBRSxVQUFVLElBQUksRUFBRztBQUN6QyxjQUFRLFdBQVcsRUFBRSxLQUFLLElBQUk7QUFBQSxJQUNsQyxDQUFDO0FBQUEsRUFDTDtBQUNKLENBQUM7QUFFRCxTQUFTLGFBQWE7QUFDbEIsTUFBRyxRQUFRLFdBQVcsRUFBRSxVQUFVLGdCQUFnQixFQUFHO0FBRXJELFVBQVEsV0FBVyxFQUFFLEtBQUssS0FBSztBQUUvQixNQUFHLENBQUMsVUFBVTtBQUNWLGVBQVcsUUFBUSxZQUFZLE1BQU07QUFDakMsaUJBQVc7QUFDWCxjQUFRLFdBQVcsRUFBRSxNQUFNLEtBQUs7QUFBQSxJQUNwQyxDQUFDO0FBRUQ7QUFBQSxFQUNKO0FBRUEsV0FBUyxPQUFPO0FBQ2hCLGFBQVcsUUFBUSxZQUFZLE1BQU07QUFDakMsWUFBUSxXQUFXLEVBQUUsTUFBTSxLQUFLO0FBQ2hDLGVBQVc7QUFBQSxFQUNmLENBQUM7QUFDTDsiLAogICJuYW1lcyI6IFsiZ2V0dGVyIiwgImdldHRlciIsICJzaWduYWwiLCAiR09iamVjdCIsICJHT2JqZWN0IiwgIkdMaWIiLCAiR09iamVjdCIsICJzZXQiLCAiZ2V0dGVyIiwgIkdPYmplY3QiLCAia2V5IiwgIm9iamVjdCIsICJHT2JqZWN0IiwgIm1vZCIsICJfYSIsICJHT2JqZWN0IiwgInNpZ25hbCIsICJyZW1vdmUiLCAiQXN0YWxJTyIsICJBc3RhbElPIiwgImludGVydmFsIiwgInRpbWVvdXQiLCAic2V0IiwgIkdMaWIiLCAiR2lvIiwgIkd0ayIsICJBc3RhbCIsICJHdGsiLCAiR2lvIiwgIkdPYmplY3QiLCAiR3RrIiwgIkdpbyIsICJjc3MiLCAiR09iamVjdCIsICJpbmRleCIsICJHdGsiLCAiQXN0YWwiLCAiaXRlbXMiLCAiQXN0YWxIeXBybGFuZCIsICJBc3RhbCIsICJBc3RhbCIsICJfYSIsICJfaW5pdCIsICJpZCIsICJHTGliIiwgIkdpbyIsICJBc3RhbE5vdGlmZCIsICJfYSIsICJfaW5pdCIsICJHaW8iLCAiR0xpYiIsICJfIiwgImFzeW5jUmVzIiwgIkFzdGFsTm90aWZkIiwgImVudHJpZXMiLCAicHJvcGVydHkiLCAiQXN0YWxIeXBybGFuZCIsICJpIiwgIkFzdGFsSHlwcmxhbmQiLCAiQXN0YWxIeXBybGFuZCIsICJmb2N1c2VkQ2xpZW50IiwgIkdMaWIiLCAiR2lvIiwgIl9oaXN0b3J5X2RlYyIsICJfYSIsICJfaGlzdG9yeSIsICJfaW5pdCIsICJHaW8iLCAiR0xpYiIsICJQYW5nbyIsICJjb25uZWN0aW9ucyIsICJwbGF5ZXIiLCAiUGFuZ28iLCAiR0xpYiIsICJHTGliIiwgIkdpbyIsICJfYSIsICJfaW5pdCIsICJHTGliIiwgIkdpbyIsICJHTGliIiwgIkd0ayIsICJBc3RhbCIsICJzbmFrZWlmeSIsICJtb2QiLCAicGF0Y2giLCAiQXBwcyIsICJUcmF5IiwgIkdPYmplY3QiLCAiR3RrIiwgIkdMaWIiLCAiQXN0YWwiLCAiQXN0YWxIeXBybGFuZCIsICJQYW5nbyIsICJQYW5nbyIsICJUT1AiLCAiTEVGVCIsICJSSUdIVCIsICJCT1RUT00iLCAiQXN0YWxOb3RpZmQiLCAiUGFuZ28iLCAiR0xpYiIsICJHTGliIiwgIkFzdGFsTm90aWZkIiwgIlBhbmdvIiwgIkdpbyIsICJHTGliIiwgIl9hIiwgIl9pbml0IiwgIkdMaWIiLCAiR2lvIiwgIl8iLCAiR0xpYiIsICJHTGliIiwgIkFzdGFsTXByaXMiLCAiR2lvIiwgIlBhbmdvIiwgInBsYXllciIsICJHaW8iLCAiUGFuZ28iLCAiQXN0YWxNcHJpcyIsICJHTGliIiwgIl9hIiwgIl9pbml0IiwgIkdMaWIiLCAiQXN0YWxOb3RpZmQiLCAiVE9QIiwgIkxFRlQiLCAiUklHSFQiLCAiQk9UVE9NIiwgIkFzdGFsTm90aWZkIiwgImVyciIsICJQYW5nbyIsICJQYW5nbyIsICJfYSIsICJfaW5pdCIsICJBc3RhbEh5cHJsYW5kIiwgIl9tb25pdG9yIiwgIndpbmRvdyIsICJHaW8iLCAiR2lvIiwgIlBhbmdvIiwgIl9pbml0IiwgIl9hIiwgIlBhbmdvIiwgIkFzdGFsSHlwcmxhbmQiLCAiUnVubmVyIiwgImNvbm5lY3Rpb25zIiwgIkFzdGFsSHlwcmxhbmQiLCAiR0xpYiIsICJHaW8iLCAiQXN0YWxIeXBybGFuZCIsICJBc3RhbEh5cHJsYW5kIiwgIkFzdGFsTXByaXMiLCAiQXN0YWxNcHJpcyIsICJHaW8iLCAiR2lvIiwgIkdMaWIiXQp9Cg==

EOF

LD_PRELOAD="/usr/lib/libgtk4-layer-shell.so" /usr/bin/gjs -m $file $@